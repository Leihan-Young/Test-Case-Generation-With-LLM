[
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * An abstract base class that you can use to implement a new\n * {@link CategoryItemRenderer}.  When you create a new\n * {@link CategoryItemRenderer} you are not required to extend this class,\n * but it makes the job easier.\n */\npublic abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n        implements CategoryItemRenderer, Cloneable, PublicCloneable,\n        Serializable {\n    private static final long serialVersionUID = 1247553218442497391L;\n    private CategoryPlot plot;\n    private ObjectList itemLabelGeneratorList;\n    private CategoryItemLabelGenerator baseItemLabelGenerator;\n    private ObjectList toolTipGeneratorList;\n    private CategoryToolTipGenerator baseToolTipGenerator;\n    private ObjectList urlGeneratorList;\n    private CategoryURLGenerator baseURLGenerator;\n    private CategorySeriesLabelGenerator legendItemLabelGenerator;\n    private CategorySeriesLabelGenerator legendItemToolTipGenerator;\n    private CategorySeriesLabelGenerator legendItemURLGenerator;\n    private List backgroundAnnotations;\n    private List foregroundAnnotations;\n    private transient int rowCount;\n    private transient int columnCount;\n    /**\n     * Returns a (possibly empty) collection of legend items for the series\n     * that this renderer is responsible for drawing.\n     *\n     * @return The legend item collection (never <code>null</code>).\n     *\n     * @see #getLegendItem(int, int)\n     */\n    public LegendItemCollection getLegendItems();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * An abstract base class that you can use to implement a new\n * {@link CategoryItemRenderer}.  When you create a new\n * {@link CategoryItemRenderer} you are not required to extend this class,\n * but it makes the job easier.\n */\npublic abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n        implements CategoryItemRenderer, Cloneable, PublicCloneable,\n        Serializable {\n    private static final long serialVersionUID = 1247553218442497391L;\n    private CategoryPlot plot;\n    private ObjectList itemLabelGeneratorList;\n    private CategoryItemLabelGenerator baseItemLabelGenerator;\n    private ObjectList toolTipGeneratorList;\n    private CategoryToolTipGenerator baseToolTipGenerator;\n    private ObjectList urlGeneratorList;\n    private CategoryURLGenerator baseURLGenerator;\n    private CategorySeriesLabelGenerator legendItemLabelGenerator;\n    private CategorySeriesLabelGenerator legendItemToolTipGenerator;\n    private CategorySeriesLabelGenerator legendItemURLGenerator;\n    private List backgroundAnnotations;\n    private List foregroundAnnotations;\n    private transient int rowCount;\n    private transient int columnCount;\n    /**\n     * Returns a (possibly empty) collection of legend items for the series\n     * that this renderer is responsible for drawing.\n     *\n     * @return The legend item collection (never <code>null</code>).\n     *\n     * @see #getLegendItem(int, int)\n     */\n    public LegendItemCollection getLegendItems();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class AbstractCategoryItemRendererTests extends TestCase {\n    public void test2947660() {\n        AbstractCategoryItemRenderer r = new LineAndShapeRenderer();\n        assertNotNull(r.getLegendItems());\n        assertEquals(0, r.getLegendItems().getItemCount());\n\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        CategoryPlot plot = new CategoryPlot();\n        plot.setDataset(dataset);\n        plot.setRenderer(r);\n        assertEquals(0, r.getLegendItems().getItemCount());\n\n        dataset.addValue(1.0, \"S1\", \"C1\");\n        LegendItemCollection lic = r.getLegendItems();\n        assertEquals(1, lic.getItemCount());\n        assertEquals(\"S1\", lic.get(0).getLabel());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Generates tooltips using the HTML title attribute for image map area tags.\n */\npublic class StandardToolTipTagFragmentGenerator \n        implements ToolTipTagFragmentGenerator {\n    /**\n     * Generates a tooltip string to go in an HTML image map.\n     *\n     * @param toolTipText  the tooltip.\n     * \n     * @return The formatted HTML area tag attribute(s).\n     */\n    public String generateToolTipFragment(String toolTipText);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Generates tooltips using the HTML title attribute for image map area tags.\n */\npublic class StandardToolTipTagFragmentGenerator \n        implements ToolTipTagFragmentGenerator {\n    /**\n     * Generates a tooltip string to go in an HTML image map.\n     *\n     * @param toolTipText  the tooltip.\n     * \n     * @return The formatted HTML area tag attribute(s).\n     */\n    public String generateToolTipFragment(String toolTipText);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class StandardToolTipTagFragmentGeneratorTests extends TestCase {\n    public void testGenerateURLFragment() {\n        StandardToolTipTagFragmentGenerator g\n                = new StandardToolTipTagFragmentGenerator();\n        assertEquals(\" title=\\\"abc\\\" alt=\\\"\\\"\", g.generateToolTipFragment(\"abc\"));\n        assertEquals(\" title=\\\"Series &quot;A&quot;, 100.0\\\" alt=\\\"\\\"\", g.generateToolTipFragment(\"Series \\\"A\\\", 100.0\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Utility methods for {@link Shape} objects.\n */\npublic class ShapeUtilities {\n    /**\n     * Compares two arcs and returns <code>true</code> if they are equal or\n     * both <code>null</code>.\n     *\n     * @param a1  the first arc (<code>null</code> permitted).\n     * @param a2  the second arc (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(Arc2D a1, Arc2D a2);\n    /**\n     * Compares two ellipses and returns <code>true</code> if they are equal or\n     * both <code>null</code>.\n     *\n     * @param e1  the first ellipse (<code>null</code> permitted).\n     * @param e2  the second ellipse (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(Ellipse2D e1, Ellipse2D e2);\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  polygon 1 (<code>null</code> permitted).\n     * @param p2  polygon 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(Polygon p1, Polygon p2);\n    /**\n     * Tests two shapes for equality.  If both shapes are <code>null</code>,\n     * this method will return <code>true</code>.\n     * <p>\n     * In the current implementation, the following shapes are supported:\n     * <code>Ellipse2D</code>, <code>Line2D</code> and <code>Rectangle2D</code>\n     * (implicit).\n     *\n     * @param s1  the first shape (<code>null</code> permitted).\n     * @param s2  the second shape (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(Shape s1, Shape s2);\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2);\n    /**\n     * Compares two lines are returns <code>true</code> if they are equal or\n     * both <code>null</code>.\n     *\n     * @param l1  the first line (<code>null</code> permitted).\n     * @param l2  the second line (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(Line2D l1, Line2D l2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Utility methods for {@link Shape} objects.\n */\npublic class ShapeUtilities {\n    /**\n     * Compares two arcs and returns <code>true</code> if they are equal or\n     * both <code>null</code>.\n     *\n     * @param a1  the first arc (<code>null</code> permitted).\n     * @param a2  the second arc (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(Arc2D a1, Arc2D a2);\n    /**\n     * Compares two ellipses and returns <code>true</code> if they are equal or\n     * both <code>null</code>.\n     *\n     * @param e1  the first ellipse (<code>null</code> permitted).\n     * @param e2  the second ellipse (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(Ellipse2D e1, Ellipse2D e2);\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  polygon 1 (<code>null</code> permitted).\n     * @param p2  polygon 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(Polygon p1, Polygon p2);\n    /**\n     * Tests two shapes for equality.  If both shapes are <code>null</code>,\n     * this method will return <code>true</code>.\n     * <p>\n     * In the current implementation, the following shapes are supported:\n     * <code>Ellipse2D</code>, <code>Line2D</code> and <code>Rectangle2D</code>\n     * (implicit).\n     *\n     * @param s1  the first shape (<code>null</code> permitted).\n     * @param s2  the second shape (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(Shape s1, Shape s2);\n    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2);\n    /**\n     * Compares two lines are returns <code>true</code> if they are equal or\n     * both <code>null</code>.\n     *\n     * @param l1  the first line (<code>null</code> permitted).\n     * @param l2  the second line (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(Line2D l1, Line2D l2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class ShapeUtilitiesTests extends TestCase {\n    public void testEqualGeneralPaths() {\n        GeneralPath g1 = new GeneralPath();\n        g1.moveTo(1.0f, 2.0f);\n        g1.lineTo(3.0f, 4.0f);\n        g1.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g1.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g1.closePath();\n        GeneralPath g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.closePath();\n        assertTrue(ShapeUtilities.equal(g1, g2));\n\n        g2 = new GeneralPath();\n        g2.moveTo(11.0f, 22.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.closePath();\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n        g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(33.0f, 44.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.closePath();\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n        g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(55.0f, 66.0f, 77.0f, 88.0f, 99.0f, 100.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.closePath();\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n        g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(11.0f, 22.0f, 33.0f, 44.0f);\n        g2.closePath();\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n        g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.closePath();\n        assertFalse(ShapeUtilities.equal(g1, g2));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A plot that displays multiple pie plots using data from a\n * {@link CategoryDataset}.\n */\npublic class MultiplePiePlot extends Plot implements Cloneable, Serializable {\n    private static final long serialVersionUID = -355377800470807389L;\n    private JFreeChart pieChart;\n    private CategoryDataset dataset;\n    private TableOrder dataExtractOrder;\n    private double limit = 0.0;\n    private Comparable aggregatedItemsKey;\n    private transient Paint aggregatedItemsPaint;\n    private transient Map sectionPaints;\n    /**\n     * Returns the dataset used by the plot.\n     *\n     * @return The dataset (possibly <code>null</code>).\n     */\n    public CategoryDataset getDataset();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A plot that displays multiple pie plots using data from a\n * {@link CategoryDataset}.\n */\npublic class MultiplePiePlot extends Plot implements Cloneable, Serializable {\n    private static final long serialVersionUID = -355377800470807389L;\n    private JFreeChart pieChart;\n    private CategoryDataset dataset;\n    private TableOrder dataExtractOrder;\n    private double limit = 0.0;\n    private Comparable aggregatedItemsKey;\n    private transient Paint aggregatedItemsPaint;\n    private transient Map sectionPaints;\n    /**\n     * Returns the dataset used by the plot.\n     *\n     * @return The dataset (possibly <code>null</code>).\n     */\n    public CategoryDataset getDataset();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class MultiplePiePlotTests extends TestCase\n        implements PlotChangeListener {\n    public void testConstructor() {\n    \tMultiplePiePlot plot = new MultiplePiePlot();\n    \tassertNull(plot.getDataset());\n\n    \t// the following checks that the plot registers itself as a listener\n    \t// with the dataset passed to the constructor - see patch 1943021\n    \tDefaultCategoryDataset dataset = new DefaultCategoryDataset();\n    \tplot = new MultiplePiePlot(dataset);\n    \tassertTrue(dataset.hasListener(plot));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * An arrangement manager that lays out blocks in a similar way to\n * Swing's BorderLayout class.\n */\npublic class BorderArrangement implements Arrangement, Serializable {\n    private static final long serialVersionUID = 506071142274883745L;\n    private Block centerBlock;\n    private Block topBlock;\n    private Block bottomBlock;\n    private Block leftBlock;\n    private Block rightBlock;\n    /**\n     * Clears the layout.\n     */\n    public void clear();\n    /**\n     * Arranges the items in the specified container, subject to the given\n     * constraint.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The block size.\n     */\n    public Size2D arrange(BlockContainer container,\n                          Graphics2D g2,\n                          RectangleConstraint constraint);\n    /**\n     * Arranges the items within a container.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The container size after the arrangement.\n     */\n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint);\n    /**\n     * Adds a block to the arrangement manager at the specified edge.\n     *\n     * @param block  the block (<code>null</code> permitted).\n     * @param key  the edge (an instance of {@link RectangleEdge}) or\n     *             <code>null</code> for the center block.\n     */\n    public void add(Block block, Object key);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * An arrangement manager that lays out blocks in a similar way to\n * Swing's BorderLayout class.\n */\npublic class BorderArrangement implements Arrangement, Serializable {\n    private static final long serialVersionUID = 506071142274883745L;\n    private Block centerBlock;\n    private Block topBlock;\n    private Block bottomBlock;\n    private Block leftBlock;\n    private Block rightBlock;\n    /**\n     * Clears the layout.\n     */\n    public void clear();\n    /**\n     * Arranges the items in the specified container, subject to the given\n     * constraint.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The block size.\n     */\n    public Size2D arrange(BlockContainer container,\n                          Graphics2D g2,\n                          RectangleConstraint constraint);\n    /**\n     * Arranges the items within a container.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The container size after the arrangement.\n     */\n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint);\n    /**\n     * Adds a block to the arrangement manager at the specified edge.\n     *\n     * @param block  the block (<code>null</code> permitted).\n     * @param key  the edge (an instance of {@link RectangleEdge}) or\n     *             <code>null</code> for the center block.\n     */\n    public void add(Block block, Object key);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class BorderArrangementTests extends TestCase {\n    public void testSizingWithWidthConstraint() {\n        RectangleConstraint constraint = new RectangleConstraint(\n            10.0, new Range(10.0, 10.0), LengthConstraintType.FIXED,\n            0.0, new Range(0.0, 0.0), LengthConstraintType.NONE\n        );\n                \n        BlockContainer container = new BlockContainer(new BorderArrangement());\n        BufferedImage image = new BufferedImage(\n            200, 100, BufferedImage.TYPE_INT_RGB\n        );\n        Graphics2D g2 = image.createGraphics();\n        \n        // TBLRC\n        // 00001 - center item only\n        container.add(new EmptyBlock(5.0, 6.0));\n        Size2D size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(6.0, size.height, EPSILON);\n        \n        container.clear();\n        container.add(new EmptyBlock(15.0, 16.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n\n        // TBLRC\n        // 00010 - right item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00011 - right and center items\n        container.clear();\n        container.add(new EmptyBlock(7.0, 20.0));\n        container.add(new EmptyBlock(8.0, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00100 - left item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00101 - left and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00110 - left and right items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 00111 - left, right and center items\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01000 - bottom item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01001 - bottom and center only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01010 - bottom and right only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01011 - bottom, right and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01100\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01101 - bottom, left and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01110 - bottom. left and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 01111\n        container.clear();\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(14.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 10000 - top item only\n        container.clear();\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(45.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10001 - top and center only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0));\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n                \n        // TBLRC\n        // 10010 - right and top only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10011 - top, right and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n\n        // TBLRC\n        // 10100 - top and left only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10101 - top, left and center\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10110 - top, left and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 10111\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(12.0, size.height, EPSILON);\n\n        // TBLRC\n        // 11000 - top and bottom only\n        container.clear();\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(65.6, size.height, EPSILON);\n        \n        // TBLRC\n        // 11001\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3));\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n        \n        // TBLRC\n        // 11010 - top, bottom and right\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n                \n        // TBLRC\n        // 11011\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11100\n        container.clear();\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(77.9, size.height, EPSILON);\n\n        // TBLRC\n        // 11101\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11110\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(14.0, size.height, EPSILON);\n        \n        // TBLRC\n        // 11111 - all\n        container.clear();\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n        container.add(new EmptyBlock(9.0, 10.0));\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(16.0, size.height, EPSILON);\n\n        // TBLRC\n        // 00000 - no items\n        container.clear();\n        size = container.arrange(g2, constraint);\n        assertEquals(10.0, size.width, EPSILON);\n        assertEquals(0.0, size.height, EPSILON);\n        \n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A general class for plotting data in the form of (x, y) pairs.  This plot can\n * use data from any class that implements the {@link XYDataset} interface.\n * <P>\n * <code>XYPlot</code> makes use of an {@link XYItemRenderer} to draw each point\n * on the plot.  By using different renderers, various chart types can be\n * produced.\n * <p>\n * The {@link org.jfree.chart.ChartFactory} class contains static methods for\n * creating pre-configured charts.\n */\npublic class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n        RendererChangeListener, Cloneable, PublicCloneable, Serializable {\n    private static final long serialVersionUID = 7044148245716569264L;\n    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;\n    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;\n    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;\n    private PlotOrientation orientation;\n    private RectangleInsets axisOffset;\n    private ObjectList domainAxes;\n    private ObjectList domainAxisLocations;\n    private ObjectList rangeAxes;\n    private ObjectList rangeAxisLocations;\n    private ObjectList datasets;\n    private ObjectList renderers;\n    private Map datasetToDomainAxisMap;\n    private Map datasetToRangeAxisMap;\n    private transient Point2D quadrantOrigin = new Point2D.Double(0.0, 0.0);\n    private boolean domainGridlinesVisible;\n    private transient Stroke domainGridlineStroke;\n    private transient Paint domainGridlinePaint;\n    private boolean rangeGridlinesVisible;\n    private transient Stroke rangeGridlineStroke;\n    private transient Paint rangeGridlinePaint;\n    private boolean domainZeroBaselineVisible;\n    private transient Stroke domainZeroBaselineStroke;\n    private transient Paint domainZeroBaselinePaint;\n    private boolean rangeZeroBaselineVisible;\n    private transient Stroke rangeZeroBaselineStroke;\n    private transient Paint rangeZeroBaselinePaint;\n    private boolean domainCrosshairVisible;\n    private double domainCrosshairValue;\n    private transient Stroke domainCrosshairStroke;\n    private transient Paint domainCrosshairPaint;\n    private boolean domainCrosshairLockedOnData = true;\n    private boolean rangeCrosshairVisible;\n    private double rangeCrosshairValue;\n    private transient Stroke rangeCrosshairStroke;\n    private transient Paint rangeCrosshairPaint;\n    private boolean rangeCrosshairLockedOnData = true;\n    private Map foregroundDomainMarkers;\n    private Map backgroundDomainMarkers;\n    private Map foregroundRangeMarkers;\n    private Map backgroundRangeMarkers;\n    private List annotations;\n    private transient Paint domainTickBandPaint;\n    private transient Paint rangeTickBandPaint;\n    private AxisSpace fixedDomainAxisSpace;\n    private AxisSpace fixedRangeAxisSpace;\n    private int weight;\n    private LegendItemCollection fixedLegendItems;\n    /**\n     * Removes a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker (<code>null</code> not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(Marker marker, Layer layer);\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify);\n    /**\n     * Removes a marker for a specific dataset/renderer and, if requested, \n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     */\n    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify);\n    /**\n     * Removes a marker for the range axis and sends a {@link PlotChangeEvent} \n     * to all registered listeners.\n     *\n     * @param marker the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(Marker marker);\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer);\n}\n/**\n * A general plotting class that uses data from a {@link CategoryDataset} and \n * renders each data item using a {@link CategoryItemRenderer}.\n */\npublic class CategoryPlot extends Plot implements ValueAxisPlot, \n        Zoomable, RendererChangeListener, Cloneable, PublicCloneable, \n        Serializable {\n    private static final long serialVersionUID = -3537691700434728188L;\n    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;\n    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;\n    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;\n    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;\n    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;\n    private PlotOrientation orientation;\n    private RectangleInsets axisOffset;\n    private ObjectList domainAxes;\n    private ObjectList domainAxisLocations;\n    private boolean drawSharedDomainAxis;\n    private ObjectList rangeAxes;\n    private ObjectList rangeAxisLocations;\n    private ObjectList datasets;\n    private ObjectList datasetToDomainAxisMap;\n    private ObjectList datasetToRangeAxisMap;\n    private ObjectList renderers;\n    private SortOrder columnRenderingOrder = SortOrder.ASCENDING;\n    private SortOrder rowRenderingOrder = SortOrder.ASCENDING;\n    private boolean domainGridlinesVisible;\n    private CategoryAnchor domainGridlinePosition;\n    private transient Stroke domainGridlineStroke;\n    private transient Paint domainGridlinePaint;\n    private boolean rangeGridlinesVisible;\n    private transient Stroke rangeGridlineStroke;\n    private transient Paint rangeGridlinePaint;\n    private double anchorValue;\n    private boolean rangeCrosshairVisible;\n    private double rangeCrosshairValue;\n    private transient Stroke rangeCrosshairStroke;\n    private transient Paint rangeCrosshairPaint;\n    private boolean rangeCrosshairLockedOnData = true;\n    private Map foregroundDomainMarkers;\n    private Map backgroundDomainMarkers;\n    private Map foregroundRangeMarkers;\n    private Map backgroundRangeMarkers;\n    private List annotations;\n    private int weight;\n    private AxisSpace fixedDomainAxisSpace;\n    private AxisSpace fixedRangeAxisSpace;\n    private LegendItemCollection fixedLegendItems;\n    /**\n     * Removes a marker for a specific dataset/renderer and, if requested, \n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     */\n    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify);\n    /**\n     * Removes a marker for the range axis and sends a {@link PlotChangeEvent} \n     * to all registered listeners.\n     *\n     * @param marker the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     * \n     * @see #addRangeMarker(Marker)\n     */\n    public boolean removeRangeMarker(Marker marker);\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     * \n     * @see #addRangeMarker(int, Marker, Layer)\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer);\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners.\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     * \n     * @see #addRangeMarker(int, Marker, Layer, boolean)\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify);\n    /**\n     * Removes a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker (<code>null</code> not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     * \n     * @see #addRangeMarker(Marker, Layer)\n     */\n    public boolean removeRangeMarker(Marker marker, Layer layer);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A general class for plotting data in the form of (x, y) pairs.  This plot can\n * use data from any class that implements the {@link XYDataset} interface.\n * <P>\n * <code>XYPlot</code> makes use of an {@link XYItemRenderer} to draw each point\n * on the plot.  By using different renderers, various chart types can be\n * produced.\n * <p>\n * The {@link org.jfree.chart.ChartFactory} class contains static methods for\n * creating pre-configured charts.\n */\npublic class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n        RendererChangeListener, Cloneable, PublicCloneable, Serializable {\n    private static final long serialVersionUID = 7044148245716569264L;\n    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;\n    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;\n    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;\n    private PlotOrientation orientation;\n    private RectangleInsets axisOffset;\n    private ObjectList domainAxes;\n    private ObjectList domainAxisLocations;\n    private ObjectList rangeAxes;\n    private ObjectList rangeAxisLocations;\n    private ObjectList datasets;\n    private ObjectList renderers;\n    private Map datasetToDomainAxisMap;\n    private Map datasetToRangeAxisMap;\n    private transient Point2D quadrantOrigin = new Point2D.Double(0.0, 0.0);\n    private boolean domainGridlinesVisible;\n    private transient Stroke domainGridlineStroke;\n    private transient Paint domainGridlinePaint;\n    private boolean rangeGridlinesVisible;\n    private transient Stroke rangeGridlineStroke;\n    private transient Paint rangeGridlinePaint;\n    private boolean domainZeroBaselineVisible;\n    private transient Stroke domainZeroBaselineStroke;\n    private transient Paint domainZeroBaselinePaint;\n    private boolean rangeZeroBaselineVisible;\n    private transient Stroke rangeZeroBaselineStroke;\n    private transient Paint rangeZeroBaselinePaint;\n    private boolean domainCrosshairVisible;\n    private double domainCrosshairValue;\n    private transient Stroke domainCrosshairStroke;\n    private transient Paint domainCrosshairPaint;\n    private boolean domainCrosshairLockedOnData = true;\n    private boolean rangeCrosshairVisible;\n    private double rangeCrosshairValue;\n    private transient Stroke rangeCrosshairStroke;\n    private transient Paint rangeCrosshairPaint;\n    private boolean rangeCrosshairLockedOnData = true;\n    private Map foregroundDomainMarkers;\n    private Map backgroundDomainMarkers;\n    private Map foregroundRangeMarkers;\n    private Map backgroundRangeMarkers;\n    private List annotations;\n    private transient Paint domainTickBandPaint;\n    private transient Paint rangeTickBandPaint;\n    private AxisSpace fixedDomainAxisSpace;\n    private AxisSpace fixedRangeAxisSpace;\n    private int weight;\n    private LegendItemCollection fixedLegendItems;\n    /**\n     * Removes a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker (<code>null</code> not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(Marker marker, Layer layer);\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify);\n    /**\n     * Removes a marker for a specific dataset/renderer and, if requested, \n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     */\n    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify);\n    /**\n     * Removes a marker for the range axis and sends a {@link PlotChangeEvent} \n     * to all registered listeners.\n     *\n     * @param marker the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(Marker marker);\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer);\n}\n/**\n * A general plotting class that uses data from a {@link CategoryDataset} and \n * renders each data item using a {@link CategoryItemRenderer}.\n */\npublic class CategoryPlot extends Plot implements ValueAxisPlot, \n        Zoomable, RendererChangeListener, Cloneable, PublicCloneable, \n        Serializable {\n    private static final long serialVersionUID = -3537691700434728188L;\n    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;\n    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;\n    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;\n    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;\n    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;\n    private PlotOrientation orientation;\n    private RectangleInsets axisOffset;\n    private ObjectList domainAxes;\n    private ObjectList domainAxisLocations;\n    private boolean drawSharedDomainAxis;\n    private ObjectList rangeAxes;\n    private ObjectList rangeAxisLocations;\n    private ObjectList datasets;\n    private ObjectList datasetToDomainAxisMap;\n    private ObjectList datasetToRangeAxisMap;\n    private ObjectList renderers;\n    private SortOrder columnRenderingOrder = SortOrder.ASCENDING;\n    private SortOrder rowRenderingOrder = SortOrder.ASCENDING;\n    private boolean domainGridlinesVisible;\n    private CategoryAnchor domainGridlinePosition;\n    private transient Stroke domainGridlineStroke;\n    private transient Paint domainGridlinePaint;\n    private boolean rangeGridlinesVisible;\n    private transient Stroke rangeGridlineStroke;\n    private transient Paint rangeGridlinePaint;\n    private double anchorValue;\n    private boolean rangeCrosshairVisible;\n    private double rangeCrosshairValue;\n    private transient Stroke rangeCrosshairStroke;\n    private transient Paint rangeCrosshairPaint;\n    private boolean rangeCrosshairLockedOnData = true;\n    private Map foregroundDomainMarkers;\n    private Map backgroundDomainMarkers;\n    private Map foregroundRangeMarkers;\n    private Map backgroundRangeMarkers;\n    private List annotations;\n    private int weight;\n    private AxisSpace fixedDomainAxisSpace;\n    private AxisSpace fixedRangeAxisSpace;\n    private LegendItemCollection fixedLegendItems;\n    /**\n     * Removes a marker for a specific dataset/renderer and, if requested, \n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     */\n    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify);\n    /**\n     * Removes a marker for the range axis and sends a {@link PlotChangeEvent} \n     * to all registered listeners.\n     *\n     * @param marker the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     * \n     * @see #addRangeMarker(Marker)\n     */\n    public boolean removeRangeMarker(Marker marker);\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     * \n     * @see #addRangeMarker(int, Marker, Layer)\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer);\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners.\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     * \n     * @see #addRangeMarker(int, Marker, Layer, boolean)\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify);\n    /**\n     * Removes a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker (<code>null</code> not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.7\n     * \n     * @see #addRangeMarker(Marker, Layer)\n     */\n    public boolean removeRangeMarker(Marker marker, Layer layer);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class CategoryPlotTests extends TestCase {\n    public void testRemoveRangeMarker() {\n    \tCategoryPlot plot = new CategoryPlot();\n    \tassertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A plot that displays data in the form of a pie chart, using data from any \n * class that implements the {@link PieDataset} interface.\n * <P>\n * Special notes:\n * <ol>\n * <li>the default starting point is 12 o'clock and the pie sections proceed\n * in a clockwise direction, but these settings can be changed;</li>\n * <li>negative values in the dataset are ignored;</li>\n * <li>there are utility methods for creating a {@link PieDataset} from a\n * {@link org.jfree.data.category.CategoryDataset};</li>\n * </ol>\n *\n * @see Plot\n * @see PieDataset\n */\npublic class PiePlot extends Plot implements Cloneable, Serializable {\n    private static final long serialVersionUID = -795612466005590431L;\n    public static final double DEFAULT_INTERIOR_GAP = 0.08;\n    public static final double MAX_INTERIOR_GAP = 0.40;\n    public static final double DEFAULT_START_ANGLE = 90.0;\n    public static final Paint DEFAULT_LABEL_PAINT = Color.black;\n    public static final Paint DEFAULT_LABEL_OUTLINE_PAINT = Color.black;\n    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 0.00001;\n    private PieDataset dataset;\n    private int pieIndex;\n    private double interiorGap;\n    private boolean circular;\n    private double startAngle;\n    private Rotation direction;\n    private PaintMap sectionPaintMap;\n    private transient Paint baseSectionPaint;\n    private boolean sectionOutlinesVisible;\n    private PaintMap sectionOutlinePaintMap;\n    private transient Paint baseSectionOutlinePaint;\n    private StrokeMap sectionOutlineStrokeMap;\n    private transient Stroke baseSectionOutlineStroke;\n    private transient Paint shadowPaint = Color.gray;\n    private double shadowXOffset = 4.0f;\n    private double shadowYOffset = 4.0f;\n    private Map explodePercentages;\n    private PieSectionLabelGenerator labelGenerator;\n    private Font labelFont;\n    private transient Paint labelPaint;\n    private transient Paint labelBackgroundPaint;\n    private transient Paint labelOutlinePaint;\n    private transient Stroke labelOutlineStroke;\n    private transient Paint labelShadowPaint;\n    private boolean simpleLabels = true;\n    private RectangleInsets labelPadding;\n    private RectangleInsets simpleLabelOffset;\n    private double maximumLabelWidth = 0.14;\n    private double labelGap = 0.025;\n    private boolean labelLinksVisible;\n    private double labelLinkMargin = 0.025;\n    private transient Paint labelLinkPaint = Color.black;\n    private transient Stroke labelLinkStroke = new BasicStroke(0.5f);\n    private AbstractPieLabelDistributor labelDistributor;\n    private PieToolTipGenerator toolTipGenerator;\n    private PieURLGenerator urlGenerator;\n    private PieSectionLabelGenerator legendLabelGenerator;\n    private PieSectionLabelGenerator legendLabelToolTipGenerator;\n    private PieURLGenerator legendLabelURLGenerator;\n    private boolean ignoreNullValues;\n    private boolean ignoreZeroValues;\n    private transient Shape legendItemShape;\n    private double minimumArcAngleToDraw;\n    /**\n     * Sets the amount that a pie section should be exploded and sends a \n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param key  the section key (<code>null</code> not permitted).\n     * @param percent  the explode percentage (0.30 = 30 percent).\n     * \n     * @since 1.0.3\n     * \n     * @see #getExplodePercent(Comparable)\n     */\n    public void setExplodePercent(Comparable key, double percent);\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info);\n    /**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a \n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     * @param anchor  the anchor point (<code>null</code> permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects info about the drawing \n     *              (<code>null</code> permitted).\n     */\n    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState parentState, PlotRenderingInfo info);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A plot that displays data in the form of a pie chart, using data from any \n * class that implements the {@link PieDataset} interface.\n * <P>\n * Special notes:\n * <ol>\n * <li>the default starting point is 12 o'clock and the pie sections proceed\n * in a clockwise direction, but these settings can be changed;</li>\n * <li>negative values in the dataset are ignored;</li>\n * <li>there are utility methods for creating a {@link PieDataset} from a\n * {@link org.jfree.data.category.CategoryDataset};</li>\n * </ol>\n *\n * @see Plot\n * @see PieDataset\n */\npublic class PiePlot extends Plot implements Cloneable, Serializable {\n    private static final long serialVersionUID = -795612466005590431L;\n    public static final double DEFAULT_INTERIOR_GAP = 0.08;\n    public static final double MAX_INTERIOR_GAP = 0.40;\n    public static final double DEFAULT_START_ANGLE = 90.0;\n    public static final Paint DEFAULT_LABEL_PAINT = Color.black;\n    public static final Paint DEFAULT_LABEL_OUTLINE_PAINT = Color.black;\n    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 0.00001;\n    private PieDataset dataset;\n    private int pieIndex;\n    private double interiorGap;\n    private boolean circular;\n    private double startAngle;\n    private Rotation direction;\n    private PaintMap sectionPaintMap;\n    private transient Paint baseSectionPaint;\n    private boolean sectionOutlinesVisible;\n    private PaintMap sectionOutlinePaintMap;\n    private transient Paint baseSectionOutlinePaint;\n    private StrokeMap sectionOutlineStrokeMap;\n    private transient Stroke baseSectionOutlineStroke;\n    private transient Paint shadowPaint = Color.gray;\n    private double shadowXOffset = 4.0f;\n    private double shadowYOffset = 4.0f;\n    private Map explodePercentages;\n    private PieSectionLabelGenerator labelGenerator;\n    private Font labelFont;\n    private transient Paint labelPaint;\n    private transient Paint labelBackgroundPaint;\n    private transient Paint labelOutlinePaint;\n    private transient Stroke labelOutlineStroke;\n    private transient Paint labelShadowPaint;\n    private boolean simpleLabels = true;\n    private RectangleInsets labelPadding;\n    private RectangleInsets simpleLabelOffset;\n    private double maximumLabelWidth = 0.14;\n    private double labelGap = 0.025;\n    private boolean labelLinksVisible;\n    private double labelLinkMargin = 0.025;\n    private transient Paint labelLinkPaint = Color.black;\n    private transient Stroke labelLinkStroke = new BasicStroke(0.5f);\n    private AbstractPieLabelDistributor labelDistributor;\n    private PieToolTipGenerator toolTipGenerator;\n    private PieURLGenerator urlGenerator;\n    private PieSectionLabelGenerator legendLabelGenerator;\n    private PieSectionLabelGenerator legendLabelToolTipGenerator;\n    private PieURLGenerator legendLabelURLGenerator;\n    private boolean ignoreNullValues;\n    private boolean ignoreZeroValues;\n    private transient Shape legendItemShape;\n    private double minimumArcAngleToDraw;\n    /**\n     * Sets the amount that a pie section should be exploded and sends a \n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param key  the section key (<code>null</code> not permitted).\n     * @param percent  the explode percentage (0.30 = 30 percent).\n     * \n     * @since 1.0.3\n     * \n     * @see #getExplodePercent(Comparable)\n     */\n    public void setExplodePercent(Comparable key, double percent);\n    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info);\n    /**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a \n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     * @param anchor  the anchor point (<code>null</code> permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects info about the drawing \n     *              (<code>null</code> permitted).\n     */\n    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState parentState, PlotRenderingInfo info);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class PiePlot3DTests extends TestCase {\n    public void testDrawWithNullDataset() {\n        JFreeChart chart = ChartFactory.createPieChart3D(\"Test\", null, true, \n                false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A convenience class that provides a default implementation of the\n * {@link IntervalCategoryDataset} interface.\n * <p>\n * The standard constructor accepts data in a two dimensional array where the\n * first dimension is the series, and the second dimension is the category.\n */\npublic class DefaultIntervalCategoryDataset extends AbstractSeriesDataset\n        implements IntervalCategoryDataset {\n    private Comparable[] seriesKeys;\n    private Comparable[] categoryKeys;\n    private Number[][] startData;\n    private Number[][] endData;\n    /**\n     * Returns the index for the given category.\n     *\n     * @param category  the category (<code>null</code> not permitted).\n     *\n     * @return The index.\n     * \n     * @see #getColumnIndex(Comparable)\n     */\n    public int getCategoryIndex(Comparable category);\n    /**\n     * Returns the number of series in the dataset (possibly zero).\n     *\n     * @return The number of series in the dataset.\n     * \n     * @see #getRowCount()\n     * @see #getCategoryCount()\n     */\n    public int getSeriesCount();\n    /**\n     * Sets the categories for the dataset.\n     *\n     * @param categoryKeys  an array of objects representing the categories in \n     *                      the dataset.\n     *                      \n     * @see #getRowKeys()\n     * @see #setSeriesKeys(Comparable[])\n     */\n    public void setCategoryKeys(Comparable[] categoryKeys);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A convenience class that provides a default implementation of the\n * {@link IntervalCategoryDataset} interface.\n * <p>\n * The standard constructor accepts data in a two dimensional array where the\n * first dimension is the series, and the second dimension is the category.\n */\npublic class DefaultIntervalCategoryDataset extends AbstractSeriesDataset\n        implements IntervalCategoryDataset {\n    private Comparable[] seriesKeys;\n    private Comparable[] categoryKeys;\n    private Number[][] startData;\n    private Number[][] endData;\n    /**\n     * Returns the index for the given category.\n     *\n     * @param category  the category (<code>null</code> not permitted).\n     *\n     * @return The index.\n     * \n     * @see #getColumnIndex(Comparable)\n     */\n    public int getCategoryIndex(Comparable category);\n    /**\n     * Returns the number of series in the dataset (possibly zero).\n     *\n     * @return The number of series in the dataset.\n     * \n     * @see #getRowCount()\n     * @see #getCategoryCount()\n     */\n    public int getSeriesCount();\n    /**\n     * Sets the categories for the dataset.\n     *\n     * @param categoryKeys  an array of objects representing the categories in \n     *                      the dataset.\n     *                      \n     * @see #getRowKeys()\n     * @see #setSeriesKeys(Comparable[])\n     */\n    public void setCategoryKeys(Comparable[] categoryKeys);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class DefaultIntervalCategoryDatasetTests extends TestCase {\n    public void testGetCategoryIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getCategoryIndex(\"ABC\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Represents a sequence of zero or more data items in the form (period, value).\n */\npublic class TimeSeries extends Series implements Cloneable, Serializable {\n    private static final long serialVersionUID = -5032960206869675528L;\n    private String domain;\n    private String range;\n    private int maximumItemCount;\n    private long maximumItemAge;\n    /**\n     * Adds a new data item to the series and sends \n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, Number value, boolean notify);\n    /**\n     * Adds a data item to the series and sends a \n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not \n     *              permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(TimeSeriesDataItem item, boolean notify);\n    /**\n     * Adds a data item to the series and sends a \n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not \n     *              permitted).\n     */\n    public void add(TimeSeriesDataItem item);\n    /**\n     * Tests the series for equality with an arbitrary object.\n     *\n     * @param object  the object to test against (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public boolean equals(Object object);\n    /**\n     * Deletes data from start until end index (end inclusive).\n     *\n     * @param start  the index of the first period to delete.\n     * @param end  the index of the last period to delete.\n     */\n    public void delete(int start, int end);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, double value, boolean notify);\n    /**\n     * Returns a clone of the time series.\n     * <P>\n     * Notes:\n     * <ul>\n     *   <li>no need to clone the domain and range descriptions, since String \n     *     object is immutable;</li>\n     *   <li>we pass over to the more general method clone(start, end).</li>\n     * </ul>\n     *\n     * @return A clone of the time series.\n     * \n     * @throws CloneNotSupportedException not thrown by this class, but \n     *         subclasses may differ.\n     */\n    public Object clone() throws CloneNotSupportedException;\n    /**\n     * Adds a new data item to the series and sends \n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void add(RegularTimePeriod period, Number value);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     */\n    public void add(RegularTimePeriod period, double value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Represents a sequence of zero or more data items in the form (period, value).\n */\npublic class TimeSeries extends Series implements Cloneable, Serializable {\n    private static final long serialVersionUID = -5032960206869675528L;\n    private String domain;\n    private String range;\n    private int maximumItemCount;\n    private long maximumItemAge;\n    /**\n     * Adds a new data item to the series and sends \n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, Number value, boolean notify);\n    /**\n     * Adds a data item to the series and sends a \n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not \n     *              permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(TimeSeriesDataItem item, boolean notify);\n    /**\n     * Adds a data item to the series and sends a \n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not \n     *              permitted).\n     */\n    public void add(TimeSeriesDataItem item);\n    /**\n     * Tests the series for equality with an arbitrary object.\n     *\n     * @param object  the object to test against (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public boolean equals(Object object);\n    /**\n     * Deletes data from start until end index (end inclusive).\n     *\n     * @param start  the index of the first period to delete.\n     * @param end  the index of the last period to delete.\n     */\n    public void delete(int start, int end);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, double value, boolean notify);\n    /**\n     * Returns a clone of the time series.\n     * <P>\n     * Notes:\n     * <ul>\n     *   <li>no need to clone the domain and range descriptions, since String \n     *     object is immutable;</li>\n     *   <li>we pass over to the more general method clone(start, end).</li>\n     * </ul>\n     *\n     * @return A clone of the time series.\n     * \n     * @throws CloneNotSupportedException not thrown by this class, but \n     *         subclasses may differ.\n     */\n    public Object clone() throws CloneNotSupportedException;\n    /**\n     * Adds a new data item to the series and sends \n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void add(RegularTimePeriod period, Number value);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     */\n    public void add(RegularTimePeriod period, double value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class TimeSeriesTests extends TestCase implements SeriesChangeListener {\n    public void testBug1832432() {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        TimeSeries s2 = null;\n        try {\n            s2 = (TimeSeries) s1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1 != s2);\n        assertTrue(s1.getClass() == s2.getClass());\n        assertTrue(s1.equals(s2));\n\n        // test independence\n        s1.add(new Day(1, 1, 2007), 100.0);\n        assertFalse(s1.equals(s2));    \t\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * An ordered list of (key, value) items.  This class provides a default \n * implementation of the {@link KeyedValues} interface.\n */\npublic class DefaultKeyedValues implements KeyedValues, \n                                           Cloneable, PublicCloneable, \n                                           Serializable {\n    private static final long serialVersionUID = 8468154364608194797L;\n    private ArrayList keys;\n    private ArrayList values;\n    private HashMap indexMap; \n    /**\n     * Updates an existing value, or adds a new value to the collection.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     * @param value  the value.\n     * \n     * @see #addValue(Comparable, Number)\n     */\n    public void addValue(Comparable key, double value);\n    /**\n     * Removes a value from the collection.\n     *\n     * @param index  the index of the item to remove (in the range \n     *     <code>0</code> to <code>getItemCount() - 1</code>).\n     *     \n     * @throws IndexOutOfBoundsException if <code>index</code> is not within\n     *     the specified range.\n     */\n    public void removeValue(int index);\n    /**\n     * Removes a value from the collection.\n     *\n     * @param key  the item key (<code>null</code> not permitted).\n     * \n     * @throws IllegalArgumentException if <code>key</code> is \n     *     <code>null</code>.\n     * @throws UnknownKeyException if <code>key</code> is not recognised.\n     */\n    public void removeValue(Comparable key);\n    /**\n     * Adds a new value to the collection, or updates an existing value.\n     * This method passes control directly to the \n     * {@link #setValue(Comparable, Number)} method.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void addValue(Comparable key, Number value);\n    /**\n     * Returns the value for a given key.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     *\n     * @return The value (possibly <code>null</code>).\n     * \n     * @throws UnknownKeyException if the key is not recognised.\n     * \n     * @see #getValue(int)\n     */\n    public Number getValue(Comparable key);\n    /**\n     * Returns a value.\n     *\n     * @param item  the item of interest (zero-based index).\n     *\n     * @return The value (possibly <code>null</code>).\n     * \n     * @throws IndexOutOfBoundsException if <code>item</code> is out of bounds.\n     */\n    public Number getValue(int item);\n}\n/**\n * A data structure that stores zero, one or many values, where each value \n * is associated with two keys (a 'row' key and a 'column' key).  The keys \n * should be (a) instances of {@link Comparable} and (b) immutable.  \n */\npublic class DefaultKeyedValues2D implements KeyedValues2D, \n                                             PublicCloneable, Cloneable, \n                                             Serializable {\n    private static final long serialVersionUID = -5514169970951994748L;\n    private List rowKeys;\n    private List columnKeys;\n    private List rows;\n    private boolean sortRowKeys;\n    /**\n     * Adds a value to the table.  Performs the same function as \n     * #setValue(Number, Comparable, Comparable).\n     *\n     * @param value  the value (<code>null</code> permitted).\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #setValue(Number, Comparable, Comparable)\n     * @see #removeValue(Comparable, Comparable)\n     */\n    public void addValue(Number value, Comparable rowKey, \n                         Comparable columnKey);\n    /**\n     * Returns the value for a given row and column.\n     *\n     * @param row  the row index.\n     * @param column  the column index.\n     *\n     * @return The value.\n     * \n     * @see #getValue(Comparable, Comparable)\n     */\n    public Number getValue(int row, int column);\n    /**\n     * Removes a column.\n     *\n     * @param columnIndex  the column index.\n     * \n     * @see #removeColumn(Comparable)\n     * @see #removeRow(int)\n     */\n    public void removeColumn(int columnIndex);\n    /**\n     * Returns the value for the given row and column keys.  This method will\n     * throw an {@link UnknownKeyException} if either key is not defined in the\n     * data structure.\n     *\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     *\n     * @return The value (possibly <code>null</code>).\n     * \n     * @see #addValue(Number, Comparable, Comparable)\n     * @see #removeValue(Comparable, Comparable)\n     */\n    public Number getValue(Comparable rowKey, Comparable columnKey);\n    /**\n     * Removes a column from the table.\n     *\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @throws UnknownKeyException if the table does not contain a column with\n     *     the specified key.\n     * @throws IllegalArgumentException if <code>columnKey</code> is \n     *     <code>null</code>.\n     * \n     * @see #removeColumn(int)\n     * @see #removeRow(Comparable)\n     */\n    public void removeColumn(Comparable columnKey);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * An ordered list of (key, value) items.  This class provides a default \n * implementation of the {@link KeyedValues} interface.\n */\npublic class DefaultKeyedValues implements KeyedValues, \n                                           Cloneable, PublicCloneable, \n                                           Serializable {\n    private static final long serialVersionUID = 8468154364608194797L;\n    private ArrayList keys;\n    private ArrayList values;\n    private HashMap indexMap; \n    /**\n     * Updates an existing value, or adds a new value to the collection.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     * @param value  the value.\n     * \n     * @see #addValue(Comparable, Number)\n     */\n    public void addValue(Comparable key, double value);\n    /**\n     * Removes a value from the collection.\n     *\n     * @param index  the index of the item to remove (in the range \n     *     <code>0</code> to <code>getItemCount() - 1</code>).\n     *     \n     * @throws IndexOutOfBoundsException if <code>index</code> is not within\n     *     the specified range.\n     */\n    public void removeValue(int index);\n    /**\n     * Removes a value from the collection.\n     *\n     * @param key  the item key (<code>null</code> not permitted).\n     * \n     * @throws IllegalArgumentException if <code>key</code> is \n     *     <code>null</code>.\n     * @throws UnknownKeyException if <code>key</code> is not recognised.\n     */\n    public void removeValue(Comparable key);\n    /**\n     * Adds a new value to the collection, or updates an existing value.\n     * This method passes control directly to the \n     * {@link #setValue(Comparable, Number)} method.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void addValue(Comparable key, Number value);\n    /**\n     * Returns the value for a given key.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     *\n     * @return The value (possibly <code>null</code>).\n     * \n     * @throws UnknownKeyException if the key is not recognised.\n     * \n     * @see #getValue(int)\n     */\n    public Number getValue(Comparable key);\n    /**\n     * Returns a value.\n     *\n     * @param item  the item of interest (zero-based index).\n     *\n     * @return The value (possibly <code>null</code>).\n     * \n     * @throws IndexOutOfBoundsException if <code>item</code> is out of bounds.\n     */\n    public Number getValue(int item);\n}\n/**\n * A data structure that stores zero, one or many values, where each value \n * is associated with two keys (a 'row' key and a 'column' key).  The keys \n * should be (a) instances of {@link Comparable} and (b) immutable.  \n */\npublic class DefaultKeyedValues2D implements KeyedValues2D, \n                                             PublicCloneable, Cloneable, \n                                             Serializable {\n    private static final long serialVersionUID = -5514169970951994748L;\n    private List rowKeys;\n    private List columnKeys;\n    private List rows;\n    private boolean sortRowKeys;\n    /**\n     * Adds a value to the table.  Performs the same function as \n     * #setValue(Number, Comparable, Comparable).\n     *\n     * @param value  the value (<code>null</code> permitted).\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #setValue(Number, Comparable, Comparable)\n     * @see #removeValue(Comparable, Comparable)\n     */\n    public void addValue(Number value, Comparable rowKey, \n                         Comparable columnKey);\n    /**\n     * Returns the value for a given row and column.\n     *\n     * @param row  the row index.\n     * @param column  the column index.\n     *\n     * @return The value.\n     * \n     * @see #getValue(Comparable, Comparable)\n     */\n    public Number getValue(int row, int column);\n    /**\n     * Removes a column.\n     *\n     * @param columnIndex  the column index.\n     * \n     * @see #removeColumn(Comparable)\n     * @see #removeRow(int)\n     */\n    public void removeColumn(int columnIndex);\n    /**\n     * Returns the value for the given row and column keys.  This method will\n     * throw an {@link UnknownKeyException} if either key is not defined in the\n     * data structure.\n     *\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     *\n     * @return The value (possibly <code>null</code>).\n     * \n     * @see #addValue(Number, Comparable, Comparable)\n     * @see #removeValue(Comparable, Comparable)\n     */\n    public Number getValue(Comparable rowKey, Comparable columnKey);\n    /**\n     * Removes a column from the table.\n     *\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @throws UnknownKeyException if the table does not contain a column with\n     *     the specified key.\n     * @throws IllegalArgumentException if <code>columnKey</code> is \n     *     <code>null</code>.\n     * \n     * @see #removeColumn(int)\n     * @see #removeRow(Comparable)\n     */\n    public void removeColumn(Comparable columnKey);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class DefaultCategoryDatasetTests extends TestCase {\n    public void testBug1835955() {\n    \tDefaultCategoryDataset d = new DefaultCategoryDataset();\n    \td.addValue(1.0, \"R1\", \"C1\");\n    \td.addValue(2.0, \"R2\", \"C2\");\n    \td.removeColumn(\"C2\");\n    \td.addValue(3.0, \"R2\", \"C2\");\n    \tassertEquals(3.0, d.getValue(\"R2\", \"C2\").doubleValue(), EPSILON);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A general plotting class that uses data from a {@link CategoryDataset} and \n * renders each data item using a {@link CategoryItemRenderer}.\n */\npublic class CategoryPlot extends Plot implements ValueAxisPlot, \n        Zoomable, RendererChangeListener, Cloneable, PublicCloneable, \n        Serializable {\n    private static final long serialVersionUID = -3537691700434728188L;\n    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;\n    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;\n    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;\n    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;\n    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;\n    private PlotOrientation orientation;\n    private RectangleInsets axisOffset;\n    private ObjectList domainAxes;\n    private ObjectList domainAxisLocations;\n    private boolean drawSharedDomainAxis;\n    private ObjectList rangeAxes;\n    private ObjectList rangeAxisLocations;\n    private ObjectList datasets;\n    private ObjectList datasetToDomainAxisMap;\n    private ObjectList datasetToRangeAxisMap;\n    private ObjectList renderers;\n    private SortOrder columnRenderingOrder = SortOrder.ASCENDING;\n    private SortOrder rowRenderingOrder = SortOrder.ASCENDING;\n    private boolean domainGridlinesVisible;\n    private CategoryAnchor domainGridlinePosition;\n    private transient Stroke domainGridlineStroke;\n    private transient Paint domainGridlinePaint;\n    private boolean rangeGridlinesVisible;\n    private transient Stroke rangeGridlineStroke;\n    private transient Paint rangeGridlinePaint;\n    private double anchorValue;\n    private boolean rangeCrosshairVisible;\n    private double rangeCrosshairValue;\n    private transient Stroke rangeCrosshairStroke;\n    private transient Paint rangeCrosshairPaint;\n    private boolean rangeCrosshairLockedOnData = true;\n    private Map foregroundDomainMarkers;\n    private Map backgroundDomainMarkers;\n    private Map foregroundRangeMarkers;\n    private Map backgroundRangeMarkers;\n    private List annotations;\n    private int weight;\n    private AxisSpace fixedDomainAxisSpace;\n    private AxisSpace fixedRangeAxisSpace;\n    private LegendItemCollection fixedLegendItems;\n    /**\n     * Returns the index of the specified axis, or <code>-1</code> if the axis\n     * is not assigned to the plot.\n     *\n     * @param axis  the axis (<code>null</code> not permitted).\n     *\n     * @return The axis index.\n     * \n     * @see #getRangeAxis(int)\n     * @see #getDomainAxisIndex(CategoryAxis)\n     * \n     * @since 1.0.7\n     */\n    public int getRangeAxisIndex(ValueAxis axis);\n    /**\n     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis.\n     */\n    public void setRangeAxis(int index, ValueAxis axis);\n    /**\n     * Sets the range axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     * \n     * @param axes  the axes (<code>null</code> not permitted).\n     * \n     * @see #setDomainAxes(CategoryAxis[])\n     */\n    public void setRangeAxes(ValueAxis[] axes);\n    /**\n     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to \n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis.\n     * @param notify  notify listeners?\n     */\n    public void setRangeAxis(int index, ValueAxis axis, boolean notify);\n    /**\n     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param axis  the axis (<code>null</code> permitted).\n     */\n    public void setRangeAxis(ValueAxis axis);\n    /**\n     * Sets the domain axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     * \n     * @param axes  the axes (<code>null</code> not permitted).\n     * \n     * @see #setRangeAxes(ValueAxis[])\n     */\n    public void setDomainAxes(CategoryAxis[] axes);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A general plotting class that uses data from a {@link CategoryDataset} and \n * renders each data item using a {@link CategoryItemRenderer}.\n */\npublic class CategoryPlot extends Plot implements ValueAxisPlot, \n        Zoomable, RendererChangeListener, Cloneable, PublicCloneable, \n        Serializable {\n    private static final long serialVersionUID = -3537691700434728188L;\n    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;\n    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;\n    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;\n    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;\n    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;\n    private PlotOrientation orientation;\n    private RectangleInsets axisOffset;\n    private ObjectList domainAxes;\n    private ObjectList domainAxisLocations;\n    private boolean drawSharedDomainAxis;\n    private ObjectList rangeAxes;\n    private ObjectList rangeAxisLocations;\n    private ObjectList datasets;\n    private ObjectList datasetToDomainAxisMap;\n    private ObjectList datasetToRangeAxisMap;\n    private ObjectList renderers;\n    private SortOrder columnRenderingOrder = SortOrder.ASCENDING;\n    private SortOrder rowRenderingOrder = SortOrder.ASCENDING;\n    private boolean domainGridlinesVisible;\n    private CategoryAnchor domainGridlinePosition;\n    private transient Stroke domainGridlineStroke;\n    private transient Paint domainGridlinePaint;\n    private boolean rangeGridlinesVisible;\n    private transient Stroke rangeGridlineStroke;\n    private transient Paint rangeGridlinePaint;\n    private double anchorValue;\n    private boolean rangeCrosshairVisible;\n    private double rangeCrosshairValue;\n    private transient Stroke rangeCrosshairStroke;\n    private transient Paint rangeCrosshairPaint;\n    private boolean rangeCrosshairLockedOnData = true;\n    private Map foregroundDomainMarkers;\n    private Map backgroundDomainMarkers;\n    private Map foregroundRangeMarkers;\n    private Map backgroundRangeMarkers;\n    private List annotations;\n    private int weight;\n    private AxisSpace fixedDomainAxisSpace;\n    private AxisSpace fixedRangeAxisSpace;\n    private LegendItemCollection fixedLegendItems;\n    /**\n     * Returns the index of the specified axis, or <code>-1</code> if the axis\n     * is not assigned to the plot.\n     *\n     * @param axis  the axis (<code>null</code> not permitted).\n     *\n     * @return The axis index.\n     * \n     * @see #getRangeAxis(int)\n     * @see #getDomainAxisIndex(CategoryAxis)\n     * \n     * @since 1.0.7\n     */\n    public int getRangeAxisIndex(ValueAxis axis);\n    /**\n     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis.\n     */\n    public void setRangeAxis(int index, ValueAxis axis);\n    /**\n     * Sets the range axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     * \n     * @param axes  the axes (<code>null</code> not permitted).\n     * \n     * @see #setDomainAxes(CategoryAxis[])\n     */\n    public void setRangeAxes(ValueAxis[] axes);\n    /**\n     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to \n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis.\n     * @param notify  notify listeners?\n     */\n    public void setRangeAxis(int index, ValueAxis axis, boolean notify);\n    /**\n     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param axis  the axis (<code>null</code> permitted).\n     */\n    public void setRangeAxis(ValueAxis axis);\n    /**\n     * Sets the domain axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     * \n     * @param axes  the axes (<code>null</code> not permitted).\n     * \n     * @see #setRangeAxes(ValueAxis[])\n     */\n    public void setDomainAxes(CategoryAxis[] axes);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class CategoryPlotTests extends TestCase {\n    public void testGetRangeAxisIndex() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Y2\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));\n        assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));\n        plot.setRangeAxis(1, rangeAxis2);\n        assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));\n        assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis(\"Y2\")));\n        boolean pass = false;\n        try {\n            plot.getRangeAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A collection of useful static methods relating to datasets.\n */\npublic final class DatasetUtilities {\n    /**\n     * Iterates over the data items of the xy dataset to find\n     * the range bounds.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     * @param includeInterval  a flag that determines, for an\n     *          {@link IntervalXYDataset}, whether the y-interval or just the\n     *          y-value is used to determine the overall range.\n     *\n     * @return The range (possibly <code>null</code>).\n     *\n     * @since 1.0.10\n     */\n    public static Range iterateRangeBounds(XYDataset dataset,\n            boolean includeInterval);\n    /**\n     * Iterates over the items in an {@link XYDataset} to find\n     * the range of x-values.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     * @param includeInterval  a flag that determines, for an\n     *          {@link IntervalXYDataset}, whether the x-interval or just the\n     *          x-value is used to determine the overall range.\n     *\n     * @return The range (possibly <code>null</code>).\n     */\n    public static Range iterateDomainBounds(XYDataset dataset,\n                                            boolean includeInterval);\n    /**\n     * Iterates over the items in an {@link XYDataset} to find\n     * the range of x-values.  If the dataset is an instance of\n     * {@link IntervalXYDataset}, the starting and ending x-values\n     * will be used for the bounds calculation.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     *\n     * @return The range (possibly <code>null</code>).\n     */\n    public static Range iterateDomainBounds(XYDataset dataset);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A collection of useful static methods relating to datasets.\n */\npublic final class DatasetUtilities {\n    /**\n     * Iterates over the data items of the xy dataset to find\n     * the range bounds.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     * @param includeInterval  a flag that determines, for an\n     *          {@link IntervalXYDataset}, whether the y-interval or just the\n     *          y-value is used to determine the overall range.\n     *\n     * @return The range (possibly <code>null</code>).\n     *\n     * @since 1.0.10\n     */\n    public static Range iterateRangeBounds(XYDataset dataset,\n            boolean includeInterval);\n    /**\n     * Iterates over the items in an {@link XYDataset} to find\n     * the range of x-values.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     * @param includeInterval  a flag that determines, for an\n     *          {@link IntervalXYDataset}, whether the x-interval or just the\n     *          x-value is used to determine the overall range.\n     *\n     * @return The range (possibly <code>null</code>).\n     */\n    public static Range iterateDomainBounds(XYDataset dataset,\n                                            boolean includeInterval);\n    /**\n     * Iterates over the items in an {@link XYDataset} to find\n     * the range of x-values.  If the dataset is an instance of\n     * {@link IntervalXYDataset}, the starting and ending x-values\n     * will be used for the bounds calculation.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     *\n     * @return The range (possibly <code>null</code>).\n     */\n    public static Range iterateDomainBounds(XYDataset dataset);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class DatasetUtilitiesTests extends TestCase {\n    private CategoryDataset createCategoryDataset1() {\n        DefaultCategoryDataset result = new DefaultCategoryDataset();\n        result.addValue(1.0, \"R0\", \"C0\");\n        result.addValue(1.0, \"R1\", \"C0\");\n        result.addValue(1.0, \"R2\", \"C0\");\n        result.addValue(4.0, \"R0\", \"C1\");\n        result.addValue(5.0, \"R1\", \"C1\");\n        result.addValue(6.0, \"R2\", \"C1\");\n        return result;\n    }\n    private CategoryDataset createCategoryDataset2() {\n        DefaultCategoryDataset result = new DefaultCategoryDataset();\n        result.addValue(1.0, \"R0\", \"C0\");\n        result.addValue(-2.0, \"R1\", \"C0\");\n        result.addValue(2.0, \"R0\", \"C1\");\n        result.addValue(-1.0, \"R1\", \"C1\");\n        return result;\n    }\n    private XYDataset createXYDataset1() {\n        XYSeries series1 = new XYSeries(\"S1\");\n        series1.add(1.0, 100.0);\n        series1.add(2.0, 101.0);\n        series1.add(3.0, 102.0);\n        XYSeries series2 = new XYSeries(\"S2\");\n        series2.add(1.0, 103.0);\n        series2.add(2.0, null);\n        series2.add(3.0, 105.0);\n        XYSeriesCollection result = new XYSeriesCollection();\n        result.addSeries(series1);\n        result.addSeries(series2);\n        result.setIntervalWidth(0.0);\n        return result;\n    }\n    private TableXYDataset createTableXYDataset1() {\n        DefaultTableXYDataset dataset = new DefaultTableXYDataset();\n\n        XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n        s1.add(1.0, 1.0);\n        s1.add(2.0, 2.0);\n        dataset.addSeries(s1);\n\n        XYSeries s2 = new XYSeries(\"Series 2\", true, false);\n        s2.add(1.0, -2.0);\n        s2.add(2.0, -1.0);\n        dataset.addSeries(s2);\n\n        return dataset;\n    }\n    public void testBug2849731_2() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);\n        assertEquals(1.0, r.getUpperBound(), EPSILON);\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);\n        assertEquals(1.5, r.getUpperBound(), EPSILON);\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(0.5, r.getLowerBound(), EPSILON);\n        assertEquals(1.5, r.getUpperBound(), EPSILON);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A marker that represents a single value.  Markers can be added to plots to\n * highlight specific values.\n */\npublic class ValueMarker extends Marker {\n    private double value;\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     * \n     * @see #setValue(double)\n     */\n    public double getValue();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A marker that represents a single value.  Markers can be added to plots to\n * highlight specific values.\n */\npublic class ValueMarker extends Marker {\n    private double value;\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     * \n     * @see #setValue(double)\n     */\n    public double getValue();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class ValueMarkerTests \n    extends TestCase \n    implements MarkerChangeListener {\n    public void test1808376() {\n        Stroke stroke = new BasicStroke(1.0f);\n        Stroke outlineStroke = new BasicStroke(2.0f);\n        ValueMarker m = new ValueMarker(1.0, Color.red, stroke, Color.blue, \n                outlineStroke, 0.5f);\n        assertEquals(1.0, m.getValue(), EPSILON);\n        assertEquals(Color.red, m.getPaint());\n        assertEquals(stroke, m.getStroke());\n        assertEquals(Color.blue, m.getOutlinePaint());\n        assertEquals(outlineStroke, m.getOutlineStroke());\n        assertEquals(0.5f, m.getAlpha(), EPSILON);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A convenience class that provides a default implementation of the\n * {@link BoxAndWhiskerCategoryDataset} interface.\n */\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable {\n    private double minimumRangeValue;\n    private int minimumRangeValueRow;\n    private int minimumRangeValueColumn;\n    private double maximumRangeValue;\n    private int maximumRangeValueRow;\n    private int maximumRangeValueColumn;\n    private Range rangeBounds;\n    /**\n     * Adds a list of values relating to one box-and-whisker entity to the \n     * table.  The various median values are calculated.\n     *\n     * @param list  a collection of values from which the various medians will \n     *              be calculated.\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #add(BoxAndWhiskerItem, Comparable, Comparable)\n     */\n    public void add(List list, Comparable rowKey, Comparable columnKey);\n    /**\n     * Returns a list of outlier values for an item.\n     * \n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * \n     * @return A list of outlier values.\n     * \n     * @see #getItem(int, int)\n     */\n    public List getOutliers(Comparable rowKey, Comparable columnKey);\n    /**\n     * Returns the range of the values in this dataset's range.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     * \n     * @return The range.\n     */\n    public Range getRangeBounds(boolean includeInterval);\n    /**\n     * Resets the cached bounds, by iterating over the entire dataset to find\n     * the current bounds.\n     */\n    private void updateBounds();\n    /**\n     * Adds a list of values relating to one Box and Whisker entity to the \n     * table.  The various median values are calculated.\n     *\n     * @param item  a box and whisker item (<code>null</code> not permitted).\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #add(List, Comparable, Comparable)\n     */\n    public void add(BoxAndWhiskerItem item, Comparable rowKey, \n            Comparable columnKey);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A convenience class that provides a default implementation of the\n * {@link BoxAndWhiskerCategoryDataset} interface.\n */\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable {\n    private double minimumRangeValue;\n    private int minimumRangeValueRow;\n    private int minimumRangeValueColumn;\n    private double maximumRangeValue;\n    private int maximumRangeValueRow;\n    private int maximumRangeValueColumn;\n    private Range rangeBounds;\n    /**\n     * Adds a list of values relating to one box-and-whisker entity to the \n     * table.  The various median values are calculated.\n     *\n     * @param list  a collection of values from which the various medians will \n     *              be calculated.\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #add(BoxAndWhiskerItem, Comparable, Comparable)\n     */\n    public void add(List list, Comparable rowKey, Comparable columnKey);\n    /**\n     * Returns a list of outlier values for an item.\n     * \n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * \n     * @return A list of outlier values.\n     * \n     * @see #getItem(int, int)\n     */\n    public List getOutliers(Comparable rowKey, Comparable columnKey);\n    /**\n     * Returns the range of the values in this dataset's range.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     * \n     * @return The range.\n     */\n    public Range getRangeBounds(boolean includeInterval);\n    /**\n     * Resets the cached bounds, by iterating over the entire dataset to find\n     * the current bounds.\n     */\n    private void updateBounds();\n    /**\n     * Adds a list of values relating to one Box and Whisker entity to the \n     * table.  The various median values are calculated.\n     *\n     * @param item  a box and whisker item (<code>null</code> not permitted).\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #add(List, Comparable, Comparable)\n     */\n    public void add(BoxAndWhiskerItem item, Comparable rowKey, \n            Comparable columnKey);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class DefaultBoxAndWhiskerCategoryDatasetTests extends TestCase {\n    public void testGetRangeBounds() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A data structure that stores zero, one or many objects, where each object is\n * associated with two keys (a 'row' key and a 'column' key).\n */\npublic class KeyedObjects2D implements Cloneable, Serializable {\n    private static final long serialVersionUID = -1015873563138522374L;\n    private List rowKeys;\n    private List columnKeys;\n    private List rows;\n    /**\n     * Returns the object for the given row and column keys.\n     *\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     *\n     * @return The object (possibly <code>null</code>).\n     * \n     * @throws IllegalArgumentException if <code>rowKey<code> or \n     *         <code>columnKey</code> is <code>null</code>.\n     * @throws UnknownKeyException if <code>rowKey</code> or \n     *         <code>columnKey</code> is not recognised.\n     */\n    public Object getObject(Comparable rowKey, Comparable columnKey);\n    /**\n     * Removes an entire column from the table.\n     *\n     * @param columnIndex  the column index.\n     * \n     * @see #removeRow(int)\n     */\n    public void removeColumn(int columnIndex);\n    /**\n     * Returns the object for a given row and column.\n     *\n     * @param row  the row index (in the range 0 to getRowCount() - 1).\n     * @param column  the column index (in the range 0 to getColumnCount() - 1).\n     *\n     * @return The object (possibly <code>null</code>).\n     * \n     * @see #getObject(Comparable, Comparable)\n     */\n    public Object getObject(int row, int column);\n    /**\n     * Adds or updates an object.\n     *\n     * @param object  the object.\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     */\n    public void setObject(Object object, Comparable rowKey, \n            Comparable columnKey);\n    /**\n     * Removes an entire row from the table.\n     *\n     * @param rowIndex  the row index.\n     * \n     * @see #removeColumn(int)\n     */\n    public void removeRow(int rowIndex);\n    /**\n     * Removes an entire column from the table.\n     *\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @throws UnknownKeyException if <code>rowKey</code> is not recognised.\n     * \n     * @see #removeRow(Comparable)\n     */\n    public void removeColumn(Comparable columnKey);\n    /**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public boolean equals(Object obj);\n    /**\n     * Removes an object from the table by setting it to <code>null</code>.  If\n     * all the objects in the specified row and/or column are now \n     * <code>null</code>, the row and/or column is removed from the table.\n     *\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #addObject(Object, Comparable, Comparable)\n     */\n    public void removeObject(Comparable rowKey, Comparable columnKey);\n    /**\n     * Returns the column count.\n     *\n     * @return The column count.\n     * \n     * @see #getRowCount()\n     */\n    public int getColumnCount();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A data structure that stores zero, one or many objects, where each object is\n * associated with two keys (a 'row' key and a 'column' key).\n */\npublic class KeyedObjects2D implements Cloneable, Serializable {\n    private static final long serialVersionUID = -1015873563138522374L;\n    private List rowKeys;\n    private List columnKeys;\n    private List rows;\n    /**\n     * Returns the object for the given row and column keys.\n     *\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     *\n     * @return The object (possibly <code>null</code>).\n     * \n     * @throws IllegalArgumentException if <code>rowKey<code> or \n     *         <code>columnKey</code> is <code>null</code>.\n     * @throws UnknownKeyException if <code>rowKey</code> or \n     *         <code>columnKey</code> is not recognised.\n     */\n    public Object getObject(Comparable rowKey, Comparable columnKey);\n    /**\n     * Removes an entire column from the table.\n     *\n     * @param columnIndex  the column index.\n     * \n     * @see #removeRow(int)\n     */\n    public void removeColumn(int columnIndex);\n    /**\n     * Returns the object for a given row and column.\n     *\n     * @param row  the row index (in the range 0 to getRowCount() - 1).\n     * @param column  the column index (in the range 0 to getColumnCount() - 1).\n     *\n     * @return The object (possibly <code>null</code>).\n     * \n     * @see #getObject(Comparable, Comparable)\n     */\n    public Object getObject(int row, int column);\n    /**\n     * Adds or updates an object.\n     *\n     * @param object  the object.\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     */\n    public void setObject(Object object, Comparable rowKey, \n            Comparable columnKey);\n    /**\n     * Removes an entire row from the table.\n     *\n     * @param rowIndex  the row index.\n     * \n     * @see #removeColumn(int)\n     */\n    public void removeRow(int rowIndex);\n    /**\n     * Removes an entire column from the table.\n     *\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @throws UnknownKeyException if <code>rowKey</code> is not recognised.\n     * \n     * @see #removeRow(Comparable)\n     */\n    public void removeColumn(Comparable columnKey);\n    /**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public boolean equals(Object obj);\n    /**\n     * Removes an object from the table by setting it to <code>null</code>.  If\n     * all the objects in the specified row and/or column are now \n     * <code>null</code>, the row and/or column is removed from the table.\n     *\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #addObject(Object, Comparable, Comparable)\n     */\n    public void removeObject(Comparable rowKey, Comparable columnKey);\n    /**\n     * Returns the column count.\n     *\n     * @return The column count.\n     * \n     * @see #getRowCount()\n     */\n    public int getColumnCount();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class KeyedObjects2DTests extends TestCase {\n    public void testRemoveColumnByKey() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        assertEquals(1, data.getColumnCount());\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Renderer for drawing min max plot. This renderer draws all the series under \n * the same category in the same x position using <code>objectIcon</code> and \n * a line from the maximum value to the minimum value.\n * <p>\n * For use with the {@link org.jfree.chart.plot.CategoryPlot} class.\n */\npublic class MinMaxCategoryRenderer extends AbstractCategoryItemRenderer {\n    private static final long serialVersionUID = 2935615937671064911L;\n    private boolean plotLines = false;\n    private transient Paint groupPaint = Color.black;\n    private transient Stroke groupStroke = new BasicStroke(1.0f);\n    private int lastCategory = -1;\n    private double min;\n    private double max;\n    /**\n     * Sets the stroke of the line between the minimum value and the maximum \n     * value and sends a {@link RendererChangeEvent} to all registered \n     * listeners.\n     *\n     * @param stroke the new stroke (<code>null</code> not permitted).\n     */\n    public void setGroupStroke(Stroke stroke);\n    /**\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area in which the data is drawn.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            int pass);\n    /**\n     * Sets the flag that controls whether or not lines are drawn to connect\n     * the items within a series and sends a {@link RendererChangeEvent} to \n     * all registered listeners.\n     *\n     * @param draw  the new value of the flag.\n     * \n     * @see #isDrawLines()\n     */\n    public void setDrawLines(boolean draw);\n    /**\n     * Sets the paint used to draw the line between the minimum and maximum\n     * value items in each category and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     * \n     * @see #getGroupPaint()\n     */\n    public void setGroupPaint(Paint paint);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Renderer for drawing min max plot. This renderer draws all the series under \n * the same category in the same x position using <code>objectIcon</code> and \n * a line from the maximum value to the minimum value.\n * <p>\n * For use with the {@link org.jfree.chart.plot.CategoryPlot} class.\n */\npublic class MinMaxCategoryRenderer extends AbstractCategoryItemRenderer {\n    private static final long serialVersionUID = 2935615937671064911L;\n    private boolean plotLines = false;\n    private transient Paint groupPaint = Color.black;\n    private transient Stroke groupStroke = new BasicStroke(1.0f);\n    private int lastCategory = -1;\n    private double min;\n    private double max;\n    /**\n     * Sets the stroke of the line between the minimum value and the maximum \n     * value and sends a {@link RendererChangeEvent} to all registered \n     * listeners.\n     *\n     * @param stroke the new stroke (<code>null</code> not permitted).\n     */\n    public void setGroupStroke(Stroke stroke);\n    /**\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area in which the data is drawn.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            int pass);\n    /**\n     * Sets the flag that controls whether or not lines are drawn to connect\n     * the items within a series and sends a {@link RendererChangeEvent} to \n     * all registered listeners.\n     *\n     * @param draw  the new value of the flag.\n     * \n     * @see #isDrawLines()\n     */\n    public void setDrawLines(boolean draw);\n    /**\n     * Sets the paint used to draw the line between the minimum and maximum\n     * value items in each category and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     * \n     * @see #getGroupPaint()\n     */\n    public void setGroupPaint(Paint paint);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class MinMaxCategoryRendererTests extends TestCase {\n    public void testEquals() {\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = new MinMaxCategoryRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setDrawLines(true);\n        assertFalse(r1.equals(r2));\n        r2.setDrawLines(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setGroupPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.yellow));\n        assertFalse(r1.equals(r2));\n        r2.setGroupPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.yellow));\n        assertTrue(r1.equals(r2));\n        \n        r1.setGroupStroke(new BasicStroke(1.2f));\n        assertFalse(r1.equals(r2));\n        r2.setGroupStroke(new BasicStroke(1.2f));\n        assertTrue(r1.equals(r2));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A paint scale that returns shades of gray.\n * \n * @since 1.0.4\n */\npublic class GrayPaintScale \n        implements PaintScale, PublicCloneable, Serializable {\n    private double lowerBound;\n    private double upperBound;\n    /**\n     * Returns a paint for the specified value.\n     * \n     * @param value  the value (must be within the range specified by the\n     *         lower and upper bounds for the scale).\n     * \n     * @return A paint for the specified value.\n     */\n    public Paint getPaint(double value);\n    /**\n     * Tests this <code>GrayPaintScale</code> instance for equality with an\n     * arbitrary object.  This method returns <code>true</code> if and only\n     * if:\n     * <ul>\n     * <li><code>obj</code> is not <code>null</code>;</li>\n     * <li><code>obj</code> is an instance of <code>GrayPaintScale</code>;</li>\n     * </ul>\n     * \n     * @param obj  the object (<code>null</code> permitted).\n     * \n     * @return A boolean.\n     */\n    public boolean equals(Object obj);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A paint scale that returns shades of gray.\n * \n * @since 1.0.4\n */\npublic class GrayPaintScale \n        implements PaintScale, PublicCloneable, Serializable {\n    private double lowerBound;\n    private double upperBound;\n    /**\n     * Returns a paint for the specified value.\n     * \n     * @param value  the value (must be within the range specified by the\n     *         lower and upper bounds for the scale).\n     * \n     * @return A paint for the specified value.\n     */\n    public Paint getPaint(double value);\n    /**\n     * Tests this <code>GrayPaintScale</code> instance for equality with an\n     * arbitrary object.  This method returns <code>true</code> if and only\n     * if:\n     * <ul>\n     * <li><code>obj</code> is not <code>null</code>;</li>\n     * <li><code>obj</code> is an instance of <code>GrayPaintScale</code>;</li>\n     * </ul>\n     * \n     * @param obj  the object (<code>null</code> permitted).\n     * \n     * @return A boolean.\n     */\n    public boolean equals(Object obj);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class GrayPaintScaleTests extends TestCase {\n    public void testGetPaint() {\n        GrayPaintScale gps = new GrayPaintScale();\n        Color c = (Color) gps.getPaint(0.0);\n        assertTrue(c.equals(Color.black));\n        c = (Color) gps.getPaint(1.0);\n        assertTrue(c.equals(Color.white));\n        \n        // check lookup values that are outside the bounds - see bug report\n        // 1767315\n        c = (Color) gps.getPaint(-0.5);\n        assertTrue(c.equals(Color.black));\n        c = (Color) gps.getPaint(1.5);\n        assertTrue(c.equals(Color.white));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A renderer that handles the drawing a bar plot where\n * each bar has a mean value and a standard deviation line.\n */\npublic class StatisticalBarRenderer extends BarRenderer\n                                    implements CategoryItemRenderer, \n                                               Cloneable, PublicCloneable, \n                                               Serializable {\n    private static final long serialVersionUID = -4986038395414039117L;\n    private transient Paint errorIndicatorPaint;\n    private transient Stroke errorIndicatorStroke;\n    /**\n     * Draws an item for a plot with a vertical orientation.\n     * \n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n    protected void drawVerticalItem(Graphics2D g2,\n                                    CategoryItemRendererState state,\n                                    Rectangle2D dataArea,\n                                    CategoryPlot plot,\n                                    CategoryAxis domainAxis,\n                                    ValueAxis rangeAxis,\n                                    StatisticalCategoryDataset dataset,\n                                    int row,\n                                    int column);\n    /**\n     * Draws an item for a plot with a horizontal orientation.\n     * \n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n    protected void drawHorizontalItem(Graphics2D g2,\n                                      CategoryItemRendererState state,\n                                      Rectangle2D dataArea,\n                                      CategoryPlot plot,\n                                      CategoryAxis domainAxis,\n                                      ValueAxis rangeAxis,\n                                      StatisticalCategoryDataset dataset,\n                                      int row,\n                                      int column);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A renderer that handles the drawing a bar plot where\n * each bar has a mean value and a standard deviation line.\n */\npublic class StatisticalBarRenderer extends BarRenderer\n                                    implements CategoryItemRenderer, \n                                               Cloneable, PublicCloneable, \n                                               Serializable {\n    private static final long serialVersionUID = -4986038395414039117L;\n    private transient Paint errorIndicatorPaint;\n    private transient Stroke errorIndicatorStroke;\n    /**\n     * Draws an item for a plot with a vertical orientation.\n     * \n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n    protected void drawVerticalItem(Graphics2D g2,\n                                    CategoryItemRendererState state,\n                                    Rectangle2D dataArea,\n                                    CategoryPlot plot,\n                                    CategoryAxis domainAxis,\n                                    ValueAxis rangeAxis,\n                                    StatisticalCategoryDataset dataset,\n                                    int row,\n                                    int column);\n    /**\n     * Draws an item for a plot with a horizontal orientation.\n     * \n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n    protected void drawHorizontalItem(Graphics2D g2,\n                                      CategoryItemRendererState state,\n                                      Rectangle2D dataArea,\n                                      CategoryPlot plot,\n                                      CategoryAxis domainAxis,\n                                      ValueAxis rangeAxis,\n                                      StatisticalCategoryDataset dataset,\n                                      int row,\n                                      int column);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class StatisticalBarRendererTests extends TestCase {\n    public void testDrawWithNullMeanVertical() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                    = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(null, new Double(4.0), \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The base class for all axes in JFreeChart.  Subclasses are divided into \n * those that display values ({@link ValueAxis}) and those that display \n * categories ({@link CategoryAxis}).\n */\npublic abstract class Axis implements Cloneable, Serializable {\n    private static final long serialVersionUID = 7719289504573298271L;\n    public static final boolean DEFAULT_AXIS_VISIBLE = true;\n    public static final Paint DEFAULT_AXIS_LABEL_PAINT = Color.black;\n    public static final Paint DEFAULT_AXIS_LINE_PAINT = Color.gray;\n    public static final Stroke DEFAULT_AXIS_LINE_STROKE = new BasicStroke(1.0f);\n    public static final boolean DEFAULT_TICK_LABELS_VISIBLE = true;\n    public static final Paint DEFAULT_TICK_LABEL_PAINT = Color.black;\n    public static final boolean DEFAULT_TICK_MARKS_VISIBLE = true;\n    public static final Stroke DEFAULT_TICK_MARK_STROKE = new BasicStroke(1);\n    public static final Paint DEFAULT_TICK_MARK_PAINT = Color.gray;\n    public static final float DEFAULT_TICK_MARK_INSIDE_LENGTH = 0.0f;\n    public static final float DEFAULT_TICK_MARK_OUTSIDE_LENGTH = 2.0f;\n    private boolean visible;\n    private String label;\n    private Font labelFont;\n    private transient Paint labelPaint;\n    private RectangleInsets labelInsets;\n    private double labelAngle;\n    private String labelToolTip;\n    private String labelURL;\n    private boolean axisLineVisible;\n    private transient Stroke axisLineStroke;\n    private transient Paint axisLinePaint;\n    private boolean tickLabelsVisible;\n    private Font tickLabelFont;\n    private transient Paint tickLabelPaint;\n    private RectangleInsets tickLabelInsets;\n    private boolean tickMarksVisible;\n    private float tickMarkInsideLength;\n    private float tickMarkOutsideLength;\n    private transient Stroke tickMarkStroke;\n    private transient Paint tickMarkPaint;\n    private double fixedDimension;\n    private transient Plot plot;\n    private transient EventListenerList listenerList;\n    /**\n     * Draws the axis label.\n     *\n     * @param label  the label text.\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the location of the axis.\n     * @param state  the axis state (<code>null</code> not permitted).\n     * @param plotState  the plot state (<code>null</code> permitted).\n     *\n     * @return Information about the axis.\n     */\n    protected AxisState drawLabel(String label, Graphics2D g2, \n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n            AxisState state, PlotRenderingInfo plotState);\n    /**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a \n     * printer).\n     *\n     * @param g2  the graphics device (<code>null</code> not permitted).\n     * @param cursor  the cursor location (determines where to draw the axis).\n     * @param plotArea  the area within which the axes and plot should be drawn.\n     * @param dataArea  the area within which the data should be drawn.\n     * @param edge  the axis location (<code>null</code> not permitted).\n     * @param plotState  collects information about the plot \n     *                   (<code>null</code> permitted).\n     * \n     * @return The axis state (never <code>null</code>).\n     */\n    public abstract AxisState draw(Graphics2D g2, \n                                   double cursor,\n                                   Rectangle2D plotArea, \n                                   Rectangle2D dataArea,\n                                   RectangleEdge edge,\n                                   PlotRenderingInfo plotState);\n\n    /**\n     * Calculates the positions of the ticks for the axis, storing the results\n     * in the tick list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the edge on which the axis is located.\n     * \n     * @return The list of ticks.\n     */\n    public abstract List refreshTicks(Graphics2D g2, \n                                      AxisState state,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge);\n\n    /**\n     * Registers an object for notification of changes to the axis.\n     *\n     * @param listener  the object that is being registered.\n     * \n     * @see #removeChangeListener(AxisChangeListener)\n     */\n    public void addChangeListener(AxisChangeListener listener);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The base class for all axes in JFreeChart.  Subclasses are divided into \n * those that display values ({@link ValueAxis}) and those that display \n * categories ({@link CategoryAxis}).\n */\npublic abstract class Axis implements Cloneable, Serializable {\n    private static final long serialVersionUID = 7719289504573298271L;\n    public static final boolean DEFAULT_AXIS_VISIBLE = true;\n    public static final Paint DEFAULT_AXIS_LABEL_PAINT = Color.black;\n    public static final Paint DEFAULT_AXIS_LINE_PAINT = Color.gray;\n    public static final Stroke DEFAULT_AXIS_LINE_STROKE = new BasicStroke(1.0f);\n    public static final boolean DEFAULT_TICK_LABELS_VISIBLE = true;\n    public static final Paint DEFAULT_TICK_LABEL_PAINT = Color.black;\n    public static final boolean DEFAULT_TICK_MARKS_VISIBLE = true;\n    public static final Stroke DEFAULT_TICK_MARK_STROKE = new BasicStroke(1);\n    public static final Paint DEFAULT_TICK_MARK_PAINT = Color.gray;\n    public static final float DEFAULT_TICK_MARK_INSIDE_LENGTH = 0.0f;\n    public static final float DEFAULT_TICK_MARK_OUTSIDE_LENGTH = 2.0f;\n    private boolean visible;\n    private String label;\n    private Font labelFont;\n    private transient Paint labelPaint;\n    private RectangleInsets labelInsets;\n    private double labelAngle;\n    private String labelToolTip;\n    private String labelURL;\n    private boolean axisLineVisible;\n    private transient Stroke axisLineStroke;\n    private transient Paint axisLinePaint;\n    private boolean tickLabelsVisible;\n    private Font tickLabelFont;\n    private transient Paint tickLabelPaint;\n    private RectangleInsets tickLabelInsets;\n    private boolean tickMarksVisible;\n    private float tickMarkInsideLength;\n    private float tickMarkOutsideLength;\n    private transient Stroke tickMarkStroke;\n    private transient Paint tickMarkPaint;\n    private double fixedDimension;\n    private transient Plot plot;\n    private transient EventListenerList listenerList;\n    /**\n     * Draws the axis label.\n     *\n     * @param label  the label text.\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the location of the axis.\n     * @param state  the axis state (<code>null</code> not permitted).\n     * @param plotState  the plot state (<code>null</code> permitted).\n     *\n     * @return Information about the axis.\n     */\n    protected AxisState drawLabel(String label, Graphics2D g2, \n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n            AxisState state, PlotRenderingInfo plotState);\n    /**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a \n     * printer).\n     *\n     * @param g2  the graphics device (<code>null</code> not permitted).\n     * @param cursor  the cursor location (determines where to draw the axis).\n     * @param plotArea  the area within which the axes and plot should be drawn.\n     * @param dataArea  the area within which the data should be drawn.\n     * @param edge  the axis location (<code>null</code> not permitted).\n     * @param plotState  collects information about the plot \n     *                   (<code>null</code> permitted).\n     * \n     * @return The axis state (never <code>null</code>).\n     */\n    public abstract AxisState draw(Graphics2D g2, \n                                   double cursor,\n                                   Rectangle2D plotArea, \n                                   Rectangle2D dataArea,\n                                   RectangleEdge edge,\n                                   PlotRenderingInfo plotState);\n\n    /**\n     * Calculates the positions of the ticks for the axis, storing the results\n     * in the tick list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the edge on which the axis is located.\n     * \n     * @return The list of ticks.\n     */\n    public abstract List refreshTicks(Graphics2D g2, \n                                      AxisState state,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge);\n\n    /**\n     * Registers an object for notification of changes to the axis.\n     *\n     * @param listener  the object that is being registered.\n     * \n     * @see #removeChangeListener(AxisChangeListener)\n     */\n    public void addChangeListener(AxisChangeListener listener);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private static JFreeChart createAreaChart() {\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n        return ChartFactory.createAreaChart(\"Area Chart\", \"Domain\", \"Range\",\n                dataset, PlotOrientation.HORIZONTAL, true, true, true);\n\n    }\n    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Represents a sequence of zero or more data items in the form (period, value)\n * where 'period' is some instance of a subclass of {@link RegularTimePeriod}.\n * The time series will ensure that (a) all data items have the same type of\n * period (for example, {@link Day}) and (b) that each period appears at\n * most one time in the series.\n */\npublic class TimeSeries extends Series implements Cloneable, Serializable {\n    private static final long serialVersionUID = -5032960206869675528L;\n    private String domain;\n    private String range;\n    private int maximumItemCount;\n    private long maximumItemAge;\n    private double minY;\n    private double maxY;\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException;\n    /**\n     * Returns the largest y-value in the series, ignoring any Double.NaN\n     * values.  This method returns Double.NaN if there is no largest y-value\n     * (for example, when the series is empty).\n     *\n     * @return The largest y-value.\n     *\n     * @see #getMinY()\n     *\n     * @since 1.0.14\n     */\n    public double getMaxY();\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, double value, boolean notify);\n    /**\n     * Returns the smallest y-value in the series, ignoring any null and\n     * Double.NaN values.  This method returns Double.NaN if there is no\n     * smallest y-value (for example, when the series is empty).\n     *\n     * @return The smallest y-value.\n     *\n     * @see #getMaxY()\n     *\n     * @since 1.0.14\n     */\n    public double getMinY();\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException;\n    /**\n     * Adds a new data item to the series and sends\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void add(RegularTimePeriod period, Number value);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     */\n    public void add(RegularTimePeriod period, double value);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, Number value, boolean notify);\n    /**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\n     *              permitted).\n     */\n    public void add(TimeSeriesDataItem item);\n    /**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\n     *              permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(TimeSeriesDataItem item, boolean notify);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Represents a sequence of zero or more data items in the form (period, value)\n * where 'period' is some instance of a subclass of {@link RegularTimePeriod}.\n * The time series will ensure that (a) all data items have the same type of\n * period (for example, {@link Day}) and (b) that each period appears at\n * most one time in the series.\n */\npublic class TimeSeries extends Series implements Cloneable, Serializable {\n    private static final long serialVersionUID = -5032960206869675528L;\n    private String domain;\n    private String range;\n    private int maximumItemCount;\n    private long maximumItemAge;\n    private double minY;\n    private double maxY;\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException;\n    /**\n     * Returns the largest y-value in the series, ignoring any Double.NaN\n     * values.  This method returns Double.NaN if there is no largest y-value\n     * (for example, when the series is empty).\n     *\n     * @return The largest y-value.\n     *\n     * @see #getMinY()\n     *\n     * @since 1.0.14\n     */\n    public double getMaxY();\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, double value, boolean notify);\n    /**\n     * Returns the smallest y-value in the series, ignoring any null and\n     * Double.NaN values.  This method returns Double.NaN if there is no\n     * smallest y-value (for example, when the series is empty).\n     *\n     * @return The smallest y-value.\n     *\n     * @see #getMaxY()\n     *\n     * @since 1.0.14\n     */\n    public double getMinY();\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException;\n    /**\n     * Adds a new data item to the series and sends\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void add(RegularTimePeriod period, Number value);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     */\n    public void add(RegularTimePeriod period, double value);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, Number value, boolean notify);\n    /**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\n     *              permitted).\n     */\n    public void add(TimeSeriesDataItem item);\n    /**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\n     *              permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(TimeSeriesDataItem item, boolean notify);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class TimeSeriesTests extends TestCase implements SeriesChangeListener {\n    public void testCreateCopy3() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"S1\");\n        s1.add(new Year(2009), 100.0);\n        s1.add(new Year(2010), 101.0);\n        s1.add(new Year(2011), 102.0);\n        assertEquals(100.0, s1.getMinY(), EPSILON);\n        assertEquals(102.0, s1.getMaxY(), EPSILON);\n\n        TimeSeries s2 = s1.createCopy(0, 1);\n        assertEquals(100.0, s2.getMinY(), EPSILON);\n        assertEquals(101.0, s2.getMaxY(), EPSILON);\n\n        TimeSeries s3 = s1.createCopy(1, 2);\n        assertEquals(101.0, s3.getMinY(), EPSILON);\n        assertEquals(102.0, s3.getMaxY(), EPSILON);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A general class for plotting data in the form of (x, y) pairs.  This plot can\n * use data from any class that implements the {@link XYDataset} interface.\n * <P>\n * <code>XYPlot</code> makes use of an {@link XYItemRenderer} to draw each point\n * on the plot.  By using different renderers, various chart types can be\n * produced.\n * <p>\n * The {@link org.jfree.chart.ChartFactory} class contains static methods for\n * creating pre-configured charts.\n */\npublic class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n        Selectable, Zoomable, RendererChangeListener, Cloneable,\n        PublicCloneable, Serializable {\n    private static final long serialVersionUID = 7044148245716569264L;\n    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;\n    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;\n    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;\n    private PlotOrientation orientation;\n    private RectangleInsets axisOffset;\n    private ObjectList domainAxes;\n    private ObjectList domainAxisLocations;\n    private ObjectList rangeAxes;\n    private ObjectList rangeAxisLocations;\n    private ObjectList datasets;\n    private ObjectList renderers;\n    private Map datasetToDomainAxesMap;\n    private Map datasetToRangeAxesMap;\n    private transient Point2D quadrantOrigin = new Point2D.Double(0.0, 0.0);\n    private boolean domainGridlinesVisible;\n    private transient Stroke domainGridlineStroke;\n    private transient Paint domainGridlinePaint;\n    private boolean rangeGridlinesVisible;\n    private transient Stroke rangeGridlineStroke;\n    private transient Paint rangeGridlinePaint;\n    private boolean domainMinorGridlinesVisible;\n    private transient Stroke domainMinorGridlineStroke;\n    private transient Paint domainMinorGridlinePaint;\n    private boolean rangeMinorGridlinesVisible;\n    private transient Stroke rangeMinorGridlineStroke;\n    private transient Paint rangeMinorGridlinePaint;\n    private boolean domainZeroBaselineVisible;\n    private transient Stroke domainZeroBaselineStroke;\n    private transient Paint domainZeroBaselinePaint;\n    private boolean rangeZeroBaselineVisible;\n    private transient Stroke rangeZeroBaselineStroke;\n    private transient Paint rangeZeroBaselinePaint;\n    private boolean domainCrosshairVisible;\n    private double domainCrosshairValue;\n    private transient Stroke domainCrosshairStroke;\n    private transient Paint domainCrosshairPaint;\n    private boolean domainCrosshairLockedOnData = true;\n    private boolean rangeCrosshairVisible;\n    private double rangeCrosshairValue;\n    private transient Stroke rangeCrosshairStroke;\n    private transient Paint rangeCrosshairPaint;\n    private boolean rangeCrosshairLockedOnData = true;\n    private Map foregroundDomainMarkers;\n    private Map backgroundDomainMarkers;\n    private Map foregroundRangeMarkers;\n    private Map backgroundRangeMarkers;\n    private List annotations;\n    private transient Paint domainTickBandPaint;\n    private transient Paint rangeTickBandPaint;\n    private AxisSpace fixedDomainAxisSpace;\n    private AxisSpace fixedRangeAxisSpace;\n    private int weight;\n    private LegendItemCollection fixedLegendItems;\n    private boolean domainPannable;\n    private boolean rangePannable;\n    /**\n     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param axis  the axis (<code>null</code> permitted).\n     *\n     * @see #getRangeAxis()\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n    public void setRangeAxis(ValueAxis axis);\n    /**\n     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis (<code>null</code> permitted).\n     *\n     * @see #getRangeAxis(int)\n     */\n    public void setRangeAxis(int index, ValueAxis axis);\n    /**\n     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getRangeAxis(int)\n     */\n    public void setRangeAxis(int index, ValueAxis axis, boolean notify);\n    /**\n     * Returns the range for the specified axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The range.\n     */\n    public Range getDataRange(ValueAxis axis);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A general class for plotting data in the form of (x, y) pairs.  This plot can\n * use data from any class that implements the {@link XYDataset} interface.\n * <P>\n * <code>XYPlot</code> makes use of an {@link XYItemRenderer} to draw each point\n * on the plot.  By using different renderers, various chart types can be\n * produced.\n * <p>\n * The {@link org.jfree.chart.ChartFactory} class contains static methods for\n * creating pre-configured charts.\n */\npublic class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n        Selectable, Zoomable, RendererChangeListener, Cloneable,\n        PublicCloneable, Serializable {\n    private static final long serialVersionUID = 7044148245716569264L;\n    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;\n    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;\n    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;\n    private PlotOrientation orientation;\n    private RectangleInsets axisOffset;\n    private ObjectList domainAxes;\n    private ObjectList domainAxisLocations;\n    private ObjectList rangeAxes;\n    private ObjectList rangeAxisLocations;\n    private ObjectList datasets;\n    private ObjectList renderers;\n    private Map datasetToDomainAxesMap;\n    private Map datasetToRangeAxesMap;\n    private transient Point2D quadrantOrigin = new Point2D.Double(0.0, 0.0);\n    private boolean domainGridlinesVisible;\n    private transient Stroke domainGridlineStroke;\n    private transient Paint domainGridlinePaint;\n    private boolean rangeGridlinesVisible;\n    private transient Stroke rangeGridlineStroke;\n    private transient Paint rangeGridlinePaint;\n    private boolean domainMinorGridlinesVisible;\n    private transient Stroke domainMinorGridlineStroke;\n    private transient Paint domainMinorGridlinePaint;\n    private boolean rangeMinorGridlinesVisible;\n    private transient Stroke rangeMinorGridlineStroke;\n    private transient Paint rangeMinorGridlinePaint;\n    private boolean domainZeroBaselineVisible;\n    private transient Stroke domainZeroBaselineStroke;\n    private transient Paint domainZeroBaselinePaint;\n    private boolean rangeZeroBaselineVisible;\n    private transient Stroke rangeZeroBaselineStroke;\n    private transient Paint rangeZeroBaselinePaint;\n    private boolean domainCrosshairVisible;\n    private double domainCrosshairValue;\n    private transient Stroke domainCrosshairStroke;\n    private transient Paint domainCrosshairPaint;\n    private boolean domainCrosshairLockedOnData = true;\n    private boolean rangeCrosshairVisible;\n    private double rangeCrosshairValue;\n    private transient Stroke rangeCrosshairStroke;\n    private transient Paint rangeCrosshairPaint;\n    private boolean rangeCrosshairLockedOnData = true;\n    private Map foregroundDomainMarkers;\n    private Map backgroundDomainMarkers;\n    private Map foregroundRangeMarkers;\n    private Map backgroundRangeMarkers;\n    private List annotations;\n    private transient Paint domainTickBandPaint;\n    private transient Paint rangeTickBandPaint;\n    private AxisSpace fixedDomainAxisSpace;\n    private AxisSpace fixedRangeAxisSpace;\n    private int weight;\n    private LegendItemCollection fixedLegendItems;\n    private boolean domainPannable;\n    private boolean rangePannable;\n    /**\n     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param axis  the axis (<code>null</code> permitted).\n     *\n     * @see #getRangeAxis()\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n    public void setRangeAxis(ValueAxis axis);\n    /**\n     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis (<code>null</code> permitted).\n     *\n     * @see #getRangeAxis(int)\n     */\n    public void setRangeAxis(int index, ValueAxis axis);\n    /**\n     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getRangeAxis(int)\n     */\n    public void setRangeAxis(int index, ValueAxis axis, boolean notify);\n    /**\n     * Returns the range for the specified axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The range.\n     */\n    public Range getDataRange(ValueAxis axis);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class LogAxisTests extends TestCase {\n    public void testXYAutoRange1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Represents a sequence of zero or more data items in the form (x, y).  By\n * default, items in the series will be sorted into ascending order by x-value,\n * and duplicate x-values are permitted.  Both the sorting and duplicate\n * defaults can be changed in the constructor.  Y-values can be\n * <code>null</code> to represent missing values.\n */\npublic class XYSeries extends Series implements Cloneable, Serializable {\n    private int maximumItemCount = Integer.MAX_VALUE;\n    private boolean autoSort;\n    private boolean allowDuplicateXValues;\n    /**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     */\n    public int getItemCount();\n    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y);\n    /**\n     * Returns the y-value at the specified index.\n     *\n     * @param index  the index (zero-based).\n     *\n     * @return The y-value (possibly <code>null</code>).\n     */\n    public Number getY(int index);\n    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value.\n     * @param y  the y-value.\n     *\n     * @return The item that was overwritten, if any.\n     *\n     * @since 1.0.10\n     */\n    public XYDataItem addOrUpdate(double x, double y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Represents a sequence of zero or more data items in the form (x, y).  By\n * default, items in the series will be sorted into ascending order by x-value,\n * and duplicate x-values are permitted.  Both the sorting and duplicate\n * defaults can be changed in the constructor.  Y-values can be\n * <code>null</code> to represent missing values.\n */\npublic class XYSeries extends Series implements Cloneable, Serializable {\n    private int maximumItemCount = Integer.MAX_VALUE;\n    private boolean autoSort;\n    private boolean allowDuplicateXValues;\n    /**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     */\n    public int getItemCount();\n    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y);\n    /**\n     * Returns the y-value at the specified index.\n     *\n     * @param index  the index (zero-based).\n     *\n     * @return The y-value (possibly <code>null</code>).\n     */\n    public Number getY(int index);\n    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value.\n     * @param y  the y-value.\n     *\n     * @return The item that was overwritten, if any.\n     *\n     * @since 1.0.10\n     */\n    public XYDataItem addOrUpdate(double x, double y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class XYSeriesTests extends TestCase {\n    public void testBug1955483() {\n        XYSeries series = new XYSeries(\"Series\", true, true);\n        series.addOrUpdate(1.0, 1.0);\n        series.addOrUpdate(1.0, 2.0);\n        assertEquals(new Double(1.0), series.getY(0));\n        assertEquals(new Double(2.0), series.getY(1));\n        assertEquals(2, series.getItemCount());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A table of {@link Shape} objects.\n */\npublic class ShapeList extends AbstractObjectList {\n    /**\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public boolean equals(Object obj);\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n    private void readObject(ObjectInputStream stream) throws IOException,\n            ClassNotFoundException;\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n    private void writeObject(ObjectOutputStream stream) throws IOException;\n    /**\n     * Sets the {@link Shape} for an item in the list.  The list is expanded \n\t * if necessary.\n     *\n     * @param index  the index (zero-based).\n     * @param shape  the {@link Shape}.\n     */\n    public void setShape(int index, Shape shape);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A table of {@link Shape} objects.\n */\npublic class ShapeList extends AbstractObjectList {\n    /**\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public boolean equals(Object obj);\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n    private void readObject(ObjectInputStream stream) throws IOException,\n            ClassNotFoundException;\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n    private void writeObject(ObjectOutputStream stream) throws IOException;\n    /**\n     * Sets the {@link Shape} for an item in the list.  The list is expanded \n\t * if necessary.\n     *\n     * @param index  the index (zero-based).\n     * @param shape  the {@link Shape}.\n     */\n    public void setShape(int index, Shape shape);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class ShapeListTests extends TestCase {\n    public void testSerialization() {\n\n        ShapeList l1 = new ShapeList();\n        l1.setShape(0, new Rectangle(1, 2, 3, 4));\n        l1.setShape(1, new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        l1.setShape(2, null);\n\n        ShapeList l2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(l1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n            \t\tbuffer.toByteArray()));\n            l2 = (ShapeList) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(l1, l2);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A structure containing zero, one or many {@link TimePeriodValue} instances.  \n * The time periods can overlap, and are maintained in the order that they are \n * added to the collection.\n * <p>\n * This is similar to the {@link TimeSeries} class, except that the time \n * periods can have irregular lengths.\n */\npublic class TimePeriodValues extends Series implements Serializable {\n    private String domain;\n    private String range;\n    private List data;\n    private int minStartIndex = -1;\n    private int maxStartIndex = -1;\n    private int minMiddleIndex = -1;\n    private int maxMiddleIndex = -1;\n    private int minEndIndex = -1;\n    private int maxEndIndex = -1;\n    /**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the item (<code>null</code> not permitted).\n     */\n    public void add(TimePeriodValue item);\n    /**\n     * Returns the index of the time period with the maximum middle \n     * milliseconds.\n     * \n     * @return The index.\n     */\n    public int getMaxMiddleIndex();\n    /**\n     * Update the index values for the maximum and minimum bounds.\n     * \n     * @param period  the time period.\n     * @param index  the index of the time period.\n     */\n    private void updateBounds(TimePeriod period, int index);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void add(TimePeriod period, Number value);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     * \n     * @see #add(TimePeriod, Number)\n     */\n    public void add(TimePeriod period, double value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A structure containing zero, one or many {@link TimePeriodValue} instances.  \n * The time periods can overlap, and are maintained in the order that they are \n * added to the collection.\n * <p>\n * This is similar to the {@link TimeSeries} class, except that the time \n * periods can have irregular lengths.\n */\npublic class TimePeriodValues extends Series implements Serializable {\n    private String domain;\n    private String range;\n    private List data;\n    private int minStartIndex = -1;\n    private int maxStartIndex = -1;\n    private int minMiddleIndex = -1;\n    private int maxMiddleIndex = -1;\n    private int minEndIndex = -1;\n    private int maxEndIndex = -1;\n    /**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the item (<code>null</code> not permitted).\n     */\n    public void add(TimePeriodValue item);\n    /**\n     * Returns the index of the time period with the maximum middle \n     * milliseconds.\n     * \n     * @return The index.\n     */\n    public int getMaxMiddleIndex();\n    /**\n     * Update the index values for the maximum and minimum bounds.\n     * \n     * @param period  the time period.\n     * @param index  the index of the time period.\n     */\n    private void updateBounds(TimePeriod period, int index);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void add(TimePeriod period, Number value);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     * \n     * @see #add(TimePeriod, Number)\n     */\n    public void add(TimePeriod period, double value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class TimePeriodValuesTests extends TestCase {\n    public void testGetMaxMiddleIndex() {\n        TimePeriodValues s = new TimePeriodValues(\"Test\");\n        assertEquals(-1, s.getMaxMiddleIndex());\n        s.add(new SimpleTimePeriod(100L, 200L), 1.0);\n        assertEquals(0, s.getMaxMiddleIndex());\n        s.add(new SimpleTimePeriod(300L, 400L), 2.0);\n        assertEquals(1, s.getMaxMiddleIndex());\n        s.add(new SimpleTimePeriod(0L, 50L), 3.0);\n        assertEquals(1, s.getMaxMiddleIndex());\n        s.add(new SimpleTimePeriod(150L, 200L), 4.0);\n        assertEquals(1, s.getMaxMiddleIndex());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A calendar week.  All years are considered to have 53 weeks, numbered from 1\n * to 53, although in many cases the 53rd week is empty.  Most of the time, the\n * 1st week of the year *begins* in the previous calendar year, but it always\n * finishes in the current year (this behaviour matches the workings of the\n * <code>GregorianCalendar</code> class).\n * <P>\n * This class is immutable, which is a requirement for all\n * {@link RegularTimePeriod} subclasses.\n */\npublic class Week extends RegularTimePeriod implements Serializable {\n    private static final long serialVersionUID = 1856387786939865061L;\n    public static final int FIRST_WEEK_IN_YEAR = 1;\n    public static final int LAST_WEEK_IN_YEAR = 53;\n    private short year;\n    private byte week;\n    private long firstMillisecond;\n    private long lastMillisecond;\n    /**\n     * Returns the year in which the week falls.\n     *\n     * @return The year (never <code>null</code>).\n     */\n    public Year getYear();\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A calendar week.  All years are considered to have 53 weeks, numbered from 1\n * to 53, although in many cases the 53rd week is empty.  Most of the time, the\n * 1st week of the year *begins* in the previous calendar year, but it always\n * finishes in the current year (this behaviour matches the workings of the\n * <code>GregorianCalendar</code> class).\n * <P>\n * This class is immutable, which is a requirement for all\n * {@link RegularTimePeriod} subclasses.\n */\npublic class Week extends RegularTimePeriod implements Serializable {\n    private static final long serialVersionUID = 1856387786939865061L;\n    public static final int FIRST_WEEK_IN_YEAR = 1;\n    public static final int LAST_WEEK_IN_YEAR = 53;\n    private short year;\n    private byte week;\n    private long firstMillisecond;\n    private long lastMillisecond;\n    /**\n     * Returns the year in which the week falls.\n     *\n     * @return The year (never <code>null</code>).\n     */\n    public Year getYear();\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class WeekTests extends TestCase {\n    public void testConstructor() {\n        Locale savedLocale = Locale.getDefault();\n        TimeZone savedZone = TimeZone.getDefault();\n        Locale.setDefault(new Locale(\"da\", \"DK\"));\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n        GregorianCalendar cal = (GregorianCalendar) Calendar.getInstance(\n                TimeZone.getDefault(), Locale.getDefault());\n\n        // first day of week is monday\n        assertEquals(Calendar.MONDAY, cal.getFirstDayOfWeek());\n        cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        Date t = cal.getTime();\n        Week w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n        assertEquals(34, w.getWeek());\n\n        Locale.setDefault(Locale.US);\n        TimeZone.setDefault(TimeZone.getTimeZone(\"US/Detroit\"));\n        cal = (GregorianCalendar) Calendar.getInstance(TimeZone.getDefault());\n        // first day of week is Sunday\n        assertEquals(Calendar.SUNDAY, cal.getFirstDayOfWeek());\n        cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n\n        t = cal.getTime();\n        w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n        assertEquals(35, w.getWeek());\n        w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"),\n                new Locale(\"da\", \"DK\"));\n        assertEquals(34, w.getWeek());\n\n        Locale.setDefault(savedLocale);\n        TimeZone.setDefault(savedZone);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Represents a sequence of zero or more data items in the form (period, value).\n */\npublic class TimeSeries extends Series implements Cloneable, Serializable {\n    private static final long serialVersionUID = -5032960206869675528L;\n    private String domain;\n    private String range;\n    private int maximumItemCount;\n    private long maximumItemAge;\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, double value, boolean notify);\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException;\n    /**\n     * Adds a new data item to the series and sends\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void add(RegularTimePeriod period, Number value);\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException;\n    /**\n     * Adds a data item to the series and sends a\n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\n     *              permitted).\n     */\n    public void add(TimeSeriesDataItem item);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     */\n    public void add(RegularTimePeriod period, double value);\n    /**\n     * Adds a new data item to the series and sends\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, Number value, boolean notify);\n    /**\n     * Adds a data item to the series and sends a\n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\n     *              permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(TimeSeriesDataItem item, boolean notify);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Represents a sequence of zero or more data items in the form (period, value).\n */\npublic class TimeSeries extends Series implements Cloneable, Serializable {\n    private static final long serialVersionUID = -5032960206869675528L;\n    private String domain;\n    private String range;\n    private int maximumItemCount;\n    private long maximumItemAge;\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, double value, boolean notify);\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException;\n    /**\n     * Adds a new data item to the series and sends\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void add(RegularTimePeriod period, Number value);\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException;\n    /**\n     * Adds a data item to the series and sends a\n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\n     *              permitted).\n     */\n    public void add(TimeSeriesDataItem item);\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     */\n    public void add(RegularTimePeriod period, double value);\n    /**\n     * Adds a new data item to the series and sends\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, Number value, boolean notify);\n    /**\n     * Adds a data item to the series and sends a\n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not\n     *              permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(TimeSeriesDataItem item, boolean notify);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class TimeSeriesTests extends TestCase implements SeriesChangeListener {\n    public void testBug1864222() {\n        TimeSeries s = new TimeSeries(\"S\");\n        s.add(new Day(19, 8, 2005), 1);\n        s.add(new Day(31, 1, 2006), 1);\n        boolean pass = true;\n        try {\n            s.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n        }\n        catch (CloneNotSupportedException e) {\n            pass = false;\n        }\n        assertTrue(pass);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\npublic class CommandLine {\n    private List args = new LinkedList();\n    private Map options = new HashMap();\n    private Map names = new HashMap();\n//    private Set allOptions = new HashSet();\n    private Map hashcodeMap = new HashMap();\n    /**\n     * Returns an iterator over the Option members of CommandLine.\n     *\n     * @return an <code>Iterator</code> over the processed {@link Option} \n     * members of this {@link CommandLine}\n     */\n    public Iterator iterator();\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(char opt, String defaultValue);\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt string name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(String opt);\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the character name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(char opt);\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(String opt);\n    /**\n     * Add an option to the command line.  The values of \n     * the option are stored.\n     *\n     * @param opt the processed option\n     */\n    void addOption(Option opt);\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt character name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(char opt);\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt Short name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(String opt);\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(String opt, String defaultValue);\n    /**\n     * Add left-over unrecognized option/argument.\n     *\n     * @param arg the unrecognised option/argument.\n     */\n    void addArg(String arg);\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of this <code>Option</code>\n     */\n    public Object getOptionObject(String opt);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\npublic class CommandLine {\n    private List args = new LinkedList();\n    private Map options = new HashMap();\n    private Map names = new HashMap();\n//    private Set allOptions = new HashSet();\n    private Map hashcodeMap = new HashMap();\n    /**\n     * Returns an iterator over the Option members of CommandLine.\n     *\n     * @return an <code>Iterator</code> over the processed {@link Option} \n     * members of this {@link CommandLine}\n     */\n    public Iterator iterator();\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(char opt, String defaultValue);\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt string name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(String opt);\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the character name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(char opt);\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(String opt);\n    /**\n     * Add an option to the command line.  The values of \n     * the option are stored.\n     *\n     * @param opt the processed option\n     */\n    void addOption(Option opt);\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt character name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(char opt);\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt Short name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(String opt);\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(String opt, String defaultValue);\n    /**\n     * Add left-over unrecognized option/argument.\n     *\n     * @param arg the unrecognised option/argument.\n     */\n    void addArg(String arg);\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of this <code>Option</code>\n     */\n    public Object getOptionObject(String opt);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    extends TestCase\n{\n    public void testCLI13()\n        throws ParseException\n    {\n        final String debugOpt = \"debug\";\n        Option debug = OptionBuilder\n            .withArgName( debugOpt )\n            .withDescription( \"turn on debugging\" )\n            .withLongOpt( debugOpt )\n            .hasArg()\n            .create( 'd' );\n        Options options = new Options();\n        options.addOption( debug );\n        CommandLine commandLine = new PosixParser().parse( options, new String[]{\"-d\", \"true\"} );\n\n        assertEquals(\"true\", commandLine.getOptionValue( debugOpt ));\n        assertEquals(\"true\", commandLine.getOptionValue( 'd' ));\n        assertTrue(commandLine.hasOption( 'd'));\n        assertTrue(commandLine.hasOption( debugOpt));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p><code>Parser</code> creates {@link CommandLine}s.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic abstract class Parser implements CommandLineParser {\n    private Options options;\n    private List requiredOptions;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties)\n        throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption stop parsing the arguments when the first\n     * non option is encountered.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException;\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException;\n    /** list of required options strings */\n    private List requiredOptions;\n\n    protected void setOptions(final Options options);\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @param stopAtNonOption specifies whether to stop \n     * interpreting the arguments when a non option has \n     * been encountered and to add them to the CommandLines\n     * args list.\n     *\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             boolean stopAtNonOption)\n        throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p><code>Parser</code> creates {@link CommandLine}s.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic abstract class Parser implements CommandLineParser {\n    private Options options;\n    private List requiredOptions;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties)\n        throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption stop parsing the arguments when the first\n     * non option is encountered.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException;\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException;\n    /** list of required options strings */\n    private List requiredOptions;\n\n    protected void setOptions(final Options options);\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @param stopAtNonOption specifies whether to stop \n     * interpreting the arguments when a non option has \n     * been encountered and to add them to the CommandLines\n     * args list.\n     *\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             boolean stopAtNonOption)\n        throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testReuseOptionsTwice() throws Exception\n    {\n        Options opts = new Options();\n\t\topts.addOption(OptionBuilder.isRequired().create('v'));\n\n\t\tGnuParser parser = new GnuParser();\n\n        // first parsing\n        parser.parse(opts, new String[] { \"-v\" });\n\n        try\n        {\n            // second parsing, with the same Options instance and an invalid command line\n            parser.parse(opts, new String[0]);\n            fail(\"MissingOptionException not thrown\");\n        }\n        catch (MissingOptionException e)\n        {\n            // expected\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n */\npublic class HelpFormatter {\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * <p>Print the cmdLineSyntax to the specified writer, using the\n     * specified width.</p>\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters per line for the usage statement.\n     * @param cmdLineSyntax The usage statement.\n     */\n    public void printUsage(PrintWriter pw, int width, String cmdLineSyntax);\n    /**\n     * Sets the 'argName'.\n     *\n     * @param name the new value of 'argName'\n     */\n    public void setArgName(String name);\n    /**\n     * <p>Prints the usage statement for the specified application.</p>\n     *\n     * @param pw The PrintWriter to print the usage statement \n     * @param width The number of characters to display per line\n     * @param app The application name\n     * @param options The command line Options\n     *\n     */\n    public void printUsage(PrintWriter pw, int width, String app, \n                           Options options);\n    /**\n     * Appends the usage clause for an Option to a StringBuffer.  \n     *\n     * @param buff the StringBuffer to append to\n     * @param option the Option to append\n     * @param required whether the Option is required or not\n     */\n    private static void appendOption(final StringBuffer buff, \n                                     final Option option, \n                                     final boolean required);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n */\npublic class HelpFormatter {\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * <p>Print the cmdLineSyntax to the specified writer, using the\n     * specified width.</p>\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters per line for the usage statement.\n     * @param cmdLineSyntax The usage statement.\n     */\n    public void printUsage(PrintWriter pw, int width, String cmdLineSyntax);\n    /**\n     * Sets the 'argName'.\n     *\n     * @param name the new value of 'argName'\n     */\n    public void setArgName(String name);\n    /**\n     * <p>Prints the usage statement for the specified application.</p>\n     *\n     * @param pw The PrintWriter to print the usage statement \n     * @param width The number of characters to display per line\n     * @param app The application name\n     * @param options The command line Options\n     *\n     */\n    public void printUsage(PrintWriter pw, int width, String app, \n                           Options options);\n    /**\n     * Appends the usage clause for an Option to a StringBuffer.  \n     *\n     * @param buff the StringBuffer to append to\n     * @param option the Option to append\n     * @param required whether the Option is required or not\n     */\n    private static void appendOption(final StringBuffer buff, \n                                     final Option option, \n                                     final boolean required);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Slawek Zachcial\n * @author John Keyes ( john at integralsource.com )\n * @author brianegge\n **/\npublic class HelpFormatterTest extends TestCase\n{\n    public void testPrintOptionWithEmptyArgNameUsage() {\n        Option option = new Option(\"f\", true, null);\n        option.setArgName(\"\");\n        option.setRequired(true);\n\n        Options options = new Options();\n        options.addOption(option);\n\n        StringWriter out = new StringWriter();\n\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n\n        assertEquals(\"usage: app -f\" + EOL, out.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The class GnuParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class GnuParser extends Parser {\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The class GnuParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class GnuParser extends Parser {\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testShortWithEqual() throws Exception\n    {\n        String[] args = new String[] { \"-f=bar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n\n        Parser parser = new GnuParser();\n        CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\npublic class WriteableCommandLineImpl\n    extends CommandLineImpl implements WriteableCommandLine {\n    private final Properties properties = new Properties();\n    private final List options = new ArrayList();\n    private final Map nameToOption = new HashMap();\n    private final Map values = new HashMap();\n    private final Map switches = new HashMap();\n    private final Map defaultValues = new HashMap();\n    private final Map defaultSwitches = new HashMap();\n    private final List normalised;\n    private final Set prefixes;\n    public List getValues(final Option option,\n                          final List defaultValues);\n}\n/**\n * An implementation of an Argument.\n */\npublic class ArgumentImpl\n    extends OptionImpl implements Argument {\n    private static final char NUL = '\\0';\n    public static final char DEFAULT_INITIAL_SEPARATOR = NUL;\n    public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL;\n    public static final String DEFAULT_CONSUME_REMAINING = \"--\";\n    private final String name;\n    private final String description;\n    private final int minimum;\n    private final int maximum;\n    private final char initialSeparator;\n    private final char subsequentSeparator;\n    private final boolean subsequentSplit;\n    private final Validator validator;\n    private final String consumeRemaining;\n    private final List defaultValues;\n    private final ResourceHelper resources = ResourceHelper.getResourceHelper();\n    public void processValues(final WriteableCommandLine commandLine,\n                              final ListIterator arguments,\n                              final Option option)\n        throws OptionException;\n}\n/**\n * A CommandLine that detected values and options can be written to.\n */\npublic interface WriteableCommandLine extends CommandLine {\n    /**\n     * Adds a value to an Option in the CommandLine.\n     * @param option the Option to add to\n     * @param value the value to add\n     */\n    void addValue(final Option option, final Object value);;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\npublic class WriteableCommandLineImpl\n    extends CommandLineImpl implements WriteableCommandLine {\n    private final Properties properties = new Properties();\n    private final List options = new ArrayList();\n    private final Map nameToOption = new HashMap();\n    private final Map values = new HashMap();\n    private final Map switches = new HashMap();\n    private final Map defaultValues = new HashMap();\n    private final Map defaultSwitches = new HashMap();\n    private final List normalised;\n    private final Set prefixes;\n    public List getValues(final Option option,\n                          final List defaultValues);\n}\n/**\n * An implementation of an Argument.\n */\npublic class ArgumentImpl\n    extends OptionImpl implements Argument {\n    private static final char NUL = '\\0';\n    public static final char DEFAULT_INITIAL_SEPARATOR = NUL;\n    public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL;\n    public static final String DEFAULT_CONSUME_REMAINING = \"--\";\n    private final String name;\n    private final String description;\n    private final int minimum;\n    private final int maximum;\n    private final char initialSeparator;\n    private final char subsequentSeparator;\n    private final boolean subsequentSplit;\n    private final Validator validator;\n    private final String consumeRemaining;\n    private final List defaultValues;\n    private final ResourceHelper resources = ResourceHelper.getResourceHelper();\n    public void processValues(final WriteableCommandLine commandLine,\n                              final ListIterator arguments,\n                              final Option option)\n        throws OptionException;\n}\n/**\n * A CommandLine that detected values and options can be written to.\n */\npublic interface WriteableCommandLine extends CommandLine {\n    /**\n     * Adds a value to an Option in the CommandLine.\n     * @param option the Option to add to\n     * @param value the value to add\n     */\n    void addValue(final Option option, final Object value);;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLoopingOptionLookAlike2() {\n        final ArgumentBuilder abuilder = new ArgumentBuilder();\n        final GroupBuilder gbuilder = new GroupBuilder();\n        final Argument inputfile_opt = abuilder.withName(\"input\").withMinimum(1).withMaximum(1).create();\n        final Argument outputfile_opt = abuilder.withName(\"output\").withMinimum(1).withMaximum(1).create();\n        final Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);\n        final Group options = gbuilder.withOption(targets).create();\n        final Parser parser = new Parser();\n        parser.setGroup(options);\n        try {\n            parser.parse(new String[] { \"testfile.txt\", \"testfile.txt\", \"testfile.txt\", \"testfile.txt\" });\n            fail(\"OptionException\");\n        } catch (OptionException e) {\n            assertEquals(\"Unexpected testfile.txt while processing \", e.getMessage());\n        }\n    }    \n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * An implementation of Group\n */\npublic class GroupImpl\n    extends OptionImpl implements Group {\n    private final String name;\n    private final String description;\n    private final List options;\n    private final int minimum;\n    private final int maximum;\n    private final List anonymous;\n    private final SortedMap optionMap;\n    private final Set prefixes;\n    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * An implementation of Group\n */\npublic class GroupImpl\n    extends OptionImpl implements Group {\n    private final String name;\n    private final String description;\n    private final List options;\n    private final int minimum;\n    private final int maximum;\n    private final List anonymous;\n    private final SortedMap optionMap;\n    private final Set prefixes;\n    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>\tpublic void testFileValidator() {\n\t\tfinal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n        final ArgumentBuilder abuilder = new ArgumentBuilder();\n        final GroupBuilder gbuilder = new GroupBuilder();\n        DefaultOption fileNameOption = obuilder.withShortName(\"f\")\n                .withLongName(\"file-name\").withRequired(true).withDescription(\n                        \"name of an existing file\").withArgument(\n                        abuilder.withName(\"file-name\").withValidator(\n                                FileValidator.getExistingFileInstance())\n                                .create()).create();\n        Group options = gbuilder.withName(\"options\").withOption(fileNameOption)\n                .create();\n        Parser parser = new Parser();\n        parser.setHelpTrigger(\"--help\");\n        parser.setGroup(options);\n\n        final String fileName = \"src/test/org/apache/commons/cli2/bug/BugCLI144Test.java\";\n        CommandLine cl = parser\n                .parseAndHelp(new String[] { \"--file-name\", fileName });\n        assertNotNull(cl);\n        assertEquals(\"Wrong file\", new File(fileName), cl.getValue(fileNameOption));\n\t}\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\npublic class WriteableCommandLineImpl\n    extends CommandLineImpl implements WriteableCommandLine {\n    private final Map optionToProperties = new HashMap();\n//    private final Properties properties = new Properties();\n    private final List options = new ArrayList();\n    private final Map nameToOption = new HashMap();\n    private final Map values = new HashMap();\n    private final Map switches = new HashMap();\n    private final Map defaultValues = new HashMap();\n    private final Map defaultSwitches = new HashMap();\n    private final List normalised;\n    private final Set prefixes;\n    public List getValues(final Option option,\n                          List defaultValues);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\npublic class WriteableCommandLineImpl\n    extends CommandLineImpl implements WriteableCommandLine {\n    private final Map optionToProperties = new HashMap();\n//    private final Properties properties = new Properties();\n    private final List options = new ArrayList();\n    private final Map nameToOption = new HashMap();\n    private final Map values = new HashMap();\n    private final Map switches = new HashMap();\n    private final Map defaultValues = new HashMap();\n    private final Map defaultSwitches = new HashMap();\n    private final List normalised;\n    private final Set prefixes;\n    public List getValues(final Option option,\n                          List defaultValues);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private Parser createDefaultValueParser(String[] defaults) {\n        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n        final ArgumentBuilder abuilder = new ArgumentBuilder();\n        final GroupBuilder gbuilder = new GroupBuilder();\n\n        DefaultOption bOption = obuilder.withShortName(\"b\")\n                .withLongName(\"b\")\n                .withArgument(abuilder.withName(\"b\")\n                        .withMinimum(0)\n                        .withMaximum(defaults.length)\n                        .withDefaults(Arrays.asList(defaults))\n                        .create())\n                .create();\n\n        Group options = gbuilder\n                .withName(\"options\")\n                .withOption(bOption)\n                .create();\n\n        Parser parser = new Parser();\n        parser.setHelpTrigger(\"--help\");\n        parser.setGroup(options);\n        return parser;\n    }\n    public void testSingleOptionSingleArgument() throws Exception {\n        Parser parser = createDefaultValueParser(new String[]{\"100\", \"1000\"});\n        String enteredValue1 = \"1\";\n        String[] args = new String[]{\"-b\", enteredValue1};\n        CommandLine cl = parser.parse(args);\n        CommandLine cmd = cl;\n        assertNotNull(cmd);\n        List b = cmd.getValues(\"-b\");\n        assertEquals(\"[\" + enteredValue1 + \", 1000]\", b + \"\");\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\npublic class WriteableCommandLineImpl\n    extends CommandLineImpl implements WriteableCommandLine {\n    private final Map optionToProperties = new HashMap();\n//    private final Properties properties = new Properties();\n    private final List options = new ArrayList();\n    private final Map nameToOption = new HashMap();\n    private final Map values = new HashMap();\n    private final Map switches = new HashMap();\n    private final Map defaultValues = new HashMap();\n    private final Map defaultSwitches = new HashMap();\n    private final List normalised;\n    private final Set prefixes;\n    public void addOption(Option option);\n    public boolean hasOption(final Option option);\n}\n/**\n * The super type of all options representing a particular element of the\n * command line interface.\n */\npublic interface Option {\n}\n/**\n * An implementation of Group\n */\npublic class GroupImpl\n    extends OptionImpl implements Group {\n    private final String name;\n    private final String description;\n    private final List options;\n    private final int minimum;\n    private final int maximum;\n    private final List anonymous;\n    private final SortedMap optionMap;\n    private final Set prefixes;\n    public boolean canProcess(final WriteableCommandLine commandLine,\n                              final String arg);\n}\n/**\n * A base implementation of Option providing limited ground work for further\n * Option implementations.\n */\npublic abstract class OptionImpl implements Option {\n    private final int id;\n    private final boolean required;\n    public boolean canProcess(final WriteableCommandLine commandLine,\n                              final ListIterator arguments);\n    public void defaults(final WriteableCommandLine commandLine);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\npublic class WriteableCommandLineImpl\n    extends CommandLineImpl implements WriteableCommandLine {\n    private final Map optionToProperties = new HashMap();\n//    private final Properties properties = new Properties();\n    private final List options = new ArrayList();\n    private final Map nameToOption = new HashMap();\n    private final Map values = new HashMap();\n    private final Map switches = new HashMap();\n    private final Map defaultValues = new HashMap();\n    private final Map defaultSwitches = new HashMap();\n    private final List normalised;\n    private final Set prefixes;\n    public void addOption(Option option);\n    public boolean hasOption(final Option option);\n}\n/**\n * The super type of all options representing a particular element of the\n * command line interface.\n */\npublic interface Option {\n}\n/**\n * An implementation of Group\n */\npublic class GroupImpl\n    extends OptionImpl implements Group {\n    private final String name;\n    private final String description;\n    private final List options;\n    private final int minimum;\n    private final int maximum;\n    private final List anonymous;\n    private final SortedMap optionMap;\n    private final Set prefixes;\n    public boolean canProcess(final WriteableCommandLine commandLine,\n                              final String arg);\n}\n/**\n * A base implementation of Option providing limited ground work for further\n * Option implementations.\n */\npublic abstract class OptionImpl implements Option {\n    private final int id;\n    private final boolean required;\n    public boolean canProcess(final WriteableCommandLine commandLine,\n                              final ListIterator arguments);\n    public void defaults(final WriteableCommandLine commandLine);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testMultipleChildOptions() throws OptionException {\n        CommandLine cl = parser.parse(new String[] { \"--child\", \"test\",\n                \"--sub\", \"anotherTest\" });\n        assertTrue(\"Child option not found\", cl.hasOption(childOption1));\n        assertEquals(\"Wrong value for option\", \"test\", cl .getValue(childOption1));\n        assertTrue(\"Sub option not found\", cl.hasOption(childOption2));\n        assertEquals(\"Wrong value for sub option\", \"anotherTest\", cl .getValue(childOption2));\n        assertTrue(\"Child group not found\", cl.hasOption(childGroup));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n    private List tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Option currentOption;\n    private Options options;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n    private List tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Option currentOption;\n    private Options options;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testStopBursting() throws Exception\n    {\n        String[] args = new String[] { \"-azc\" };\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n        assertFalse( \"Confirm -c is not set\", cl.hasOption(\"c\") );\n\n        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n        assertTrue(cl.getArgList().contains(\"zc\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n    private List tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Option currentOption;\n    private Options options;\n    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of \n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see \n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled \n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption);\n    /**\n     * <p>If an {@link Option} exists for <code>token</code> then\n     * set the current option and add the token to the processed \n     * list.</p>\n     *\n     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n     * is set then ignore the current token and add the remaining tokens\n     * to the processed tokens list directly.</p>\n     *\n     * @param token The current option token\n     * @param stopAtNonOption Specifies whether flattening should halt\n     * at the first non option.\n     */\n    private void processOptionToken(String token, boolean stopAtNonOption);\n    /**\n     * <p>If there is a current option and it can have an argument\n     * value then add the token to the processed tokens list and \n     * set the current option to null.</p>\n     *\n     * <p>If there is a current option and it can have argument\n     * values then add the token to the processed tokens list.</p>\n     *\n     * <p>If there is not a current option add the special token\n     * \"<b>--</b>\" and the current <code>value</code> to the processed\n     * tokens list.  The add all the remaining <code>argument</code>\n     * values to the processed tokens list.</p>\n     *\n     * @param value The current token\n     */\n    private void process(String value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n    private List tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Option currentOption;\n    private Options options;\n    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of \n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see \n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled \n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption);\n    /**\n     * <p>If an {@link Option} exists for <code>token</code> then\n     * set the current option and add the token to the processed \n     * list.</p>\n     *\n     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n     * is set then ignore the current token and add the remaining tokens\n     * to the processed tokens list directly.</p>\n     *\n     * @param token The current option token\n     * @param stopAtNonOption Specifies whether flattening should halt\n     * at the first non option.\n     */\n    private void processOptionToken(String token, boolean stopAtNonOption);\n    /**\n     * <p>If there is a current option and it can have an argument\n     * value then add the token to the processed tokens list and \n     * set the current option to null.</p>\n     *\n     * <p>If there is a current option and it can have argument\n     * values then add the token to the processed tokens list.</p>\n     *\n     * <p>If there is not a current option add the special token\n     * \"<b>--</b>\" and the current <code>value</code> to the processed\n     * tokens list.  The add all the remaining <code>argument</code>\n     * values to the processed tokens list.</p>\n     *\n     * @param value The current token\n     */\n    private void process(String value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testStop2() throws Exception\n    {\n        String[] args = new String[]{\"-z\",\n                                     \"-a\",\n                                     \"-btoast\"};\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\n        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n    private List tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Option currentOption;\n    private Options options;\n    /**\n     * <p>If an {@link Option} exists for <code>token</code> then\n     * set the current option and add the token to the processed \n     * list.</p>\n     *\n     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n     * is set then ignore the current token and add the remaining tokens\n     * to the processed tokens list directly.</p>\n     *\n     * @param token The current option token\n     * @param stopAtNonOption Specifies whether flattening should halt\n     * at the first non option.\n     */\n    private void processOptionToken(String token, boolean stopAtNonOption);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n    private List tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Option currentOption;\n    private Options options;\n    /**\n     * <p>If an {@link Option} exists for <code>token</code> then\n     * set the current option and add the token to the processed \n     * list.</p>\n     *\n     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n     * is set then ignore the current token and add the remaining tokens\n     * to the processed tokens list directly.</p>\n     *\n     * @param token The current option token\n     * @param stopAtNonOption Specifies whether flattening should halt\n     * at the first non option.\n     */\n    private void processOptionToken(String token, boolean stopAtNonOption);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testUnrecognizedOption2() throws Exception\n    {\n        String[] args = new String[] { \"-z\", \"-abtoast\", \"foo\", \"bar\" };\n\n        try\n        {\n            parser.parse(options, args);\n            fail(\"UnrecognizedOptionException wasn't thrown\");\n        }\n        catch (UnrecognizedOptionException e)\n        {\n            assertEquals(\"-z\", e.getOption());\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n    private ArrayList tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Option currentOption;\n    private Options options;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n    private ArrayList tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Option currentOption;\n    private Options options;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    extends TestCase\n{\n    private Options buildCommandLineOptions()\n    {\n        Option opt = OptionBuilder.withArgName( \"t\").hasArg().create('t');\n        Options options = new Options();\n        options.addOption( opt);\n        return options;\n    }\n    public void test() throws Exception\n    {\n        Options options = buildCommandLineOptions();\n        CommandLineParser parser = new PosixParser();\n        String[] args = new String[] {\"-t\", \"-something\" };\n        CommandLine commandLine;\n        commandLine = parser.parse( options, args );\n        assertEquals(\"-something\", commandLine.getOptionValue( 't'));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n    private List tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Option currentOption;\n    private Options options;\n    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of \n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see \n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled \n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n    private List tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Option currentOption;\n    private Options options;\n    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of \n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see \n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled \n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testStop3() throws Exception\n    {\n        String[] args = new String[]{\"--zop==1\",\n                                     \"-abtoast\",\n                                     \"--b=bar\"};\n\n        CommandLine cl = parser.parse(options, args, true);\n\n        assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\n        assertFalse(\"Confirm -b is not set\", cl.hasOption(\"b\"));\n        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\npublic class WriteableCommandLineImpl\n    extends CommandLineImpl implements WriteableCommandLine {\n    private final Map optionToProperties = new HashMap();\n//    private final Properties properties = new Properties();\n    private final List options = new ArrayList();\n    private final Map nameToOption = new HashMap();\n    private final Map values = new HashMap();\n    private final Map switches = new HashMap();\n    private final Map defaultValues = new HashMap();\n    private final Map defaultSwitches = new HashMap();\n    private final List normalised;\n    private final Set prefixes;\n    /**\n     * Tests whether the passed in trigger looks like an option. This\n     * implementation first checks whether the passed in string starts with a\n     * prefix that indicates an option. If this is the case, it is also checked\n     * whether an option of this name is known for the current option. (This can\n     * lead to reentrant invocations of this method, so care has to be taken\n     * about this.)\n     *\n     * @param trigger the command line element to test\n     * @return a flag whether this element seems to be an option\n     */\n    public boolean looksLikeOption(final String trigger);\n    public void addOption(Option option);\n    public Set getProperties();\n}\n/**\n * An implementation of Group\n */\npublic class GroupImpl\n    extends OptionImpl implements Group {\n    private final String name;\n    private final String description;\n    private final List options;\n    private final int minimum;\n    private final int maximum;\n    private final List anonymous;\n    private final SortedMap optionMap;\n    private final Set prefixes;\n    public void defaults(final WriteableCommandLine commandLine);\n}\n/**\n * A CommandLine that detected values and options can be written to.\n */\npublic interface WriteableCommandLine extends CommandLine {\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\npublic class WriteableCommandLineImpl\n    extends CommandLineImpl implements WriteableCommandLine {\n    private final Map optionToProperties = new HashMap();\n//    private final Properties properties = new Properties();\n    private final List options = new ArrayList();\n    private final Map nameToOption = new HashMap();\n    private final Map values = new HashMap();\n    private final Map switches = new HashMap();\n    private final Map defaultValues = new HashMap();\n    private final Map defaultSwitches = new HashMap();\n    private final List normalised;\n    private final Set prefixes;\n    /**\n     * Tests whether the passed in trigger looks like an option. This\n     * implementation first checks whether the passed in string starts with a\n     * prefix that indicates an option. If this is the case, it is also checked\n     * whether an option of this name is known for the current option. (This can\n     * lead to reentrant invocations of this method, so care has to be taken\n     * about this.)\n     *\n     * @param trigger the command line element to test\n     * @return a flag whether this element seems to be an option\n     */\n    public boolean looksLikeOption(final String trigger);\n    public void addOption(Option option);\n    public Set getProperties();\n}\n/**\n * An implementation of Group\n */\npublic class GroupImpl\n    extends OptionImpl implements Group {\n    private final String name;\n    private final String description;\n    private final List options;\n    private final int minimum;\n    private final int maximum;\n    private final List anonymous;\n    private final SortedMap optionMap;\n    private final Set prefixes;\n    public void defaults(final WriteableCommandLine commandLine);\n}\n/**\n * A CommandLine that detected values and options can be written to.\n */\npublic interface WriteableCommandLine extends CommandLine {\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testNegativeNumber() throws OptionException\n    {\n        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\n        final ArgumentBuilder aBuilder = new ArgumentBuilder();\n        final GroupBuilder gBuilder = new GroupBuilder();\n\n        final Argument numArg = aBuilder.withValidator(\n                NumberValidator.getNumberInstance()).withMinimum(1)\n                .withMaximum(1).create();\n        final Option numOpt = oBuilder.withLongName(\"num\").withArgument(numArg)\n                .create();\n        final Group options = gBuilder.withOption(numOpt).create();\n\n        final Parser parser = new Parser();\n        parser.setGroup(options);\n\n        CommandLine cl = parser.parse(new String[] {\n                \"--num\", \"-42\"\n        });\n        Number num = (Number) cl.getValue(numOpt);\n        assertEquals(\"Wrong option value\", -42, num.intValue());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class PosixParser extends Parser\n{\n    private List tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Options options;\n    /**\n     * Adds the remaining tokens to the processed tokens list.\n     *\n     * @param iter An iterator over the remaining tokens\n     */\n    private void gobble(Iterator iter);\n    /**\n     * <p>If an {@link Option} exists for <code>token</code> then\n     * add the token to the processed list.</p>\n     *\n     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n     * is set then add the remaining tokens to the processed tokens list\n     * directly.</p>\n     *\n     * @param token The current option token\n     * @param stopAtNonOption Specifies whether flattening should halt\n     * at the first non option.\n     */\n    private void processOptionToken(String token, boolean stopAtNonOption);\n    /**\n     * Resets the members to their original state i.e. remove\n     * all of <code>tokens</code> entries and set <code>eatTheRest</code>\n     * to false.\n     */\n    private void init();\n    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of\n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see\n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled\n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class PosixParser extends Parser\n{\n    private List tokens = new ArrayList();\n    private boolean eatTheRest;\n    private Options options;\n    /**\n     * Adds the remaining tokens to the processed tokens list.\n     *\n     * @param iter An iterator over the remaining tokens\n     */\n    private void gobble(Iterator iter);\n    /**\n     * <p>If an {@link Option} exists for <code>token</code> then\n     * add the token to the processed list.</p>\n     *\n     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n     * is set then add the remaining tokens to the processed tokens list\n     * directly.</p>\n     *\n     * @param token The current option token\n     * @param stopAtNonOption Specifies whether flattening should halt\n     * at the first non option.\n     */\n    private void processOptionToken(String token, boolean stopAtNonOption);\n    /**\n     * Resets the members to their original state i.e. remove\n     * all of <code>tokens</code> entries and set <code>eatTheRest</code>\n     * to false.\n     */\n    private void init();\n    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of\n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see\n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled\n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testGroovy() throws Exception {\n        Options options = new Options();\n\n        options.addOption(\n            OptionBuilder.withLongOpt(\"define\").\n                withDescription(\"define a system property\").\n                hasArg(true).\n                withArgName(\"name=value\").\n                create('D'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n            .withDescription(\"usage information\")\n            .withLongOpt(\"help\")\n            .create('h'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n            .withDescription(\"debug mode will print out full stack traces\")\n            .withLongOpt(\"debug\")\n            .create('d'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n            .withDescription(\"display the Groovy and JVM versions\")\n            .withLongOpt(\"version\")\n            .create('v'));\n        options.addOption(\n            OptionBuilder.withArgName(\"charset\")\n            .hasArg()\n            .withDescription(\"specify the encoding of the files\")\n            .withLongOpt(\"encoding\")\n            .create('c'));\n        options.addOption(\n            OptionBuilder.withArgName(\"script\")\n            .hasArg()\n            .withDescription(\"specify a command line script\")\n            .create('e'));\n        options.addOption(\n            OptionBuilder.withArgName(\"extension\")\n            .hasOptionalArg()\n            .withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n            .create('i'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n            .withDescription(\"process files line by line using implicit 'line' variable\")\n            .create('n'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n            .withDescription(\"process files line by line and print result (see also -n)\")\n            .create('p'));\n        options.addOption(\n            OptionBuilder.withArgName(\"port\")\n            .hasOptionalArg()\n            .withDescription(\"listen on a port and process inbound lines\")\n            .create('l'));\n        options.addOption(\n            OptionBuilder.withArgName(\"splitPattern\")\n            .hasOptionalArg()\n            .withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n            .withLongOpt(\"autosplit\")\n            .create('a'));\n\n        Parser parser = new PosixParser();\n        CommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\n\n        assertTrue(line.hasOption('e'));\n        assertEquals(\"println 'hello'\", line.getOptionValue('e'));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     */\n    public void printHelp(String cmdLineSyntax, Options options);\n    /**\n     * Sets the 'width'.\n     *\n     * @param width the new value of 'width'\n     */\n    public void setWidth(int width);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header,\n                          Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\n                          String header, Options options, int leftPad,\n                          int descPad, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     */\n    public void printHelp(String cmdLineSyntax, Options options);\n    /**\n     * Sets the 'width'.\n     *\n     * @param width the new value of 'width'\n     */\n    public void setWidth(int width);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header,\n                          Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\n                          String header, Options options, int leftPad,\n                          int descPad, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void testPrintHelp(Options options) throws ParseException, IOException {\n        new HelpFormatter().printHelp(this.getClass().getName(), options);\n    }\n    public void testInfiniteLoop() {\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.setWidth(20);\n        formatter.printHelp(\"app\", options); // used to hang & crash\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     */\n    public void printHelp(String cmdLineSyntax, Options options);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header,\n                          Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\n                          String header, Options options, int leftPad,\n                          int descPad, String footer, boolean autoUsage);\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     */\n    public void printHelp(String cmdLineSyntax, Options options);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header,\n                          Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\n                          String header, Options options, int leftPad,\n                          int descPad, String footer, boolean autoUsage);\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {\n        Options options = new Options();\n        options.addOption(\"x\", \"extralongarg\", false, \"This description is Long.\" );\n        HelpFormatter formatter = new HelpFormatter();\n        StringWriter sw = new StringWriter();\n        formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\n        String expected = \"usage:\\n\" +\n                          \"       org.apache.comm\\n\" +\n                          \"       ons.cli.bug.Bug\\n\" +\n                          \"       CLI162Test\\n\" +\n                          \"Header\\n\" +\n                          \"-x,--extralongarg\\n\" +\n                          \"                     T\\n\" +\n                          \"                     h\\n\" +\n                          \"                     i\\n\" +\n                          \"                     s\\n\" +\n                          \"                     d\\n\" +\n                          \"                     e\\n\" +\n                          \"                     s\\n\" +\n                          \"                     c\\n\" +\n                          \"                     r\\n\" +\n                          \"                     i\\n\" +\n                          \"                     p\\n\" +\n                          \"                     t\\n\" +\n                          \"                     i\\n\" +\n                          \"                     o\\n\" +\n                          \"                     n\\n\" +\n                          \"                     i\\n\" +\n                          \"                     s\\n\" +\n                          \"                     L\\n\" +\n                          \"                     o\\n\" +\n                          \"                     n\\n\" +\n                          \"                     g\\n\" +\n                          \"                     .\\n\" +\n                          \"Footer\\n\";\n        assertEquals( \"Long arguments did not split as expected\", expected, sw.toString() );\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     */\n    public void printHelp(String cmdLineSyntax, Options options);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer);\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\n                          String header, Options options, int leftPad,\n                          int descPad, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header,\n                          Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     */\n    public void printHelp(String cmdLineSyntax, Options options);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer);\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\n                          String header, Options options, int leftPad,\n                          int descPad, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header,\n                          Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {\n        Options options = new Options();\n        options.addOption(\"x\", \"extralongarg\", false, \"This description is Long.\" );\n        HelpFormatter formatter = new HelpFormatter();\n        StringWriter sw = new StringWriter();\n        formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\n        System.err.println(sw.toString());\n        String expected = \"usage:\\n\" +\n                          \"       org.apache.comm\\n\" +\n                          \"       ons.cli.bug.Bug\\n\" +\n                          \"       CLI162Test\\n\" +\n                          \"Header\\n\" +\n                          \"-x,--extralongarg\\n\" +\n                          \" This description is\\n\" +\n                          \" Long.\\n\" +\n                          \"Footer\\n\";\n        assertEquals( \"Long arguments did not split as expected\", expected, sw.toString() );\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * OptionBuilder allows the user to create Options using descriptive methods.\n *\n * <p>Details on the Builder pattern can be found at\n * <a href=\"http://c2.com/cgi-bin/wiki?BuilderPattern\">\n * http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @since 1.0\n */\npublic final class OptionBuilder\n{\n    private static String longopt;\n    private static String description;\n    private static String argName;\n    private static boolean required;\n    private static int numberOfArgs = Option.UNINITIALIZED;\n    private static Object type;\n    private static boolean optionalArg;\n    private static char valuesep;\n    private static OptionBuilder instance = new OptionBuilder();\n    /**\n     * Create an Option using the current settings\n     *\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>longOpt</code> has not been set.\n     */\n    public static Option create() throws IllegalArgumentException;\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the character representation of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(char opt) throws IllegalArgumentException;\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException;\n    /**\n     * The next Option created will have the specified description\n     *\n     * @param newDescription a description of the Option's purpose\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder withDescription(String newDescription);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * OptionBuilder allows the user to create Options using descriptive methods.\n *\n * <p>Details on the Builder pattern can be found at\n * <a href=\"http://c2.com/cgi-bin/wiki?BuilderPattern\">\n * http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @since 1.0\n */\npublic final class OptionBuilder\n{\n    private static String longopt;\n    private static String description;\n    private static String argName;\n    private static boolean required;\n    private static int numberOfArgs = Option.UNINITIALIZED;\n    private static Object type;\n    private static boolean optionalArg;\n    private static char valuesep;\n    private static OptionBuilder instance = new OptionBuilder();\n    /**\n     * Create an Option using the current settings\n     *\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>longOpt</code> has not been set.\n     */\n    public static Option create() throws IllegalArgumentException;\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the character representation of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(char opt) throws IllegalArgumentException;\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException;\n    /**\n     * The next Option created will have the specified description\n     *\n     * @param newDescription a description of the Option's purpose\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder withDescription(String newDescription);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testBuilderIsResettedAlways() {\n        try\n        {\n            OptionBuilder.withDescription(\"JUnit\").create('\"');\n            fail(\"IllegalArgumentException expected\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n        assertNull(\"we inherited a description\", OptionBuilder.create('x').getDescription());\n\n        try\n        {\n            OptionBuilder.withDescription(\"JUnit\").create();\n            fail(\"IllegalArgumentException expected\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n        assertNull(\"we inherited a description\", OptionBuilder.create('x').getDescription());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A group of mutually exclusive options.\n *\n * @author John Keyes ( john at integralsource.com )\n * @version $Revision$, $Date$\n */\npublic class OptionGroup implements Serializable\n{\n    private static final long serialVersionUID = 1L;\n    private Map optionMap = new HashMap();\n    private String selected;\n    private boolean required;\n    /**\n     * @return the selected option name\n     */\n    public String getSelected();\n    /**\n     * Set the selected option of this group to <code>name</code>.\n     *\n     * @param option the option that is selected\n     * @throws AlreadySelectedException if an option from this group has \n     * already been selected.\n     */\n    public void setSelected(Option option) throws AlreadySelectedException;\n    /**\n     * Add the specified <code>Option</code> to this group.\n     *\n     * @param option the option to add to this group\n     * @return this option group with the option added\n     */\n    public OptionGroup addOption(Option option);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A group of mutually exclusive options.\n *\n * @author John Keyes ( john at integralsource.com )\n * @version $Revision$, $Date$\n */\npublic class OptionGroup implements Serializable\n{\n    private static final long serialVersionUID = 1L;\n    private Map optionMap = new HashMap();\n    private String selected;\n    private boolean required;\n    /**\n     * @return the selected option name\n     */\n    public String getSelected();\n    /**\n     * Set the selected option of this group to <code>name</code>.\n     *\n     * @param option the option that is selected\n     * @throws AlreadySelectedException if an option from this group has \n     * already been selected.\n     */\n    public void setSelected(Option option) throws AlreadySelectedException;\n    /**\n     * Add the specified <code>Option</code> to this group.\n     *\n     * @param option the option to add to this group\n     * @return this option group with the option added\n     */\n    public OptionGroup addOption(Option option);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testOptionGroupLong() throws Exception\n    {\n        OptionGroup group = new OptionGroup();\n        group.addOption(OptionBuilder.withLongOpt(\"foo\").create());\n        group.addOption(OptionBuilder.withLongOpt(\"bar\").create());\n        \n        Options options = new Options();\n        options.addOptionGroup(group);\n        \n        CommandLine cl = parser.parse(options, new String[] { \"--bar\" });\n        \n        assertTrue(cl.hasOption(\"bar\"));\n        assertEquals(\"selected option\", \"bar\", group.getSelected());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <code>Parser</code> creates {@link CommandLine}s.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @deprecated The two-pass parsing with the flatten method is not enough flexible to handle complex cases\n */\npublic abstract class Parser implements CommandLineParser\n{\n    private Options options;\n    private List requiredOptions;\n    /**\n     * Parses the specified <code>arguments</code>\n     * based on the specifed {@link Options}.\n     *\n     * @param options         the <code>Options</code>\n     * @param arguments       the <code>arguments</code>\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n    /**\n     * Sets the values of Options using the values in <code>properties</code>.\n     *\n     * @param properties The value properties to be processed.\n     */\n    protected void processProperties(Properties properties);\n    /**\n     * Parses the specified <code>arguments</code> based\n     * on the specifed {@link Options}.\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     *\n     * @since 1.1\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     *                        while parsing the command line tokens.\n     *\n     * @since 1.1\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <code>Parser</code> creates {@link CommandLine}s.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @deprecated The two-pass parsing with the flatten method is not enough flexible to handle complex cases\n */\npublic abstract class Parser implements CommandLineParser\n{\n    private Options options;\n    private List requiredOptions;\n    /**\n     * Parses the specified <code>arguments</code>\n     * based on the specifed {@link Options}.\n     *\n     * @param options         the <code>Options</code>\n     * @param arguments       the <code>arguments</code>\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n    /**\n     * Sets the values of Options using the values in <code>properties</code>.\n     *\n     * @param properties The value properties to be processed.\n     */\n    protected void processProperties(Properties properties);\n    /**\n     * Parses the specified <code>arguments</code> based\n     * on the specifed {@link Options}.\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     *\n     * @since 1.1\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     *                        while parsing the command line tokens.\n     *\n     * @since 1.1\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testPropertyOptionFlags() throws Exception\n    {\n        Properties properties = new Properties();\n        properties.setProperty( \"a\", \"true\" );\n        properties.setProperty( \"c\", \"yes\" );\n        properties.setProperty( \"e\", \"1\" );\n\n        Parser parser = new PosixParser();\n\n        CommandLine cmd = parser.parse(opts, null, properties);\n        assertTrue( cmd.hasOption(\"a\") );\n        assertTrue( cmd.hasOption(\"c\") );\n        assertTrue( cmd.hasOption(\"e\") );\n\n\n        properties = new Properties();\n        properties.setProperty( \"a\", \"false\" );\n        properties.setProperty( \"c\", \"no\" );\n        properties.setProperty( \"e\", \"0\" );\n\n        cmd = parser.parse(opts, null, properties);\n        assertTrue( !cmd.hasOption(\"a\") );\n        assertTrue( !cmd.hasOption(\"c\") );\n        assertTrue( cmd.hasOption(\"e\") ); // this option accepts as argument\n\n\n        properties = new Properties();\n        properties.setProperty( \"a\", \"TRUE\" );\n        properties.setProperty( \"c\", \"nO\" );\n        properties.setProperty( \"e\", \"TrUe\" );\n\n        cmd = parser.parse(opts, null, properties);\n        assertTrue( cmd.hasOption(\"a\") );\n        assertTrue( !cmd.hasOption(\"c\") );\n        assertTrue( cmd.hasOption(\"e\") );\n\n        \n        properties = new Properties();\n        properties.setProperty( \"a\", \"just a string\" );\n        properties.setProperty( \"e\", \"\" );\n\n        cmd = parser.parse(opts, null, properties);\n        assertTrue( !cmd.hasOption(\"a\") );\n        assertTrue( !cmd.hasOption(\"c\") );\n        assertTrue( cmd.hasOption(\"e\") );\n    } \n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Contains useful helper methods for classes within this package.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\nclass Util\n{\n    /**\n     * Remove the leading and trailing quotes from <code>str</code>.\n     * E.g. if str is '\"one two\"', then 'one two' is returned.\n     *\n     * @param str The string from which the leading and trailing quotes\n     * should be removed.\n     *\n     * @return The string without the leading and trailing quotes.\n     */\n    static String stripLeadingAndTrailingQuotes(String str);\n    /**\n     * Remove the hyphens from the begining of <code>str</code> and\n     * return the new String.\n     *\n     * @param str The string from which the hyphens should be removed.\n     *\n     * @return the new String.\n     */\n    static String stripLeadingHyphens(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Contains useful helper methods for classes within this package.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\nclass Util\n{\n    /**\n     * Remove the leading and trailing quotes from <code>str</code>.\n     * E.g. if str is '\"one two\"', then 'one two' is returned.\n     *\n     * @param str The string from which the leading and trailing quotes\n     * should be removed.\n     *\n     * @return The string without the leading and trailing quotes.\n     */\n    static String stripLeadingAndTrailingQuotes(String str);\n    /**\n     * Remove the hyphens from the begining of <code>str</code> and\n     * return the new String.\n     *\n     * @param str The string from which the hyphens should be removed.\n     *\n     * @return the new String.\n     */\n    static String stripLeadingHyphens(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testStripLeadingAndTrailingQuotes()\n    {\n        assertEquals(\"foo\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\"\"));\n        assertEquals(\"foo \\\"bar\\\"\", Util.stripLeadingAndTrailingQuotes(\"foo \\\"bar\\\"\"));\n        assertEquals(\"\\\"foo\\\" bar\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\" bar\"));\n        assertEquals(\"\\\"foo\\\" and \\\"bar\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\" and \\\"bar\\\"\"));\n        assertEquals(\"\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n  * This is a temporary implementation. TypeHandler will handle the \n  * pluggableness of OptionTypes and it will direct all of these types \n  * of conversion functionalities to ConvertUtils component in Commons \n  * alreayd. BeanUtils I think.\n  *\n  * @author Henri Yandell (bayard @ generationjava.com)\n  * @version $Revision$\n  */\npublic class TypeHandler {\n    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str);\n    /**\n     * <p>Returns the <code>Object</code> of type <code>obj</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param obj the type of argument\n     * @return The instance of <code>obj</code> initialised with\n     * the value of <code>str</code>.\n     */\n    public static Object createValue(String str, Object obj);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n  * This is a temporary implementation. TypeHandler will handle the \n  * pluggableness of OptionTypes and it will direct all of these types \n  * of conversion functionalities to ConvertUtils component in Commons \n  * alreayd. BeanUtils I think.\n  *\n  * @author Henri Yandell (bayard @ generationjava.com)\n  * @version $Revision$\n  */\npublic class TypeHandler {\n    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str);\n    /**\n     * <p>Returns the <code>Object</code> of type <code>obj</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param obj the type of argument\n     * @return The instance of <code>obj</code> initialised with\n     * the value of <code>str</code>.\n     */\n    public static Object createValue(String str, Object obj);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Henri Yandell\n **/\npublic class PatternOptionBuilderTest\nextends TestCase\n{\n   public void testSimplePattern()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n           assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n           assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n           assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n           assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\n           assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\n           assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\n           assertEquals(\"boolean true flag c\", true, line.hasOption('c'));\n           assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\n           assertEquals(\"boolean false flag d\", false, line.hasOption('d'));\n           assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\n           assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\n           assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\n           assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\n           assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\n           assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));\n           assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n           assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z')); //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\" } catch( ParseException exp ) { fail( exp.getMessage() );\n       }\n       catch( java.net.MalformedURLException exp ) {\n           fail( exp.getMessage() );\n       }\n   }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Default parser.\n * \n * @author Emmanuel Bourg\n * @version $Revision$, $Date$\n * @since 1.3\n */\npublic class DefaultParser implements CommandLineParser\n{    \n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n    /**\n     * Sets the values of Options using the values in <code>properties</code>.\n     *\n     * @param properties The value properties to be processed.\n     */\n    private void handleProperties(Properties properties) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options         the specified Options\n     * @param arguments       the command line arguments\n     * @param properties      command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException;\n    /** The required options expected to be found when parsing the command line. */\n    protected List expectedOpts;\n    \n    public CommandLine parse(Options options, String[] arguments) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException;\n}\n/**\n * <code>Parser</code> creates {@link CommandLine}s.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @deprecated The two-pass parsing with the flatten method is not enough flexible to handle complex cases\n */\npublic abstract class Parser implements CommandLineParser\n{\n    private Options options;\n    private List requiredOptions;\n    /**\n     * Sets the values of Options using the values in <code>properties</code>.\n     *\n     * @param properties The value properties to be processed.\n     */\n    protected void processProperties(Properties properties) throws ParseException;\n    /**\n     * Parses the specified <code>arguments</code>\n     * based on the specifed {@link Options}.\n     *\n     * @param options         the <code>Options</code>\n     * @param arguments       the <code>arguments</code>\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     *                        while parsing the command line tokens.\n     *\n     * @since 1.1\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     *\n     * @since 1.1\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException;\n    /**\n     * Parses the specified <code>arguments</code> based\n     * on the specifed {@link Options}.\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Default parser.\n * \n * @author Emmanuel Bourg\n * @version $Revision$, $Date$\n * @since 1.3\n */\npublic class DefaultParser implements CommandLineParser\n{    \n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n    /**\n     * Sets the values of Options using the values in <code>properties</code>.\n     *\n     * @param properties The value properties to be processed.\n     */\n    private void handleProperties(Properties properties) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options         the specified Options\n     * @param arguments       the command line arguments\n     * @param properties      command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException;\n    /** The required options expected to be found when parsing the command line. */\n    protected List expectedOpts;\n    \n    public CommandLine parse(Options options, String[] arguments) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException;\n}\n/**\n * <code>Parser</code> creates {@link CommandLine}s.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @deprecated The two-pass parsing with the flatten method is not enough flexible to handle complex cases\n */\npublic abstract class Parser implements CommandLineParser\n{\n    private Options options;\n    private List requiredOptions;\n    /**\n     * Sets the values of Options using the values in <code>properties</code>.\n     *\n     * @param properties The value properties to be processed.\n     */\n    protected void processProperties(Properties properties) throws ParseException;\n    /**\n     * Parses the specified <code>arguments</code>\n     * based on the specifed {@link Options}.\n     *\n     * @param options         the <code>Options</code>\n     * @param arguments       the <code>arguments</code>\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     *                        while parsing the command line tokens.\n     *\n     * @since 1.1\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     *\n     * @since 1.1\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException;\n    /**\n     * Parses the specified <code>arguments</code> based\n     * on the specifed {@link Options}.\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    private CommandLine parse(CommandLineParser parser, Options opts, String[] args, Properties properties) throws ParseException {\n        if (parser instanceof Parser) {\n            return ((Parser) parser).parse(opts, args, properties);\n        } else if (parser instanceof DefaultParser) {\n            return ((DefaultParser) parser).parse(opts, args, properties);\n        } else {\n            throw new UnsupportedOperationException(\"Default options not supported by this parser\");\n        }\n    }\n    public void testPropertyOptionGroup() throws Exception\n    {\n        Options opts = new Options();\n        \n        OptionGroup group1 = new OptionGroup();\n        group1.addOption(new Option(\"a\", null));\n        group1.addOption(new Option(\"b\", null));\n        opts.addOptionGroup(group1);\n        \n        OptionGroup group2 = new OptionGroup();\n        group2.addOption(new Option(\"x\", null));\n        group2.addOption(new Option(\"y\", null));\n        opts.addOptionGroup(group2);\n        \n        String[] args = new String[] { \"-a\" };\n        \n        Properties properties = new Properties();\n        properties.put(\"b\", \"true\");\n        properties.put(\"x\", \"true\");\n        \n        CommandLine cmd = parse(parser, opts, args, properties);\n        \n        assertTrue(cmd.hasOption(\"a\"));\n        assertFalse(cmd.hasOption(\"b\"));\n        assertTrue(cmd.hasOption(\"x\"));\n        assertFalse(cmd.hasOption(\"y\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Appends the usage clause for an Option to a StringBuffer.  \n     *\n     * @param buff the StringBuffer to append to\n     * @param option the Option to append\n     * @param required whether the Option is required or not\n     */\n    private void appendOption(final StringBuffer buff, final Option option, final boolean required);\n    /**\n     * Prints the usage statement for the specified application.\n     *\n     * @param pw The PrintWriter to print the usage statement \n     * @param width The number of characters to display per line\n     * @param app The application name\n     * @param options The command line Options\n     */\n    public void printUsage(PrintWriter pw, int width, String app, Options options);\n    /**\n     * Print the cmdLineSyntax to the specified writer, using the\n     * specified width.\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters per line for the usage statement.\n     * @param cmdLineSyntax The usage statement.\n     */\n    public void printUsage(PrintWriter pw, int width, String cmdLineSyntax);\n    /**\n     * Sets the 'argName'.\n     *\n     * @param name the new value of 'argName'\n     */\n    public void setArgName(String name);\n}\n/** <p>Describes a single command-line option.  It maintains\n * information regarding the short-name of the option, the long-name,\n * if any exists, a flag indicating if an argument is required for\n * this option, and a self-documenting description of the option.</p>\n *\n * <p>An Option is not created independantly, but is create through\n * an instance of {@link Options}.<p>\n *\n * @see org.apache.commons.cli.Options\n * @see org.apache.commons.cli.CommandLine\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @version $Revision$, $Date$\n */\npublic class Option implements Cloneable, Serializable\n{\n    private static final long serialVersionUID = 1L;\n    public static final int UNINITIALIZED = -1;\n    public static final int UNLIMITED_VALUES = -2;\n    private String opt;\n    private String longOpt;\n    private String argName = \"arg\";\n    private String description;\n    private boolean required;\n    private boolean optionalArg;\n    private int numberOfArgs = UNINITIALIZED;\n    private Object type;\n    private List values = new ArrayList();\n    private char valuesep;\n    /**\n     * Sets the display name for the argument value.\n     *\n     * @param argName the display name for the argument value.\n     */\n    public void setArgName(String argName);\n    /** \n     * Query to see if this Option requires an argument\n     *\n     * @return boolean flag indicating if an argument is required\n     */\n    public boolean isRequired();\n    /** \n     * Dump state, suitable for debugging.\n     *\n     * @return Stringified form of this object\n     */\n    public String toString();\n    /** \n     * Query to see if this Option requires an argument\n     *\n     * @return boolean flag indicating if an argument is required\n     */\n    public boolean hasArg();\n    /**\n     * Returns the id of this Option.  This is only set when the\n     * Option shortOpt is a single character.  This is used for switch\n     * statements.\n     *\n     * @return the id of this Option\n     */\n    public int getId();\n}\n/**\n * OptionBuilder allows the user to create Options using descriptive methods.\n *\n * <p>Details on the Builder pattern can be found at\n * <a href=\"http://c2.com/cgi-bin/wiki?BuilderPattern\">\n * http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @since 1.0\n */\npublic final class OptionBuilder\n{\n    private static String longopt;\n    private static String description;\n    private static String argName;\n    private static boolean required;\n    private static int numberOfArgs = Option.UNINITIALIZED;\n    private static Object type;\n    private static boolean optionalArg;\n    private static char valuesep;\n    private static OptionBuilder instance = new OptionBuilder();\n    /**\n     * The next Option created will require an argument value if\n     * <code>hasArg</code> is true.\n     *\n     * @param hasArg if true then the Option has an argument value\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder hasArg(boolean hasArg);\n    /**\n     * Resets the member variables to their default values.\n     */\n    private static void reset();\n    /**\n     * Create an Option using the current settings\n     *\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>longOpt</code> has not been set.\n     */\n    public static Option create() throws IllegalArgumentException;\n    /**\n     * The next Option created will be required.\n     *\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder isRequired();\n    /**\n     * The next Option created will require an argument value.\n     *\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder hasArg();\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException;\n    /**\n     * The next Option created will be required if <code>required</code>\n     * is true.\n     *\n     * @param newRequired if true then the Option is required\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder isRequired(boolean newRequired);\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the character representation of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(char opt) throws IllegalArgumentException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Appends the usage clause for an Option to a StringBuffer.  \n     *\n     * @param buff the StringBuffer to append to\n     * @param option the Option to append\n     * @param required whether the Option is required or not\n     */\n    private void appendOption(final StringBuffer buff, final Option option, final boolean required);\n    /**\n     * Prints the usage statement for the specified application.\n     *\n     * @param pw The PrintWriter to print the usage statement \n     * @param width The number of characters to display per line\n     * @param app The application name\n     * @param options The command line Options\n     */\n    public void printUsage(PrintWriter pw, int width, String app, Options options);\n    /**\n     * Print the cmdLineSyntax to the specified writer, using the\n     * specified width.\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters per line for the usage statement.\n     * @param cmdLineSyntax The usage statement.\n     */\n    public void printUsage(PrintWriter pw, int width, String cmdLineSyntax);\n    /**\n     * Sets the 'argName'.\n     *\n     * @param name the new value of 'argName'\n     */\n    public void setArgName(String name);\n}\n/** <p>Describes a single command-line option.  It maintains\n * information regarding the short-name of the option, the long-name,\n * if any exists, a flag indicating if an argument is required for\n * this option, and a self-documenting description of the option.</p>\n *\n * <p>An Option is not created independantly, but is create through\n * an instance of {@link Options}.<p>\n *\n * @see org.apache.commons.cli.Options\n * @see org.apache.commons.cli.CommandLine\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @version $Revision$, $Date$\n */\npublic class Option implements Cloneable, Serializable\n{\n    private static final long serialVersionUID = 1L;\n    public static final int UNINITIALIZED = -1;\n    public static final int UNLIMITED_VALUES = -2;\n    private String opt;\n    private String longOpt;\n    private String argName = \"arg\";\n    private String description;\n    private boolean required;\n    private boolean optionalArg;\n    private int numberOfArgs = UNINITIALIZED;\n    private Object type;\n    private List values = new ArrayList();\n    private char valuesep;\n    /**\n     * Sets the display name for the argument value.\n     *\n     * @param argName the display name for the argument value.\n     */\n    public void setArgName(String argName);\n    /** \n     * Query to see if this Option requires an argument\n     *\n     * @return boolean flag indicating if an argument is required\n     */\n    public boolean isRequired();\n    /** \n     * Dump state, suitable for debugging.\n     *\n     * @return Stringified form of this object\n     */\n    public String toString();\n    /** \n     * Query to see if this Option requires an argument\n     *\n     * @return boolean flag indicating if an argument is required\n     */\n    public boolean hasArg();\n    /**\n     * Returns the id of this Option.  This is only set when the\n     * Option shortOpt is a single character.  This is used for switch\n     * statements.\n     *\n     * @return the id of this Option\n     */\n    public int getId();\n}\n/**\n * OptionBuilder allows the user to create Options using descriptive methods.\n *\n * <p>Details on the Builder pattern can be found at\n * <a href=\"http://c2.com/cgi-bin/wiki?BuilderPattern\">\n * http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @since 1.0\n */\npublic final class OptionBuilder\n{\n    private static String longopt;\n    private static String description;\n    private static String argName;\n    private static boolean required;\n    private static int numberOfArgs = Option.UNINITIALIZED;\n    private static Object type;\n    private static boolean optionalArg;\n    private static char valuesep;\n    private static OptionBuilder instance = new OptionBuilder();\n    /**\n     * The next Option created will require an argument value if\n     * <code>hasArg</code> is true.\n     *\n     * @param hasArg if true then the Option has an argument value\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder hasArg(boolean hasArg);\n    /**\n     * Resets the member variables to their default values.\n     */\n    private static void reset();\n    /**\n     * Create an Option using the current settings\n     *\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>longOpt</code> has not been set.\n     */\n    public static Option create() throws IllegalArgumentException;\n    /**\n     * The next Option created will be required.\n     *\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder isRequired();\n    /**\n     * The next Option created will require an argument value.\n     *\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder hasArg();\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException;\n    /**\n     * The next Option created will be required if <code>required</code>\n     * is true.\n     *\n     * @param newRequired if true then the Option is required\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder isRequired(boolean newRequired);\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the character representation of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(char opt) throws IllegalArgumentException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Slawek Zachcial\n * @author John Keyes ( john at integralsource.com )\n * @author brianegge\n */\npublic class HelpFormatterTest extends TestCase\n{\n    public void testDefaultArgName()\n    {\n        Option option = OptionBuilder.hasArg().isRequired().create(\"f\");\n        \n        Options options = new Options();\n        options.addOption(option);\n        \n        StringWriter out = new StringWriter();\n\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.setArgName(\"argument\");\n        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n\n        assertEquals(\"usage: app -f <argument>\" + EOL, out.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Slawek Zachcial\n * @author John Keyes ( john at integralsource.com )\n * @author brianegge\n */\npublic class HelpFormatterTest extends TestCase\n{\n    public void testRenderWrappedTextWordCut()\n    {\n        int width = 7;\n        int padding = 0;\n        String text = \"Thisisatest.\";\n        String expected = \"Thisisa\" + EOL + \n                          \"test.\";\n        \n        StringBuffer sb = new StringBuffer();\n        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n        assertEquals(\"cut and wrap\", expected, sb.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header,\n                          Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\n                          String header, Options options, int leftPad,\n                          int descPad, String footer, boolean autoUsage);\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the beginning of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the specified text to the specified PrintWriter.\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be written to the PrintWriter\n     */\n    public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     */\n    public void printHelp(String cmdLineSyntax, Options options);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\npublic class HelpFormatter\n{\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header,\n                          Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     *\n     * @throws IllegalStateException if there is no room to print a line\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\n                          String header, Options options, int leftPad,\n                          int descPad, String footer, boolean autoUsage);\n    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the beginning of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     * @param autoUsage whether to print an automatically generated\n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, String footer);\n    /**\n     * Print the specified text to the specified PrintWriter.\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be written to the PrintWriter\n     */\n    public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text);\n    /**\n     * Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     */\n    public void printHelp(String cmdLineSyntax, Options options);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Slawek Zachcial\n * @author John Keyes ( john at integralsource.com )\n * @author brianegge\n */\npublic class HelpFormatterTest extends TestCase\n{\n    public void testIndentedHeaderAndFooter()\n    {\n        // related to CLI-207\n        Options options = new Options();\n        HelpFormatter formatter = new HelpFormatter();\n        String header = \"  Header1\\n  Header2\";\n        String footer = \"  Footer1\\n  Footer2\";\n        StringWriter out = new StringWriter();\n        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\n\n        assertEquals( \"usage: foobar\" + EOL + \"  Header1\" + EOL + \"  Header2\" + EOL + \"\" + EOL + \"  Footer1\" + EOL + \"  Footer2\" + EOL , out.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * OptionBuilder allows the user to create Options using descriptive methods.\n *\n * <p>Details on the Builder pattern can be found at\n * <a href=\"http://c2.com/cgi-bin/wiki?BuilderPattern\">\n * http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>\n *\n * <p>This class is NOT thread safe. See <a href=\"https://issues.apache.org/jira/browse/CLI-209\">CLI-209</a></p>\n * \n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @since 1.0\n */\npublic final class OptionBuilder\n{\n    private static String longopt;\n    private static String description;\n    private static String argName;\n    private static boolean required;\n    private static int numberOfArgs = Option.UNINITIALIZED;\n    private static Class type;\n    private static boolean optionalArg;\n    private static char valuesep;\n    private static OptionBuilder instance = new OptionBuilder();\n    /**\n     * The next Option created will have a value that will be an instance\n     * of <code>type</code>.\n     *\n     * @param newType the type of the Options argument value\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder withType(Class newType);\n    /**\n     * Resets the member variables to their default values.\n     */\n    private static void reset();\n    /**\n     * The next Option created will require an argument value if\n     * <code>hasArg</code> is true.\n     *\n     * @param hasArg if true then the Option has an argument value\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder hasArg(boolean hasArg);\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException;\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the character representation of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(char opt) throws IllegalArgumentException;\n    /**\n     * The next Option created will require an argument value.\n     *\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder hasArg();\n    /**\n     * Create an Option using the current settings\n     *\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>longOpt</code> has not been set.\n     */\n    public static Option create() throws IllegalArgumentException;\n}\n/** <p>Describes a single command-line option.  It maintains\n * information regarding the short-name of the option, the long-name,\n * if any exists, a flag indicating if an argument is required for\n * this option, and a self-documenting description of the option.</p>\n *\n * <p>An Option is not created independantly, but is create through\n * an instance of {@link Options}.<p>\n *\n * @see org.apache.commons.cli.Options\n * @see org.apache.commons.cli.CommandLine\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @version $Revision$, $Date$\n */\npublic class Option implements Cloneable, Serializable\n{\n    private static final long serialVersionUID = 1L;\n    public static final int UNINITIALIZED = -1;\n    public static final int UNLIMITED_VALUES = -2;\n    private String opt;\n    private String longOpt;\n    private String argName;\n    private String description;\n    private boolean required;\n    private boolean optionalArg;\n    private int numberOfArgs = UNINITIALIZED;\n    private Class type;\n    private List values = new ArrayList();\n    private char valuesep;\n    /**\n     * Returns the id of this Option.  This is only set when the\n     * Option shortOpt is a single character.  This is used for switch\n     * statements.\n     *\n     * @return the id of this Option\n     */\n    public int getId();\n    /** \n     * Query to see if this Option requires an argument\n     *\n     * @return boolean flag indicating if an argument is required\n     */\n    public boolean hasArg();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * OptionBuilder allows the user to create Options using descriptive methods.\n *\n * <p>Details on the Builder pattern can be found at\n * <a href=\"http://c2.com/cgi-bin/wiki?BuilderPattern\">\n * http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>\n *\n * <p>This class is NOT thread safe. See <a href=\"https://issues.apache.org/jira/browse/CLI-209\">CLI-209</a></p>\n * \n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @since 1.0\n */\npublic final class OptionBuilder\n{\n    private static String longopt;\n    private static String description;\n    private static String argName;\n    private static boolean required;\n    private static int numberOfArgs = Option.UNINITIALIZED;\n    private static Class type;\n    private static boolean optionalArg;\n    private static char valuesep;\n    private static OptionBuilder instance = new OptionBuilder();\n    /**\n     * The next Option created will have a value that will be an instance\n     * of <code>type</code>.\n     *\n     * @param newType the type of the Options argument value\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder withType(Class newType);\n    /**\n     * Resets the member variables to their default values.\n     */\n    private static void reset();\n    /**\n     * The next Option created will require an argument value if\n     * <code>hasArg</code> is true.\n     *\n     * @param hasArg if true then the Option has an argument value\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder hasArg(boolean hasArg);\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation\n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(String opt) throws IllegalArgumentException;\n    /**\n     * Create an Option using the current settings and with\n     * the specified Option <code>char</code>.\n     *\n     * @param opt the character representation of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     */\n    public static Option create(char opt) throws IllegalArgumentException;\n    /**\n     * The next Option created will require an argument value.\n     *\n     * @return the OptionBuilder instance\n     */\n    public static OptionBuilder hasArg();\n    /**\n     * Create an Option using the current settings\n     *\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>longOpt</code> has not been set.\n     */\n    public static Option create() throws IllegalArgumentException;\n}\n/** <p>Describes a single command-line option.  It maintains\n * information regarding the short-name of the option, the long-name,\n * if any exists, a flag indicating if an argument is required for\n * this option, and a self-documenting description of the option.</p>\n *\n * <p>An Option is not created independantly, but is create through\n * an instance of {@link Options}.<p>\n *\n * @see org.apache.commons.cli.Options\n * @see org.apache.commons.cli.CommandLine\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @version $Revision$, $Date$\n */\npublic class Option implements Cloneable, Serializable\n{\n    private static final long serialVersionUID = 1L;\n    public static final int UNINITIALIZED = -1;\n    public static final int UNLIMITED_VALUES = -2;\n    private String opt;\n    private String longOpt;\n    private String argName;\n    private String description;\n    private boolean required;\n    private boolean optionalArg;\n    private int numberOfArgs = UNINITIALIZED;\n    private Class type;\n    private List values = new ArrayList();\n    private char valuesep;\n    /**\n     * Returns the id of this Option.  This is only set when the\n     * Option shortOpt is a single character.  This is used for switch\n     * statements.\n     *\n     * @return the id of this Option\n     */\n    public int getId();\n    /** \n     * Query to see if this Option requires an argument\n     *\n     * @return boolean flag indicating if an argument is required\n     */\n    public boolean hasArg();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testGetParsedOptionValue() throws Exception {\n        Options options = new Options();\n        options.addOption(OptionBuilder.hasArg().withType(Number.class).create(\"i\"));\n        options.addOption(OptionBuilder.hasArg().create(\"f\"));\n        \n        CommandLineParser parser = new DefaultParser();\n        CommandLine cmd = parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\n        \n        assertEquals(123, ((Number) cmd.getParsedOptionValue(\"i\")).intValue());\n        assertEquals(\"foo\", cmd.getParsedOptionValue(\"f\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Main entry-point into the library.\n * <p>\n * Options represents a collection of {@link Option} objects, which\n * describe the possible options for a command-line.\n * <p>\n * It may flexibly parse long and short options, with or without\n * values.  Additionally, it may parse only a portion of a commandline,\n * allowing for flexible multi-stage parsing.\n *\n * @see org.apache.commons.cli.CommandLine\n *\n * @version $Id$\n */\npublic class Options implements Serializable\n{\n    private static final long serialVersionUID = 1L;\n    private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();\n    private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();\n    private final List<Object> requiredOpts = new ArrayList<Object>();\n    private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();\n    /**\n     * Adds an option instance\n     *\n     * @param opt the option that is to be added\n     * @return the resulting Options instance\n     */\n    public Options addOption(Option opt);\n    /**\n     * Retrieve a read-only list of options in this set\n     *\n     * @return read-only Collection of {@link Option} objects in this descriptor\n     */\n    public Collection<Option> getOptions();\n    /**\n     * Add an option that contains a short-name and a long-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param longOpt Long multi-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, String longOpt, boolean hasArg, String description);\n    /**\n     * Add an option that only contains a short name.\n     * The option does not take an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     * @since 1.3\n     */\n    public Options addOption(String opt, String description);\n    /**\n     * Add an option that only contains a short-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, boolean hasArg, String description);\n    /**\n     * Returns the options with a long name starting with the name specified.\n     * \n     * @param opt the partial name of the option\n     * @return the options matching the partial name specified, or an empty list if none matches\n     * @since 1.3\n     */\n    public List<String> getMatchingOptions(String opt);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Main entry-point into the library.\n * <p>\n * Options represents a collection of {@link Option} objects, which\n * describe the possible options for a command-line.\n * <p>\n * It may flexibly parse long and short options, with or without\n * values.  Additionally, it may parse only a portion of a commandline,\n * allowing for flexible multi-stage parsing.\n *\n * @see org.apache.commons.cli.CommandLine\n *\n * @version $Id$\n */\npublic class Options implements Serializable\n{\n    private static final long serialVersionUID = 1L;\n    private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();\n    private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();\n    private final List<Object> requiredOpts = new ArrayList<Object>();\n    private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();\n    /**\n     * Adds an option instance\n     *\n     * @param opt the option that is to be added\n     * @return the resulting Options instance\n     */\n    public Options addOption(Option opt);\n    /**\n     * Retrieve a read-only list of options in this set\n     *\n     * @return read-only Collection of {@link Option} objects in this descriptor\n     */\n    public Collection<Option> getOptions();\n    /**\n     * Add an option that contains a short-name and a long-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param longOpt Long multi-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, String longOpt, boolean hasArg, String description);\n    /**\n     * Add an option that only contains a short name.\n     * The option does not take an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     * @since 1.3\n     */\n    public Options addOption(String opt, String description);\n    /**\n     * Add an option that only contains a short-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, boolean hasArg, String description);\n    /**\n     * Returns the options with a long name starting with the name specified.\n     * \n     * @param opt the partial name of the option\n     * @return the options matching the partial name specified, or an empty list if none matches\n     * @since 1.3\n     */\n    public List<String> getMatchingOptions(String opt);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private Options getOptions() {\n        Options options = new Options();\n        options.addOption(Option.builder().longOpt(\"prefix\").build());\n        options.addOption(Option.builder().longOpt(\"prefixplusplus\").build());\n        return options;\n    }\n    public void testExactOptionNameMatch() throws ParseException {\n        new DefaultParser().parse(getOptions(), new String[]{\"--prefix\"});\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Main entry-point into the library.\n * <p>\n * Options represents a collection of {@link Option} objects, which\n * describe the possible options for a command-line.\n * <p>\n * It may flexibly parse long and short options, with or without\n * values.  Additionally, it may parse only a portion of a commandline,\n * allowing for flexible multi-stage parsing.\n *\n * @see org.apache.commons.cli.CommandLine\n *\n * @version $Id$\n */\npublic class Options implements Serializable\n{\n    private static final long serialVersionUID = 1L;\n    private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();\n    private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();\n    private final List<Object> requiredOpts = new ArrayList<Object>();\n    private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();\n    /**\n     * Adds an option instance\n     *\n     * @param opt the option that is to be added\n     * @return the resulting Options instance\n     */\n    public Options addOption(Option opt);\n    /**\n     * Add the specified option group.\n     *\n     * @param group the OptionGroup that is to be added\n     * @return the resulting Options instance\n     */\n    public Options addOptionGroup(OptionGroup group);\n    /**\n     * Add an option that only contains a short name.\n     * The option does not take an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     * @since 1.3\n     */\n    public Options addOption(String opt, String description);\n    /**\n     * Retrieve a read-only list of options in this set\n     *\n     * @return read-only Collection of {@link Option} objects in this descriptor\n     */\n    public Collection<Option> getOptions();\n    /**\n     * Add an option that contains a short-name and a long-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param longOpt Long multi-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, String longOpt, boolean hasArg, String description);\n    /**\n     * Add an option that only contains a short-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, boolean hasArg, String description);\n}\n/**\n * A group of mutually exclusive options.\n *\n * @version $Id$\n */\npublic class OptionGroup implements Serializable\n{\n    private static final long serialVersionUID = 1L;\n    private final Map<String, Option> optionMap = new HashMap<String, Option>();\n    private String selected;\n    private boolean required;\n    /**\n     * Add the specified <code>Option</code> to this group.\n     *\n     * @param option the option to add to this group\n     * @return this option group with the option added\n     */\n    public OptionGroup addOption(Option option);\n    /**\n     * @return the options in this group as a <code>Collection</code>\n     */\n    public Collection<Option> getOptions();\n    /**\n     * @param required specifies if this group is required\n     */\n    public void setRequired(boolean required);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Main entry-point into the library.\n * <p>\n * Options represents a collection of {@link Option} objects, which\n * describe the possible options for a command-line.\n * <p>\n * It may flexibly parse long and short options, with or without\n * values.  Additionally, it may parse only a portion of a commandline,\n * allowing for flexible multi-stage parsing.\n *\n * @see org.apache.commons.cli.CommandLine\n *\n * @version $Id$\n */\npublic class Options implements Serializable\n{\n    private static final long serialVersionUID = 1L;\n    private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();\n    private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();\n    private final List<Object> requiredOpts = new ArrayList<Object>();\n    private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();\n    /**\n     * Adds an option instance\n     *\n     * @param opt the option that is to be added\n     * @return the resulting Options instance\n     */\n    public Options addOption(Option opt);\n    /**\n     * Add the specified option group.\n     *\n     * @param group the OptionGroup that is to be added\n     * @return the resulting Options instance\n     */\n    public Options addOptionGroup(OptionGroup group);\n    /**\n     * Add an option that only contains a short name.\n     * The option does not take an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     * @since 1.3\n     */\n    public Options addOption(String opt, String description);\n    /**\n     * Retrieve a read-only list of options in this set\n     *\n     * @return read-only Collection of {@link Option} objects in this descriptor\n     */\n    public Collection<Option> getOptions();\n    /**\n     * Add an option that contains a short-name and a long-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param longOpt Long multi-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, String longOpt, boolean hasArg, String description);\n    /**\n     * Add an option that only contains a short-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, boolean hasArg, String description);\n}\n/**\n * A group of mutually exclusive options.\n *\n * @version $Id$\n */\npublic class OptionGroup implements Serializable\n{\n    private static final long serialVersionUID = 1L;\n    private final Map<String, Option> optionMap = new HashMap<String, Option>();\n    private String selected;\n    private boolean required;\n    /**\n     * Add the specified <code>Option</code> to this group.\n     *\n     * @param option the option to add to this group\n     * @return this option group with the option added\n     */\n    public OptionGroup addOption(Option option);\n    /**\n     * @return the options in this group as a <code>Collection</code>\n     */\n    public Collection<Option> getOptions();\n    /**\n     * @param required specifies if this group is required\n     */\n    public void setRequired(boolean required);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private Options getOptions() {\n        Options options = new Options();\n        Option help = Option.builder(\"h\")\n                .longOpt(\"help\")\n                .desc(\"Prints this help message\")\n                .build();\n        options.addOption(help);\n\n        buildOptionsGroup(options);\n\n        Option t = Option.builder(\"t\")\n                .required()\n                .hasArg()\n                .argName(\"file\")\n                .build();\n        Option w = Option.builder(\"w\")\n                .required()\n                .hasArg()\n                .argName(\"word\")\n                .build();\n        Option o = Option.builder(\"o\")\n                .hasArg()\n                .argName(\"directory\")\n                .build();\n        options.addOption(t);\n        options.addOption(w);\n        options.addOption(o);\n        return options;\n    }\n    private void buildOptionsGroup(Options options) {\n        OptionGroup firstGroup = new OptionGroup();\n        OptionGroup secondGroup = new OptionGroup();\n        firstGroup.setRequired(true);\n        secondGroup.setRequired(true);\n\n        firstGroup.addOption(Option.builder(\"d\")\n                .longOpt(\"db\")\n                .hasArg()\n                .argName(\"table-name\")\n                .build());\n        firstGroup.addOption(Option.builder(\"f\")\n                .longOpt(\"flat-file\")\n                .hasArg()\n                .argName(\"input.csv\")\n                .build());\n        options.addOptionGroup(firstGroup);\n\n        secondGroup.addOption(Option.builder(\"x\")\n                .hasArg()\n                .argName(\"arg1\")\n                .build());\n        secondGroup.addOption(Option.builder(\"s\")\n                .build());\n        secondGroup.addOption(Option.builder(\"p\")\n                .hasArg()\n                .argName(\"arg1\")\n                .build());\n        options.addOptionGroup(secondGroup);\n    }\n    public void testOptionComparatorInsertedOrder() throws ParseException {\n        Collection<Option> options = getOptions().getOptions();\n        int i = 0;\n        for(Option o: options) {\n            Assert.assertEquals(o.getOpt(), insertedOrder.get(i));\n            i++;\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Default parser.\n * \n * @version $Id$\n * @since 1.3\n */\npublic class DefaultParser implements CommandLineParser\n{\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options         the specified Options\n     * @param arguments       the command line arguments\n     * @param properties      command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException;\n    /** The required options and groups expected to be found when parsing the command line. */\n    protected List expectedOpts;\n \n    public CommandLine parse(Options options, String[] arguments) throws ParseException;\n    /**\n     * Tells if the token looks like a short option.\n     * \n     * @param token\n     */\n    private boolean isShortOption(String token);\n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Default parser.\n * \n * @version $Id$\n * @since 1.3\n */\npublic class DefaultParser implements CommandLineParser\n{\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options         the specified Options\n     * @param arguments       the command line arguments\n     * @param properties      command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException;\n    /** The required options and groups expected to be found when parsing the command line. */\n    protected List expectedOpts;\n \n    public CommandLine parse(Options options, String[] arguments) throws ParseException;\n    /**\n     * Tells if the token looks like a short option.\n     * \n     * @param token\n     */\n    private boolean isShortOption(String token);\n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void shouldParseShortOptionWithoutValue() throws Exception {\n        String[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\n\n        final CommandLine commandLine = parser.parse(options, twoShortOptions);\n\n        assertTrue(commandLine.hasOption(\"t1\"));\n        assertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));\n        assertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Default parser.\n * \n * @version $Id$\n * @since 1.3\n */\npublic class DefaultParser implements CommandLineParser\n{\n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n    /**\n     * Tells if the token looks like a short option.\n     * \n     * @param token\n     */\n    private boolean isShortOption(String token);\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options         the specified Options\n     * @param arguments       the command line arguments\n     * @param properties      command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException;\n    /** The required options and groups expected to be found when parsing the command line. */\n    protected List expectedOpts;\n \n    public CommandLine parse(Options options, String[] arguments) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Default parser.\n * \n * @version $Id$\n * @since 1.3\n */\npublic class DefaultParser implements CommandLineParser\n{\n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n    /**\n     * Tells if the token looks like a short option.\n     * \n     * @param token\n     */\n    private boolean isShortOption(String token);\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options         the specified Options\n     * @param arguments       the command line arguments\n     * @param properties      command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException;\n    /** The required options and groups expected to be found when parsing the command line. */\n    protected List expectedOpts;\n \n    public CommandLine parse(Options options, String[] arguments) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void shouldParseConcatenatedShortOptions() throws Exception {\n        String[] concatenatedShortOptions = new String[] { \"-t1\", \"-ab\" };\n\n        final CommandLine commandLine = parser.parse(options, concatenatedShortOptions);\n\n        assertTrue(commandLine.hasOption(\"t1\"));\n        assertNull(commandLine.getOptionValue(\"t1\"));\n        assertTrue(commandLine.hasOption(\"a\"));\n        assertTrue(commandLine.hasOption(\"b\"));\n        assertFalse(commandLine.hasOption(\"last\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This is a temporary implementation. TypeHandler will handle the\n * pluggableness of OptionTypes and it will direct all of these types\n * of conversion functionalities to ConvertUtils component in Commons\n * already. BeanUtils I think.\n *\n * @version $Id$\n */\npublic class TypeHandler\n{\n    /**\n     * Returns the File represented by <code>str</code>.\n     *\n     * @param str the File location\n     * @return The file represented by <code>str</code>.\n     */\n    public static File createFile(final String str);\n    public static Object createValue(final String str, final Class<?> clazz) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This is a temporary implementation. TypeHandler will handle the\n * pluggableness of OptionTypes and it will direct all of these types\n * of conversion functionalities to ConvertUtils component in Commons\n * already. BeanUtils I think.\n *\n * @version $Id$\n */\npublic class TypeHandler\n{\n    /**\n     * Returns the File represented by <code>str</code>.\n     *\n     * @param str the File location\n     * @return The file represented by <code>str</code>.\n     */\n    public static File createFile(final String str);\n    public static Object createValue(final String str, final Class<?> clazz) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class PatternOptionBuilderTest\n{\n    public void testExistingFilePattern() throws Exception\n    {\n        final Options options = PatternOptionBuilder.parsePattern(\"g<\");\n        final CommandLineParser parser = new PosixParser();\n        final CommandLine line = parser.parse(options, new String[] { \"-g\", \"src/test/resources/existing-readable.file\" });\n\n        final Object parsedReadableFileStream = line.getOptionObject(\"g\");\n\n        assertNotNull(\"option g not parsed\", parsedReadableFileStream);\n        assertTrue(\"option g not FileInputStream\", parsedReadableFileStream instanceof FileInputStream);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p><code>Parser</code> creates {@link CommandLine}s.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic abstract class Parser implements CommandLineParser {\n    private CommandLine cmd;\n    private Options options;\n    private List requiredOptions;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties)\n        throws ParseException;\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @param stopAtNonOption specifies whether to stop \n     * interpreting the arguments when a non option has \n     * been encountered and to add them to the CommandLines\n     * args list.\n     *\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             boolean stopAtNonOption)\n        throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption stop parsing the arguments when the first\n     * non option is encountered.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException;\n    /**\n     * <p>Throws a {@link MissingOptionException} if all of the\n     * required options are no present.</p>\n     *\n     * @throws MissingOptionException if any of the required Options\n     * are not present.\n     */\n    private void checkRequiredOptions()\n        throws MissingOptionException;\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p><code>Parser</code> creates {@link CommandLine}s.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic abstract class Parser implements CommandLineParser {\n    private CommandLine cmd;\n    private Options options;\n    private List requiredOptions;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties)\n        throws ParseException;\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @param stopAtNonOption specifies whether to stop \n     * interpreting the arguments when a non option has \n     * been encountered and to add them to the CommandLines\n     * args list.\n     *\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             boolean stopAtNonOption)\n        throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption stop parsing the arguments when the first\n     * non option is encountered.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException;\n    /**\n     * <p>Throws a {@link MissingOptionException} if all of the\n     * required options are no present.</p>\n     *\n     * @throws MissingOptionException if any of the required Options\n     * are not present.\n     */\n    private void checkRequiredOptions()\n        throws MissingOptionException;\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testMissingOptionsException() throws ParseException {\n        Options options = new Options();\n        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n        options.addOption(OptionBuilder.isRequired().create(\"x\"));\n        try {\n            new PosixParser().parse(options, new String[0]);\n            fail(\"Expected MissingOptionException to be thrown\");\n        } catch (MissingOptionException e) {\n            assertEquals(\"Missing required options: fx\", e.getMessage());\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Contains useful helper methods for classes within this package.\n *\n * @author John Keyes (john at integralsource.com)\n */\nclass Util {\n    /**\n     * <p>Remove the hyphens from the begining of <code>str</code> and\n     * return the new String.</p>\n     *\n     * @param str The string from which the hyphens should be removed.\n     *\n     * @return the new String.\n     */\n    static String stripLeadingHyphens(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Contains useful helper methods for classes within this package.\n *\n * @author John Keyes (john at integralsource.com)\n */\nclass Util {\n    /**\n     * <p>Remove the hyphens from the begining of <code>str</code> and\n     * return the new String.</p>\n     *\n     * @param str The string from which the hyphens should be removed.\n     *\n     * @return the new String.\n     */\n    static String stripLeadingHyphens(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testStripLeadingHyphens() {\n        assertEquals(\"f\", Util.stripLeadingHyphens(\"-f\"));\n        assertEquals(\"foo\", Util.stripLeadingHyphens(\"--foo\"));\n        assertNull(Util.stripLeadingHyphens(null));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Builds Options using a String pattern\n */\npublic class PatternBuilder {\n    private final GroupBuilder gbuilder;\n    private final DefaultOptionBuilder obuilder;\n    private final ArgumentBuilder abuilder;\n    /**\n     * Creates a new Option instance.\n     * @return a new Option instance\n     */\n    public Option create();\n    /**\n     * Builds an Option using a pattern string.\n     * @param pattern the pattern to build from\n     */\n    public void withPattern(final String pattern);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Builds Options using a String pattern\n */\npublic class PatternBuilder {\n    private final GroupBuilder gbuilder;\n    private final DefaultOptionBuilder obuilder;\n    private final ArgumentBuilder abuilder;\n    /**\n     * Creates a new Option instance.\n     * @return a new Option instance\n     */\n    public Option create();\n    /**\n     * Builds an Option using a pattern string.\n     * @param pattern the pattern to build from\n     */\n    public void withPattern(final String pattern);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>\tpublic void testRequiredOptions(){\n\t\tPatternBuilder builder = new PatternBuilder();\n\t\tbuilder.withPattern(\"hc!<\");\n\t\tOption option = builder.create();\n\t\tassertTrue(option instanceof GroupImpl);\n\t\t\n\t\tGroupImpl group = (GroupImpl)option;\n\t\tIterator i = group.getOptions().iterator();\n\t\tassertEquals(\"[-h]\",i.next().toString());\n\t\tassertEquals(\"-c <arg>\",i.next().toString());\n\t\tassertFalse(i.hasNext());\n\t}\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n **/\npublic class HelpFormatter {\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Returns the 'newLine'.\n     *\n     * @return the 'newLine'\n     */\n    public String getNewLine();\n    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n **/\npublic class HelpFormatter {\n    public static final int DEFAULT_WIDTH = 74;\n    public static final int DEFAULT_LEFT_PAD = 1;\n    public static final int DEFAULT_DESC_PAD = 3;\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n    public int defaultWidth = DEFAULT_WIDTH;\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n    public String defaultArgName = DEFAULT_ARG_NAME;\n    /**\n     * Returns the 'newLine'.\n     *\n     * @return the 'newLine'\n     */\n    public String getNewLine();\n    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Slawek Zachcial\n * @author John Keyes ( john at integralsource.com )\n * @author brianegge\n **/\npublic class HelpFormatterTest extends TestCase\n{\n   public void testPrintWrapped()\n      throws Exception\n   {\n      StringBuffer sb = new StringBuffer();\n      HelpFormatter hf = new HelpFormatter();\n\n      String text = \"This is a test.\";\n      String expected;\n\n      expected = \"This is a\" + hf.getNewLine() + \"test.\";\n      hf.renderWrappedText(sb, 12, 0, text);\n      assertEquals(\"single line text\", expected, sb.toString());\n\n      sb.setLength(0);\n      expected = \"This is a\" + hf.getNewLine() + \"    test.\";\n      hf.renderWrappedText(sb, 12, 4, text);\n      assertEquals(\"single line padded text\", expected, sb.toString());\n\n      text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n          \"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\n\n      sb.setLength(0);\n      expected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" +\n                 hf.getNewLine() +\n                 \"                        form DATE[-DATE] where DATE\" +\n                 hf.getNewLine() +\n                 \"                        has form YYYY[MM[DD]]\";\n      hf.renderWrappedText(sb, 53, 24, text);\n      assertEquals(\"single line padded text 2\", expected, sb.toString());\n\n      text =\n         \"aaaa aaaa aaaa\" + hf.getNewLine() +\n         \"aaaaaa\" + hf.getNewLine() +\n         \"aaaaa\";\n\n      expected = text;\n      sb.setLength(0);\n      hf.renderWrappedText(sb, 16, 0, text);\n      assertEquals(\"multi line text\", expected, sb.toString());\n\n      expected =\n         \"aaaa aaaa aaaa\" + hf.getNewLine() +\n         \"    aaaaaa\" + hf.getNewLine() +\n         \"    aaaaa\";\n      sb.setLength(0);\n      hf.renderWrappedText(sb, 16, 4, text);\n      assertEquals(\"multi-line padded text\", expected, sb.toString());\n   }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p><code>Parser</code> creates {@link CommandLine}s.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic abstract class Parser implements CommandLineParser {\n    private Options options;\n    private List requiredOptions;\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @param stopAtNonOption specifies whether to stop \n     * interpreting the arguments when a non option has \n     * been encountered and to add them to the CommandLines\n     * args list.\n     *\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             boolean stopAtNonOption)\n        throws ParseException;\n    /**\n     * <p>Throws a {@link MissingOptionException} if all of the\n     * required options are no present.</p>\n     *\n     * @throws MissingOptionException if any of the required Options\n     * are not present.\n     */\n    protected void checkRequiredOptions()\n        throws MissingOptionException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption stop parsing the arguments when the first\n     * non option is encountered.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties)\n        throws ParseException;\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p><code>Parser</code> creates {@link CommandLine}s.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic abstract class Parser implements CommandLineParser {\n    private Options options;\n    private List requiredOptions;\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @param stopAtNonOption specifies whether to stop \n     * interpreting the arguments when a non option has \n     * been encountered and to add them to the CommandLines\n     * args list.\n     *\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             boolean stopAtNonOption)\n        throws ParseException;\n    /**\n     * <p>Throws a {@link MissingOptionException} if all of the\n     * required options are no present.</p>\n     *\n     * @throws MissingOptionException if any of the required Options\n     * are not present.\n     */\n    protected void checkRequiredOptions()\n        throws MissingOptionException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption stop parsing the arguments when the first\n     * non option is encountered.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException;\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties)\n        throws ParseException;\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    public void testMissingOptionsException() throws ParseException {\n        Options options = new Options();\n        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n        options.addOption(OptionBuilder.isRequired().create(\"x\"));\n        try {\n            new PosixParser().parse(options, new String[0]);\n            fail(\"Expected MissingOptionException to be thrown\");\n        } catch (MissingOptionException e) {\n            assertEquals(\"Missing required options: f, x\", e.getMessage());\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Encodes a string into a caverphone value. \n *\n * This is an algorithm created the Caversham Project at the University of Otago. \n * It implements the Caverphone 2.0 algorithm:\n *\n *\n * @author Apache Software Foundation\n * @version $Id$\n * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n */\npublic class Caverphone implements StringEncoder {\n    /**\n     * Encodes an Object using the caverphone algorithm.  This method\n     * is provided in order to satisfy the requirements of the\n     * Encoder interface, and will throw an EncoderException if the\n     * supplied object is not of type java.lang.String.\n     *\n     * @param pObject Object to encode\n     * @return An object (or type java.lang.String) containing the \n     *         caverphone code which corresponds to the String supplied.\n     * @throws EncoderException if the parameter supplied is not\n     *                          of type java.lang.String\n     */\n    public Object encode(Object pObject) throws EncoderException;\n    /**\n     * Encodes a String using the Caverphone algorithm. \n     *\n     * @param pString String object to encode\n     * @return The caverphone code corresponding to the String supplied\n     */\n    public String encode(String pString);\n    /**\n     * Find the caverphone value of a String. \n     *\n     * @param txt String to find the caverphone code for\n     * @return A caverphone code corresponding to the String supplied\n     */\n    public String caverphone(String txt);\n}\n/**\n * Utility methods for {@link Soundex} and {@link RefinedSoundex} classes.\n * \n * @author Apache Software Foundation\n * @version $Id$\n * @since 1.3\n */\nfinal class SoundexUtils {\n    /**\n\t * Cleans up the input string before Soundex processing by only returning\n\t * upper case letters.\n\t * \n\t * @param str\n\t *                  The String to clean.\n\t * @return A clean String.\n\t */\n    static String clean(String str);\n}\n/**\n * Encodes a string into a metaphone value. \n * <p>\n * Initial Java implementation by <CITE>William B. Brogden. December, 1997</CITE>. \n * Permission given by <CITE>wbrogden</CITE> for code to be used anywhere.\n * </p>\n * <p>\n * <CITE>Hanging on the Metaphone</CITE> by <CITE>Lawrence Philips</CITE> in <CITE>Computer Language of Dec. 1990, p\n * 39.</CITE>\n * </p>\n * <p>\n * Note, that this does not match the algorithm that ships with PHP, or the algorithm \n * found in the Perl <a href=\"http://search.cpan.org/~mschwern/Text-Metaphone-1.96/Metaphone.pm\">Text:Metaphone-1.96</a>.\n * They have had undocumented changes from the originally published algorithm. \n * </p>\n * \n * @author Apache Software Foundation\n * @version $Id$\n */\npublic class Metaphone implements StringEncoder {\n    private static final String VOWELS = \"AEIOU\" ;\n    private static final String FRONTV = \"EIY\"   ;\n    private static final String VARSON = \"CSPTG\" ;\n    private int maxCodeLen = 4 ;\n    /**\n     * Encodes an Object using the metaphone algorithm.  This method\n     * is provided in order to satisfy the requirements of the\n     * Encoder interface, and will throw an EncoderException if the\n     * supplied object is not of type java.lang.String.\n     *\n     * @param pObject Object to encode\n     * @return An object (or type java.lang.String) containing the \n     *         metaphone code which corresponds to the String supplied.\n     * @throws EncoderException if the parameter supplied is not\n     *                          of type java.lang.String\n     */\n    public Object encode(Object pObject) throws EncoderException;\n    /**\n     * Find the metaphone value of a String. This is similar to the\n     * soundex algorithm, but better at finding similar sounding words.\n     * All input is converted to upper case.\n     * Limitations: Input format is expected to be a single ASCII word\n     * with only characters in the A - Z range, no punctuation or numbers.\n     *\n     * @param txt String to find the metaphone code for\n     * @return A metaphone code corresponding to the String supplied\n     */\n    public String metaphone(String txt);\n    /**\n     * Encodes a String using the Metaphone algorithm. \n     *\n     * @param pString String object to encode\n     * @return The metaphone code corresponding to the String supplied\n     */\n    public String encode(String pString);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Encodes a string into a caverphone value. \n *\n * This is an algorithm created the Caversham Project at the University of Otago. \n * It implements the Caverphone 2.0 algorithm:\n *\n *\n * @author Apache Software Foundation\n * @version $Id$\n * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n */\npublic class Caverphone implements StringEncoder {\n    /**\n     * Encodes an Object using the caverphone algorithm.  This method\n     * is provided in order to satisfy the requirements of the\n     * Encoder interface, and will throw an EncoderException if the\n     * supplied object is not of type java.lang.String.\n     *\n     * @param pObject Object to encode\n     * @return An object (or type java.lang.String) containing the \n     *         caverphone code which corresponds to the String supplied.\n     * @throws EncoderException if the parameter supplied is not\n     *                          of type java.lang.String\n     */\n    public Object encode(Object pObject) throws EncoderException;\n    /**\n     * Encodes a String using the Caverphone algorithm. \n     *\n     * @param pString String object to encode\n     * @return The caverphone code corresponding to the String supplied\n     */\n    public String encode(String pString);\n    /**\n     * Find the caverphone value of a String. \n     *\n     * @param txt String to find the caverphone code for\n     * @return A caverphone code corresponding to the String supplied\n     */\n    public String caverphone(String txt);\n}\n/**\n * Utility methods for {@link Soundex} and {@link RefinedSoundex} classes.\n * \n * @author Apache Software Foundation\n * @version $Id$\n * @since 1.3\n */\nfinal class SoundexUtils {\n    /**\n\t * Cleans up the input string before Soundex processing by only returning\n\t * upper case letters.\n\t * \n\t * @param str\n\t *                  The String to clean.\n\t * @return A clean String.\n\t */\n    static String clean(String str);\n}\n/**\n * Encodes a string into a metaphone value. \n * <p>\n * Initial Java implementation by <CITE>William B. Brogden. December, 1997</CITE>. \n * Permission given by <CITE>wbrogden</CITE> for code to be used anywhere.\n * </p>\n * <p>\n * <CITE>Hanging on the Metaphone</CITE> by <CITE>Lawrence Philips</CITE> in <CITE>Computer Language of Dec. 1990, p\n * 39.</CITE>\n * </p>\n * <p>\n * Note, that this does not match the algorithm that ships with PHP, or the algorithm \n * found in the Perl <a href=\"http://search.cpan.org/~mschwern/Text-Metaphone-1.96/Metaphone.pm\">Text:Metaphone-1.96</a>.\n * They have had undocumented changes from the originally published algorithm. \n * </p>\n * \n * @author Apache Software Foundation\n * @version $Id$\n */\npublic class Metaphone implements StringEncoder {\n    private static final String VOWELS = \"AEIOU\" ;\n    private static final String FRONTV = \"EIY\"   ;\n    private static final String VARSON = \"CSPTG\" ;\n    private int maxCodeLen = 4 ;\n    /**\n     * Encodes an Object using the metaphone algorithm.  This method\n     * is provided in order to satisfy the requirements of the\n     * Encoder interface, and will throw an EncoderException if the\n     * supplied object is not of type java.lang.String.\n     *\n     * @param pObject Object to encode\n     * @return An object (or type java.lang.String) containing the \n     *         metaphone code which corresponds to the String supplied.\n     * @throws EncoderException if the parameter supplied is not\n     *                          of type java.lang.String\n     */\n    public Object encode(Object pObject) throws EncoderException;\n    /**\n     * Find the metaphone value of a String. This is similar to the\n     * soundex algorithm, but better at finding similar sounding words.\n     * All input is converted to upper case.\n     * Limitations: Input format is expected to be a single ASCII word\n     * with only characters in the A - Z range, no punctuation or numbers.\n     *\n     * @param txt String to find the metaphone code for\n     * @return A metaphone code corresponding to the String supplied\n     */\n    public String metaphone(String txt);\n    /**\n     * Encodes a String using the Metaphone algorithm. \n     *\n     * @param pString String object to encode\n     * @return The metaphone code corresponding to the String supplied\n     */\n    public String encode(String pString);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLocaleIndependence() throws Exception {\n        StringEncoder encoder = makeEncoder();\n\n        String[] data = { \"I\", \"i\", };\n\n        Locale orig = Locale.getDefault();\n        Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\n\n        try {\n            for (int i = 0; i < data.length; i++) {\n                String ref = null;\n                for (int j = 0; j < locales.length; j++) {\n                    Locale.setDefault(locales[j]);\n                    if (j <= 0) {\n                        ref = encoder.encode(data[i]);\n                    } else {\n                        String cur = null;\n                        try {\n                            cur = encoder.encode(data[i]);\n                        } catch (Exception e) {\n                            fail(Locale.getDefault().toString() + \": \" + e.getMessage());\n                        }\n                        assertEquals(Locale.getDefault().toString() + \": \", ref, cur);\n                    }\n                }\n            }\n        } finally {\n            Locale.setDefault(orig);\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Encodes a string into a Caverphone value.\n * \n * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n * algorithm:\n * \n * @author Apache Software Foundation\n * @version $Id$\n * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n * @since 1.4\n */\npublic class Caverphone implements StringEncoder {\n    /**\n     * Encodes the given String into a Caverphone value.\n     *\n     * @param txt String the source string\n     * @return A caverphone code for the given String\n     */\n    public String caverphone(String txt);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Encodes a string into a Caverphone value.\n * \n * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n * algorithm:\n * \n * @author Apache Software Foundation\n * @version $Id$\n * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n * @since 1.4\n */\npublic class Caverphone implements StringEncoder {\n    /**\n     * Encodes the given String into a Caverphone value.\n     *\n     * @param txt String the source string\n     * @return A caverphone code for the given String\n     */\n    public String caverphone(String txt);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testEndMb() throws EncoderException {\n        String[][] data = {{\"mb\", \"M111111111\"}, {\"mbmb\", \"MPM1111111\"}};\n        this.checkEncodings(data);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>\n * Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>.\n * </p>\n * <p>\n * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n * gateway.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n *\n * @author Apache Software Foundation\n * @since 1.3\n * @version $Id$\n */\npublic class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder {\n    private final String charset;\n    private static final BitSet PRINTABLE_CHARS = new BitSet(256);\n    private static final byte ESCAPE_CHAR = '=';\n    private static final byte TAB = 9;\n    private static final byte SPACE = 32;\n    /**\n     * Encodes byte into its quoted-printable representation.\n     * \n     * @param b\n     *            byte to encode\n     * @param buffer\n     *            the buffer to write to\n     * @return The number of bytes written to the <code>buffer</code>\n     */\n    private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer);\n    /**\n     * Encodes an object into its quoted-printable safe form. Unsafe characters are escaped.\n     * \n     * @param pObject\n     *                  string to convert to a quoted-printable form\n     * @return quoted-printable object\n     * @throws EncoderException\n     *                  Thrown if quoted-printable encoding is not applicable to objects of this type or if encoding is\n     *                  unsuccessful\n     */\n    public Object encode(Object pObject) throws EncoderException;\n    /**\n     * Decodes a quoted-printable string into its original form using the specified string charset. Escaped characters\n     * are converted back to their original representation.\n     * \n     * @param pString\n     *                  quoted-printable string to convert into its original form\n     * @param charset\n     *                  the original string charset\n     * @return original string\n     * @throws DecoderException\n     *                  Thrown if quoted-printable decoding is unsuccessful\n     * @throws UnsupportedEncodingException\n     *                  Thrown if charset is not supported\n     */\n    public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException;\n    /**\n     * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n     * representation.\n     * \n     * @param pObject\n     *                  quoted-printable object to convert into its original form\n     * @return original object\n     * @throws DecoderException\n     *                  Thrown if the argument is not a <code>String</code> or <code>byte[]</code>. Thrown if a failure condition is\n     *                  encountered during the decode process.\n     */\n    public Object decode(Object pObject) throws DecoderException;\n    /**\n     * Decodes an array of quoted-printable characters into an array of original bytes. Escaped characters are converted\n     * back to their original representation.\n     * \n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)\n     * as defined in RFC 1521.\n     * </p>\n     * \n     * @param bytes\n     *                  array of quoted-printable characters\n     * @return array of original bytes\n     * @throws DecoderException\n     *                  Thrown if quoted-printable decoding is unsuccessful\n     */\n    public byte[] decode(byte[] bytes) throws DecoderException;\n    /**\n     * Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are\n     * converted back to their original representation.\n     *\n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #5) as\n     * defined in RFC 1521.\n     * </p>\n     *\n     * @param bytes\n     *                  array of quoted-printable characters\n     * @return array of original bytes\n     * @throws DecoderException\n     *                  Thrown if quoted-printable decoding is unsuccessful\n     */\n    public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException;\n    /**\n     * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n     * \n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)\n     * as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     * \n     * @param bytes\n     *                  array of bytes to be encoded\n     * @return array of bytes containing quoted-printable data\n     */\n    public byte[] encode(byte[] bytes);\n    /**\n     * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n     *\n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)\n     * as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     *\n     * @param printable\n     *                  bitset of characters deemed quoted-printable\n     * @param bytes\n     *                  array of bytes to be encoded\n     * @return array of bytes containing quoted-printable data\n     */\n    public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes);\n    /**\n     * Encodes a string into its quoted-printable form using the default string charset. Unsafe characters are escaped.\n     * \n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)\n     * as defined in RFC 1521 and is suitable for encoding binary data.\n     * </p>\n     * \n     * @param pString\n     *                  string to convert to quoted-printable form\n     * @return quoted-printable string\n     * \n     * @throws EncoderException\n     *                  Thrown if quoted-printable encoding is unsuccessful\n     * \n     * @see #getDefaultCharset()\n     */\n    public String encode(String pString) throws EncoderException;\n    /**\n     * Decodes a quoted-printable string into its original form using the default string charset. Escaped characters are\n     * converted back to their original representation.\n     * \n     * @param pString\n     *                  quoted-printable string to convert into its original form\n     * @return original string\n     * @throws DecoderException\n     *                  Thrown if quoted-printable decoding is unsuccessful.\n     *                  Thrown if charset is not supported.\n     * @see #getDefaultCharset()\n     */\n    public String decode(String pString) throws DecoderException;\n    /**\n     * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n     * \n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)\n     * as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     * \n     * @param pString\n     *                  string to convert to quoted-printable form\n     * @param charset\n     *                  the charset for pString\n     * @return quoted-printable string\n     * \n     * @throws UnsupportedEncodingException\n     *                  Thrown if the charset is not supported\n     */\n    public String encode(String pString, String charset) throws UnsupportedEncodingException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>\n * Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>.\n * </p>\n * <p>\n * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n * gateway.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n *\n * @author Apache Software Foundation\n * @since 1.3\n * @version $Id$\n */\npublic class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder {\n    private final String charset;\n    private static final BitSet PRINTABLE_CHARS = new BitSet(256);\n    private static final byte ESCAPE_CHAR = '=';\n    private static final byte TAB = 9;\n    private static final byte SPACE = 32;\n    /**\n     * Encodes byte into its quoted-printable representation.\n     * \n     * @param b\n     *            byte to encode\n     * @param buffer\n     *            the buffer to write to\n     * @return The number of bytes written to the <code>buffer</code>\n     */\n    private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer);\n    /**\n     * Encodes an object into its quoted-printable safe form. Unsafe characters are escaped.\n     * \n     * @param pObject\n     *                  string to convert to a quoted-printable form\n     * @return quoted-printable object\n     * @throws EncoderException\n     *                  Thrown if quoted-printable encoding is not applicable to objects of this type or if encoding is\n     *                  unsuccessful\n     */\n    public Object encode(Object pObject) throws EncoderException;\n    /**\n     * Decodes a quoted-printable string into its original form using the specified string charset. Escaped characters\n     * are converted back to their original representation.\n     * \n     * @param pString\n     *                  quoted-printable string to convert into its original form\n     * @param charset\n     *                  the original string charset\n     * @return original string\n     * @throws DecoderException\n     *                  Thrown if quoted-printable decoding is unsuccessful\n     * @throws UnsupportedEncodingException\n     *                  Thrown if charset is not supported\n     */\n    public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException;\n    /**\n     * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n     * representation.\n     * \n     * @param pObject\n     *                  quoted-printable object to convert into its original form\n     * @return original object\n     * @throws DecoderException\n     *                  Thrown if the argument is not a <code>String</code> or <code>byte[]</code>. Thrown if a failure condition is\n     *                  encountered during the decode process.\n     */\n    public Object decode(Object pObject) throws DecoderException;\n    /**\n     * Decodes an array of quoted-printable characters into an array of original bytes. Escaped characters are converted\n     * back to their original representation.\n     * \n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)\n     * as defined in RFC 1521.\n     * </p>\n     * \n     * @param bytes\n     *                  array of quoted-printable characters\n     * @return array of original bytes\n     * @throws DecoderException\n     *                  Thrown if quoted-printable decoding is unsuccessful\n     */\n    public byte[] decode(byte[] bytes) throws DecoderException;\n    /**\n     * Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are\n     * converted back to their original representation.\n     *\n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #5) as\n     * defined in RFC 1521.\n     * </p>\n     *\n     * @param bytes\n     *                  array of quoted-printable characters\n     * @return array of original bytes\n     * @throws DecoderException\n     *                  Thrown if quoted-printable decoding is unsuccessful\n     */\n    public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException;\n    /**\n     * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n     * \n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)\n     * as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     * \n     * @param bytes\n     *                  array of bytes to be encoded\n     * @return array of bytes containing quoted-printable data\n     */\n    public byte[] encode(byte[] bytes);\n    /**\n     * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n     *\n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)\n     * as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     *\n     * @param printable\n     *                  bitset of characters deemed quoted-printable\n     * @param bytes\n     *                  array of bytes to be encoded\n     * @return array of bytes containing quoted-printable data\n     */\n    public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes);\n    /**\n     * Encodes a string into its quoted-printable form using the default string charset. Unsafe characters are escaped.\n     * \n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)\n     * as defined in RFC 1521 and is suitable for encoding binary data.\n     * </p>\n     * \n     * @param pString\n     *                  string to convert to quoted-printable form\n     * @return quoted-printable string\n     * \n     * @throws EncoderException\n     *                  Thrown if quoted-printable encoding is unsuccessful\n     * \n     * @see #getDefaultCharset()\n     */\n    public String encode(String pString) throws EncoderException;\n    /**\n     * Decodes a quoted-printable string into its original form using the default string charset. Escaped characters are\n     * converted back to their original representation.\n     * \n     * @param pString\n     *                  quoted-printable string to convert into its original form\n     * @return original string\n     * @throws DecoderException\n     *                  Thrown if quoted-printable decoding is unsuccessful.\n     *                  Thrown if charset is not supported.\n     * @see #getDefaultCharset()\n     */\n    public String decode(String pString) throws DecoderException;\n    /**\n     * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n     * \n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)\n     * as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     * \n     * @param pString\n     *                  string to convert to quoted-printable form\n     * @param charset\n     *                  the charset for pString\n     * @return quoted-printable string\n     * \n     * @throws UnsupportedEncodingException\n     *                  Thrown if the charset is not supported\n     */\n    public String encode(String pString, String charset) throws UnsupportedEncodingException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private String constructString(int [] unicodeChars) {\n        StringBuffer buffer = new StringBuffer();\n        if (unicodeChars != null) {\n            for (int unicodeChar : unicodeChars) {\n                buffer.append((char)unicodeChar); \n            }\n        }\n        return buffer.toString();\n    }\n    public void testSkipNotEncodedCRLF() throws Exception {\n        String qpdata = \"CRLF in an\\n encoded text should be=20=\\r\\n\\rskipped in the\\r decoding.\";\n        String expected = \"CRLF in an encoded text should be skipped in the decoding.\";\n\n        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        assertEquals(expected, qpcodec.decode(qpdata));\n\n        String encoded = qpcodec.encode(expected);\n        assertEquals(expected, qpcodec.decode(encoded));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Abstract superclass for Base-N input streams.\n * \n * @since 1.5\n */\npublic class BaseNCodecInputStream extends FilterInputStream {\n    private final boolean doEncode;\n    private final BaseNCodec baseNCodec;\n    private final byte[] singleByte = new byte[1];\n    /**\n     * Reads one <code>byte</code> from this input stream.\n     * \n     * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.\n     * @throws IOException\n     *             if an I/O error occurs.\n     */\n    @Override\n    public int read() throws IOException;\n    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    @Override\n    public int read(byte b[], int offset, int len) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Abstract superclass for Base-N input streams.\n * \n * @since 1.5\n */\npublic class BaseNCodecInputStream extends FilterInputStream {\n    private final boolean doEncode;\n    private final BaseNCodec baseNCodec;\n    private final byte[] singleByte = new byte[1];\n    /**\n     * Reads one <code>byte</code> from this input stream.\n     * \n     * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.\n     * @throws IOException\n     *             if an I/O error occurs.\n     */\n    @Override\n    public int read() throws IOException;\n    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    @Override\n    public int read(byte b[], int offset, int len) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void testBase32EmptyInputStream(int chuckSize) throws Exception {\n        byte[] emptyEncoded = new byte[0];\n        byte[] emptyDecoded = new byte[0];\n        testByteByByte(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n        testByChunk(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n    }\n    private void testByChunk(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base32InputStream(in, true, chunkSize, seperator);\n        byte[] output = Base32TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base32InputStream(in);\n        output = Base32TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base32InputStream(in, true, chunkSize, seperator);\n            in = new Base32InputStream(in, false);\n        }\n        output = Base32TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }\n    private void testByteByByte(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base32InputStream(in, true, chunkSize, seperator);\n        byte[] output = new byte[encoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base32InputStream(in);\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base32InputStream(in, true, chunkSize, seperator);\n            in = new Base32InputStream(in, false);\n        }\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }\n    public void testSkipToEnd() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        assertEquals(3, b32stream.skip(3));\n        // End of stream reached\n        assertEquals(-1, b32stream.read());\n        assertEquals(-1, b32stream.read());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Converts String to and from bytes using the encodings required by the Java specification. These encodings are\n * specified in <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">\n * Standard charsets</a>.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @see CharEncoding\n * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n * @version $Id$\n * @since 1.4\n */\npublic class StringUtils {\n    /**\n     * Calls {@link String#getBytes(Charset)}\n     *\n     * @param string\n     *            The string to encode (if null, return null).\n     * @param charset\n     *            The {@link Charset} to encode the {@code String}\n     * @return the encoded bytes\n     */\n    private static byte[] getBytes(final String string, final Charset charset);\n}\n/**\n * Encodes a string into a double metaphone value. This Implementation is based on the algorithm by <CITE>Lawrence\n * Philips</CITE>.\n * <p>\n * This class is conditionally thread-safe. The instance field {@link #maxCodeLen} is mutable\n * {@link #setMaxCodeLen(int)} but is not volatile, and accesses are not synchronized. If an instance of the class is\n * shared between threads, the caller needs to ensure that suitable synchronization is used to ensure safe publication\n * of the value between threads, and must not invoke {@link #setMaxCodeLen(int)} after initial setup.\n *\n * @see <a href=\"http://drdobbs.com/184401251?pgno=2\">Original Article</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Metaphone\">http://en.wikipedia.org/wiki/Metaphone</a>\n *\n * @version $Id$\n */\npublic class DoubleMetaphone implements StringEncoder {\n    private static final String VOWELS = \"AEIOUY\";\n    private int maxCodeLen = 4;\n    /**\n     * Encode the value using DoubleMetaphone.  It will only work if\n     * <code>obj</code> is a <code>String</code> (like <code>Metaphone</code>).\n     *\n     * @param obj Object to encode (should be of type String)\n     * @return An encoded Object (will be of type String)\n     * @throws EncoderException encode parameter is not of type String\n     */\n    @Override\n    public Object encode(final Object obj) throws EncoderException;\n    /**\n     * Encode a value with Double Metaphone.\n     *\n     * @param value String to encode\n     * @return an encoded string\n     */\n    public String doubleMetaphone(final String value);\n    /**\n     * Encode a value with Double Metaphone, optionally using the alternate encoding.\n     *\n     * @param value String to encode\n     * @param alternate use alternate encode\n     * @return an encoded string\n     */\n    public String doubleMetaphone(String value, final boolean alternate);\n    /**\n     * Encode the value using DoubleMetaphone.\n     *\n     * @param value String to encode\n     * @return An encoded String\n     */\n    @Override\n    public String encode(final String value);\n    /**\n     * Check if the Double Metaphone values of two <code>String</code> values\n     * are equal.\n     *\n     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n     * @return {@code true} if the encoded <code>String</code>s are equal;\n     *          {@code false} otherwise.\n     * @see #isDoubleMetaphoneEqual(String,String,boolean)\n     */\n    public boolean isDoubleMetaphoneEqual(final String value1, final String value2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Converts String to and from bytes using the encodings required by the Java specification. These encodings are\n * specified in <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">\n * Standard charsets</a>.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @see CharEncoding\n * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n * @version $Id$\n * @since 1.4\n */\npublic class StringUtils {\n    /**\n     * Calls {@link String#getBytes(Charset)}\n     *\n     * @param string\n     *            The string to encode (if null, return null).\n     * @param charset\n     *            The {@link Charset} to encode the {@code String}\n     * @return the encoded bytes\n     */\n    private static byte[] getBytes(final String string, final Charset charset);\n}\n/**\n * Encodes a string into a double metaphone value. This Implementation is based on the algorithm by <CITE>Lawrence\n * Philips</CITE>.\n * <p>\n * This class is conditionally thread-safe. The instance field {@link #maxCodeLen} is mutable\n * {@link #setMaxCodeLen(int)} but is not volatile, and accesses are not synchronized. If an instance of the class is\n * shared between threads, the caller needs to ensure that suitable synchronization is used to ensure safe publication\n * of the value between threads, and must not invoke {@link #setMaxCodeLen(int)} after initial setup.\n *\n * @see <a href=\"http://drdobbs.com/184401251?pgno=2\">Original Article</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Metaphone\">http://en.wikipedia.org/wiki/Metaphone</a>\n *\n * @version $Id$\n */\npublic class DoubleMetaphone implements StringEncoder {\n    private static final String VOWELS = \"AEIOUY\";\n    private int maxCodeLen = 4;\n    /**\n     * Encode the value using DoubleMetaphone.  It will only work if\n     * <code>obj</code> is a <code>String</code> (like <code>Metaphone</code>).\n     *\n     * @param obj Object to encode (should be of type String)\n     * @return An encoded Object (will be of type String)\n     * @throws EncoderException encode parameter is not of type String\n     */\n    @Override\n    public Object encode(final Object obj) throws EncoderException;\n    /**\n     * Encode a value with Double Metaphone.\n     *\n     * @param value String to encode\n     * @return an encoded string\n     */\n    public String doubleMetaphone(final String value);\n    /**\n     * Encode a value with Double Metaphone, optionally using the alternate encoding.\n     *\n     * @param value String to encode\n     * @param alternate use alternate encode\n     * @return an encoded string\n     */\n    public String doubleMetaphone(String value, final boolean alternate);\n    /**\n     * Encode the value using DoubleMetaphone.\n     *\n     * @param value String to encode\n     * @return An encoded String\n     */\n    @Override\n    public String encode(final String value);\n    /**\n     * Check if the Double Metaphone values of two <code>String</code> values\n     * are equal.\n     *\n     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n     * @return {@code true} if the encoded <code>String</code>s are equal;\n     *          {@code false} otherwise.\n     * @see #isDoubleMetaphoneEqual(String,String,boolean)\n     */\n    public boolean isDoubleMetaphoneEqual(final String value1, final String value2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertDoubleMetaphone(final String expected, final String source) {\n        assertEquals(expected, this.getStringEncoder().encode(source));\n        try {\n            assertEquals(expected, this.getStringEncoder().encode((Object) source));\n        } catch (final EncoderException e) {\n            fail(\"Unexpected expection: \" + e);\n        }\n        assertEquals(expected, this.getStringEncoder().doubleMetaphone(source));\n        assertEquals(expected, this.getStringEncoder().doubleMetaphone(source, false));\n    }\n    public void testIsDoubleMetaphoneEqualBasic() {\n        final String[][] testFixture = new String[][] { { \n                \"\", \"\" }, {\n                \"Case\", \"case\" }, {\n                \"CASE\", \"Case\" }, {\n                \"caSe\", \"cAsE\" }, {\n                \"cookie\", \"quick\" }, {\n                \"quick\", \"cookie\" }, {\n                \"Brian\", \"Bryan\" }, {\n                \"Auto\", \"Otto\" }, {\n                \"Steven\", \"Stefan\" }, {\n                \"Philipowitz\", \"Filipowicz\" }\n        };\n        doubleMetaphoneEqualTest(testFixture, false);\n        doubleMetaphoneEqualTest(testFixture, true);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Language guessing utility.\n * <p>\n * This class encapsulates rules used to guess the possible languages that a word originates from. This is\n * done by reference to a whole series of rules distributed in resource files.\n * <p>\n * Instances of this class are typically managed through the static factory method instance().\n * Unless you are developing your own language guessing rules, you will not need to interact with this class directly.\n * <p>\n * This class is intended to be immutable and thread-safe.\n * <p>\n * <b>Lang resources</b>\n * <p>\n * Language guessing rules are typically loaded from resource files. These are UTF-8 encoded text files.\n * They are systematically named following the pattern:\n * <blockquote>org/apache/commons/codec/language/bm/lang.txt</blockquote>\n * The format of these resources is the following:\n * <ul>\n * <li><b>Rules:</b> whitespace separated strings.\n * There should be 3 columns to each row, and these will be interpreted as:\n * <ol>\n * <li>pattern: a regular expression.</li>\n * <li>languages: a '+'-separated list of languages.</li>\n * <li>acceptOnMatch: 'true' or 'false' indicating if a match rules in or rules out the language.</li>\n * </ol>\n * </li>\n * <li><b>End-of-line comments:</b> Any occurrence of '//' will cause all text following on that line to be\n * discarded as a comment.</li>\n * <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode.\n * This will skip all content until a line ending in '*' and '/' is found.</li>\n * <li><b>Blank lines:</b> All blank lines will be skipped.</li>\n * </ul>\n * <p>\n * Port of lang.php\n *\n * @since 1.6\n * @version $Id$\n */\npublic class Lang {\n    /**\n     * Gets a Lang instance for one of the supported NameTypes.\n     *\n     * @param nameType\n     *            the NameType to look up\n     * @return a Lang encapsulating the language guessing rules for that name type\n     */\n    public static Lang instance(final NameType nameType);\n}\n/**\n * Converts words into potential phonetic representations.\n * <p>\n * This is a two-stage process. Firstly, the word is converted into a phonetic representation that takes\n * into account the likely source language. Next, this phonetic representation is converted into a\n * pan-European 'average' representation, allowing comparison between different versions of essentially\n * the same word from different languages.\n * <p>\n * This class is intentionally immutable and thread-safe.\n * If you wish to alter the settings for a PhoneticEngine, you\n * must make a new one with the updated settings.\n * <p>\n * Ported from phoneticengine.php\n *\n * @since 1.6\n * @version $Id$\n */\npublic class PhoneticEngine {\n    /**\n     * Joins some strings with an internal separator.\n     * @param strings   Strings to join\n     * @param sep       String to separate them with\n     * @return a single String consisting of each element of <code>strings</code> interleaved by <code>sep</code>\n     */\n    private static String join(final Iterable<String> strings, final String sep);\n    /**\n     * Applies the final rules to convert from a language-specific phonetic representation to a\n     * language-independent representation.\n     *\n     * @param phonemeBuilder the current phonemes\n     * @param finalRules the final rules to apply\n     * @return the resulting phonemes\n     */\n    private PhonemeBuilder applyFinalRules(final PhonemeBuilder phonemeBuilder,\n                                           final Map<String, List<Rule>> finalRules);\n    /**\n     * Encodes an input string into an output phonetic representation, given a set of possible origin languages.\n     *\n     * @param input\n     *            String to phoneticise; a String with dashes or spaces separating each word\n     * @param languageSet\n     * @return a phonetic representation of the input; a String containing '-'-separated phonetic representations\n     *   of the input\n     */\n    public String encode(String input, final Languages.LanguageSet languageSet);\n    /**\n     * Encodes a string to its phonetic representation.\n     *\n     * @param input\n     *            the String to encode\n     * @return the encoding of the input\n     */\n    public String encode(final String input);\n}\n/**\n * A phoneme rule.\n * <p>\n * Rules have a pattern, left context, right context, output phoneme, set of languages for which they apply\n * and a logical flag indicating if all languages must be in play. A rule matches if:\n * <ul>\n * <li>the pattern matches at the current position</li>\n * <li>the string up until the beginning of the pattern matches the left context</li>\n * <li>the string from the end of the pattern matches the right context</li>\n * <li>logical is ALL and all languages are in scope; or</li>\n * <li>logical is any other value and at least one language is in scope</li>\n * </ul>\n * <p>\n * Rules are typically generated by parsing rules resources. In normal use, there will be no need for the user\n * to explicitly construct their own.\n * <p>\n * Rules are immutable and thread-safe.\n * <p>\n * <b>Rules resources</b>\n * <p>\n * Rules are typically loaded from resource files. These are UTF-8 encoded text files. They are systematically\n * named following the pattern:\n * <blockquote>org/apache/commons/codec/language/bm/${NameType#getName}_${RuleType#getName}_${language}.txt</blockquote>\n * <p>\n * The format of these resources is the following:\n * <ul>\n * <li><b>Rules:</b> whitespace separated, double-quoted strings. There should be 4 columns to each row, and these\n * will be interpreted as:\n * <ol>\n * <li>pattern</li>\n * <li>left context</li>\n * <li>right context</li>\n * <li>phoneme</li>\n * </ol>\n * </li>\n * <li><b>End-of-line comments:</b> Any occurrence of '//' will cause all text following on that line to be discarded\n * as a comment.</li>\n * <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode. This will skip\n * all content until a line ending in '*' and '/' is found.</li>\n * <li><b>Blank lines:</b> All blank lines will be skipped.</li>\n * </ul>\n *\n * @since 1.6\n * @version $Id$\n */\npublic class Rule {\n    private static boolean contains(final CharSequence chars, final char input);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Language guessing utility.\n * <p>\n * This class encapsulates rules used to guess the possible languages that a word originates from. This is\n * done by reference to a whole series of rules distributed in resource files.\n * <p>\n * Instances of this class are typically managed through the static factory method instance().\n * Unless you are developing your own language guessing rules, you will not need to interact with this class directly.\n * <p>\n * This class is intended to be immutable and thread-safe.\n * <p>\n * <b>Lang resources</b>\n * <p>\n * Language guessing rules are typically loaded from resource files. These are UTF-8 encoded text files.\n * They are systematically named following the pattern:\n * <blockquote>org/apache/commons/codec/language/bm/lang.txt</blockquote>\n * The format of these resources is the following:\n * <ul>\n * <li><b>Rules:</b> whitespace separated strings.\n * There should be 3 columns to each row, and these will be interpreted as:\n * <ol>\n * <li>pattern: a regular expression.</li>\n * <li>languages: a '+'-separated list of languages.</li>\n * <li>acceptOnMatch: 'true' or 'false' indicating if a match rules in or rules out the language.</li>\n * </ol>\n * </li>\n * <li><b>End-of-line comments:</b> Any occurrence of '//' will cause all text following on that line to be\n * discarded as a comment.</li>\n * <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode.\n * This will skip all content until a line ending in '*' and '/' is found.</li>\n * <li><b>Blank lines:</b> All blank lines will be skipped.</li>\n * </ul>\n * <p>\n * Port of lang.php\n *\n * @since 1.6\n * @version $Id$\n */\npublic class Lang {\n    /**\n     * Gets a Lang instance for one of the supported NameTypes.\n     *\n     * @param nameType\n     *            the NameType to look up\n     * @return a Lang encapsulating the language guessing rules for that name type\n     */\n    public static Lang instance(final NameType nameType);\n}\n/**\n * Converts words into potential phonetic representations.\n * <p>\n * This is a two-stage process. Firstly, the word is converted into a phonetic representation that takes\n * into account the likely source language. Next, this phonetic representation is converted into a\n * pan-European 'average' representation, allowing comparison between different versions of essentially\n * the same word from different languages.\n * <p>\n * This class is intentionally immutable and thread-safe.\n * If you wish to alter the settings for a PhoneticEngine, you\n * must make a new one with the updated settings.\n * <p>\n * Ported from phoneticengine.php\n *\n * @since 1.6\n * @version $Id$\n */\npublic class PhoneticEngine {\n    /**\n     * Joins some strings with an internal separator.\n     * @param strings   Strings to join\n     * @param sep       String to separate them with\n     * @return a single String consisting of each element of <code>strings</code> interleaved by <code>sep</code>\n     */\n    private static String join(final Iterable<String> strings, final String sep);\n    /**\n     * Applies the final rules to convert from a language-specific phonetic representation to a\n     * language-independent representation.\n     *\n     * @param phonemeBuilder the current phonemes\n     * @param finalRules the final rules to apply\n     * @return the resulting phonemes\n     */\n    private PhonemeBuilder applyFinalRules(final PhonemeBuilder phonemeBuilder,\n                                           final Map<String, List<Rule>> finalRules);\n    /**\n     * Encodes an input string into an output phonetic representation, given a set of possible origin languages.\n     *\n     * @param input\n     *            String to phoneticise; a String with dashes or spaces separating each word\n     * @param languageSet\n     * @return a phonetic representation of the input; a String containing '-'-separated phonetic representations\n     *   of the input\n     */\n    public String encode(String input, final Languages.LanguageSet languageSet);\n    /**\n     * Encodes a string to its phonetic representation.\n     *\n     * @param input\n     *            the String to encode\n     * @return the encoding of the input\n     */\n    public String encode(final String input);\n}\n/**\n * A phoneme rule.\n * <p>\n * Rules have a pattern, left context, right context, output phoneme, set of languages for which they apply\n * and a logical flag indicating if all languages must be in play. A rule matches if:\n * <ul>\n * <li>the pattern matches at the current position</li>\n * <li>the string up until the beginning of the pattern matches the left context</li>\n * <li>the string from the end of the pattern matches the right context</li>\n * <li>logical is ALL and all languages are in scope; or</li>\n * <li>logical is any other value and at least one language is in scope</li>\n * </ul>\n * <p>\n * Rules are typically generated by parsing rules resources. In normal use, there will be no need for the user\n * to explicitly construct their own.\n * <p>\n * Rules are immutable and thread-safe.\n * <p>\n * <b>Rules resources</b>\n * <p>\n * Rules are typically loaded from resource files. These are UTF-8 encoded text files. They are systematically\n * named following the pattern:\n * <blockquote>org/apache/commons/codec/language/bm/${NameType#getName}_${RuleType#getName}_${language}.txt</blockquote>\n * <p>\n * The format of these resources is the following:\n * <ul>\n * <li><b>Rules:</b> whitespace separated, double-quoted strings. There should be 4 columns to each row, and these\n * will be interpreted as:\n * <ol>\n * <li>pattern</li>\n * <li>left context</li>\n * <li>right context</li>\n * <li>phoneme</li>\n * </ol>\n * </li>\n * <li><b>End-of-line comments:</b> Any occurrence of '//' will cause all text following on that line to be discarded\n * as a comment.</li>\n * <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode. This will skip\n * all content until a line ending in '*' and '/' is found.</li>\n * <li><b>Blank lines:</b> All blank lines will be skipped.</li>\n * </ul>\n *\n * @since 1.6\n * @version $Id$\n */\npublic class Rule {\n    private static boolean contains(final CharSequence chars, final char input);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private static String encode(final Map<String, String> args, final boolean concat, final String input) {\n        Languages.LanguageSet languageSet;\n        PhoneticEngine engine;\n\n        // PhoneticEngine = NameType + RuleType + concat\n        // we use common-codec's defaults: GENERIC + APPROX + true\n        final String nameTypeArg = args.get(\"nameType\");\n        final NameType nameType = (nameTypeArg == null) ? NameType.GENERIC : NameType.valueOf(nameTypeArg);\n\n        final String ruleTypeArg = args.get(\"ruleType\");\n        final RuleType ruleType = (ruleTypeArg == null) ? RuleType.APPROX : RuleType.valueOf(ruleTypeArg);\n\n        engine = new PhoneticEngine(nameType, ruleType, concat);\n\n        // LanguageSet: defaults to automagic, otherwise a comma-separated list.\n        final String languageSetArg = args.get(\"languageSet\");\n        if (languageSetArg == null || languageSetArg.equals(\"auto\")) {\n            languageSet = null;\n        } else {\n            languageSet = Languages.LanguageSet.from(new HashSet<String>(Arrays.asList(languageSetArg.split(\",\"))));\n        }\n\n        /*\n            org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java (lines 96-98) does this:\n\n            encoded = (languages == null)\n                ? engine.encode(termAtt.toString())\n                : engine.encode(termAtt.toString(), languages);\n\n            Hence our approach, below:\n        */\n        if (languageSet == null) {\n            return engine.encode(input);\n        } else {\n            return engine.encode(input, languageSet);\n        }\n    }\n    public void testCompatibilityWithOriginalVersion() {\n        // see CODEC-187\n        // comparison: http://stevemorse.org/census/soundex.html\n\n        Map<String, String> args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"GENERIC\");\n        args.put(\"ruleType\", \"APPROX\");\n\n        assertEquals(encode(args, true, \"abram\"), \"Ybram|Ybrom|abram|abran|abrom|abron|avram|avrom|obram|obran|obrom|obron|ovram|ovrom\");\n        assertEquals(encode(args, true, \"Bendzin\"), \"bndzn|bntsn|bnzn|vndzn|vntsn\");\n\n        args.put(\"nameType\", \"ASHKENAZI\");\n        args.put(\"ruleType\", \"APPROX\");\n\n        assertEquals(encode(args, true, \"abram\"), \"Ybram|Ybrom|abram|abrom|avram|avrom|imbram|imbrom|obram|obrom|ombram|ombrom|ovram|ovrom\");\n        assertEquals(encode(args, true, \"Halpern\"), \"YlpYrn|Ylpirn|alpYrn|alpirn|olpYrn|olpirn|xalpirn|xolpirn\");\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n * general purpose scheme to find word with similar phonemes.\n *\n * This class is thread-safe.\n * Although not strictly immutable, the {@link #maxLength} field is not actually used.\n *\n * @version $Id$\n */\npublic class Soundex implements StringEncoder {\n    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\n    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n    public static final Soundex US_ENGLISH = new Soundex();\n    private int maxLength = 4;\n    private final char[] soundexMapping;\n    /**\n     * Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n     *\n     * @param obj\n     *                  Object to encode\n     * @return An object (or type java.lang.String) containing the soundex code which corresponds to the String\n     *             supplied.\n     * @throws EncoderException\n     *                  if the parameter supplied is not of type java.lang.String\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public Object encode(final Object obj) throws EncoderException;\n    /**\n     * Encodes a String using the soundex algorithm.\n     *\n     * @param str\n     *                  A String object to encode\n     * @return A Soundex code corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public String encode(final String str);\n    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n * general purpose scheme to find word with similar phonemes.\n *\n * This class is thread-safe.\n * Although not strictly immutable, the {@link #maxLength} field is not actually used.\n *\n * @version $Id$\n */\npublic class Soundex implements StringEncoder {\n    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\n    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n    public static final Soundex US_ENGLISH = new Soundex();\n    private int maxLength = 4;\n    private final char[] soundexMapping;\n    /**\n     * Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n     *\n     * @param obj\n     *                  Object to encode\n     * @return An object (or type java.lang.String) containing the soundex code which corresponds to the String\n     *             supplied.\n     * @throws EncoderException\n     *                  if the parameter supplied is not of type java.lang.String\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public Object encode(final Object obj) throws EncoderException;\n    /**\n     * Encodes a String using the soundex algorithm.\n     *\n     * @param str\n     *                  A String object to encode\n     * @return A Soundex code corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public String encode(final String str);\n    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testHWRuleEx1() {\n        // From\n        // http://www.archives.gov/research_room/genealogy/census/soundex.html:\n        // Ashcraft is coded A-261 (A, 2 for the S, C ignored, 6 for the R, 1\n        // for the F). It is not coded A-226.\n        Assert.assertEquals(\"A261\", this.getStringEncoder().encode(\"Ashcraft\"));\n        Assert.assertEquals(\"A261\", this.getStringEncoder().encode(\"Ashcroft\"));\n        Assert.assertEquals(\"Y330\", this.getStringEncoder().encode(\"yehudit\"));\n        Assert.assertEquals(\"Y330\", this.getStringEncoder().encode(\"yhwdyt\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Provides Base32 encoding and decoding as defined by <a href=\"http://www.ietf.org/rfc/rfc4648.txt\">RFC 4648</a>.\n *\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * </p>\n * <ul>\n * <li>Whether to use the \"base32hex\" variant instead of the default \"base32\"</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 8 will still essentially end up being multiples of\n * 8 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * <p>\n * This class operates directly on byte streams, and not character streams.\n * </p>\n * <p>\n * This class is thread-safe.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc4648.txt\">RFC 4648</a>\n *\n * @since 1.5\n * @version $Id$\n */\npublic class Base32 extends BaseNCodec {\n    private static final int BITS_PER_ENCODED_BYTE = 5;\n    private static final int BYTES_PER_ENCODED_BLOCK = 8;\n    private static final int BYTES_PER_UNENCODED_BLOCK = 5;\n    /**\n     * <p>\n     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once\n     * with the data to decode, and once with inAvail set to \"-1\" to alert decoder that EOF has been reached. The \"-1\"\n     * call is not necessary when decoding, but it doesn't hurt, either.\n     * </p>\n     * <p>\n     * Ignores all non-Base32 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are\n     * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,\n     * garbage-out philosophy: it will not check the provided data for validity.\n     * </p>\n     *\n     * @param in\n     *            byte[] array of ascii data to Base32 decode.\n     * @param inPos\n     *            Position to start reading data from.\n     * @param inAvail\n     *            Amount of bytes available from input for encoding.\n     * @param context the context to be used\n     *\n     * Output is written to {@link Context#buffer} as 8-bit octets, using {@link Context#pos} as the buffer position\n     */\n    @Override\n    void decode(final byte[] in, int inPos, final int inAvail, final Context context);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Provides Base32 encoding and decoding as defined by <a href=\"http://www.ietf.org/rfc/rfc4648.txt\">RFC 4648</a>.\n *\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * </p>\n * <ul>\n * <li>Whether to use the \"base32hex\" variant instead of the default \"base32\"</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 8 will still essentially end up being multiples of\n * 8 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * <p>\n * This class operates directly on byte streams, and not character streams.\n * </p>\n * <p>\n * This class is thread-safe.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc4648.txt\">RFC 4648</a>\n *\n * @since 1.5\n * @version $Id$\n */\npublic class Base32 extends BaseNCodec {\n    private static final int BITS_PER_ENCODED_BYTE = 5;\n    private static final int BYTES_PER_ENCODED_BLOCK = 8;\n    private static final int BYTES_PER_UNENCODED_BLOCK = 5;\n    /**\n     * <p>\n     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once\n     * with the data to decode, and once with inAvail set to \"-1\" to alert decoder that EOF has been reached. The \"-1\"\n     * call is not necessary when decoding, but it doesn't hurt, either.\n     * </p>\n     * <p>\n     * Ignores all non-Base32 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are\n     * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,\n     * garbage-out philosophy: it will not check the provided data for validity.\n     * </p>\n     *\n     * @param in\n     *            byte[] array of ascii data to Base32 decode.\n     * @param inPos\n     *            Position to start reading data from.\n     * @param inAvail\n     *            Amount of bytes available from input for encoding.\n     * @param context the context to be used\n     *\n     * Output is written to {@link Context#buffer} as 8-bit octets, using {@link Context#pos} as the buffer position\n     */\n    @Override\n    void decode(final byte[] in, int inPos, final int inAvail, final Context context);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testCodec200() {\n        final Base32 codec = new Base32(true, (byte)'W'); // should be allowed\n        assertNotNull(codec);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Converts String to and from bytes using the encodings required by the Java specification. These encodings are\n * specified in <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">\n * Standard charsets</a>.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @see CharEncoding\n * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n * @version $Id$\n * @since 1.4\n */\npublic class StringUtils {\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16BE charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16BE charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringUtf16Be(final byte[] bytes);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16LE charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16LE charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringUtf16Le(final byte[] bytes);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the ISO-8859-1 charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters, may be <code>null</code>\n     * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset, or\n     *         <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringIso8859_1(final byte[] bytes);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the US-ASCII charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new <code>String</code> decoded from the specified array of bytes using the US-ASCII charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringUsAscii(final byte[] bytes);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16 charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16 charset\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringUtf16(final byte[] bytes);\n    /**\n     * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte\n     * array.\n     * <p>\n     * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which\n     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n     * </p>\n     *\n     * @param string\n     *            the String to encode, may be <code>null</code>\n     * @param charsetName\n     *            The name of a required {@link java.nio.charset.Charset}\n     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n     * @throws IllegalStateException\n     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n     *             required charset name.\n     * @see CharEncoding\n     * @see String#getBytes(String)\n     */\n    public static byte[] getBytesUnchecked(final String string, final String charsetName);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @param charset\n     *            The {@link Charset} to encode the <code>String</code>\n     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     */\n    private static String newString(final byte[] bytes, final Charset charset);\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2);\n    /**\n     * Calls {@link String#getBytes(Charset)}\n     *\n     * @param string\n     *            The string to encode (if null, return null).\n     * @param charset\n     *            The {@link Charset} to encode the <code>String</code>\n     * @return the encoded bytes\n     */\n    private static byte[] getBytes(final String string, final Charset charset);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-8 charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-8 charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringUtf8(final byte[] bytes);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n     * <p>\n     * This method catches {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which\n     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n     * </p>\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters, may be <code>null</code>\n     * @param charsetName\n     *            The name of a required {@link java.nio.charset.Charset}\n     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws IllegalStateException\n     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n     *             required charset name.\n     * @see CharEncoding\n     * @see String#String(byte[], String)\n     */\n    public static String newString(final byte[] bytes, final String charsetName);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Converts String to and from bytes using the encodings required by the Java specification. These encodings are\n * specified in <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">\n * Standard charsets</a>.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @see CharEncoding\n * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n * @version $Id$\n * @since 1.4\n */\npublic class StringUtils {\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16BE charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16BE charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringUtf16Be(final byte[] bytes);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16LE charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16LE charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringUtf16Le(final byte[] bytes);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the ISO-8859-1 charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters, may be <code>null</code>\n     * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset, or\n     *         <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringIso8859_1(final byte[] bytes);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the US-ASCII charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new <code>String</code> decoded from the specified array of bytes using the US-ASCII charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringUsAscii(final byte[] bytes);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16 charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16 charset\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringUtf16(final byte[] bytes);\n    /**\n     * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte\n     * array.\n     * <p>\n     * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which\n     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n     * </p>\n     *\n     * @param string\n     *            the String to encode, may be <code>null</code>\n     * @param charsetName\n     *            The name of a required {@link java.nio.charset.Charset}\n     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n     * @throws IllegalStateException\n     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n     *             required charset name.\n     * @see CharEncoding\n     * @see String#getBytes(String)\n     */\n    public static byte[] getBytesUnchecked(final String string, final String charsetName);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @param charset\n     *            The {@link Charset} to encode the <code>String</code>\n     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     */\n    private static String newString(final byte[] bytes, final Charset charset);\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2);\n    /**\n     * Calls {@link String#getBytes(Charset)}\n     *\n     * @param string\n     *            The string to encode (if null, return null).\n     * @param charset\n     *            The {@link Charset} to encode the <code>String</code>\n     * @return the encoded bytes\n     */\n    private static byte[] getBytes(final String string, final Charset charset);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-8 charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-8 charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     */\n    public static String newStringUtf8(final byte[] bytes);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n     * <p>\n     * This method catches {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which\n     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n     * </p>\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters, may be <code>null</code>\n     * @param charsetName\n     *            The name of a required {@link java.nio.charset.Charset}\n     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws IllegalStateException\n     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n     *             required charset name.\n     * @see CharEncoding\n     * @see String#String(byte[], String)\n     */\n    public static String newString(final byte[] bytes, final String charsetName);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void testGetBytesUnchecked(final String charsetName) throws UnsupportedEncodingException {\n        final byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        final byte[] actual = StringUtils.getBytesUnchecked(STRING_FIXTURE, charsetName);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }\n    private void testNewString(final String charsetName) throws UnsupportedEncodingException {\n        final String expected = new String(BYTES_FIXTURE, charsetName);\n        final String actual = StringUtils.newString(BYTES_FIXTURE, charsetName);\n        Assert.assertEquals(expected, actual);\n    }\n    public void testNewStringNullInput_CODEC229() {\n        Assert.assertNull(StringUtils.newStringUtf8(null));\n        Assert.assertNull(StringUtils.newStringIso8859_1(null));\n        Assert.assertNull(StringUtils.newStringUsAscii(null));\n        Assert.assertNull(StringUtils.newStringUtf16(null));\n        Assert.assertNull(StringUtils.newStringUtf16Be(null));\n        Assert.assertNull(StringUtils.newStringUtf16Le(null));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Converts String to and from bytes using the encodings required by the Java specification. These encodings are\n * specified in <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">\n * Standard charsets</a>.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @see CharEncoding\n * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n * @version $Id$\n * @since 1.4\n */\npublic class StringUtils {\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @param charset\n     *            The {@link Charset} to encode the <code>String</code>; not {@code null}\n     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if charset is {@code null}\n     */\n    private static String newString(final byte[] bytes, final Charset charset);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n     * <p>\n     * This method catches {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which\n     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n     * </p>\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters, may be <code>null</code>\n     * @param charsetName\n     *            The name of a required {@link java.nio.charset.Charset}\n     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws IllegalStateException\n     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n     *             required charset name.\n     * @see CharEncoding\n     * @see String#String(byte[], String)\n     */\n    public static String newString(final byte[] bytes, final String charsetName);\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2);\n    /**\n     * Calls {@link String#getBytes(Charset)}\n     *\n     * @param string\n     *            The string to encode (if null, return null).\n     * @param charset\n     *            The {@link Charset} to encode the <code>String</code>\n     * @return the encoded bytes\n     */\n    private static byte[] getBytes(final String string, final Charset charset);\n    /**\n     * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte\n     * array.\n     * <p>\n     * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which\n     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n     * </p>\n     *\n     * @param string\n     *            the String to encode, may be <code>null</code>\n     * @param charsetName\n     *            The name of a required {@link java.nio.charset.Charset}\n     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n     * @throws IllegalStateException\n     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n     *             required charset name.\n     * @see CharEncoding\n     * @see String#getBytes(String)\n     */\n    public static byte[] getBytesUnchecked(final String string, final String charsetName);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Converts String to and from bytes using the encodings required by the Java specification. These encodings are\n * specified in <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">\n * Standard charsets</a>.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @see CharEncoding\n * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n * @version $Id$\n * @since 1.4\n */\npublic class StringUtils {\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @param charset\n     *            The {@link Charset} to encode the <code>String</code>; not {@code null}\n     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws NullPointerException\n     *             Thrown if charset is {@code null}\n     */\n    private static String newString(final byte[] bytes, final Charset charset);\n    /**\n     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n     * <p>\n     * This method catches {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which\n     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n     * </p>\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters, may be <code>null</code>\n     * @param charsetName\n     *            The name of a required {@link java.nio.charset.Charset}\n     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n     *         or <code>null</code> if the input byte array was <code>null</code>.\n     * @throws IllegalStateException\n     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n     *             required charset name.\n     * @see CharEncoding\n     * @see String#String(byte[], String)\n     */\n    public static String newString(final byte[] bytes, final String charsetName);\n    /**\n     * <p>\n     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be <code>null</code>\n     * @param cs2\n     *            the second CharSequence, may be <code>null</code>\n     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n     * @since 1.10\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2);\n    /**\n     * Calls {@link String#getBytes(Charset)}\n     *\n     * @param string\n     *            The string to encode (if null, return null).\n     * @param charset\n     *            The {@link Charset} to encode the <code>String</code>\n     * @return the encoded bytes\n     */\n    private static byte[] getBytes(final String string, final Charset charset);\n    /**\n     * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte\n     * array.\n     * <p>\n     * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which\n     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n     * </p>\n     *\n     * @param string\n     *            the String to encode, may be <code>null</code>\n     * @param charsetName\n     *            The name of a required {@link java.nio.charset.Charset}\n     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n     * @throws IllegalStateException\n     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n     *             required charset name.\n     * @see CharEncoding\n     * @see String#getBytes(String)\n     */\n    public static byte[] getBytesUnchecked(final String string, final String charsetName);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void testGetBytesUnchecked(final String charsetName) throws UnsupportedEncodingException {\n        final byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        final byte[] actual = StringUtils.getBytesUnchecked(STRING_FIXTURE, charsetName);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }\n    private void testNewString(final String charsetName) throws UnsupportedEncodingException {\n        final String expected = new String(BYTES_FIXTURE, charsetName);\n        final String actual = StringUtils.newString(BYTES_FIXTURE, charsetName);\n        Assert.assertEquals(expected, actual);\n    }\n    public void testEqualsCS1() {\n        Assert.assertFalse(StringUtils.equals(new StringBuilder(\"abc\"), null));\n        Assert.assertFalse(StringUtils.equals(null, new StringBuilder(\"abc\")));\n        Assert.assertTrue(StringUtils.equals(new StringBuilder(\"abc\"), new StringBuilder(\"abc\")));\n        Assert.assertFalse(StringUtils.equals(new StringBuilder(\"abc\"), new StringBuilder(\"abcd\")));\n        Assert.assertFalse(StringUtils.equals(new StringBuilder(\"abcd\"), new StringBuilder(\"abc\")));\n        Assert.assertFalse(StringUtils.equals(new StringBuilder(\"abc\"), new StringBuilder(\"ABC\")));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0-dev\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    /**\n     * <p>\n     * Encodes all of the provided data, starting at inPos, for inAvail bytes.\n     * Must be called at least twice:  once with the data to encode, and once\n     * with inAvail set to \"-1\" to alert encoder that EOF has been reached,\n     * so flush last remaining bytes (if not multiple of 3).\n     * </p><p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations,\n     * and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     *\n     * @param in byte[] array of binary data to base64 encode.\n     * @param inPos Position to start reading data from.\n     * @param inAvail Amount of bytes available from input for encoding.\n     */\n    void encode(byte[] in, int inPos, int inAvail);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0-dev\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    /**\n     * <p>\n     * Encodes all of the provided data, starting at inPos, for inAvail bytes.\n     * Must be called at least twice:  once with the data to encode, and once\n     * with inAvail set to \"-1\" to alert encoder that EOF has been reached,\n     * so flush last remaining bytes (if not multiple of 3).\n     * </p><p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations,\n     * and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     *\n     * @param in byte[] array of binary data to base64 encode.\n     * @param inPos Position to start reading data from.\n     * @param inAvail Amount of bytes available from input for encoding.\n     */\n    void encode(byte[] in, int inPos, int inAvail);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void testByteByByte(\n            byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator\n    ) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base64InputStream(in, true, chunkSize, seperator);\n        byte[] output = new byte[encoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base64InputStream(in);\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this!  (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, seperator);\n            in = new Base64InputStream(in, false);\n        }\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }\n    private void testByChunk(\n            byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator\n    ) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base64InputStream(in, true, chunkSize, seperator);\n        byte[] output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base64InputStream(in);\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this!  (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, seperator);\n            in = new Base64InputStream(in, false);\n        }\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }\n     * @throws Exception for some failure scenarios. */     public void testBase64EmptyInputStream() throws Exception { byte[] emptyEncoded = new byte[0];\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Encodes a string into a double metaphone value.\n * This Implementation is based on the algorithm by <CITE>Lawrence Philips</CITE>.\n * <ul>\n * <li>Original Article: <a \n * href=\"http://www.cuj.com/documents/s=8038/cuj0006philips/\">\n * http://www.cuj.com/documents/s=8038/cuj0006philips/</a></li>\n * <li>Original Source Code: <a href=\"ftp://ftp.cuj.com/pub/2000/1806/philips.zip\">\n * ftp://ftp.cuj.com/pub/2000/1806/philips.zip</a></li>\n * </ul>\n * \n * @author Apache Software Foundation\n * @version $Id$\n */\npublic class DoubleMetaphone implements StringEncoder {\n    private static final String VOWELS = \"AEIOUY\";\n    /**\n     * Encode a value with Double Metaphone, optionally using the alternate\n     * encoding.\n     *\n     * @param value String to encode\n     * @param alternate use alternate encode\n     * @return an encoded string\n     */\n    public String doubleMetaphone(String value, boolean alternate);\n    /**\n     * Encode a value with Double Metaphone\n     *\n     * @param value String to encode\n     * @return an encoded string\n     */\n    public String doubleMetaphone(String value);\n    /**\n     * Handles 'G' cases\n     */\n    private int handleG(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Encodes a string into a double metaphone value.\n * This Implementation is based on the algorithm by <CITE>Lawrence Philips</CITE>.\n * <ul>\n * <li>Original Article: <a \n * href=\"http://www.cuj.com/documents/s=8038/cuj0006philips/\">\n * http://www.cuj.com/documents/s=8038/cuj0006philips/</a></li>\n * <li>Original Source Code: <a href=\"ftp://ftp.cuj.com/pub/2000/1806/philips.zip\">\n * ftp://ftp.cuj.com/pub/2000/1806/philips.zip</a></li>\n * </ul>\n * \n * @author Apache Software Foundation\n * @version $Id$\n */\npublic class DoubleMetaphone implements StringEncoder {\n    private static final String VOWELS = \"AEIOUY\";\n    /**\n     * Encode a value with Double Metaphone, optionally using the alternate\n     * encoding.\n     *\n     * @param value String to encode\n     * @param alternate use alternate encode\n     * @return an encoded string\n     */\n    public String doubleMetaphone(String value, boolean alternate);\n    /**\n     * Encode a value with Double Metaphone\n     *\n     * @param value String to encode\n     * @return an encoded string\n     */\n    public String doubleMetaphone(String value);\n    /**\n     * Handles 'G' cases\n     */\n    private int handleG(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testDoubleMetaphoneAlternate() {\n        String value = null;\n        for (int i = 0; i < TEST_DATA.length; i++) {\n            value = TEST_DATA[i][0];\n            assertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][2], doubleMetaphone.doubleMetaphone(value, true));\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n    /**\n     * Returns our current encode mode. True if we're URL-SAFE, false otherwise.\n     * \n     * @return true if we're in URL-SAFE mode, false otherwise.\n     * @since 1.4\n     */\n    public boolean isUrlSafe();\n    /**\n     * Encodes a byte[] containing binary data, into a byte[] containing characters in the Base64 alphabet.\n     * \n     * @param pArray\n     *            a byte array containing binary data\n     * @return A byte array containing only Base64 character data\n     */\n    public byte[] encode(byte[] pArray);\n    /**\n     * Encodes an Object using the base64 algorithm. This method is provided in order to satisfy the requirements of the\n     * Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].\n     * \n     * @param pObject\n     *            Object to encode\n     * @return An object (of type byte[]) containing the base64 encoded data which corresponds to the byte[] supplied.\n     * @throws EncoderException\n     *             if the parameter supplied is not of type byte[]\n     */\n    public Object encode(Object pObject) throws EncoderException;\n    /**\n     * <p>\n     * Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with\n     * the data to encode, and once with inAvail set to \"-1\" to alert encoder that EOF has been reached, so flush last\n     * remaining bytes (if not multiple of 3).\n     * </p>\n     * <p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     * \n     * @param in\n     *            byte[] array of binary data to base64 encode.\n     * @param inPos\n     *            Position to start reading data from.\n     * @param inAvail\n     *            Amount of bytes available from input for encoding.\n     */\n    void encode(byte[] in, int inPos, int inAvail);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n    /**\n     * Returns our current encode mode. True if we're URL-SAFE, false otherwise.\n     * \n     * @return true if we're in URL-SAFE mode, false otherwise.\n     * @since 1.4\n     */\n    public boolean isUrlSafe();\n    /**\n     * Encodes a byte[] containing binary data, into a byte[] containing characters in the Base64 alphabet.\n     * \n     * @param pArray\n     *            a byte array containing binary data\n     * @return A byte array containing only Base64 character data\n     */\n    public byte[] encode(byte[] pArray);\n    /**\n     * Encodes an Object using the base64 algorithm. This method is provided in order to satisfy the requirements of the\n     * Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].\n     * \n     * @param pObject\n     *            Object to encode\n     * @return An object (of type byte[]) containing the base64 encoded data which corresponds to the byte[] supplied.\n     * @throws EncoderException\n     *             if the parameter supplied is not of type byte[]\n     */\n    public Object encode(Object pObject) throws EncoderException;\n    /**\n     * <p>\n     * Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with\n     * the data to encode, and once with inAvail set to \"-1\" to alert encoder that EOF has been reached, so flush last\n     * remaining bytes (if not multiple of 3).\n     * </p>\n     * <p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     * \n     * @param in\n     *            byte[] array of binary data to base64 encode.\n     * @param inPos\n     *            Position to start reading data from.\n     * @param inAvail\n     *            Amount of bytes available from input for encoding.\n     */\n    void encode(byte[] in, int inPos, int inAvail);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private static void initSTRINGS() {\n        String[] s = STRINGS;\n        s[0] = \"\";\n        s[1] = \"uA==\";\n        s[2] = \"z9w=\";\n        s[3] = \"TQ+Z\";\n        s[4] = \"bhjUYA==\";\n        s[5] = \"1cO9td8=\";\n        s[6] = \"sMxHoJf5\";\n        s[7] = \"jQcPlDsZzw==\";\n        s[8] = \"TAaPnfW/CYU=\";\n        s[9] = \"cXTZuwzXPONS\";\n        s[10] = \"Ltn/ZTV4IjT6OA==\";\n        s[11] = \"6fh+jdU31SOmWrc=\";\n        s[12] = \"E/5MoD4qCvDuTcFA\";\n        s[13] = \"2n9YyfCMyMXembtssQ==\";\n        s[14] = \"qBka3Bq6V31HmcmHjkY=\";\n        s[15] = \"WvyZe6kQ8py7m25ucawJ\";\n        s[16] = \"oYpxMy6BSpZXhVpOR6dXmA==\";\n        s[63] = \"yexFaNKaP+VkVwEUvxQXbC0HSCi/srOY7c036lT25frs4xjIvp214JHCg7OL/XZW3IMe6CDgSMCaaI91eRgM\";\n        s[64] = \"vkqgnuJ3plxNtoveiMJuYLN6wZQLpb3Fg48/zHkdFuDucuMKWVRO/niFRgKsFqcxq6VgCxwQbePiP9sRnxz7wg==\";\n        s[65] = \"YHks3GCb2uVF47Y2tCieiDGJ879Rm5dBhQhQizYhfWOo+BrB2/K+E7wZWTid14lMpM60+5C0N9JNKAcBESeqZZI=\";\n        s[66] = \"z8551jmQp/Qs95tw226+HCHWruKx/JvfBCfQ5p0fF77mkSpp66E552ik2gycrBBsMC/NbznAgTZoMzZxehfJwu49\";\n        s[67] = \"VsR2whqq/qQm342+TNz1lgOZMoWbpCz+kj2zflq0nx7S/ReEVPUJcqgMtVzrr2FVQPfBAH5VRjR+hkxwv4bssQms8Q==\";\n        s[68] = \"5xmIp8dUJZzkisIkuEPsnPXvzDeMo48qWFfHIn2av3jr5qoZHCs0LfNEyepC3v2sa0nCU0FlqsmDyTI5/2jt5zsLtV0=\";\n        s[69] = \"tGEgXjglUB9NbCtiS88AetLtRqhCAnhzOUKVgvbJZHqOA6x8uOorA1t3NcaIA00ZqbPYALu4LzIm4i4lAL9QgiH/Jg7b\";\n        s[70] = \"gFtxEhYJahDmU5dpudYs6ZTsqAx+s2j+06A0zeyb3U7nhZFsbkCDlds0EYUoqerZqZPm7F6CDOOD3dU7nYmelE0DxyMO9A==\";\n        s[71] = \"j/h/1JygYA5bjttxzQxr5gBtgh+AYVozhF4WgvcU/g49v0hUy6FdhfZewGK+Phtzj7RabI5p2zXyzvkmLQdFhdI5Um4O5sw=\";\n        s[72] = \"m+kYVGojIR5pgbz7pGJm2g+3qqk7fhl3cowa2eVrhki7WofyywnRezqTxOkBgVFz6nKs8qxpbbbzALctcPeMsp9dpXUfuUJr\";\n        s[73] = \"pPaGnMr0UYmldnJVk/F+3WCJJ1r2otvD5KJdt2u1RnS6LwhHhwLCqfW8O/QEg43WdxKomGL/JM33tn/B9pMPoIU0QTGjq2GRow==\";\n        s[74] = \"mOxzGyym6T/BxCV5nSiIYMlfAUmCN7gt7+ZTMg1kd8Ptirk+JF5dk8USbWBu/9ZvNg5ZuiJCeGwfaVpqpZ3K9ySF7C87Jvu1RUE=\";\n        s[75] = \"VYLOIE4DnhxJn3FKS/2RHHHYLlZiGVdV/k4uBbtAYHUSTpRzaaYPGNAVjdNwbTHIihmeuk/5YQUy8NFsxIom+Li7bnWiBoHKBPP7\";\n        s[76] = \"7foMpJ0TknCatjUiSxtnuKSiz4Qvl/idWY9UKiTljoQHZ+C8bcUscnI/bZr13e6AvyUh47MlpdGvzIm05qUdMWWLoZJOaGYvDmvrWQ==\";\n        s[77] = \"jxQSGiFs+b1TfE4lDUAPUPJ0SWeUgl03rK6auieWJcarDIHM97gGOHMmyHudRMqkZmIkxYRgYgCCUg/JeU91OZD3tL4U+wNhShywe88=\";\n        s[78] = \"UGmH/gl7t3Dk801vRhRDEbgsfShtHZ1gZQn4KNZ5Qsw3WiGjW0ImInVHa+LSHBzLUjwC0Z3nXO4i4+CiKYqAspOViE6WqVUY8ZSV0Og4\";\n        s[79] = \"wdEoYmJuRng2z2IkAiSgJ1CW2VE7H7oXpYWEFFO8nG0bZn7PHhT8KyhaO2ridl8eUEysja0VXFDyQqSgZnvdUKrCGepWGZbw0/0bDws3Ag==\";\n        s[80] = \"5kZqgrUbt+rN5BWAddeUtm9TGT43vYpB6PeyQwTyy9Vbr0+U/4Qzy0Iw37Ra293HmkmpgQzuScVpcIiFGXPAFWwToR+bovwu7aXji/FnMwk=\";\n        s[81] = \"E467MMmJbmwv8Omc2TdcyMr/30B8izWbf+CAuJtw67b1g9trhC6n4GYnXjeW9DYvmWoIJPx0zvU/Q+gqv0cteg2bx9P2mrgMDARb6egowqjx\";\n        s[82] = \"Vpt8hYb4jx1F+7REX7K65v6eO5F1GDg/K8SVLWDSp0srupYEQkBVRxnB9dmhSo9XHpz4C8pRl8r82fxXZummEf4U2Oh0Dip5rnNtDL+IJvL8lQ==\";\n        s[121] = \"hf69xr9mtFf4N3j2uA9MgLL5Zy94Hjv+VQi94+LS8972JJgDHCQOwP5whdQkV+SJpXkiyHGaSsQ4fhepPwzuZcEpYER+beny1j+M0HSZe36MdRIhlTqno+4qsXckL0CjXsYkJJM0NAfOYjHAus5G1bgi9VhmiMfAMA==\";\n        s[122] = \"yKzTh5hPp9/PBeZtrZXsFHAR9ywOM3hRaBDkgG9E09wFW8MZD0xMGegcp0QrTJcP8QYOaYhTDVimPqsNTVOmjdjkvS+2WhjJW4mVOXQ8KID91yaBtPo+DStL5GMgctcP5MoVf1Vp8w/mYtofqbllfDm5NfYzh2A7ijY=\";\n        s[123] = \"csFmwvDzoO4IO6ySDA4B2V7emEetAwCgO66zzlfWb3KDrPfFZc3Jgr4+dlaUkEIDHYeLHETdTssWOl2KrPHBEsULpDTR+3OhurXb1Qr2NvHiHFuqT3Geb6EYw2albfTmXxch82ablt4WKl4qPcSey54v6tsCuUuZzrkt\";\n        s[124] = \"5InxvKwpoCV7EK78OzU/tL9/NmK14Prw9tOCAyK+xpUNLZriuVEVdgpoZ05rliufaUDGHH8dPAem8G9DN/VOPktB6vXKtc2kMUgnMTiZwv/UVd+xyqnT8PLEdNQ8rCWxyiCcLdXFf0+xcE7qCcwzC+D7+cRW+i6dnpZkyw==\";\n        s[125] = \"cEx7oTsSHWUFPj92cstdy5wGbRcxH+VRWN8kaNTTCPWqSckyU9Xk/jj5/gj9DFwjfsCSp60xutf4/rFanjtwqtRg6dJLP4JAgpOKswDlHi6Vt7zF/w7HidMf2sdtlsqzayZmT2Hn7iOo3CExzr5Z5JfmMFAX8R9peUN4t5U=\";\n        s[126] = \"AeXetVbj+7mmGiCs3BGUSZDLlq2odMsN8JAHQM64Cly8y5jw75PpISocWRFFQmmXYP7ckKmtuhIvD69HtZxGhNRsl1l1gXzKFhsWykcRtG87F8sS1Uv/i6QvGiRIDVEGGIzWrzRIISkBb9wCxJ2HESfleWwrz/GqryjoN26B\";\n        s[127] = \"aj1/8/+U8VO3D2iAwvQXZ4H0KwtuzDm4JCC8+22ccqk+UzKvqjGs87XngwfsMfSkeGVAi6VB6tfNJTjYctaj7R8dwh2PIfLSrvaphw4wNB2REjplnPojoOb9bNUNtUvdK3b1bArOWugIRJWLnMl72yEHFb1iBfBmn7uIa7KT2Q==\";\n        s[128] = \"kiMuF/1CMRlgoS/uLKn1mNZFZNHJNkRQnivOrzj8HQAagwzvTXvsGgI9hXX3qaeZL9/x/Oq+Y5F6Dh+wXo+0kp6JagFjvbTJcQSowFzIwg7/V9sans0NE0Ejow5BfZKvihFI46sHiALl1qzoXqLQq+5fZGIFRyyY8wFW1uiNu9k=\";\n        s[129] = \"YXmCWhiNz4/IhyxQIYjgNvjX+XwDiPTSBMaFELm5X8Y4knGRnkF4/zix8l9wHBb+7Cgfrr46rF7eiIzaAFLjLjjewy63duBJiVbEWjqFO0fu6T9iIjuEaF2sTppvuZNPHx80vN+HLAnAVmgFESw5APXWn15dizvuUfVHd5isCqbA\";\n        s[130] = \"GJfUoBivW5uqDpUxTRfjGWNYfN3/dTFtdRqCIH5L2c1nWX0dgY3ba1+fW/YX1Oh5aw4lC6BIiiThjJoV1VrNnlXzbcUcMy+GsDUUB8Qe8lBvfe/t4RmNPB0hVgrS89ntbuU0SsCmWw+9DqM3nidPebANKERig1zZTBBKgpVf7HPFCA==\";\n        s[131] = \"eTerNs7dOqJAxAxcMQRnUDc2cBj2x0jU1g1D3G+b22kDz7JBzOy/mxhGXAQ3130lavWMhImSBkReU+z0A13EYVMUv9PFzD747KCvns+SCo52YNHB0896b4l47q8hu8jsD17TZ2uWWJhS4cNnSE1jeM6NoXGKvf90yxfzwucNYc4RdaQ=\";\n        s[132] = \"lbrGsjbzE521q8tzVHV7vcTPchUnzI/UfeR2R+cmOa29YljPWLht9Wx2JrjiKv4Of5nXe7kvhi+LYUuFVqgaqIFhC/PLbqOFiT2VZcXorToaRT9CLiqV5b6nHN/Txz6SI7MiD3hnk7psDbglPOo+ytqc9sFHj7UkR1ZctQjwFYwJjlxf\";\n        s[133] = \"mQwAPzYzfxz9FXEiZ6M8u1oN3EJbFYmNVfpm+j0DqgU+OPI4URHBIrF4xvdMvAPn0WuarbQy/ZVN0eKL7S4K3Mvan0flAwaZdI+e5HpkfxOoGTp8Dk5EFTXjmZ/s+GonePEQEGNVPL1WYoD6xXqAAvMLKtyrFcpoiGS9eDBlsZDQzPzz/g==\";\n        s[134] = \"3G6d12UY4l5W7Nnw0BL0HnViVg9SdEuLMqeZwy0RlJR/Ytcgd/mIxIuXXAlGhvhoX6Xc2BGU7RpTi1jYKzA86yul0j96dbcE4OtrP9lUBJlcY9eWz59dvLqKxwt3cEOBwrPf69MHuIa256es3AOCobfC8RQScW0PQ0QUa1VHB/eXSsVTSWg=\";\n        s[135] = \"AxgrZKTFk5JvLC3DBACHwp266FxKI/yn9F+1tYkzL57RVs5HCJYS47VuG0T0E2wqzHqcLKPQMZWU7vbRoyMGNL3ZtaHoZqTqcq9KWtODC+OnEvSS7+1P4SmQDuyL2MJ/eJABJKNcu1K/Lk0buAaO0FvX6OGBcPzu1+dv/ZkwuORK07qRnxqQ\";\n        s[136] = \"atkG8l2U/Nnm+zLu7zjenrfcAVQJMUqHimFZ3cQfaUp4qyrFn1UiwZ33j66Vt63eVaT/FXx+LlEnsHn6ATPBMp3iEYoBJYyNpjz/zROhBbcznQAMdWUTcyKInvnG3x6ExgBXpyqfxxp/Pm8by7LlSUT5MKHdcu+TEfUXRokCr2iPnt7NYsNDfA==\";\n        s[137] = \"dciU1mSHGcBxOAVBgJx75J6DaQdBZfTIzQ04WhkkdRMupOZWSnv19xhz8hiO+ZnbBtDJuO5rHsUGzH/jYacfZyCQ924roRvkh3T1yxsLq3abZJUCD9HYnPTELVhv1+cEF4aoO3vGOu2FpfLUn5QTd0PozsIqcqZVB2V57B7DjfizUe3D8Yf5Vco=\";\n        s[138] = \"dgR1PPacBvtILBmg33s9KWtuc67ndh3rCHZ/lIN7sENgbFqJQy5DC3XIeHTV7oWd+tJQaXxoC71/SU7Rz6OClAMKXLbMz8U6RPiqn3M7MRCQcDfNjA5cCNknXT9Ehz/IZF/7lcWrwxBKYm4B98lPkpZtR2QHndiQ3venzWrP0P5y27mReaFuaJ++\";\n        s[139] = \"1Q8rfp1HuGsxurTgGMakxj5SwNF7EixXxVPnfGADWDcygh5C1BMXqiL1AuVXOVFOsaydfLWGC8Kbh/JiL6H+12lYrNGUT9yJRIzRDi4XylMnrYwBtwCJjoHSi4exz5K2ih54utVAuzXZg6mnc9ied/mNRjj9d2HFD5mv0w/qTN/WFxEmtuZM/nMMag==\";\n        s[140] = \"w01TnPP/F3Vni3fBdV32Bnbb4J1FcbaE+Xn44no5ug77U8FS1gSm3LqJ8yTyXduzl5v2dwBEfziEfTuyqgeLLsCYTBjXmYOIHQosEl6DyAknu4XK52eQW+Fes9eSs2Nq+G4aaR4y4leeFNmCoZ9BQmAAZr0LFkqnvqaKmBVgcgxPs7/8SQHnpqvaU6Y=\";\n        s[141] = \"OfzIF38Tp5g1W5eVbrkrMe0Mm7e0wBYg5hVvLpn/5MW5OFcmRDuBp15ayRBnJ1sBI93+CNl0LwP8Q0z9IXFjTER5gHZ1KfG8NV+oacKNG7aYrbUftkSL/oPfRNPez6U0FuWgvVrXUB6cwKTWvwb9KoD7s6AGYRdH50ZgJdBniFD7dKoOQnJ/ECuTUXI+\";\n        s[142] = \"4hoX0sjqlkSJPUq627iJkNYRbtD+V2qErCuTikaeRDEZvVHWvzdvwj4W1xxJjz+yHAN6z2EjCWidcSsVgTejQ1bH8uTzJgh/zq3yGUSsJoJWrecqxsge8bEBjkm+qUO8G3kAnC6FMjJ2NYQeXf6OK6OgsqyJwlHPTyAms2/IoYTB4iEqgIFG/2fNEJEIag==\";\n        s[143] = \"M/dy14xNbZMRfHiKKFdmD/OrEB+8MexrRO8mMh0i5LrNA5WUtLXdwUfAysYmal94MSoNJfgmwGCoqNwlWZBW1kpQaPdqsrn2cvc6JcZW9FlOx07DERJGbZ6l6ofbzZWgF+yf+hvT6jnJvXBVCTT3lfO3qo4leNuEJwsuU6erXGC3Ch53uPtGIrdDUpcX6/U=\";\n        s[144] = \"GgLr2hd3nK64IZv0JksKAT/yJNQ38ayuWyBnWLjXbEmT048UDppsrrnP6hikRo5v2TlHGhD2dcwG9NLK3Ph8IoIo9Wf2vZWBB+SMI9FpgZxBWLEjwHbOWsHaEQMVsQfk38EWQP0Fr6VyMKlEQfpsRkuCpp1KxscaxK7g5BgXUlb0a2x0F+C9hEB0OVPsj4JN\";\n        s[145] = \"W9lKcLDqNGQAG/sKQNaRmeOUmLJ7GcMNqBaGZ659Rnjr6RTrfnmkp5Z9meALnwXoHjPjzSQDJnVYsY+xyMnuPgl6gMVAhAm+XprYVpsne4vt+7ojUqavVPBqLy5dtnhp1qfcnAiV5cZhHXX7NbxkUOzptjEGCQjnhSH4rPbZtgoIWE8Z6boF3l/thLnFX+AiiQ==\";\n        s[146] = \"iYLn5h9lIhD/x9moaPRnTX6mJEJKThg4WXxS7IrR2zblH26uOkINz0dJNTJVets0ZNYDnsnT7J2iI3Y6hTVWPGoYU49J3B2LhCREs0DZQ3C7080FtiOcfHbfBLNn0DyCK1LeAC7YB/bNdiyhLqH8fKl+0+KhiPDIUBJY2e7IbZR/9t0sxJbIXx6cRvI5AXex12o=\";\n        s[147] = \"SlRJEc7npTUvQq8SgBYKmVY/3wHYp2gsDxafN/JLUuEqEjmWMtW7fxASi+ePX4gmJJqLhD5t+AZxiCwYK3L3ceuJx4TiqVgJz8d6sc7fgWXluh1K+BcGPbZ7+Cq4Vsga7JEBVekviEZ5Ah4apNr8RkB7oMOUVPGxRcyyaVE4zBW+scA6c1yi/HQXddQ9rWyLUsVo\";\n        s[148] = \"AAlbGR6ekLOzx4hpqZTUqVUQ0FL2CFpgCMOp6CuuUzkSnWXpUjvOiSDkNPgoTPgpgmg3uYvMsX43mkPGUGC9awDThXyGQh6u3WfWtmhiPRqXnjFek+EPd0LYXps71non6C9m7nUlYNWzBJ1YzrzWjlB5LLPBN8bsZG6RbdZkYMxJ9J5ta/c30m8wDDNuTm0nEE0ZVQ==\";\n        s[149] = \"nWWbBhzObqwEFh/TiKREcsqLYbRjIcZflJpol16Mi4YDL6EZri22qRnTgrBtIY+HieTYWuLaCSk/B9WcYujoS6Jb5dyg3FQ6XF9bYaNQGx2w8DHgx0k2nqH/0U1sAU0kft32aD2orqCMIprbO1WJIt2auRnvcOTFoOax926nAkxvR3nrFVDevFjDbugpWHkGwic6G7o=\";\n        s[150] = \"WNk1Rn2qtG+gk0AEewrgo+aRbNrG4CgQpOR8Uo7c2m2XQY8MVDu4uRA6rzYGGdgqTcICKky9MvHeJeNWVAXOxmA4EdXQ2xItFJdQtxBt56cad9FBXXsz21yVsPr5d453abi7T3XfHVTToekiOlxAJs+bpat9cFRbIdHghO9wc/ucoArT53vpYsnyeVnmZG2PX48lXpNS\";\n        s[151] = \"wVmiO6mdf2aahrJlcmnBD0Qa58y8AvzXtJ54ImxgPLPn0NCQIrmUxzNZNTODE3WO6kZMECaT/REqT3PoOBp9stCHCFNXOM7979J44C1ZRU0yPCha00kQZBF5EmcLitVCz10tP8gG1fiIvMjwpd2ZTOaY4/g4NeJHLjJPll0c5nbH7n4v+1I+xG7/7k7G6N8sp21pbgpTYA==\";\n        s[152] = \"OoiVZosI+KG0EZTu+WpH7kKISxmO1zRYaSPMBMW0AyRiC2iZVEkOMiKn12XPqIDSW/kVA58cvv/ysTAzKLTu78Uo+sVcJe3AtLdgeA9vORFELTP4v9DQ/mAmehe3N8xk+VTLY6xHWi6f4j9cTDW/BDyJSDRY00oYoHlvnjgHo4CHBo0sMGgX3CwcnK2hpMFVtB/3qPl6v2w=\";\n        s[153] = \"97ZVsTYwD8VrgN1FOIRZ8jm8OMgrxG3o1aJoYtPVWXp9cjjlgXqTMZVsoWr3pr7pudw+LYo1Ejz3JpiUPHqWcZ2PWrWs7PR1akYGuwdCBHYvCGTcZYFe/yu1AB8w5zYsl1eJR45g0u1DlXfx5BUAUzc4yJDjc48Ls62bn8t0EJ7+30sWwifqKuz2EHpsqp1j/iMlwzKJGjGE\";\n        s[154] = \"0NSYKTvBKKInwL9PJ/pWUWVX4gjF3igsA2qqQMsRew0lI1LcCB18eGCYk0AnyUCe99w5lWHGFUMMeH6DZciAylWGeDn19JdzVOTevBWk3LIujI1GvsEB3oVqf2Zl9IZeDGCT4+bQKBWvgcXHjysZfnn/5z9Xz06qrPqac5LfS36fDcwnkrUYQWDsL2Ike32ALmOnkcDjNq1BoA==\";\n        s[155] = \"5ok+rYI4LCgGa2psGUN/fdkT2gQEToB9HRiFXQpe2YcQvEN2z7YlJCETx4jSWw06p5Y8tZcp08moKNYwUJ40DvPpGlDG+wUpFhC4kkfo6vj6TrCj5yoWJi5D+qdgH2T0JeWM80cYN0bsOsetdaqNhDONlYXZ2lVYkyVS/wzw8K5xX87EWktwOwFq/yYhuWCYJ9GZL7QuDipJjEE=\";\n        s[156] = \"KHzTalU9wPSnIjh5g0eHi1HUaFufxJpXpjDe0N3wEKINqbgzhbj3Kf4qWjb2d1A+0Mlu9tYF/kA9ONjda5jYfRgCHm5mUrjU0TAyT7EQFZ2u6WFK/sFHP++ycJQk8k7KLPUWA5OWScy1EO+dYF4d0r6K5O+7H/rpknxN6M9FlP8sH83DXK1Sd+UXL32D+4flF580FaZ5B3Tkx3dH\";\n        s[157] = \"RrJVxIKoDXtCviWMv/SXMO42Dn6UWOKDy2hh2ASXssT0e+G6m7F1230iJWlEN0wBR8p+BlTdBhQrn25098P3K16rBmZpzw/5dmesIJxhYPaM4GiaOgztFjuScTgkmV0Jl/vZ9eCXdEVNISeXkIixM4pssTFuUV7PY/Upzdj55rDKGLr1eT7AFVSNP30PhL8zZs8MANqKBeKBBDvtww==\";\n        s[158] = \"sy4t5rFA75GRBE+Dqa9sQxjPluKt/JnEY54guHnKqccmx3HGiyJ0jUA+et4XO8Xg69wCA9xVxJZQL73z80mVfIf43HIKOxgxT2IjG7EKMOD/qx6NnMTve4BryggLtbLQUeRfhriQeY7h65tD9ierhccXoXDpGnmBn9m2BQP78y+Qhc4eIsa3LcxbQJUIwvURjFp/rgMD7lhOLboa/2Y=\";\n        s[159] = \"Zs/BfFoWImYau2dZLb7JneeTQp7sQ06yonEq0Ya4BNOJGy/5dGH42ozt0PpP2IZ/S58X7esVgc6jA1y3Bcxj3MPoDjQJSZHFEtR3G31T8eF5OpPVC4dw9s9clllM05tvcemssLdcd85UP/xBaDrmpAl8ZDSc73zflK3nJw8e0HQFYntNnlZPFyyyBLHnLycb6Jlvq7F2OqrZR+FXZnL3\";\n        s[160] = \"hdeDJuRnmb8q9EYec8+futT/CvqhpqoUdtmG6E31RrYJDs96M5Wfng90IEqrncZe4rVYDocRZK23dvqtJaPhTUBXXh42IyMlUnro69KI+075FvYYwgVaUd10r7ExWM5Z7DCQ2x8Tm1meK2YCTPkF1VXXexl1UjYCnRQuQxppdophMwroJK8VqlJbFFslchTSBFuI7wgcdy+f/LHMbMsusQ==\";\n        s[161] = \"ClCCOv0mD9//LR0OisHfamxcTvmlwMLgAIQt3hbOjRPkXwEgaDzP0u6LN8BNwdOVw+LhrbzMI8zQzHvo7mGPkQICeeim/x+xmGPQtmWnXxCWiL1uf/8eR5Wuy9Er8skTB8rG4/ubb2ssvCkubObPAkMSOgFnX9UtxnCN4+nMNV2vvn4xMTSvvQyYWewfnlNkflTyva1epE9RVW2RqRtJikY=\";\n        s[162] = \"Fs+AmFCnUr/imw8D0GpNidIP9qwW8yRAzmtqPS+vT6n5U4YFQcpgbznrYO4TPqkVF2oz1mpgLYIgx/u2XsrtljGX46LfY8OyUPaw4/da38QGngoIlS2cN01cgN3efSjMlnZFo1x8T9p0Nn1IgRgevOd5ezVUL7WdY7eeiE1pXXcGBgDYn7NDQph0dC6HDlBiS95bDFcZ+6FYigE4WybpsOHL\";\n        s[163] = \"wgO4DdGZy9g13IuOhkJGJcToyLuCBVm9T/c8qY4NOheVU1NW2g8sPIo+RiEsSST8sx6+Jh/A/kaCxYvJ9CsgnBjZMMWRsd383HZAoJtkxwKvyoeXzzD+puFvqKQBEKrlBEwffXhLDoFQAW2ycYtBGztl0GsUtoOob2nv7ienx1xD6KNZNaxYx2ObRAYS/e8LS3pg5dku9MPBp1X12m8ZIXRAaw==\";\n        s[164] = \"EkXt02SaRUIjFmoLxyO6N+giL4iA4fY0Exao+mjgEfZ+Wv6w95GXHBI1xlYMVLkOcnu9nescvcXQH0OrqL9uforEUTGTSg2ci67m4GrwAryMy+5eUo77Q5GpWKfsg8nDbD8a3gUI/9EE0sCNp7tMaKwoJ56cxhbG3TJYpqWTpq3/S3q76x+3ETL+zxh6EMh8MJPfWcIxlDS7evKqdPgS00KgUtk=\";\n        s[165] = \"OuBqx5LFJroRbDn41+4azFHlKgw6bMgbsRGaK9UnPvi5xfmV4SLQ2YzIhopGi1F57L6vKukaW0XlFk/Ff5Td5IMC7U+kvXKlf8fGIIQ8FaHI0vbIX89OJlBqlICqftSNiVRxtaE+aCh0rBoDfgPwuC8qBC20I1O3ZLuKfeUVGkMOLEWeZLS6mmcn3cSERj9o/dEl8QYwQvhH+VG6YWF//yki1Vu8\";\n        s[166] = \"SO/vDsqZDdImOdH19sZI7FUVhlx1EI0XRr8ArTuAG5F8LDK76Bct2C7fXTUowilXnJWhQxvbGiulkUGSuVjVP12zac9bShRpr1L3ucde7n1f9y/NcHJCwdqTLq7RYygItQ4ppQGiP9jXf2Dn/qmVZZTh+SY3AZCIS+OVo2LAiYJHWnzzoX8Zt+dOYiOA/ZQKZieVJlc8ks+2xqYPD55eH0btZn5hzA==\";\n        s[167] = \"tZL/qACMO9SzmgJhWQMsbKgE5lPAEbxn3NR7504ilgArR8j7uv1KF46uQyjrkEnyBormYB/6nLGlHht62IQftMYf5gHpHFfTvukRKF8728yIYAAYHPQ/WjHzHdVSqUJqF2a8RE6SvvY+KSKWLMU3hjn1f6dqX599hYD7AnbPGTpFKDU5sLFOXbuynU1sPUhP+a4Hev9yNU6atLDo4CkX/Yq3FbpWVuQ=\";\n        s[168] = \"GRe7uF1wH5/71B3vmGF+pN3H9PKO1tLwsnb0D4/Pm7Pu5KAe4OfelkfFIBgyjuoZrpeEkGZnb+qf+Kn7Kt1hDwYr/Mb9ewuwOXsbIpLQMgfh0I5XsPrWocduVzn+u/cm3cr0Z11zsx0AZjTqvslACkDqiquY41JhtGdc22RCvIYom2l+zzMIMyCPsHeCSB1MBu8EWK3iP7SD3dWttwzMg0xanoPDgk0U\";\n        s[169] = \"8BDFu+29lptlGSjcZe7ghWaUgIzbuUpM5XDFbtJVQPEd3bAE0cGRlQE9EhKXi5J/IskYNrQ357tBhA+UNDNXCibT2AZGpzWAcwE6dP+14FuRL5Gxqh/teuPYKr5IIn7M3SbgOychZzLI7HGCvVhBUiJBu8orI3WmAIVcUhAsMGHsFveck/ZCXQA+Uq/WVnW1VNs6hSmIhsAFc51qsmsQK07z2Wptx4rRjw==\";\n        s[170] = \"siPSXD4u36WYtTvvDzRlFPiuZMnRczrL3eA15955JDCc6/V2Cvu6m/HPO6JxogxO0aYTZ5tejYDOIZgBy40DgUZMqPJ2IpYjsmUbjjJU8u/OpwhMon525m3v0EYlvyj2Qp3pwFKDkvncK3aNjN3KaaX6HuIy6kyqsDl0BTEnB5iJyHLRBCkeznTK019u48Yfsrz2oGuZcWzNj5/vKMdxQPiyJ9EHyox8Ark=\";\n        s[171] = \"+/14PnFQVZ7BTHKUvkTtRrYS7WnPND5gZ5byMhUrDLkJa6UPBV7z0nrDMifEo/dQfUq3EjCiG6xGVhrUvAzgxqOQZTW1Y9p9M0KWW+E0XvCQppHFpuMqF1vYsF0OD6AMiE9JtGnWs3JcaWP/XBF/CvhQlFGbHi3fbrD/haTEBnmpJWBgMdKribdbXHtBSFZ2MzCX2eDtxoDdRdEVGs4v/q8gVBS+WsnZ3TTF\";\n        s[172] = \"31I1ja+B+aopKkztGzJYvJEWAshyoAAV5yve4LnP0kdImUQaVETSuo5CDIYr7zM8MCD1eYPpLicmGnA+C927o9QGAVL3ctO/DCWhNinW7NmeYIM+o4diKBkDPjHmSWa+nq4nr+gOap4CtwL2wW2B5Yqt26pKgN9uAU5CmTL26hYFgMEOZfrkQ7XdYGy2CN8RJLmjeSFVVNBG/FTaK7tpuy0LQSkko6wczBYGeg==\";\n        s[173] = \"XbRfDqGe3eeI1tHx8UnPneDB57N8VeSSzXzVCNSgxOEfd6d/un5CDxHG+m4w3tIbtSky4R2+zMF+S5cRvTOwZ/veegYtLKTxA0mVedWLFkfh/v4NgPJ+NEU+cylbSSZLAeBofDvoJwnYKujN2KFa8PGAxr3Y8ry3qdkS8Ob1ZiHYAmLvKS9sGb/vjTvRy+a4Q7kOepsm7PYisinKelBAvDnjli6/lOutGrenjX4=\";\n        s[174] = \"jGEj/AaBefac9uOcmGuO9nH+N+zMsC4qAe6ZUEMMIXdTGnSWl7Xt0/nKqyOj3ZH249HwkJ8bn5C+0bzOpQ1eA3PxEq6RfKMrjHJPJmTZXrSESTjfj3oNLU/CqqDOqd8znTgN6nvnUdCeStLMh9bmWF1+0G11nDwg6GQWWQ0zjVDTq5j7ocXcFOyUcu0cyl5YDcUP0i2mA2JullInU2uBte7nToeSGB3FJxKueBbv\";\n        s[175] = \"RAzNCxlP2S/8LfbGtlSDShox8cSgmJMOc2xPFs8egZVJiwlmnS3aBWKPRbbxkZiVVYlu4GNJNwbocc6dgrl28HXAsYikE5wwoQ1MeOJWU3zzFiYENh7SLBQfjVPQHucctr8P6Rl7YL5wHc+aC+m92R3bnzm5rp1PeHm7uzy2iUUN0cgfbwJ4FrpXhVMTsAUpTbg1+037EWcGOuxir4dG2xBfgOwa+ejFHkw7y0LWRw==\";\n        s[176] = \"08hmZptBGKKqR6Qz9GNc2Wk1etgU/KogbiPQmAh5IXlTBc97DuEToL4Bb889nfObVQ/WelmiCS8wEjSBdmnlkkU7/b5UT3P4k1pB6ZxPH9Qldj5aazkA/yCb0kzDfJlcdFOh1eAcu5LvwTXOizmPwsDvJEnOkaDZrKESZshsHU2A6Mx6awk9/orf6iBlJHQIIH3l4o3b1gx2TNb/hUgdAlwtQDhvKO3skB0PS+rcWAw=\";\n        s[177] = \"0GhrgbSSHPLWtyS2mnSxrNAj/dyrFQcxIgPjT7+78SZ1ZTGc03vsmlZ4Z/bOO84E9yKblaI5dSHVXrx57L0kikL8tgKCsAkUNO3l/4zv5FfCrRTgGx4sFTFB1NNcLcwagkvFzde764DjYmj4YZhYsXSZCVKi0uu5M8fpgGDZ9UMSFR008cbhaIoFLWSANqiNJYSvTQZhGWfLtIPGLN+gIOMcaKhx1b5vg6OYSz6ScAM/\";\n        s[178] = \"2VGiMV/f2hNZAjw3fdeHx/wRIVzeP018lZynzwSySG/zQBxyRmi3YmKVZmh3aJunuiqmvdt0kJ6lX7M8BajYHPCBkqJOx8oPJ/K1oADxVgnavZ69dKYrSy9/Pm6sHxjFrdSz9TelUK9sgoFTWS6GxgzWEqXRBDDpGUnsNbSEcWLPKVLNNoYAcltY98JZaNSZBXcpa9FeSN7sVU43q2IEcDx3ZkJzRJpl/lb7n+ivMwX/OQ==\";\n        s[179] = \"iMSCh1m5vct3C7LEn5wKRYtalzvG6pKahG19rTb6Z9q7+buDsML5yM6NqDvoVxt3Dv7KRwdS3xG/Pyb7bJGvQ2a4FhRnTa4HvPvl3cpJdMgCCvsXeXXoML4pHzFlpP0bNsMoupmhQ0khAW51PAr4B165u1y5ULpruxE+dGx/HJUQyMfGhOSZ5jDKKxD5TNYQkDEY28Xqln6Fj8duzQLzMIgSoD8KGZKD8jm6/f8Vwvf43NE=\";\n        s[180] = \"hN4+x/sK9FRZn5llaw7/XDGwht3BcIxAFP4JoGqVQCw8c5IOlSqKEOViYss1mnvko6kVrc2iMEA8h8RssJ4dJBpFDZ/bkehCyhQmWpspZtAvRN59mj6nx0SBglYGccPyrn3e0uvvGJ5nYmjTA7gqB0Y+FFGAYwgAO345ipxTrMFsnJ8a913GzpobJdcHiw5hfqYK2iqo8STzVljaGMc5WSzP69vFDTHSS39YSfbE890TPBgm\";\n    }\n    private static void initCHUNKED_STRINGS() {\n        String[] c = CHUNKED_STRINGS;\n        c[0] = \"\";\n        c[1] = \"uA==\\r\\n\";\n        c[2] = \"z9w=\\r\\n\";\n        c[3] = \"TQ+Z\\r\\n\";\n        c[4] = \"bhjUYA==\\r\\n\";\n        c[5] = \"1cO9td8=\\r\\n\";\n        c[6] = \"sMxHoJf5\\r\\n\";\n        c[7] = \"jQcPlDsZzw==\\r\\n\";\n        c[8] = \"TAaPnfW/CYU=\\r\\n\";\n        c[9] = \"cXTZuwzXPONS\\r\\n\";\n        c[10] = \"Ltn/ZTV4IjT6OA==\\r\\n\";\n        c[11] = \"6fh+jdU31SOmWrc=\\r\\n\";\n        c[12] = \"E/5MoD4qCvDuTcFA\\r\\n\";\n        c[13] = \"2n9YyfCMyMXembtssQ==\\r\\n\";\n        c[14] = \"qBka3Bq6V31HmcmHjkY=\\r\\n\";\n        c[15] = \"WvyZe6kQ8py7m25ucawJ\\r\\n\";\n        c[16] = \"oYpxMy6BSpZXhVpOR6dXmA==\\r\\n\";\n        c[63] = \"yexFaNKaP+VkVwEUvxQXbC0HSCi/srOY7c036lT25frs4xjIvp214JHCg7OL/XZW3IMe6CDgSMCa\\r\\naI91eRgM\\r\\n\";\n        c[64] = \"vkqgnuJ3plxNtoveiMJuYLN6wZQLpb3Fg48/zHkdFuDucuMKWVRO/niFRgKsFqcxq6VgCxwQbePi\\r\\nP9sRnxz7wg==\\r\\n\";\n        c[65] = \"YHks3GCb2uVF47Y2tCieiDGJ879Rm5dBhQhQizYhfWOo+BrB2/K+E7wZWTid14lMpM60+5C0N9JN\\r\\nKAcBESeqZZI=\\r\\n\";\n        c[66] = \"z8551jmQp/Qs95tw226+HCHWruKx/JvfBCfQ5p0fF77mkSpp66E552ik2gycrBBsMC/NbznAgTZo\\r\\nMzZxehfJwu49\\r\\n\";\n        c[67] = \"VsR2whqq/qQm342+TNz1lgOZMoWbpCz+kj2zflq0nx7S/ReEVPUJcqgMtVzrr2FVQPfBAH5VRjR+\\r\\nhkxwv4bssQms8Q==\\r\\n\";\n        c[68] = \"5xmIp8dUJZzkisIkuEPsnPXvzDeMo48qWFfHIn2av3jr5qoZHCs0LfNEyepC3v2sa0nCU0FlqsmD\\r\\nyTI5/2jt5zsLtV0=\\r\\n\";\n        c[69] = \"tGEgXjglUB9NbCtiS88AetLtRqhCAnhzOUKVgvbJZHqOA6x8uOorA1t3NcaIA00ZqbPYALu4LzIm\\r\\n4i4lAL9QgiH/Jg7b\\r\\n\";\n        c[70] = \"gFtxEhYJahDmU5dpudYs6ZTsqAx+s2j+06A0zeyb3U7nhZFsbkCDlds0EYUoqerZqZPm7F6CDOOD\\r\\n3dU7nYmelE0DxyMO9A==\\r\\n\";\n        c[71] = \"j/h/1JygYA5bjttxzQxr5gBtgh+AYVozhF4WgvcU/g49v0hUy6FdhfZewGK+Phtzj7RabI5p2zXy\\r\\nzvkmLQdFhdI5Um4O5sw=\\r\\n\";\n        c[72] = \"m+kYVGojIR5pgbz7pGJm2g+3qqk7fhl3cowa2eVrhki7WofyywnRezqTxOkBgVFz6nKs8qxpbbbz\\r\\nALctcPeMsp9dpXUfuUJr\\r\\n\";\n        c[73] = \"pPaGnMr0UYmldnJVk/F+3WCJJ1r2otvD5KJdt2u1RnS6LwhHhwLCqfW8O/QEg43WdxKomGL/JM33\\r\\ntn/B9pMPoIU0QTGjq2GRow==\\r\\n\";\n        c[74] = \"mOxzGyym6T/BxCV5nSiIYMlfAUmCN7gt7+ZTMg1kd8Ptirk+JF5dk8USbWBu/9ZvNg5ZuiJCeGwf\\r\\naVpqpZ3K9ySF7C87Jvu1RUE=\\r\\n\";\n        c[75] = \"VYLOIE4DnhxJn3FKS/2RHHHYLlZiGVdV/k4uBbtAYHUSTpRzaaYPGNAVjdNwbTHIihmeuk/5YQUy\\r\\n8NFsxIom+Li7bnWiBoHKBPP7\\r\\n\";\n        c[76] = \"7foMpJ0TknCatjUiSxtnuKSiz4Qvl/idWY9UKiTljoQHZ+C8bcUscnI/bZr13e6AvyUh47MlpdGv\\r\\nzIm05qUdMWWLoZJOaGYvDmvrWQ==\\r\\n\";\n        c[77] = \"jxQSGiFs+b1TfE4lDUAPUPJ0SWeUgl03rK6auieWJcarDIHM97gGOHMmyHudRMqkZmIkxYRgYgCC\\r\\nUg/JeU91OZD3tL4U+wNhShywe88=\\r\\n\";\n        c[78] = \"UGmH/gl7t3Dk801vRhRDEbgsfShtHZ1gZQn4KNZ5Qsw3WiGjW0ImInVHa+LSHBzLUjwC0Z3nXO4i\\r\\n4+CiKYqAspOViE6WqVUY8ZSV0Og4\\r\\n\";\n        c[79] = \"wdEoYmJuRng2z2IkAiSgJ1CW2VE7H7oXpYWEFFO8nG0bZn7PHhT8KyhaO2ridl8eUEysja0VXFDy\\r\\nQqSgZnvdUKrCGepWGZbw0/0bDws3Ag==\\r\\n\";\n        c[80] = \"5kZqgrUbt+rN5BWAddeUtm9TGT43vYpB6PeyQwTyy9Vbr0+U/4Qzy0Iw37Ra293HmkmpgQzuScVp\\r\\ncIiFGXPAFWwToR+bovwu7aXji/FnMwk=\\r\\n\";\n        c[81] = \"E467MMmJbmwv8Omc2TdcyMr/30B8izWbf+CAuJtw67b1g9trhC6n4GYnXjeW9DYvmWoIJPx0zvU/\\r\\nQ+gqv0cteg2bx9P2mrgMDARb6egowqjx\\r\\n\";\n        c[82] = \"Vpt8hYb4jx1F+7REX7K65v6eO5F1GDg/K8SVLWDSp0srupYEQkBVRxnB9dmhSo9XHpz4C8pRl8r8\\r\\n2fxXZummEf4U2Oh0Dip5rnNtDL+IJvL8lQ==\\r\\n\";\n        c[121] = \"hf69xr9mtFf4N3j2uA9MgLL5Zy94Hjv+VQi94+LS8972JJgDHCQOwP5whdQkV+SJpXkiyHGaSsQ4\\r\\nfhepPwzuZcEpYER+beny1j+M0HSZe36MdRIhlTqno+4qsXckL0CjXsYkJJM0NAfOYjHAus5G1bgi\\r\\n9VhmiMfAMA==\\r\\n\";\n        c[122] = \"yKzTh5hPp9/PBeZtrZXsFHAR9ywOM3hRaBDkgG9E09wFW8MZD0xMGegcp0QrTJcP8QYOaYhTDVim\\r\\nPqsNTVOmjdjkvS+2WhjJW4mVOXQ8KID91yaBtPo+DStL5GMgctcP5MoVf1Vp8w/mYtofqbllfDm5\\r\\nNfYzh2A7ijY=\\r\\n\";\n        c[123] = \"csFmwvDzoO4IO6ySDA4B2V7emEetAwCgO66zzlfWb3KDrPfFZc3Jgr4+dlaUkEIDHYeLHETdTssW\\r\\nOl2KrPHBEsULpDTR+3OhurXb1Qr2NvHiHFuqT3Geb6EYw2albfTmXxch82ablt4WKl4qPcSey54v\\r\\n6tsCuUuZzrkt\\r\\n\";\n        c[124] = \"5InxvKwpoCV7EK78OzU/tL9/NmK14Prw9tOCAyK+xpUNLZriuVEVdgpoZ05rliufaUDGHH8dPAem\\r\\n8G9DN/VOPktB6vXKtc2kMUgnMTiZwv/UVd+xyqnT8PLEdNQ8rCWxyiCcLdXFf0+xcE7qCcwzC+D7\\r\\n+cRW+i6dnpZkyw==\\r\\n\";\n        c[125] = \"cEx7oTsSHWUFPj92cstdy5wGbRcxH+VRWN8kaNTTCPWqSckyU9Xk/jj5/gj9DFwjfsCSp60xutf4\\r\\n/rFanjtwqtRg6dJLP4JAgpOKswDlHi6Vt7zF/w7HidMf2sdtlsqzayZmT2Hn7iOo3CExzr5Z5Jfm\\r\\nMFAX8R9peUN4t5U=\\r\\n\";\n        c[126] = \"AeXetVbj+7mmGiCs3BGUSZDLlq2odMsN8JAHQM64Cly8y5jw75PpISocWRFFQmmXYP7ckKmtuhIv\\r\\nD69HtZxGhNRsl1l1gXzKFhsWykcRtG87F8sS1Uv/i6QvGiRIDVEGGIzWrzRIISkBb9wCxJ2HESfl\\r\\neWwrz/GqryjoN26B\\r\\n\";\n        c[127] = \"aj1/8/+U8VO3D2iAwvQXZ4H0KwtuzDm4JCC8+22ccqk+UzKvqjGs87XngwfsMfSkeGVAi6VB6tfN\\r\\nJTjYctaj7R8dwh2PIfLSrvaphw4wNB2REjplnPojoOb9bNUNtUvdK3b1bArOWugIRJWLnMl72yEH\\r\\nFb1iBfBmn7uIa7KT2Q==\\r\\n\";\n        c[128] = \"kiMuF/1CMRlgoS/uLKn1mNZFZNHJNkRQnivOrzj8HQAagwzvTXvsGgI9hXX3qaeZL9/x/Oq+Y5F6\\r\\nDh+wXo+0kp6JagFjvbTJcQSowFzIwg7/V9sans0NE0Ejow5BfZKvihFI46sHiALl1qzoXqLQq+5f\\r\\nZGIFRyyY8wFW1uiNu9k=\\r\\n\";\n        c[129] = \"YXmCWhiNz4/IhyxQIYjgNvjX+XwDiPTSBMaFELm5X8Y4knGRnkF4/zix8l9wHBb+7Cgfrr46rF7e\\r\\niIzaAFLjLjjewy63duBJiVbEWjqFO0fu6T9iIjuEaF2sTppvuZNPHx80vN+HLAnAVmgFESw5APXW\\r\\nn15dizvuUfVHd5isCqbA\\r\\n\";\n        c[130] = \"GJfUoBivW5uqDpUxTRfjGWNYfN3/dTFtdRqCIH5L2c1nWX0dgY3ba1+fW/YX1Oh5aw4lC6BIiiTh\\r\\njJoV1VrNnlXzbcUcMy+GsDUUB8Qe8lBvfe/t4RmNPB0hVgrS89ntbuU0SsCmWw+9DqM3nidPebAN\\r\\nKERig1zZTBBKgpVf7HPFCA==\\r\\n\";\n        c[131] = \"eTerNs7dOqJAxAxcMQRnUDc2cBj2x0jU1g1D3G+b22kDz7JBzOy/mxhGXAQ3130lavWMhImSBkRe\\r\\nU+z0A13EYVMUv9PFzD747KCvns+SCo52YNHB0896b4l47q8hu8jsD17TZ2uWWJhS4cNnSE1jeM6N\\r\\noXGKvf90yxfzwucNYc4RdaQ=\\r\\n\";\n        c[132] = \"lbrGsjbzE521q8tzVHV7vcTPchUnzI/UfeR2R+cmOa29YljPWLht9Wx2JrjiKv4Of5nXe7kvhi+L\\r\\nYUuFVqgaqIFhC/PLbqOFiT2VZcXorToaRT9CLiqV5b6nHN/Txz6SI7MiD3hnk7psDbglPOo+ytqc\\r\\n9sFHj7UkR1ZctQjwFYwJjlxf\\r\\n\";\n        c[133] = \"mQwAPzYzfxz9FXEiZ6M8u1oN3EJbFYmNVfpm+j0DqgU+OPI4URHBIrF4xvdMvAPn0WuarbQy/ZVN\\r\\n0eKL7S4K3Mvan0flAwaZdI+e5HpkfxOoGTp8Dk5EFTXjmZ/s+GonePEQEGNVPL1WYoD6xXqAAvML\\r\\nKtyrFcpoiGS9eDBlsZDQzPzz/g==\\r\\n\";\n        c[134] = \"3G6d12UY4l5W7Nnw0BL0HnViVg9SdEuLMqeZwy0RlJR/Ytcgd/mIxIuXXAlGhvhoX6Xc2BGU7RpT\\r\\ni1jYKzA86yul0j96dbcE4OtrP9lUBJlcY9eWz59dvLqKxwt3cEOBwrPf69MHuIa256es3AOCobfC\\r\\n8RQScW0PQ0QUa1VHB/eXSsVTSWg=\\r\\n\";\n        c[135] = \"AxgrZKTFk5JvLC3DBACHwp266FxKI/yn9F+1tYkzL57RVs5HCJYS47VuG0T0E2wqzHqcLKPQMZWU\\r\\n7vbRoyMGNL3ZtaHoZqTqcq9KWtODC+OnEvSS7+1P4SmQDuyL2MJ/eJABJKNcu1K/Lk0buAaO0FvX\\r\\n6OGBcPzu1+dv/ZkwuORK07qRnxqQ\\r\\n\";\n        c[136] = \"atkG8l2U/Nnm+zLu7zjenrfcAVQJMUqHimFZ3cQfaUp4qyrFn1UiwZ33j66Vt63eVaT/FXx+LlEn\\r\\nsHn6ATPBMp3iEYoBJYyNpjz/zROhBbcznQAMdWUTcyKInvnG3x6ExgBXpyqfxxp/Pm8by7LlSUT5\\r\\nMKHdcu+TEfUXRokCr2iPnt7NYsNDfA==\\r\\n\";\n        c[137] = \"dciU1mSHGcBxOAVBgJx75J6DaQdBZfTIzQ04WhkkdRMupOZWSnv19xhz8hiO+ZnbBtDJuO5rHsUG\\r\\nzH/jYacfZyCQ924roRvkh3T1yxsLq3abZJUCD9HYnPTELVhv1+cEF4aoO3vGOu2FpfLUn5QTd0Po\\r\\nzsIqcqZVB2V57B7DjfizUe3D8Yf5Vco=\\r\\n\";\n        c[138] = \"dgR1PPacBvtILBmg33s9KWtuc67ndh3rCHZ/lIN7sENgbFqJQy5DC3XIeHTV7oWd+tJQaXxoC71/\\r\\nSU7Rz6OClAMKXLbMz8U6RPiqn3M7MRCQcDfNjA5cCNknXT9Ehz/IZF/7lcWrwxBKYm4B98lPkpZt\\r\\nR2QHndiQ3venzWrP0P5y27mReaFuaJ++\\r\\n\";\n        c[139] = \"1Q8rfp1HuGsxurTgGMakxj5SwNF7EixXxVPnfGADWDcygh5C1BMXqiL1AuVXOVFOsaydfLWGC8Kb\\r\\nh/JiL6H+12lYrNGUT9yJRIzRDi4XylMnrYwBtwCJjoHSi4exz5K2ih54utVAuzXZg6mnc9ied/mN\\r\\nRjj9d2HFD5mv0w/qTN/WFxEmtuZM/nMMag==\\r\\n\";\n        c[140] = \"w01TnPP/F3Vni3fBdV32Bnbb4J1FcbaE+Xn44no5ug77U8FS1gSm3LqJ8yTyXduzl5v2dwBEfziE\\r\\nfTuyqgeLLsCYTBjXmYOIHQosEl6DyAknu4XK52eQW+Fes9eSs2Nq+G4aaR4y4leeFNmCoZ9BQmAA\\r\\nZr0LFkqnvqaKmBVgcgxPs7/8SQHnpqvaU6Y=\\r\\n\";\n        c[141] = \"OfzIF38Tp5g1W5eVbrkrMe0Mm7e0wBYg5hVvLpn/5MW5OFcmRDuBp15ayRBnJ1sBI93+CNl0LwP8\\r\\nQ0z9IXFjTER5gHZ1KfG8NV+oacKNG7aYrbUftkSL/oPfRNPez6U0FuWgvVrXUB6cwKTWvwb9KoD7\\r\\ns6AGYRdH50ZgJdBniFD7dKoOQnJ/ECuTUXI+\\r\\n\";\n        c[142] = \"4hoX0sjqlkSJPUq627iJkNYRbtD+V2qErCuTikaeRDEZvVHWvzdvwj4W1xxJjz+yHAN6z2EjCWid\\r\\ncSsVgTejQ1bH8uTzJgh/zq3yGUSsJoJWrecqxsge8bEBjkm+qUO8G3kAnC6FMjJ2NYQeXf6OK6Og\\r\\nsqyJwlHPTyAms2/IoYTB4iEqgIFG/2fNEJEIag==\\r\\n\";\n        c[143] = \"M/dy14xNbZMRfHiKKFdmD/OrEB+8MexrRO8mMh0i5LrNA5WUtLXdwUfAysYmal94MSoNJfgmwGCo\\r\\nqNwlWZBW1kpQaPdqsrn2cvc6JcZW9FlOx07DERJGbZ6l6ofbzZWgF+yf+hvT6jnJvXBVCTT3lfO3\\r\\nqo4leNuEJwsuU6erXGC3Ch53uPtGIrdDUpcX6/U=\\r\\n\";\n        c[144] = \"GgLr2hd3nK64IZv0JksKAT/yJNQ38ayuWyBnWLjXbEmT048UDppsrrnP6hikRo5v2TlHGhD2dcwG\\r\\n9NLK3Ph8IoIo9Wf2vZWBB+SMI9FpgZxBWLEjwHbOWsHaEQMVsQfk38EWQP0Fr6VyMKlEQfpsRkuC\\r\\npp1KxscaxK7g5BgXUlb0a2x0F+C9hEB0OVPsj4JN\\r\\n\";\n        c[145] = \"W9lKcLDqNGQAG/sKQNaRmeOUmLJ7GcMNqBaGZ659Rnjr6RTrfnmkp5Z9meALnwXoHjPjzSQDJnVY\\r\\nsY+xyMnuPgl6gMVAhAm+XprYVpsne4vt+7ojUqavVPBqLy5dtnhp1qfcnAiV5cZhHXX7NbxkUOzp\\r\\ntjEGCQjnhSH4rPbZtgoIWE8Z6boF3l/thLnFX+AiiQ==\\r\\n\";\n        c[146] = \"iYLn5h9lIhD/x9moaPRnTX6mJEJKThg4WXxS7IrR2zblH26uOkINz0dJNTJVets0ZNYDnsnT7J2i\\r\\nI3Y6hTVWPGoYU49J3B2LhCREs0DZQ3C7080FtiOcfHbfBLNn0DyCK1LeAC7YB/bNdiyhLqH8fKl+\\r\\n0+KhiPDIUBJY2e7IbZR/9t0sxJbIXx6cRvI5AXex12o=\\r\\n\";\n        c[147] = \"SlRJEc7npTUvQq8SgBYKmVY/3wHYp2gsDxafN/JLUuEqEjmWMtW7fxASi+ePX4gmJJqLhD5t+AZx\\r\\niCwYK3L3ceuJx4TiqVgJz8d6sc7fgWXluh1K+BcGPbZ7+Cq4Vsga7JEBVekviEZ5Ah4apNr8RkB7\\r\\noMOUVPGxRcyyaVE4zBW+scA6c1yi/HQXddQ9rWyLUsVo\\r\\n\";\n        c[148] = \"AAlbGR6ekLOzx4hpqZTUqVUQ0FL2CFpgCMOp6CuuUzkSnWXpUjvOiSDkNPgoTPgpgmg3uYvMsX43\\r\\nmkPGUGC9awDThXyGQh6u3WfWtmhiPRqXnjFek+EPd0LYXps71non6C9m7nUlYNWzBJ1YzrzWjlB5\\r\\nLLPBN8bsZG6RbdZkYMxJ9J5ta/c30m8wDDNuTm0nEE0ZVQ==\\r\\n\";\n        c[149] = \"nWWbBhzObqwEFh/TiKREcsqLYbRjIcZflJpol16Mi4YDL6EZri22qRnTgrBtIY+HieTYWuLaCSk/\\r\\nB9WcYujoS6Jb5dyg3FQ6XF9bYaNQGx2w8DHgx0k2nqH/0U1sAU0kft32aD2orqCMIprbO1WJIt2a\\r\\nuRnvcOTFoOax926nAkxvR3nrFVDevFjDbugpWHkGwic6G7o=\\r\\n\";\n        c[150] = \"WNk1Rn2qtG+gk0AEewrgo+aRbNrG4CgQpOR8Uo7c2m2XQY8MVDu4uRA6rzYGGdgqTcICKky9MvHe\\r\\nJeNWVAXOxmA4EdXQ2xItFJdQtxBt56cad9FBXXsz21yVsPr5d453abi7T3XfHVTToekiOlxAJs+b\\r\\npat9cFRbIdHghO9wc/ucoArT53vpYsnyeVnmZG2PX48lXpNS\\r\\n\";\n        c[151] = \"wVmiO6mdf2aahrJlcmnBD0Qa58y8AvzXtJ54ImxgPLPn0NCQIrmUxzNZNTODE3WO6kZMECaT/REq\\r\\nT3PoOBp9stCHCFNXOM7979J44C1ZRU0yPCha00kQZBF5EmcLitVCz10tP8gG1fiIvMjwpd2ZTOaY\\r\\n4/g4NeJHLjJPll0c5nbH7n4v+1I+xG7/7k7G6N8sp21pbgpTYA==\\r\\n\";\n        c[152] = \"OoiVZosI+KG0EZTu+WpH7kKISxmO1zRYaSPMBMW0AyRiC2iZVEkOMiKn12XPqIDSW/kVA58cvv/y\\r\\nsTAzKLTu78Uo+sVcJe3AtLdgeA9vORFELTP4v9DQ/mAmehe3N8xk+VTLY6xHWi6f4j9cTDW/BDyJ\\r\\nSDRY00oYoHlvnjgHo4CHBo0sMGgX3CwcnK2hpMFVtB/3qPl6v2w=\\r\\n\";\n        c[153] = \"97ZVsTYwD8VrgN1FOIRZ8jm8OMgrxG3o1aJoYtPVWXp9cjjlgXqTMZVsoWr3pr7pudw+LYo1Ejz3\\r\\nJpiUPHqWcZ2PWrWs7PR1akYGuwdCBHYvCGTcZYFe/yu1AB8w5zYsl1eJR45g0u1DlXfx5BUAUzc4\\r\\nyJDjc48Ls62bn8t0EJ7+30sWwifqKuz2EHpsqp1j/iMlwzKJGjGE\\r\\n\";\n        c[154] = \"0NSYKTvBKKInwL9PJ/pWUWVX4gjF3igsA2qqQMsRew0lI1LcCB18eGCYk0AnyUCe99w5lWHGFUMM\\r\\neH6DZciAylWGeDn19JdzVOTevBWk3LIujI1GvsEB3oVqf2Zl9IZeDGCT4+bQKBWvgcXHjysZfnn/\\r\\n5z9Xz06qrPqac5LfS36fDcwnkrUYQWDsL2Ike32ALmOnkcDjNq1BoA==\\r\\n\";\n        c[155] = \"5ok+rYI4LCgGa2psGUN/fdkT2gQEToB9HRiFXQpe2YcQvEN2z7YlJCETx4jSWw06p5Y8tZcp08mo\\r\\nKNYwUJ40DvPpGlDG+wUpFhC4kkfo6vj6TrCj5yoWJi5D+qdgH2T0JeWM80cYN0bsOsetdaqNhDON\\r\\nlYXZ2lVYkyVS/wzw8K5xX87EWktwOwFq/yYhuWCYJ9GZL7QuDipJjEE=\\r\\n\";\n        c[156] = \"KHzTalU9wPSnIjh5g0eHi1HUaFufxJpXpjDe0N3wEKINqbgzhbj3Kf4qWjb2d1A+0Mlu9tYF/kA9\\r\\nONjda5jYfRgCHm5mUrjU0TAyT7EQFZ2u6WFK/sFHP++ycJQk8k7KLPUWA5OWScy1EO+dYF4d0r6K\\r\\n5O+7H/rpknxN6M9FlP8sH83DXK1Sd+UXL32D+4flF580FaZ5B3Tkx3dH\\r\\n\";\n        c[157] = \"RrJVxIKoDXtCviWMv/SXMO42Dn6UWOKDy2hh2ASXssT0e+G6m7F1230iJWlEN0wBR8p+BlTdBhQr\\r\\nn25098P3K16rBmZpzw/5dmesIJxhYPaM4GiaOgztFjuScTgkmV0Jl/vZ9eCXdEVNISeXkIixM4ps\\r\\nsTFuUV7PY/Upzdj55rDKGLr1eT7AFVSNP30PhL8zZs8MANqKBeKBBDvtww==\\r\\n\";\n        c[158] = \"sy4t5rFA75GRBE+Dqa9sQxjPluKt/JnEY54guHnKqccmx3HGiyJ0jUA+et4XO8Xg69wCA9xVxJZQ\\r\\nL73z80mVfIf43HIKOxgxT2IjG7EKMOD/qx6NnMTve4BryggLtbLQUeRfhriQeY7h65tD9ierhccX\\r\\noXDpGnmBn9m2BQP78y+Qhc4eIsa3LcxbQJUIwvURjFp/rgMD7lhOLboa/2Y=\\r\\n\";\n        c[159] = \"Zs/BfFoWImYau2dZLb7JneeTQp7sQ06yonEq0Ya4BNOJGy/5dGH42ozt0PpP2IZ/S58X7esVgc6j\\r\\nA1y3Bcxj3MPoDjQJSZHFEtR3G31T8eF5OpPVC4dw9s9clllM05tvcemssLdcd85UP/xBaDrmpAl8\\r\\nZDSc73zflK3nJw8e0HQFYntNnlZPFyyyBLHnLycb6Jlvq7F2OqrZR+FXZnL3\\r\\n\";\n        c[160] = \"hdeDJuRnmb8q9EYec8+futT/CvqhpqoUdtmG6E31RrYJDs96M5Wfng90IEqrncZe4rVYDocRZK23\\r\\ndvqtJaPhTUBXXh42IyMlUnro69KI+075FvYYwgVaUd10r7ExWM5Z7DCQ2x8Tm1meK2YCTPkF1VXX\\r\\nexl1UjYCnRQuQxppdophMwroJK8VqlJbFFslchTSBFuI7wgcdy+f/LHMbMsusQ==\\r\\n\";\n        c[161] = \"ClCCOv0mD9//LR0OisHfamxcTvmlwMLgAIQt3hbOjRPkXwEgaDzP0u6LN8BNwdOVw+LhrbzMI8zQ\\r\\nzHvo7mGPkQICeeim/x+xmGPQtmWnXxCWiL1uf/8eR5Wuy9Er8skTB8rG4/ubb2ssvCkubObPAkMS\\r\\nOgFnX9UtxnCN4+nMNV2vvn4xMTSvvQyYWewfnlNkflTyva1epE9RVW2RqRtJikY=\\r\\n\";\n        c[162] = \"Fs+AmFCnUr/imw8D0GpNidIP9qwW8yRAzmtqPS+vT6n5U4YFQcpgbznrYO4TPqkVF2oz1mpgLYIg\\r\\nx/u2XsrtljGX46LfY8OyUPaw4/da38QGngoIlS2cN01cgN3efSjMlnZFo1x8T9p0Nn1IgRgevOd5\\r\\nezVUL7WdY7eeiE1pXXcGBgDYn7NDQph0dC6HDlBiS95bDFcZ+6FYigE4WybpsOHL\\r\\n\";\n        c[163] = \"wgO4DdGZy9g13IuOhkJGJcToyLuCBVm9T/c8qY4NOheVU1NW2g8sPIo+RiEsSST8sx6+Jh/A/kaC\\r\\nxYvJ9CsgnBjZMMWRsd383HZAoJtkxwKvyoeXzzD+puFvqKQBEKrlBEwffXhLDoFQAW2ycYtBGztl\\r\\n0GsUtoOob2nv7ienx1xD6KNZNaxYx2ObRAYS/e8LS3pg5dku9MPBp1X12m8ZIXRAaw==\\r\\n\";\n        c[164] = \"EkXt02SaRUIjFmoLxyO6N+giL4iA4fY0Exao+mjgEfZ+Wv6w95GXHBI1xlYMVLkOcnu9nescvcXQ\\r\\nH0OrqL9uforEUTGTSg2ci67m4GrwAryMy+5eUo77Q5GpWKfsg8nDbD8a3gUI/9EE0sCNp7tMaKwo\\r\\nJ56cxhbG3TJYpqWTpq3/S3q76x+3ETL+zxh6EMh8MJPfWcIxlDS7evKqdPgS00KgUtk=\\r\\n\";\n        c[165] = \"OuBqx5LFJroRbDn41+4azFHlKgw6bMgbsRGaK9UnPvi5xfmV4SLQ2YzIhopGi1F57L6vKukaW0Xl\\r\\nFk/Ff5Td5IMC7U+kvXKlf8fGIIQ8FaHI0vbIX89OJlBqlICqftSNiVRxtaE+aCh0rBoDfgPwuC8q\\r\\nBC20I1O3ZLuKfeUVGkMOLEWeZLS6mmcn3cSERj9o/dEl8QYwQvhH+VG6YWF//yki1Vu8\\r\\n\";\n        c[166] = \"SO/vDsqZDdImOdH19sZI7FUVhlx1EI0XRr8ArTuAG5F8LDK76Bct2C7fXTUowilXnJWhQxvbGiul\\r\\nkUGSuVjVP12zac9bShRpr1L3ucde7n1f9y/NcHJCwdqTLq7RYygItQ4ppQGiP9jXf2Dn/qmVZZTh\\r\\n+SY3AZCIS+OVo2LAiYJHWnzzoX8Zt+dOYiOA/ZQKZieVJlc8ks+2xqYPD55eH0btZn5hzA==\\r\\n\";\n        c[167] = \"tZL/qACMO9SzmgJhWQMsbKgE5lPAEbxn3NR7504ilgArR8j7uv1KF46uQyjrkEnyBormYB/6nLGl\\r\\nHht62IQftMYf5gHpHFfTvukRKF8728yIYAAYHPQ/WjHzHdVSqUJqF2a8RE6SvvY+KSKWLMU3hjn1\\r\\nf6dqX599hYD7AnbPGTpFKDU5sLFOXbuynU1sPUhP+a4Hev9yNU6atLDo4CkX/Yq3FbpWVuQ=\\r\\n\";\n        c[168] = \"GRe7uF1wH5/71B3vmGF+pN3H9PKO1tLwsnb0D4/Pm7Pu5KAe4OfelkfFIBgyjuoZrpeEkGZnb+qf\\r\\n+Kn7Kt1hDwYr/Mb9ewuwOXsbIpLQMgfh0I5XsPrWocduVzn+u/cm3cr0Z11zsx0AZjTqvslACkDq\\r\\niquY41JhtGdc22RCvIYom2l+zzMIMyCPsHeCSB1MBu8EWK3iP7SD3dWttwzMg0xanoPDgk0U\\r\\n\";\n        c[169] = \"8BDFu+29lptlGSjcZe7ghWaUgIzbuUpM5XDFbtJVQPEd3bAE0cGRlQE9EhKXi5J/IskYNrQ357tB\\r\\nhA+UNDNXCibT2AZGpzWAcwE6dP+14FuRL5Gxqh/teuPYKr5IIn7M3SbgOychZzLI7HGCvVhBUiJB\\r\\nu8orI3WmAIVcUhAsMGHsFveck/ZCXQA+Uq/WVnW1VNs6hSmIhsAFc51qsmsQK07z2Wptx4rRjw==\\r\\n\";\n        c[170] = \"siPSXD4u36WYtTvvDzRlFPiuZMnRczrL3eA15955JDCc6/V2Cvu6m/HPO6JxogxO0aYTZ5tejYDO\\r\\nIZgBy40DgUZMqPJ2IpYjsmUbjjJU8u/OpwhMon525m3v0EYlvyj2Qp3pwFKDkvncK3aNjN3KaaX6\\r\\nHuIy6kyqsDl0BTEnB5iJyHLRBCkeznTK019u48Yfsrz2oGuZcWzNj5/vKMdxQPiyJ9EHyox8Ark=\\r\\n\";\n        c[171] = \"+/14PnFQVZ7BTHKUvkTtRrYS7WnPND5gZ5byMhUrDLkJa6UPBV7z0nrDMifEo/dQfUq3EjCiG6xG\\r\\nVhrUvAzgxqOQZTW1Y9p9M0KWW+E0XvCQppHFpuMqF1vYsF0OD6AMiE9JtGnWs3JcaWP/XBF/CvhQ\\r\\nlFGbHi3fbrD/haTEBnmpJWBgMdKribdbXHtBSFZ2MzCX2eDtxoDdRdEVGs4v/q8gVBS+WsnZ3TTF\\r\\n\";\n        c[172] = \"31I1ja+B+aopKkztGzJYvJEWAshyoAAV5yve4LnP0kdImUQaVETSuo5CDIYr7zM8MCD1eYPpLicm\\r\\nGnA+C927o9QGAVL3ctO/DCWhNinW7NmeYIM+o4diKBkDPjHmSWa+nq4nr+gOap4CtwL2wW2B5Yqt\\r\\n26pKgN9uAU5CmTL26hYFgMEOZfrkQ7XdYGy2CN8RJLmjeSFVVNBG/FTaK7tpuy0LQSkko6wczBYG\\r\\neg==\\r\\n\";\n        c[173] = \"XbRfDqGe3eeI1tHx8UnPneDB57N8VeSSzXzVCNSgxOEfd6d/un5CDxHG+m4w3tIbtSky4R2+zMF+\\r\\nS5cRvTOwZ/veegYtLKTxA0mVedWLFkfh/v4NgPJ+NEU+cylbSSZLAeBofDvoJwnYKujN2KFa8PGA\\r\\nxr3Y8ry3qdkS8Ob1ZiHYAmLvKS9sGb/vjTvRy+a4Q7kOepsm7PYisinKelBAvDnjli6/lOutGren\\r\\njX4=\\r\\n\";\n        c[174] = \"jGEj/AaBefac9uOcmGuO9nH+N+zMsC4qAe6ZUEMMIXdTGnSWl7Xt0/nKqyOj3ZH249HwkJ8bn5C+\\r\\n0bzOpQ1eA3PxEq6RfKMrjHJPJmTZXrSESTjfj3oNLU/CqqDOqd8znTgN6nvnUdCeStLMh9bmWF1+\\r\\n0G11nDwg6GQWWQ0zjVDTq5j7ocXcFOyUcu0cyl5YDcUP0i2mA2JullInU2uBte7nToeSGB3FJxKu\\r\\neBbv\\r\\n\";\n        c[175] = \"RAzNCxlP2S/8LfbGtlSDShox8cSgmJMOc2xPFs8egZVJiwlmnS3aBWKPRbbxkZiVVYlu4GNJNwbo\\r\\ncc6dgrl28HXAsYikE5wwoQ1MeOJWU3zzFiYENh7SLBQfjVPQHucctr8P6Rl7YL5wHc+aC+m92R3b\\r\\nnzm5rp1PeHm7uzy2iUUN0cgfbwJ4FrpXhVMTsAUpTbg1+037EWcGOuxir4dG2xBfgOwa+ejFHkw7\\r\\ny0LWRw==\\r\\n\";\n        c[176] = \"08hmZptBGKKqR6Qz9GNc2Wk1etgU/KogbiPQmAh5IXlTBc97DuEToL4Bb889nfObVQ/WelmiCS8w\\r\\nEjSBdmnlkkU7/b5UT3P4k1pB6ZxPH9Qldj5aazkA/yCb0kzDfJlcdFOh1eAcu5LvwTXOizmPwsDv\\r\\nJEnOkaDZrKESZshsHU2A6Mx6awk9/orf6iBlJHQIIH3l4o3b1gx2TNb/hUgdAlwtQDhvKO3skB0P\\r\\nS+rcWAw=\\r\\n\";\n        c[177] = \"0GhrgbSSHPLWtyS2mnSxrNAj/dyrFQcxIgPjT7+78SZ1ZTGc03vsmlZ4Z/bOO84E9yKblaI5dSHV\\r\\nXrx57L0kikL8tgKCsAkUNO3l/4zv5FfCrRTgGx4sFTFB1NNcLcwagkvFzde764DjYmj4YZhYsXSZ\\r\\nCVKi0uu5M8fpgGDZ9UMSFR008cbhaIoFLWSANqiNJYSvTQZhGWfLtIPGLN+gIOMcaKhx1b5vg6OY\\r\\nSz6ScAM/\\r\\n\";\n        c[178] = \"2VGiMV/f2hNZAjw3fdeHx/wRIVzeP018lZynzwSySG/zQBxyRmi3YmKVZmh3aJunuiqmvdt0kJ6l\\r\\nX7M8BajYHPCBkqJOx8oPJ/K1oADxVgnavZ69dKYrSy9/Pm6sHxjFrdSz9TelUK9sgoFTWS6GxgzW\\r\\nEqXRBDDpGUnsNbSEcWLPKVLNNoYAcltY98JZaNSZBXcpa9FeSN7sVU43q2IEcDx3ZkJzRJpl/lb7\\r\\nn+ivMwX/OQ==\\r\\n\";\n        c[179] = \"iMSCh1m5vct3C7LEn5wKRYtalzvG6pKahG19rTb6Z9q7+buDsML5yM6NqDvoVxt3Dv7KRwdS3xG/\\r\\nPyb7bJGvQ2a4FhRnTa4HvPvl3cpJdMgCCvsXeXXoML4pHzFlpP0bNsMoupmhQ0khAW51PAr4B165\\r\\nu1y5ULpruxE+dGx/HJUQyMfGhOSZ5jDKKxD5TNYQkDEY28Xqln6Fj8duzQLzMIgSoD8KGZKD8jm6\\r\\n/f8Vwvf43NE=\\r\\n\";\n        c[180] = \"hN4+x/sK9FRZn5llaw7/XDGwht3BcIxAFP4JoGqVQCw8c5IOlSqKEOViYss1mnvko6kVrc2iMEA8\\r\\nh8RssJ4dJBpFDZ/bkehCyhQmWpspZtAvRN59mj6nx0SBglYGccPyrn3e0uvvGJ5nYmjTA7gqB0Y+\\r\\nFFGAYwgAO345ipxTrMFsnJ8a913GzpobJdcHiw5hfqYK2iqo8STzVljaGMc5WSzP69vFDTHSS39Y\\r\\nSfbE890TPBgm\\r\\n\";\n\n    }\n    private static void initBYTES() {\n        byte[][] b = BYTES;\n        b[0] = new byte[]{};\n        b[1] = new byte[]{-72};\n        b[2] = new byte[]{-49, -36};\n        b[3] = new byte[]{77, 15, -103};\n        b[4] = new byte[]{110, 24, -44, 96};\n        b[5] = new byte[]{-43, -61, -67, -75, -33};\n        b[6] = new byte[]{-80, -52, 71, -96, -105, -7};\n        b[7] = new byte[]{-115, 7, 15, -108, 59, 25, -49};\n        b[8] = new byte[]{76, 6, -113, -99, -11, -65, 9, -123};\n        b[9] = new byte[]{113, 116, -39, -69, 12, -41, 60, -29, 82};\n        b[10] = new byte[]{46, -39, -1, 101, 53, 120, 34, 52, -6, 56};\n        b[11] = new byte[]{-23, -8, 126, -115, -43, 55, -43, 35, -90, 90, -73};\n        b[12] = new byte[]{19, -2, 76, -96, 62, 42, 10, -16, -18, 77, -63, 64};\n        b[13] = new byte[]{-38, 127, 88, -55, -16, -116, -56, -59, -34, -103, -69, 108, -79};\n        b[14] = new byte[]{-88, 25, 26, -36, 26, -70, 87, 125, 71, -103, -55, -121, -114, 70};\n        b[15] = new byte[]{90, -4, -103, 123, -87, 16, -14, -100, -69, -101, 110, 110, 113, -84, 9};\n        b[16] = new byte[]{-95, -118, 113, 51, 46, -127, 74, -106, 87, -123, 90, 78, 71, -89, 87, -104};\n        b[63] = new byte[]{-55, -20, 69, 104, -46, -102, 63, -27, 100, 87, 1, 20, -65, 20, 23, 108, 45, 7, 72, 40, -65, -78, -77, -104, -19, -51, 55, -22, 84, -10, -27, -6, -20, -29, 24, -56, -66, -99, -75, -32, -111, -62, -125, -77, -117, -3, 118, 86, -36, -125, 30, -24, 32, -32, 72, -64, -102, 104, -113, 117, 121, 24, 12};\n        b[64] = new byte[]{-66, 74, -96, -98, -30, 119, -90, 92, 77, -74, -117, -34, -120, -62, 110, 96, -77, 122, -63, -108, 11, -91, -67, -59, -125, -113, 63, -52, 121, 29, 22, -32, -18, 114, -29, 10, 89, 84, 78, -2, 120, -123, 70, 2, -84, 22, -89, 49, -85, -91, 96, 11, 28, 16, 109, -29, -30, 63, -37, 17, -97, 28, -5, -62};\n        b[65] = new byte[]{96, 121, 44, -36, 96, -101, -38, -27, 69, -29, -74, 54, -76, 40, -98, -120, 49, -119, -13, -65, 81, -101, -105, 65, -123, 8, 80, -117, 54, 33, 125, 99, -88, -8, 26, -63, -37, -14, -66, 19, -68, 25, 89, 56, -99, -41, -119, 76, -92, -50, -76, -5, -112, -76, 55, -46, 77, 40, 7, 1, 17, 39, -86, 101, -110};\n        b[66] = new byte[]{-49, -50, 121, -42, 57, -112, -89, -12, 44, -9, -101, 112, -37, 110, -66, 28, 33, -42, -82, -30, -79, -4, -101, -33, 4, 39, -48, -26, -99, 31, 23, -66, -26, -111, 42, 105, -21, -95, 57, -25, 104, -92, -38, 12, -100, -84, 16, 108, 48, 47, -51, 111, 57, -64, -127, 54, 104, 51, 54, 113, 122, 23, -55, -62, -18, 61};\n        b[67] = new byte[]{86, -60, 118, -62, 26, -86, -2, -92, 38, -33, -115, -66, 76, -36, -11, -106, 3, -103, 50, -123, -101, -92, 44, -2, -110, 61, -77, 126, 90, -76, -97, 30, -46, -3, 23, -124, 84, -11, 9, 114, -88, 12, -75, 92, -21, -81, 97, 85, 64, -9, -63, 0, 126, 85, 70, 52, 126, -122, 76, 112, -65, -122, -20, -79, 9, -84, -15};\n        b[68] = new byte[]{-25, 25, -120, -89, -57, 84, 37, -100, -28, -118, -62, 36, -72, 67, -20, -100, -11, -17, -52, 55, -116, -93, -113, 42, 88, 87, -57, 34, 125, -102, -65, 120, -21, -26, -86, 25, 28, 43, 52, 45, -13, 68, -55, -22, 66, -34, -3, -84, 107, 73, -62, 83, 65, 101, -86, -55, -125, -55, 50, 57, -1, 104, -19, -25, 59, 11, -75, 93};\n        b[69] = new byte[]{-76, 97, 32, 94, 56, 37, 80, 31, 77, 108, 43, 98, 75, -49, 0, 122, -46, -19, 70, -88, 66, 2, 120, 115, 57, 66, -107, -126, -10, -55, 100, 122, -114, 3, -84, 124, -72, -22, 43, 3, 91, 119, 53, -58, -120, 3, 77, 25, -87, -77, -40, 0, -69, -72, 47, 50, 38, -30, 46, 37, 0, -65, 80, -126, 33, -1, 38, 14, -37};\n        b[70] = new byte[]{-128, 91, 113, 18, 22, 9, 106, 16, -26, 83, -105, 105, -71, -42, 44, -23, -108, -20, -88, 12, 126, -77, 104, -2, -45, -96, 52, -51, -20, -101, -35, 78, -25, -123, -111, 108, 110, 64, -125, -107, -37, 52, 17, -123, 40, -87, -22, -39, -87, -109, -26, -20, 94, -126, 12, -29, -125, -35, -43, 59, -99, -119, -98, -108, 77, 3, -57, 35, 14, -12};\n        b[71] = new byte[]{-113, -8, 127, -44, -100, -96, 96, 14, 91, -114, -37, 113, -51, 12, 107, -26, 0, 109, -126, 31, -128, 97, 90, 51, -124, 94, 22, -126, -9, 20, -2, 14, 61, -65, 72, 84, -53, -95, 93, -123, -10, 94, -64, 98, -66, 62, 27, 115, -113, -76, 90, 108, -114, 105, -37, 53, -14, -50, -7, 38, 45, 7, 69, -123, -46, 57, 82, 110, 14, -26, -52};\n        b[72] = new byte[]{-101, -23, 24, 84, 106, 35, 33, 30, 105, -127, -68, -5, -92, 98, 102, -38, 15, -73, -86, -87, 59, 126, 25, 119, 114, -116, 26, -39, -27, 107, -122, 72, -69, 90, -121, -14, -53, 9, -47, 123, 58, -109, -60, -23, 1, -127, 81, 115, -22, 114, -84, -14, -84, 105, 109, -74, -13, 0, -73, 45, 112, -9, -116, -78, -97, 93, -91, 117, 31, -71, 66, 107};\n        b[73] = new byte[]{-92, -10, -122, -100, -54, -12, 81, -119, -91, 118, 114, 85, -109, -15, 126, -35, 96, -119, 39, 90, -10, -94, -37, -61, -28, -94, 93, -73, 107, -75, 70, 116, -70, 47, 8, 71, -121, 2, -62, -87, -11, -68, 59, -12, 4, -125, -115, -42, 119, 18, -88, -104, 98, -1, 36, -51, -9, -74, 127, -63, -10, -109, 15, -96, -123, 52, 65, 49, -93, -85, 97, -111, -93};\n        b[74] = new byte[]{-104, -20, 115, 27, 44, -90, -23, 63, -63, -60, 37, 121, -99, 40, -120, 96, -55, 95, 1, 73, -126, 55, -72, 45, -17, -26, 83, 50, 13, 100, 119, -61, -19, -118, -71, 62, 36, 94, 93, -109, -59, 18, 109, 96, 110, -1, -42, 111, 54, 14, 89, -70, 34, 66, 120, 108, 31, 105, 90, 106, -91, -99, -54, -9, 36, -123, -20, 47, 59, 38, -5, -75, 69, 65};\n        b[75] = new byte[]{85, -126, -50, 32, 78, 3, -98, 28, 73, -97, 113, 74, 75, -3, -111, 28, 113, -40, 46, 86, 98, 25, 87, 85, -2, 78, 46, 5, -69, 64, 96, 117, 18, 78, -108, 115, 105, -90, 15, 24, -48, 21, -115, -45, 112, 109, 49, -56, -118, 25, -98, -70, 79, -7, 97, 5, 50, -16, -47, 108, -60, -118, 38, -8, -72, -69, 110, 117, -94, 6, -127, -54, 4, -13, -5};\n        b[76] = new byte[]{-19, -6, 12, -92, -99, 19, -110, 112, -102, -74, 53, 34, 75, 27, 103, -72, -92, -94, -49, -124, 47, -105, -8, -99, 89, -113, 84, 42, 36, -27, -114, -124, 7, 103, -32, -68, 109, -59, 44, 114, 114, 63, 109, -102, -11, -35, -18, -128, -65, 37, 33, -29, -77, 37, -91, -47, -81, -52, -119, -76, -26, -91, 29, 49, 101, -117, -95, -110, 78, 104, 102, 47, 14, 107, -21, 89};\n        b[77] = new byte[]{-113, 20, 18, 26, 33, 108, -7, -67, 83, 124, 78, 37, 13, 64, 15, 80, -14, 116, 73, 103, -108, -126, 93, 55, -84, -82, -102, -70, 39, -106, 37, -58, -85, 12, -127, -52, -9, -72, 6, 56, 115, 38, -56, 123, -99, 68, -54, -92, 102, 98, 36, -59, -124, 96, 98, 0, -126, 82, 15, -55, 121, 79, 117, 57, -112, -9, -76, -66, 20, -5, 3, 97, 74, 28, -80, 123, -49};\n        b[78] = new byte[]{80, 105, -121, -2, 9, 123, -73, 112, -28, -13, 77, 111, 70, 20, 67, 17, -72, 44, 125, 40, 109, 29, -99, 96, 101, 9, -8, 40, -42, 121, 66, -52, 55, 90, 33, -93, 91, 66, 38, 34, 117, 71, 107, -30, -46, 28, 28, -53, 82, 60, 2, -47, -99, -25, 92, -18, 34, -29, -32, -94, 41, -118, -128, -78, -109, -107, -120, 78, -106, -87, 85, 24, -15, -108, -107, -48, -24, 56};\n        b[79] = new byte[]{-63, -47, 40, 98, 98, 110, 70, 120, 54, -49, 98, 36, 2, 36, -96, 39, 80, -106, -39, 81, 59, 31, -70, 23, -91, -123, -124, 20, 83, -68, -100, 109, 27, 102, 126, -49, 30, 20, -4, 43, 40, 90, 59, 106, -30, 118, 95, 30, 80, 76, -84, -115, -83, 21, 92, 80, -14, 66, -92, -96, 102, 123, -35, 80, -86, -62, 25, -22, 86, 25, -106, -16, -45, -3, 27, 15, 11, 55, 2};\n        b[80] = new byte[]{-26, 70, 106, -126, -75, 27, -73, -22, -51, -28, 21, -128, 117, -41, -108, -74, 111, 83, 25, 62, 55, -67, -118, 65, -24, -9, -78, 67, 4, -14, -53, -43, 91, -81, 79, -108, -1, -124, 51, -53, 66, 48, -33, -76, 90, -37, -35, -57, -102, 73, -87, -127, 12, -18, 73, -59, 105, 112, -120, -123, 25, 115, -64, 21, 108, 19, -95, 31, -101, -94, -4, 46, -19, -91, -29, -117, -15, 103, 51, 9};\n        b[81] = new byte[]{19, -114, -69, 48, -55, -119, 110, 108, 47, -16, -23, -100, -39, 55, 92, -56, -54, -1, -33, 64, 124, -117, 53, -101, 127, -32, -128, -72, -101, 112, -21, -74, -11, -125, -37, 107, -124, 46, -89, -32, 102, 39, 94, 55, -106, -12, 54, 47, -103, 106, 8, 36, -4, 116, -50, -11, 63, 67, -24, 42, -65, 71, 45, 122, 13, -101, -57, -45, -10, -102, -72, 12, 12, 4, 91, -23, -24, 40, -62, -88, -15};\n        b[82] = new byte[]{86, -101, 124, -123, -122, -8, -113, 29, 69, -5, -76, 68, 95, -78, -70, -26, -2, -98, 59, -111, 117, 24, 56, 63, 43, -60, -107, 45, 96, -46, -89, 75, 43, -70, -106, 4, 66, 64, 85, 71, 25, -63, -11, -39, -95, 74, -113, 87, 30, -100, -8, 11, -54, 81, -105, -54, -4, -39, -4, 87, 102, -23, -90, 17, -2, 20, -40, -24, 116, 14, 42, 121, -82, 115, 109, 12, -65, -120, 38, -14, -4, -107};\n        b[121] = new byte[]{-123, -2, -67, -58, -65, 102, -76, 87, -8, 55, 120, -10, -72, 15, 76, -128, -78, -7, 103, 47, 120, 30, 59, -2, 85, 8, -67, -29, -30, -46, -13, -34, -10, 36, -104, 3, 28, 36, 14, -64, -2, 112, -123, -44, 36, 87, -28, -119, -91, 121, 34, -56, 113, -102, 74, -60, 56, 126, 23, -87, 63, 12, -18, 101, -63, 41, 96, 68, 126, 109, -23, -14, -42, 63, -116, -48, 116, -103, 123, 126, -116, 117, 18, 33, -107, 58, -89, -93, -18, 42, -79, 119, 36, 47, 64, -93, 94, -58, 36, 36, -109, 52, 52, 7, -50, 98, 49, -64, -70, -50, 70, -43, -72, 34, -11, 88, 102, -120, -57, -64, 48};\n        b[122] = new byte[]{-56, -84, -45, -121, -104, 79, -89, -33, -49, 5, -26, 109, -83, -107, -20, 20, 112, 17, -9, 44, 14, 51, 120, 81, 104, 16, -28, -128, 111, 68, -45, -36, 5, 91, -61, 25, 15, 76, 76, 25, -24, 28, -89, 68, 43, 76, -105, 15, -15, 6, 14, 105, -120, 83, 13, 88, -90, 62, -85, 13, 77, 83, -90, -115, -40, -28, -67, 47, -74, 90, 24, -55, 91, -119, -107, 57, 116, 60, 40, -128, -3, -41, 38, -127, -76, -6, 62, 13, 43, 75, -28, 99, 32, 114, -41, 15, -28, -54, 21, 127, 85, 105, -13, 15, -26, 98, -38, 31, -87, -71, 101, 124, 57, -71, 53, -10, 51, -121, 96, 59, -118, 54};\n        b[123] = new byte[]{114, -63, 102, -62, -16, -13, -96, -18, 8, 59, -84, -110, 12, 14, 1, -39, 94, -34, -104, 71, -83, 3, 0, -96, 59, -82, -77, -50, 87, -42, 111, 114, -125, -84, -9, -59, 101, -51, -55, -126, -66, 62, 118, 86, -108, -112, 66, 3, 29, -121, -117, 28, 68, -35, 78, -53, 22, 58, 93, -118, -84, -15, -63, 18, -59, 11, -92, 52, -47, -5, 115, -95, -70, -75, -37, -43, 10, -10, 54, -15, -30, 28, 91, -86, 79, 113, -98, 111, -95, 24, -61, 102, -91, 109, -12, -26, 95, 23, 33, -13, 102, -101, -106, -34, 22, 42, 94, 42, 61, -60, -98, -53, -98, 47, -22, -37, 2, -71, 75, -103, -50, -71, 45};\n        b[124] = new byte[]{-28, -119, -15, -68, -84, 41, -96, 37, 123, 16, -82, -4, 59, 53, 63, -76, -65, 127, 54, 98, -75, -32, -6, -16, -10, -45, -126, 3, 34, -66, -58, -107, 13, 45, -102, -30, -71, 81, 21, 118, 10, 104, 103, 78, 107, -106, 43, -97, 105, 64, -58, 28, 127, 29, 60, 7, -90, -16, 111, 67, 55, -11, 78, 62, 75, 65, -22, -11, -54, -75, -51, -92, 49, 72, 39, 49, 56, -103, -62, -1, -44, 85, -33, -79, -54, -87, -45, -16, -14, -60, 116, -44, 60, -84, 37, -79, -54, 32, -100, 45, -43, -59, 127, 79, -79, 112, 78, -22, 9, -52, 51, 11, -32, -5, -7, -60, 86, -6, 46, -99, -98, -106, 100, -53};\n        b[125] = new byte[]{112, 76, 123, -95, 59, 18, 29, 101, 5, 62, 63, 118, 114, -53, 93, -53, -100, 6, 109, 23, 49, 31, -27, 81, 88, -33, 36, 104, -44, -45, 8, -11, -86, 73, -55, 50, 83, -43, -28, -2, 56, -7, -2, 8, -3, 12, 92, 35, 126, -64, -110, -89, -83, 49, -70, -41, -8, -2, -79, 90, -98, 59, 112, -86, -44, 96, -23, -46, 75, 63, -126, 64, -126, -109, -118, -77, 0, -27, 30, 46, -107, -73, -68, -59, -1, 14, -57, -119, -45, 31, -38, -57, 109, -106, -54, -77, 107, 38, 102, 79, 97, -25, -18, 35, -88, -36, 33, 49, -50, -66, 89, -28, -105, -26, 48, 80, 23, -15, 31, 105, 121, 67, 120, -73, -107};\n        b[126] = new byte[]{1, -27, -34, -75, 86, -29, -5, -71, -90, 26, 32, -84, -36, 17, -108, 73, -112, -53, -106, -83, -88, 116, -53, 13, -16, -112, 7, 64, -50, -72, 10, 92, -68, -53, -104, -16, -17, -109, -23, 33, 42, 28, 89, 17, 69, 66, 105, -105, 96, -2, -36, -112, -87, -83, -70, 18, 47, 15, -81, 71, -75, -100, 70, -124, -44, 108, -105, 89, 117, -127, 124, -54, 22, 27, 22, -54, 71, 17, -76, 111, 59, 23, -53, 18, -43, 75, -1, -117, -92, 47, 26, 36, 72, 13, 81, 6, 24, -116, -42, -81, 52, 72, 33, 41, 1, 111, -36, 2, -60, -99, -121, 17, 39, -27, 121, 108, 43, -49, -15, -86, -81, 40, -24, 55, 110, -127};\n        b[127] = new byte[]{106, 61, 127, -13, -1, -108, -15, 83, -73, 15, 104, -128, -62, -12, 23, 103, -127, -12, 43, 11, 110, -52, 57, -72, 36, 32, -68, -5, 109, -100, 114, -87, 62, 83, 50, -81, -86, 49, -84, -13, -75, -25, -125, 7, -20, 49, -12, -92, 120, 101, 64, -117, -91, 65, -22, -41, -51, 37, 56, -40, 114, -42, -93, -19, 31, 29, -62, 29, -113, 33, -14, -46, -82, -10, -87, -121, 14, 48, 52, 29, -111, 18, 58, 101, -100, -6, 35, -96, -26, -3, 108, -43, 13, -75, 75, -35, 43, 118, -11, 108, 10, -50, 90, -24, 8, 68, -107, -117, -100, -55, 123, -37, 33, 7, 21, -67, 98, 5, -16, 102, -97, -69, -120, 107, -78, -109, -39};\n        b[128] = new byte[]{-110, 35, 46, 23, -3, 66, 49, 25, 96, -95, 47, -18, 44, -87, -11, -104, -42, 69, 100, -47, -55, 54, 68, 80, -98, 43, -50, -81, 56, -4, 29, 0, 26, -125, 12, -17, 77, 123, -20, 26, 2, 61, -123, 117, -9, -87, -89, -103, 47, -33, -15, -4, -22, -66, 99, -111, 122, 14, 31, -80, 94, -113, -76, -110, -98, -119, 106, 1, 99, -67, -76, -55, 113, 4, -88, -64, 92, -56, -62, 14, -1, 87, -37, 26, -98, -51, 13, 19, 65, 35, -93, 14, 65, 125, -110, -81, -118, 17, 72, -29, -85, 7, -120, 2, -27, -42, -84, -24, 94, -94, -48, -85, -18, 95, 100, 98, 5, 71, 44, -104, -13, 1, 86, -42, -24, -115, -69, -39};\n        b[129] = new byte[]{97, 121, -126, 90, 24, -115, -49, -113, -56, -121, 44, 80, 33, -120, -32, 54, -8, -41, -7, 124, 3, -120, -12, -46, 4, -58, -123, 16, -71, -71, 95, -58, 56, -110, 113, -111, -98, 65, 120, -1, 56, -79, -14, 95, 112, 28, 22, -2, -20, 40, 31, -82, -66, 58, -84, 94, -34, -120, -116, -38, 0, 82, -29, 46, 56, -34, -61, 46, -73, 118, -32, 73, -119, 86, -60, 90, 58, -123, 59, 71, -18, -23, 63, 98, 34, 59, -124, 104, 93, -84, 78, -102, 111, -71, -109, 79, 31, 31, 52, -68, -33, -121, 44, 9, -64, 86, 104, 5, 17, 44, 57, 0, -11, -42, -97, 94, 93, -117, 59, -18, 81, -11, 71, 119, -104, -84, 10, -90, -64};\n        b[130] = new byte[]{24, -105, -44, -96, 24, -81, 91, -101, -86, 14, -107, 49, 77, 23, -29, 25, 99, 88, 124, -35, -1, 117, 49, 109, 117, 26, -126, 32, 126, 75, -39, -51, 103, 89, 125, 29, -127, -115, -37, 107, 95, -97, 91, -10, 23, -44, -24, 121, 107, 14, 37, 11, -96, 72, -118, 36, -31, -116, -102, 21, -43, 90, -51, -98, 85, -13, 109, -59, 28, 51, 47, -122, -80, 53, 20, 7, -60, 30, -14, 80, 111, 125, -17, -19, -31, 25, -115, 60, 29, 33, 86, 10, -46, -13, -39, -19, 110, -27, 52, 74, -64, -90, 91, 15, -67, 14, -93, 55, -98, 39, 79, 121, -80, 13, 40, 68, 98, -125, 92, -39, 76, 16, 74, -126, -107, 95, -20, 115, -59, 8};\n        b[131] = new byte[]{121, 55, -85, 54, -50, -35, 58, -94, 64, -60, 12, 92, 49, 4, 103, 80, 55, 54, 112, 24, -10, -57, 72, -44, -42, 13, 67, -36, 111, -101, -37, 105, 3, -49, -78, 65, -52, -20, -65, -101, 24, 70, 92, 4, 55, -41, 125, 37, 106, -11, -116, -124, -119, -110, 6, 68, 94, 83, -20, -12, 3, 93, -60, 97, 83, 20, -65, -45, -59, -52, 62, -8, -20, -96, -81, -98, -49, -110, 10, -114, 118, 96, -47, -63, -45, -49, 122, 111, -119, 120, -18, -81, 33, -69, -56, -20, 15, 94, -45, 103, 107, -106, 88, -104, 82, -31, -61, 103, 72, 77, 99, 120, -50, -115, -95, 113, -118, -67, -1, 116, -53, 23, -13, -62, -25, 13, 97, -50, 17, 117, -92};\n        b[132] = new byte[]{-107, -70, -58, -78, 54, -13, 19, -99, -75, -85, -53, 115, 84, 117, 123, -67, -60, -49, 114, 21, 39, -52, -113, -44, 125, -28, 118, 71, -25, 38, 57, -83, -67, 98, 88, -49, 88, -72, 109, -11, 108, 118, 38, -72, -30, 42, -2, 14, 127, -103, -41, 123, -71, 47, -122, 47, -117, 97, 75, -123, 86, -88, 26, -88, -127, 97, 11, -13, -53, 110, -93, -123, -119, 61, -107, 101, -59, -24, -83, 58, 26, 69, 63, 66, 46, 42, -107, -27, -66, -89, 28, -33, -45, -57, 62, -110, 35, -77, 34, 15, 120, 103, -109, -70, 108, 13, -72, 37, 60, -22, 62, -54, -38, -100, -10, -63, 71, -113, -75, 36, 71, 86, 92, -75, 8, -16, 21, -116, 9, -114, 92, 95};\n        b[133] = new byte[]{-103, 12, 0, 63, 54, 51, 127, 28, -3, 21, 113, 34, 103, -93, 60, -69, 90, 13, -36, 66, 91, 21, -119, -115, 85, -6, 102, -6, 61, 3, -86, 5, 62, 56, -14, 56, 81, 17, -63, 34, -79, 120, -58, -9, 76, -68, 3, -25, -47, 107, -102, -83, -76, 50, -3, -107, 77, -47, -30, -117, -19, 46, 10, -36, -53, -38, -97, 71, -27, 3, 6, -103, 116, -113, -98, -28, 122, 100, 127, 19, -88, 25, 58, 124, 14, 78, 68, 21, 53, -29, -103, -97, -20, -8, 106, 39, 120, -15, 16, 16, 99, 85, 60, -67, 86, 98, -128, -6, -59, 122, -128, 2, -13, 11, 42, -36, -85, 21, -54, 104, -120, 100, -67, 120, 48, 101, -79, -112, -48, -52, -4, -13, -2};\n        b[134] = new byte[]{-36, 110, -99, -41, 101, 24, -30, 94, 86, -20, -39, -16, -48, 18, -12, 30, 117, 98, 86, 15, 82, 116, 75, -117, 50, -89, -103, -61, 45, 17, -108, -108, 127, 98, -41, 32, 119, -7, -120, -60, -117, -105, 92, 9, 70, -122, -8, 104, 95, -91, -36, -40, 17, -108, -19, 26, 83, -117, 88, -40, 43, 48, 60, -21, 43, -91, -46, 63, 122, 117, -73, 4, -32, -21, 107, 63, -39, 84, 4, -103, 92, 99, -41, -106, -49, -97, 93, -68, -70, -118, -57, 11, 119, 112, 67, -127, -62, -77, -33, -21, -45, 7, -72, -122, -74, -25, -89, -84, -36, 3, -126, -95, -73, -62, -15, 20, 18, 113, 109, 15, 67, 68, 20, 107, 85, 71, 7, -9, -105, 74, -59, 83, 73, 104};\n        b[135] = new byte[]{3, 24, 43, 100, -92, -59, -109, -110, 111, 44, 45, -61, 4, 0, -121, -62, -99, -70, -24, 92, 74, 35, -4, -89, -12, 95, -75, -75, -119, 51, 47, -98, -47, 86, -50, 71, 8, -106, 18, -29, -75, 110, 27, 68, -12, 19, 108, 42, -52, 122, -100, 44, -93, -48, 49, -107, -108, -18, -10, -47, -93, 35, 6, 52, -67, -39, -75, -95, -24, 102, -92, -22, 114, -81, 74, 90, -45, -125, 11, -29, -89, 18, -12, -110, -17, -19, 79, -31, 41, -112, 14, -20, -117, -40, -62, 127, 120, -112, 1, 36, -93, 92, -69, 82, -65, 46, 77, 27, -72, 6, -114, -48, 91, -41, -24, -31, -127, 112, -4, -18, -41, -25, 111, -3, -103, 48, -72, -28, 74, -45, -70, -111, -97, 26, -112};\n        b[136] = new byte[]{106, -39, 6, -14, 93, -108, -4, -39, -26, -5, 50, -18, -17, 56, -34, -98, -73, -36, 1, 84, 9, 49, 74, -121, -118, 97, 89, -35, -60, 31, 105, 74, 120, -85, 42, -59, -97, 85, 34, -63, -99, -9, -113, -82, -107, -73, -83, -34, 85, -92, -1, 21, 124, 126, 46, 81, 39, -80, 121, -6, 1, 51, -63, 50, -99, -30, 17, -118, 1, 37, -116, -115, -90, 60, -1, -51, 19, -95, 5, -73, 51, -99, 0, 12, 117, 101, 19, 115, 34, -120, -98, -7, -58, -33, 30, -124, -58, 0, 87, -89, 42, -97, -57, 26, 127, 62, 111, 27, -53, -78, -27, 73, 68, -7, 48, -95, -35, 114, -17, -109, 17, -11, 23, 70, -119, 2, -81, 104, -113, -98, -34, -51, 98, -61, 67, 124};\n        b[137] = new byte[]{117, -56, -108, -42, 100, -121, 25, -64, 113, 56, 5, 65, -128, -100, 123, -28, -98, -125, 105, 7, 65, 101, -12, -56, -51, 13, 56, 90, 25, 36, 117, 19, 46, -92, -26, 86, 74, 123, -11, -9, 24, 115, -14, 24, -114, -7, -103, -37, 6, -48, -55, -72, -18, 107, 30, -59, 6, -52, 127, -29, 97, -89, 31, 103, 32, -112, -9, 110, 43, -95, 27, -28, -121, 116, -11, -53, 27, 11, -85, 118, -101, 100, -107, 2, 15, -47, -40, -100, -12, -60, 45, 88, 111, -41, -25, 4, 23, -122, -88, 59, 123, -58, 58, -19, -123, -91, -14, -44, -97, -108, 19, 119, 67, -24, -50, -62, 42, 114, -90, 85, 7, 101, 121, -20, 30, -61, -115, -8, -77, 81, -19, -61, -15, -121, -7, 85, -54};\n        b[138] = new byte[]{118, 4, 117, 60, -10, -100, 6, -5, 72, 44, 25, -96, -33, 123, 61, 41, 107, 110, 115, -82, -25, 118, 29, -21, 8, 118, 127, -108, -125, 123, -80, 67, 96, 108, 90, -119, 67, 46, 67, 11, 117, -56, 120, 116, -43, -18, -123, -99, -6, -46, 80, 105, 124, 104, 11, -67, 127, 73, 78, -47, -49, -93, -126, -108, 3, 10, 92, -74, -52, -49, -59, 58, 68, -8, -86, -97, 115, 59, 49, 16, -112, 112, 55, -51, -116, 14, 92, 8, -39, 39, 93, 63, 68, -121, 63, -56, 100, 95, -5, -107, -59, -85, -61, 16, 74, 98, 110, 1, -9, -55, 79, -110, -106, 109, 71, 100, 7, -99, -40, -112, -34, -9, -89, -51, 106, -49, -48, -2, 114, -37, -71, -111, 121, -95, 110, 104, -97, -66};\n        b[139] = new byte[]{-43, 15, 43, 126, -99, 71, -72, 107, 49, -70, -76, -32, 24, -58, -92, -58, 62, 82, -64, -47, 123, 18, 44, 87, -59, 83, -25, 124, 96, 3, 88, 55, 50, -126, 30, 66, -44, 19, 23, -86, 34, -11, 2, -27, 87, 57, 81, 78, -79, -84, -99, 124, -75, -122, 11, -62, -101, -121, -14, 98, 47, -95, -2, -41, 105, 88, -84, -47, -108, 79, -36, -119, 68, -116, -47, 14, 46, 23, -54, 83, 39, -83, -116, 1, -73, 0, -119, -114, -127, -46, -117, -121, -79, -49, -110, -74, -118, 30, 120, -70, -43, 64, -69, 53, -39, -125, -87, -89, 115, -40, -98, 119, -7, -115, 70, 56, -3, 119, 97, -59, 15, -103, -81, -45, 15, -22, 76, -33, -42, 23, 17, 38, -74, -26, 76, -2, 115, 12, 106};\n        b[140] = new byte[]{-61, 77, 83, -100, -13, -1, 23, 117, 103, -117, 119, -63, 117, 93, -10, 6, 118, -37, -32, -99, 69, 113, -74, -124, -7, 121, -8, -30, 122, 57, -70, 14, -5, 83, -63, 82, -42, 4, -90, -36, -70, -119, -13, 36, -14, 93, -37, -77, -105, -101, -10, 119, 0, 68, 127, 56, -124, 125, 59, -78, -86, 7, -117, 46, -64, -104, 76, 24, -41, -103, -125, -120, 29, 10, 44, 18, 94, -125, -56, 9, 39, -69, -123, -54, -25, 103, -112, 91, -31, 94, -77, -41, -110, -77, 99, 106, -8, 110, 26, 105, 30, 50, -30, 87, -98, 20, -39, -126, -95, -97, 65, 66, 96, 0, 102, -67, 11, 22, 74, -89, -66, -90, -118, -104, 21, 96, 114, 12, 79, -77, -65, -4, 73, 1, -25, -90, -85, -38, 83, -90};\n        b[141] = new byte[]{57, -4, -56, 23, 127, 19, -89, -104, 53, 91, -105, -107, 110, -71, 43, 49, -19, 12, -101, -73, -76, -64, 22, 32, -26, 21, 111, 46, -103, -1, -28, -59, -71, 56, 87, 38, 68, 59, -127, -89, 94, 90, -55, 16, 103, 39, 91, 1, 35, -35, -2, 8, -39, 116, 47, 3, -4, 67, 76, -3, 33, 113, 99, 76, 68, 121, -128, 118, 117, 41, -15, -68, 53, 95, -88, 105, -62, -115, 27, -74, -104, -83, -75, 31, -74, 68, -117, -2, -125, -33, 68, -45, -34, -49, -91, 52, 22, -27, -96, -67, 90, -41, 80, 30, -100, -64, -92, -42, -65, 6, -3, 42, -128, -5, -77, -96, 6, 97, 23, 71, -25, 70, 96, 37, -48, 103, -120, 80, -5, 116, -86, 14, 66, 114, 127, 16, 43, -109, 81, 114, 62};\n        b[142] = new byte[]{-30, 26, 23, -46, -56, -22, -106, 68, -119, 61, 74, -70, -37, -72, -119, -112, -42, 17, 110, -48, -2, 87, 106, -124, -84, 43, -109, -118, 70, -98, 68, 49, 25, -67, 81, -42, -65, 55, 111, -62, 62, 22, -41, 28, 73, -113, 63, -78, 28, 3, 122, -49, 97, 35, 9, 104, -99, 113, 43, 21, -127, 55, -93, 67, 86, -57, -14, -28, -13, 38, 8, 127, -50, -83, -14, 25, 68, -84, 38, -126, 86, -83, -25, 42, -58, -56, 30, -15, -79, 1, -114, 73, -66, -87, 67, -68, 27, 121, 0, -100, 46, -123, 50, 50, 118, 53, -124, 30, 93, -2, -114, 43, -93, -96, -78, -84, -119, -62, 81, -49, 79, 32, 38, -77, 111, -56, -95, -124, -63, -30, 33, 42, -128, -127, 70, -1, 103, -51, 16, -111, 8, 106};\n        b[143] = new byte[]{51, -9, 114, -41, -116, 77, 109, -109, 17, 124, 120, -118, 40, 87, 102, 15, -13, -85, 16, 31, -68, 49, -20, 107, 68, -17, 38, 50, 29, 34, -28, -70, -51, 3, -107, -108, -76, -75, -35, -63, 71, -64, -54, -58, 38, 106, 95, 120, 49, 42, 13, 37, -8, 38, -64, 96, -88, -88, -36, 37, 89, -112, 86, -42, 74, 80, 104, -9, 106, -78, -71, -10, 114, -9, 58, 37, -58, 86, -12, 89, 78, -57, 78, -61, 17, 18, 70, 109, -98, -91, -22, -121, -37, -51, -107, -96, 23, -20, -97, -6, 27, -45, -22, 57, -55, -67, 112, 85, 9, 52, -9, -107, -13, -73, -86, -114, 37, 120, -37, -124, 39, 11, 46, 83, -89, -85, 92, 96, -73, 10, 30, 119, -72, -5, 70, 34, -73, 67, 82, -105, 23, -21, -11};\n        b[144] = new byte[]{26, 2, -21, -38, 23, 119, -100, -82, -72, 33, -101, -12, 38, 75, 10, 1, 63, -14, 36, -44, 55, -15, -84, -82, 91, 32, 103, 88, -72, -41, 108, 73, -109, -45, -113, 20, 14, -102, 108, -82, -71, -49, -22, 24, -92, 70, -114, 111, -39, 57, 71, 26, 16, -10, 117, -52, 6, -12, -46, -54, -36, -8, 124, 34, -126, 40, -11, 103, -10, -67, -107, -127, 7, -28, -116, 35, -47, 105, -127, -100, 65, 88, -79, 35, -64, 118, -50, 90, -63, -38, 17, 3, 21, -79, 7, -28, -33, -63, 22, 64, -3, 5, -81, -91, 114, 48, -87, 68, 65, -6, 108, 70, 75, -126, -90, -99, 74, -58, -57, 26, -60, -82, -32, -28, 24, 23, 82, 86, -12, 107, 108, 116, 23, -32, -67, -124, 64, 116, 57, 83, -20, -113, -126, 77};\n        b[145] = new byte[]{91, -39, 74, 112, -80, -22, 52, 100, 0, 27, -5, 10, 64, -42, -111, -103, -29, -108, -104, -78, 123, 25, -61, 13, -88, 22, -122, 103, -82, 125, 70, 120, -21, -23, 20, -21, 126, 121, -92, -89, -106, 125, -103, -32, 11, -97, 5, -24, 30, 51, -29, -51, 36, 3, 38, 117, 88, -79, -113, -79, -56, -55, -18, 62, 9, 122, -128, -59, 64, -124, 9, -66, 94, -102, -40, 86, -101, 39, 123, -117, -19, -5, -70, 35, 82, -90, -81, 84, -16, 106, 47, 46, 93, -74, 120, 105, -42, -89, -36, -100, 8, -107, -27, -58, 97, 29, 117, -5, 53, -68, 100, 80, -20, -23, -74, 49, 6, 9, 8, -25, -123, 33, -8, -84, -10, -39, -74, 10, 8, 88, 79, 25, -23, -70, 5, -34, 95, -19, -124, -71, -59, 95, -32, 34, -119};\n        b[146] = new byte[]{-119, -126, -25, -26, 31, 101, 34, 16, -1, -57, -39, -88, 104, -12, 103, 77, 126, -90, 36, 66, 74, 78, 24, 56, 89, 124, 82, -20, -118, -47, -37, 54, -27, 31, 110, -82, 58, 66, 13, -49, 71, 73, 53, 50, 85, 122, -37, 52, 100, -42, 3, -98, -55, -45, -20, -99, -94, 35, 118, 58, -123, 53, 86, 60, 106, 24, 83, -113, 73, -36, 29, -117, -124, 36, 68, -77, 64, -39, 67, 112, -69, -45, -51, 5, -74, 35, -100, 124, 118, -33, 4, -77, 103, -48, 60, -126, 43, 82, -34, 0, 46, -40, 7, -10, -51, 118, 44, -95, 46, -95, -4, 124, -87, 126, -45, -30, -95, -120, -16, -56, 80, 18, 88, -39, -18, -56, 109, -108, 127, -10, -35, 44, -60, -106, -56, 95, 30, -100, 70, -14, 57, 1, 119, -79, -41, 106};\n        b[147] = new byte[]{74, 84, 73, 17, -50, -25, -91, 53, 47, 66, -81, 18, -128, 22, 10, -103, 86, 63, -33, 1, -40, -89, 104, 44, 15, 22, -97, 55, -14, 75, 82, -31, 42, 18, 57, -106, 50, -43, -69, 127, 16, 18, -117, -25, -113, 95, -120, 38, 36, -102, -117, -124, 62, 109, -8, 6, 113, -120, 44, 24, 43, 114, -9, 113, -21, -119, -57, -124, -30, -87, 88, 9, -49, -57, 122, -79, -50, -33, -127, 101, -27, -70, 29, 74, -8, 23, 6, 61, -74, 123, -8, 42, -72, 86, -56, 26, -20, -111, 1, 85, -23, 47, -120, 70, 121, 2, 30, 26, -92, -38, -4, 70, 64, 123, -96, -61, -108, 84, -15, -79, 69, -52, -78, 105, 81, 56, -52, 21, -66, -79, -64, 58, 115, 92, -94, -4, 116, 23, 117, -44, 61, -83, 108, -117, 82, -59, 104};\n        b[148] = new byte[]{0, 9, 91, 25, 30, -98, -112, -77, -77, -57, -120, 105, -87, -108, -44, -87, 85, 16, -48, 82, -10, 8, 90, 96, 8, -61, -87, -24, 43, -82, 83, 57, 18, -99, 101, -23, 82, 59, -50, -119, 32, -28, 52, -8, 40, 76, -8, 41, -126, 104, 55, -71, -117, -52, -79, 126, 55, -102, 67, -58, 80, 96, -67, 107, 0, -45, -123, 124, -122, 66, 30, -82, -35, 103, -42, -74, 104, 98, 61, 26, -105, -98, 49, 94, -109, -31, 15, 119, 66, -40, 94, -101, 59, -42, 122, 39, -24, 47, 102, -18, 117, 37, 96, -43, -77, 4, -99, 88, -50, -68, -42, -114, 80, 121, 44, -77, -63, 55, -58, -20, 100, 110, -111, 109, -42, 100, 96, -52, 73, -12, -98, 109, 107, -9, 55, -46, 111, 48, 12, 51, 110, 78, 109, 39, 16, 77, 25, 85};\n        b[149] = new byte[]{-99, 101, -101, 6, 28, -50, 110, -84, 4, 22, 31, -45, -120, -92, 68, 114, -54, -117, 97, -76, 99, 33, -58, 95, -108, -102, 104, -105, 94, -116, -117, -122, 3, 47, -95, 25, -82, 45, -74, -87, 25, -45, -126, -80, 109, 33, -113, -121, -119, -28, -40, 90, -30, -38, 9, 41, 63, 7, -43, -100, 98, -24, -24, 75, -94, 91, -27, -36, -96, -36, 84, 58, 92, 95, 91, 97, -93, 80, 27, 29, -80, -16, 49, -32, -57, 73, 54, -98, -95, -1, -47, 77, 108, 1, 77, 36, 126, -35, -10, 104, 61, -88, -82, -96, -116, 34, -102, -37, 59, 85, -119, 34, -35, -102, -71, 25, -17, 112, -28, -59, -96, -26, -79, -9, 110, -89, 2, 76, 111, 71, 121, -21, 21, 80, -34, -68, 88, -61, 110, -24, 41, 88, 121, 6, -62, 39, 58, 27, -70};\n        b[150] = new byte[]{88, -39, 53, 70, 125, -86, -76, 111, -96, -109, 64, 4, 123, 10, -32, -93, -26, -111, 108, -38, -58, -32, 40, 16, -92, -28, 124, 82, -114, -36, -38, 109, -105, 65, -113, 12, 84, 59, -72, -71, 16, 58, -81, 54, 6, 25, -40, 42, 77, -62, 2, 42, 76, -67, 50, -15, -34, 37, -29, 86, 84, 5, -50, -58, 96, 56, 17, -43, -48, -37, 18, 45, 20, -105, 80, -73, 16, 109, -25, -89, 26, 119, -47, 65, 93, 123, 51, -37, 92, -107, -80, -6, -7, 119, -114, 119, 105, -72, -69, 79, 117, -33, 29, 84, -45, -95, -23, 34, 58, 92, 64, 38, -49, -101, -91, -85, 125, 112, 84, 91, 33, -47, -32, -124, -17, 112, 115, -5, -100, -96, 10, -45, -25, 123, -23, 98, -55, -14, 121, 89, -26, 100, 109, -113, 95, -113, 37, 94, -109, 82};\n        b[151] = new byte[]{-63, 89, -94, 59, -87, -99, 127, 102, -102, -122, -78, 101, 114, 105, -63, 15, 68, 26, -25, -52, -68, 2, -4, -41, -76, -98, 120, 34, 108, 96, 60, -77, -25, -48, -48, -112, 34, -71, -108, -57, 51, 89, 53, 51, -125, 19, 117, -114, -22, 70, 76, 16, 38, -109, -3, 17, 42, 79, 115, -24, 56, 26, 125, -78, -48, -121, 8, 83, 87, 56, -50, -3, -17, -46, 120, -32, 45, 89, 69, 77, 50, 60, 40, 90, -45, 73, 16, 100, 17, 121, 18, 103, 11, -118, -43, 66, -49, 93, 45, 63, -56, 6, -43, -8, -120, -68, -56, -16, -91, -35, -103, 76, -26, -104, -29, -8, 56, 53, -30, 71, 46, 50, 79, -106, 93, 28, -26, 118, -57, -18, 126, 47, -5, 82, 62, -60, 110, -1, -18, 78, -58, -24, -33, 44, -89, 109, 105, 110, 10, 83, 96};\n        b[152] = new byte[]{58, -120, -107, 102, -117, 8, -8, -95, -76, 17, -108, -18, -7, 106, 71, -18, 66, -120, 75, 25, -114, -41, 52, 88, 105, 35, -52, 4, -59, -76, 3, 36, 98, 11, 104, -103, 84, 73, 14, 50, 34, -89, -41, 101, -49, -88, -128, -46, 91, -7, 21, 3, -97, 28, -66, -1, -14, -79, 48, 51, 40, -76, -18, -17, -59, 40, -6, -59, 92, 37, -19, -64, -76, -73, 96, 120, 15, 111, 57, 17, 68, 45, 51, -8, -65, -48, -48, -2, 96, 38, 122, 23, -73, 55, -52, 100, -7, 84, -53, 99, -84, 71, 90, 46, -97, -30, 63, 92, 76, 53, -65, 4, 60, -119, 72, 52, 88, -45, 74, 24, -96, 121, 111, -98, 56, 7, -93, -128, -121, 6, -115, 44, 48, 104, 23, -36, 44, 28, -100, -83, -95, -92, -63, 85, -76, 31, -9, -88, -7, 122, -65, 108};\n        b[153] = new byte[]{-9, -74, 85, -79, 54, 48, 15, -59, 107, -128, -35, 69, 56, -124, 89, -14, 57, -68, 56, -56, 43, -60, 109, -24, -43, -94, 104, 98, -45, -43, 89, 122, 125, 114, 56, -27, -127, 122, -109, 49, -107, 108, -95, 106, -9, -90, -66, -23, -71, -36, 62, 45, -118, 53, 18, 60, -9, 38, -104, -108, 60, 122, -106, 113, -99, -113, 90, -75, -84, -20, -12, 117, 106, 70, 6, -69, 7, 66, 4, 118, 47, 8, 100, -36, 101, -127, 94, -1, 43, -75, 0, 31, 48, -25, 54, 44, -105, 87, -119, 71, -114, 96, -46, -19, 67, -107, 119, -15, -28, 21, 0, 83, 55, 56, -56, -112, -29, 115, -113, 11, -77, -83, -101, -97, -53, 116, 16, -98, -2, -33, 75, 22, -62, 39, -22, 42, -20, -10, 16, 122, 108, -86, -99, 99, -2, 35, 37, -61, 50, -119, 26, 49, -124};\n        b[154] = new byte[]{-48, -44, -104, 41, 59, -63, 40, -94, 39, -64, -65, 79, 39, -6, 86, 81, 101, 87, -30, 8, -59, -34, 40, 44, 3, 106, -86, 64, -53, 17, 123, 13, 37, 35, 82, -36, 8, 29, 124, 120, 96, -104, -109, 64, 39, -55, 64, -98, -9, -36, 57, -107, 97, -58, 21, 67, 12, 120, 126, -125, 101, -56, -128, -54, 85, -122, 120, 57, -11, -12, -105, 115, 84, -28, -34, -68, 21, -92, -36, -78, 46, -116, -115, 70, -66, -63, 1, -34, -123, 106, 127, 102, 101, -12, -122, 94, 12, 96, -109, -29, -26, -48, 40, 21, -81, -127, -59, -57, -113, 43, 25, 126, 121, -1, -25, 63, 87, -49, 78, -86, -84, -6, -102, 115, -110, -33, 75, 126, -97, 13, -52, 39, -110, -75, 24, 65, 96, -20, 47, 98, 36, 123, 125, -128, 46, 99, -89, -111, -64, -29, 54, -83, 65, -96};\n        b[155] = new byte[]{-26, -119, 62, -83, -126, 56, 44, 40, 6, 107, 106, 108, 25, 67, 127, 125, -39, 19, -38, 4, 4, 78, -128, 125, 29, 24, -123, 93, 10, 94, -39, -121, 16, -68, 67, 118, -49, -74, 37, 36, 33, 19, -57, -120, -46, 91, 13, 58, -89, -106, 60, -75, -105, 41, -45, -55, -88, 40, -42, 48, 80, -98, 52, 14, -13, -23, 26, 80, -58, -5, 5, 41, 22, 16, -72, -110, 71, -24, -22, -8, -6, 78, -80, -93, -25, 42, 22, 38, 46, 67, -6, -89, 96, 31, 100, -12, 37, -27, -116, -13, 71, 24, 55, 70, -20, 58, -57, -83, 117, -86, -115, -124, 51, -115, -107, -123, -39, -38, 85, 88, -109, 37, 82, -1, 12, -16, -16, -82, 113, 95, -50, -60, 90, 75, 112, 59, 1, 106, -1, 38, 33, -71, 96, -104, 39, -47, -103, 47, -76, 46, 14, 42, 73, -116, 65};\n        b[156] = new byte[]{40, 124, -45, 106, 85, 61, -64, -12, -89, 34, 56, 121, -125, 71, -121, -117, 81, -44, 104, 91, -97, -60, -102, 87, -90, 48, -34, -48, -35, -16, 16, -94, 13, -87, -72, 51, -123, -72, -9, 41, -2, 42, 90, 54, -10, 119, 80, 62, -48, -55, 110, -10, -42, 5, -2, 64, 61, 56, -40, -35, 107, -104, -40, 125, 24, 2, 30, 110, 102, 82, -72, -44, -47, 48, 50, 79, -79, 16, 21, -99, -82, -23, 97, 74, -2, -63, 71, 63, -17, -78, 112, -108, 36, -14, 78, -54, 44, -11, 22, 3, -109, -106, 73, -52, -75, 16, -17, -99, 96, 94, 29, -46, -66, -118, -28, -17, -69, 31, -6, -23, -110, 124, 77, -24, -49, 69, -108, -1, 44, 31, -51, -61, 92, -83, 82, 119, -27, 23, 47, 125, -125, -5, -121, -27, 23, -97, 52, 21, -90, 121, 7, 116, -28, -57, 119, 71};\n        b[157] = new byte[]{70, -78, 85, -60, -126, -88, 13, 123, 66, -66, 37, -116, -65, -12, -105, 48, -18, 54, 14, 126, -108, 88, -30, -125, -53, 104, 97, -40, 4, -105, -78, -60, -12, 123, -31, -70, -101, -79, 117, -37, 125, 34, 37, 105, 68, 55, 76, 1, 71, -54, 126, 6, 84, -35, 6, 20, 43, -97, 110, 116, -9, -61, -9, 43, 94, -85, 6, 102, 105, -49, 15, -7, 118, 103, -84, 32, -100, 97, 96, -10, -116, -32, 104, -102, 58, 12, -19, 22, 59, -110, 113, 56, 36, -103, 93, 9, -105, -5, -39, -11, -32, -105, 116, 69, 77, 33, 39, -105, -112, -120, -79, 51, -118, 108, -79, 49, 110, 81, 94, -49, 99, -11, 41, -51, -40, -7, -26, -80, -54, 24, -70, -11, 121, 62, -64, 21, 84, -115, 63, 125, 15, -124, -65, 51, 102, -49, 12, 0, -38, -118, 5, -30, -127, 4, 59, -19, -61};\n        b[158] = new byte[]{-77, 46, 45, -26, -79, 64, -17, -111, -111, 4, 79, -125, -87, -81, 108, 67, 24, -49, -106, -30, -83, -4, -103, -60, 99, -98, 32, -72, 121, -54, -87, -57, 38, -57, 113, -58, -117, 34, 116, -115, 64, 62, 122, -34, 23, 59, -59, -32, -21, -36, 2, 3, -36, 85, -60, -106, 80, 47, -67, -13, -13, 73, -107, 124, -121, -8, -36, 114, 10, 59, 24, 49, 79, 98, 35, 27, -79, 10, 48, -32, -1, -85, 30, -115, -100, -60, -17, 123, -128, 107, -54, 8, 11, -75, -78, -48, 81, -28, 95, -122, -72, -112, 121, -114, -31, -21, -101, 67, -10, 39, -85, -123, -57, 23, -95, 112, -23, 26, 121, -127, -97, -39, -74, 5, 3, -5, -13, 47, -112, -123, -50, 30, 34, -58, -73, 45, -52, 91, 64, -107, 8, -62, -11, 17, -116, 90, 127, -82, 3, 3, -18, 88, 78, 45, -70, 26, -1, 102};\n        b[159] = new byte[]{102, -49, -63, 124, 90, 22, 34, 102, 26, -69, 103, 89, 45, -66, -55, -99, -25, -109, 66, -98, -20, 67, 78, -78, -94, 113, 42, -47, -122, -72, 4, -45, -119, 27, 47, -7, 116, 97, -8, -38, -116, -19, -48, -6, 79, -40, -122, 127, 75, -97, 23, -19, -21, 21, -127, -50, -93, 3, 92, -73, 5, -52, 99, -36, -61, -24, 14, 52, 9, 73, -111, -59, 18, -44, 119, 27, 125, 83, -15, -31, 121, 58, -109, -43, 11, -121, 112, -10, -49, 92, -106, 89, 76, -45, -101, 111, 113, -23, -84, -80, -73, 92, 119, -50, 84, 63, -4, 65, 104, 58, -26, -92, 9, 124, 100, 52, -100, -17, 124, -33, -108, -83, -25, 39, 15, 30, -48, 116, 5, 98, 123, 77, -98, 86, 79, 23, 44, -78, 4, -79, -25, 47, 39, 27, -24, -103, 111, -85, -79, 118, 58, -86, -39, 71, -31, 87, 102, 114, -9};\n        b[160] = new byte[]{-123, -41, -125, 38, -28, 103, -103, -65, 42, -12, 70, 30, 115, -49, -97, -70, -44, -1, 10, -6, -95, -90, -86, 20, 118, -39, -122, -24, 77, -11, 70, -74, 9, 14, -49, 122, 51, -107, -97, -98, 15, 116, 32, 74, -85, -99, -58, 94, -30, -75, 88, 14, -121, 17, 100, -83, -73, 118, -6, -83, 37, -93, -31, 77, 64, 87, 94, 30, 54, 35, 35, 37, 82, 122, -24, -21, -46, -120, -5, 78, -7, 22, -10, 24, -62, 5, 90, 81, -35, 116, -81, -79, 49, 88, -50, 89, -20, 48, -112, -37, 31, 19, -101, 89, -98, 43, 102, 2, 76, -7, 5, -43, 85, -41, 123, 25, 117, 82, 54, 2, -99, 20, 46, 67, 26, 105, 118, -118, 97, 51, 10, -24, 36, -81, 21, -86, 82, 91, 20, 91, 37, 114, 20, -46, 4, 91, -120, -17, 8, 28, 119, 47, -97, -4, -79, -52, 108, -53, 46, -79};\n        b[161] = new byte[]{10, 80, -126, 58, -3, 38, 15, -33, -1, 45, 29, 14, -118, -63, -33, 106, 108, 92, 78, -7, -91, -64, -62, -32, 0, -124, 45, -34, 22, -50, -115, 19, -28, 95, 1, 32, 104, 60, -49, -46, -18, -117, 55, -64, 77, -63, -45, -107, -61, -30, -31, -83, -68, -52, 35, -52, -48, -52, 123, -24, -18, 97, -113, -111, 2, 2, 121, -24, -90, -1, 31, -79, -104, 99, -48, -74, 101, -89, 95, 16, -106, -120, -67, 110, 127, -1, 30, 71, -107, -82, -53, -47, 43, -14, -55, 19, 7, -54, -58, -29, -5, -101, 111, 107, 44, -68, 41, 46, 108, -26, -49, 2, 67, 18, 58, 1, 103, 95, -43, 45, -58, 112, -115, -29, -23, -52, 53, 93, -81, -66, 126, 49, 49, 52, -81, -67, 12, -104, 89, -20, 31, -98, 83, 100, 126, 84, -14, -67, -83, 94, -92, 79, 81, 85, 109, -111, -87, 27, 73, -118, 70};\n        b[162] = new byte[]{22, -49, -128, -104, 80, -89, 82, -65, -30, -101, 15, 3, -48, 106, 77, -119, -46, 15, -10, -84, 22, -13, 36, 64, -50, 107, 106, 61, 47, -81, 79, -87, -7, 83, -122, 5, 65, -54, 96, 111, 57, -21, 96, -18, 19, 62, -87, 21, 23, 106, 51, -42, 106, 96, 45, -126, 32, -57, -5, -74, 94, -54, -19, -106, 49, -105, -29, -94, -33, 99, -61, -78, 80, -10, -80, -29, -9, 90, -33, -60, 6, -98, 10, 8, -107, 45, -100, 55, 77, 92, -128, -35, -34, 125, 40, -52, -106, 118, 69, -93, 92, 124, 79, -38, 116, 54, 125, 72, -127, 24, 30, -68, -25, 121, 123, 53, 84, 47, -75, -99, 99, -73, -98, -120, 77, 105, 93, 119, 6, 6, 0, -40, -97, -77, 67, 66, -104, 116, 116, 46, -121, 14, 80, 98, 75, -34, 91, 12, 87, 25, -5, -95, 88, -118, 1, 56, 91, 38, -23, -80, -31, -53};\n        b[163] = new byte[]{-62, 3, -72, 13, -47, -103, -53, -40, 53, -36, -117, -114, -122, 66, 70, 37, -60, -24, -56, -69, -126, 5, 89, -67, 79, -9, 60, -87, -114, 13, 58, 23, -107, 83, 83, 86, -38, 15, 44, 60, -118, 62, 70, 33, 44, 73, 36, -4, -77, 30, -66, 38, 31, -64, -2, 70, -126, -59, -117, -55, -12, 43, 32, -100, 24, -39, 48, -59, -111, -79, -35, -4, -36, 118, 64, -96, -101, 100, -57, 2, -81, -54, -121, -105, -49, 48, -2, -90, -31, 111, -88, -92, 1, 16, -86, -27, 4, 76, 31, 125, 120, 75, 14, -127, 80, 1, 109, -78, 113, -117, 65, 27, 59, 101, -48, 107, 20, -74, -125, -88, 111, 105, -17, -18, 39, -89, -57, 92, 67, -24, -93, 89, 53, -84, 88, -57, 99, -101, 68, 6, 18, -3, -17, 11, 75, 122, 96, -27, -39, 46, -12, -61, -63, -89, 85, -11, -38, 111, 25, 33, 116, 64, 107};\n        b[164] = new byte[]{18, 69, -19, -45, 100, -102, 69, 66, 35, 22, 106, 11, -57, 35, -70, 55, -24, 34, 47, -120, -128, -31, -10, 52, 19, 22, -88, -6, 104, -32, 17, -10, 126, 90, -2, -80, -9, -111, -105, 28, 18, 53, -58, 86, 12, 84, -71, 14, 114, 123, -67, -99, -21, 28, -67, -59, -48, 31, 67, -85, -88, -65, 110, 126, -118, -60, 81, 49, -109, 74, 13, -100, -117, -82, -26, -32, 106, -16, 2, -68, -116, -53, -18, 94, 82, -114, -5, 67, -111, -87, 88, -89, -20, -125, -55, -61, 108, 63, 26, -34, 5, 8, -1, -47, 4, -46, -64, -115, -89, -69, 76, 104, -84, 40, 39, -98, -100, -58, 22, -58, -35, 50, 88, -90, -91, -109, -90, -83, -1, 75, 122, -69, -21, 31, -73, 17, 50, -2, -49, 24, 122, 16, -56, 124, 48, -109, -33, 89, -62, 49, -108, 52, -69, 122, -14, -86, 116, -8, 18, -45, 66, -96, 82, -39};\n        b[165] = new byte[]{58, -32, 106, -57, -110, -59, 38, -70, 17, 108, 57, -8, -41, -18, 26, -52, 81, -27, 42, 12, 58, 108, -56, 27, -79, 17, -102, 43, -43, 39, 62, -8, -71, -59, -7, -107, -31, 34, -48, -39, -116, -56, -122, -118, 70, -117, 81, 121, -20, -66, -81, 42, -23, 26, 91, 69, -27, 22, 79, -59, 127, -108, -35, -28, -125, 2, -19, 79, -92, -67, 114, -91, 127, -57, -58, 32, -124, 60, 21, -95, -56, -46, -10, -56, 95, -49, 78, 38, 80, 106, -108, -128, -86, 126, -44, -115, -119, 84, 113, -75, -95, 62, 104, 40, 116, -84, 26, 3, 126, 3, -16, -72, 47, 42, 4, 45, -76, 35, 83, -73, 100, -69, -118, 125, -27, 21, 26, 67, 14, 44, 69, -98, 100, -76, -70, -102, 103, 39, -35, -60, -124, 70, 63, 104, -3, -47, 37, -15, 6, 48, 66, -8, 71, -7, 81, -70, 97, 97, 127, -1, 41, 34, -43, 91, -68};\n        b[166] = new byte[]{72, -17, -17, 14, -54, -103, 13, -46, 38, 57, -47, -11, -10, -58, 72, -20, 85, 21, -122, 92, 117, 16, -115, 23, 70, -65, 0, -83, 59, -128, 27, -111, 124, 44, 50, -69, -24, 23, 45, -40, 46, -33, 93, 53, 40, -62, 41, 87, -100, -107, -95, 67, 27, -37, 26, 43, -91, -111, 65, -110, -71, 88, -43, 63, 93, -77, 105, -49, 91, 74, 20, 105, -81, 82, -9, -71, -57, 94, -18, 125, 95, -9, 47, -51, 112, 114, 66, -63, -38, -109, 46, -82, -47, 99, 40, 8, -75, 14, 41, -91, 1, -94, 63, -40, -41, 127, 96, -25, -2, -87, -107, 101, -108, -31, -7, 38, 55, 1, -112, -120, 75, -29, -107, -93, 98, -64, -119, -126, 71, 90, 124, -13, -95, 127, 25, -73, -25, 78, 98, 35, -128, -3, -108, 10, 102, 39, -107, 38, 87, 60, -110, -49, -74, -58, -90, 15, 15, -98, 94, 31, 70, -19, 102, 126, 97, -52};\n        b[167] = new byte[]{-75, -110, -1, -88, 0, -116, 59, -44, -77, -102, 2, 97, 89, 3, 44, 108, -88, 4, -26, 83, -64, 17, -68, 103, -36, -44, 123, -25, 78, 34, -106, 0, 43, 71, -56, -5, -70, -3, 74, 23, -114, -82, 67, 40, -21, -112, 73, -14, 6, -118, -26, 96, 31, -6, -100, -79, -91, 30, 27, 122, -40, -124, 31, -76, -58, 31, -26, 1, -23, 28, 87, -45, -66, -23, 17, 40, 95, 59, -37, -52, -120, 96, 0, 24, 28, -12, 63, 90, 49, -13, 29, -43, 82, -87, 66, 106, 23, 102, -68, 68, 78, -110, -66, -10, 62, 41, 34, -106, 44, -59, 55, -122, 57, -11, 127, -89, 106, 95, -97, 125, -123, -128, -5, 2, 118, -49, 25, 58, 69, 40, 53, 57, -80, -79, 78, 93, -69, -78, -99, 77, 108, 61, 72, 79, -7, -82, 7, 122, -1, 114, 53, 78, -102, -76, -80, -24, -32, 41, 23, -3, -118, -73, 21, -70, 86, 86, -28};\n        b[168] = new byte[]{25, 23, -69, -72, 93, 112, 31, -97, -5, -44, 29, -17, -104, 97, 126, -92, -35, -57, -12, -14, -114, -42, -46, -16, -78, 118, -12, 15, -113, -49, -101, -77, -18, -28, -96, 30, -32, -25, -34, -106, 71, -59, 32, 24, 50, -114, -22, 25, -82, -105, -124, -112, 102, 103, 111, -22, -97, -8, -87, -5, 42, -35, 97, 15, 6, 43, -4, -58, -3, 123, 11, -80, 57, 123, 27, 34, -110, -48, 50, 7, -31, -48, -114, 87, -80, -6, -42, -95, -57, 110, 87, 57, -2, -69, -9, 38, -35, -54, -12, 103, 93, 115, -77, 29, 0, 102, 52, -22, -66, -55, 64, 10, 64, -22, -118, -85, -104, -29, 82, 97, -76, 103, 92, -37, 100, 66, -68, -122, 40, -101, 105, 126, -49, 51, 8, 51, 32, -113, -80, 119, -126, 72, 29, 76, 6, -17, 4, 88, -83, -30, 63, -76, -125, -35, -43, -83, -73, 12, -52, -125, 76, 90, -98, -125, -61, -126, 77, 20};\n        b[169] = new byte[]{-16, 16, -59, -69, -19, -67, -106, -101, 101, 25, 40, -36, 101, -18, -32, -123, 102, -108, -128, -116, -37, -71, 74, 76, -27, 112, -59, 110, -46, 85, 64, -15, 29, -35, -80, 4, -47, -63, -111, -107, 1, 61, 18, 18, -105, -117, -110, 127, 34, -55, 24, 54, -76, 55, -25, -69, 65, -124, 15, -108, 52, 51, 87, 10, 38, -45, -40, 6, 70, -89, 53, -128, 115, 1, 58, 116, -1, -75, -32, 91, -111, 47, -111, -79, -86, 31, -19, 122, -29, -40, 42, -66, 72, 34, 126, -52, -35, 38, -32, 59, 39, 33, 103, 50, -56, -20, 113, -126, -67, 88, 65, 82, 34, 65, -69, -54, 43, 35, 117, -90, 0, -123, 92, 82, 16, 44, 48, 97, -20, 22, -9, -100, -109, -10, 66, 93, 0, 62, 82, -81, -42, 86, 117, -75, 84, -37, 58, -123, 41, -120, -122, -64, 5, 115, -99, 106, -78, 107, 16, 43, 78, -13, -39, 106, 109, -57, -118, -47, -113};\n        b[170] = new byte[]{-78, 35, -46, 92, 62, 46, -33, -91, -104, -75, 59, -17, 15, 52, 101, 20, -8, -82, 100, -55, -47, 115, 58, -53, -35, -32, 53, -25, -34, 121, 36, 48, -100, -21, -11, 118, 10, -5, -70, -101, -15, -49, 59, -94, 113, -94, 12, 78, -47, -90, 19, 103, -101, 94, -115, -128, -50, 33, -104, 1, -53, -115, 3, -127, 70, 76, -88, -14, 118, 34, -106, 35, -78, 101, 27, -114, 50, 84, -14, -17, -50, -89, 8, 76, -94, 126, 118, -26, 109, -17, -48, 70, 37, -65, 40, -10, 66, -99, -23, -64, 82, -125, -110, -7, -36, 43, 118, -115, -116, -35, -54, 105, -91, -6, 30, -30, 50, -22, 76, -86, -80, 57, 116, 5, 49, 39, 7, -104, -119, -56, 114, -47, 4, 41, 30, -50, 116, -54, -45, 95, 110, -29, -58, 31, -78, -68, -10, -96, 107, -103, 113, 108, -51, -113, -97, -17, 40, -57, 113, 64, -8, -78, 39, -47, 7, -54, -116, 124, 2, -71};\n        b[171] = new byte[]{-5, -3, 120, 62, 113, 80, 85, -98, -63, 76, 114, -108, -66, 68, -19, 70, -74, 18, -19, 105, -49, 52, 62, 96, 103, -106, -14, 50, 21, 43, 12, -71, 9, 107, -91, 15, 5, 94, -13, -46, 122, -61, 50, 39, -60, -93, -9, 80, 125, 74, -73, 18, 48, -94, 27, -84, 70, 86, 26, -44, -68, 12, -32, -58, -93, -112, 101, 53, -75, 99, -38, 125, 51, 66, -106, 91, -31, 52, 94, -16, -112, -90, -111, -59, -90, -29, 42, 23, 91, -40, -80, 93, 14, 15, -96, 12, -120, 79, 73, -76, 105, -42, -77, 114, 92, 105, 99, -1, 92, 17, 127, 10, -8, 80, -108, 81, -101, 30, 45, -33, 110, -80, -1, -123, -92, -60, 6, 121, -87, 37, 96, 96, 49, -46, -85, -119, -73, 91, 92, 123, 65, 72, 86, 118, 51, 48, -105, -39, -32, -19, -58, -128, -35, 69, -47, 21, 26, -50, 47, -2, -81, 32, 84, 20, -66, 90, -55, -39, -35, 52, -59};\n        b[172] = new byte[]{-33, 82, 53, -115, -81, -127, -7, -86, 41, 42, 76, -19, 27, 50, 88, -68, -111, 22, 2, -56, 114, -96, 0, 21, -25, 43, -34, -32, -71, -49, -46, 71, 72, -103, 68, 26, 84, 68, -46, -70, -114, 66, 12, -122, 43, -17, 51, 60, 48, 32, -11, 121, -125, -23, 46, 39, 38, 26, 112, 62, 11, -35, -69, -93, -44, 6, 1, 82, -9, 114, -45, -65, 12, 37, -95, 54, 41, -42, -20, -39, -98, 96, -125, 62, -93, -121, 98, 40, 25, 3, 62, 49, -26, 73, 102, -66, -98, -82, 39, -81, -24, 14, 106, -98, 2, -73, 2, -10, -63, 109, -127, -27, -118, -83, -37, -86, 74, -128, -33, 110, 1, 78, 66, -103, 50, -10, -22, 22, 5, -128, -63, 14, 101, -6, -28, 67, -75, -35, 96, 108, -74, 8, -33, 17, 36, -71, -93, 121, 33, 85, 84, -48, 70, -4, 84, -38, 43, -69, 105, -69, 45, 11, 65, 41, 36, -93, -84, 28, -52, 22, 6, 122};\n        b[173] = new byte[]{93, -76, 95, 14, -95, -98, -35, -25, -120, -42, -47, -15, -15, 73, -49, -99, -32, -63, -25, -77, 124, 85, -28, -110, -51, 124, -43, 8, -44, -96, -60, -31, 31, 119, -89, 127, -70, 126, 66, 15, 17, -58, -6, 110, 48, -34, -46, 27, -75, 41, 50, -31, 29, -66, -52, -63, 126, 75, -105, 17, -67, 51, -80, 103, -5, -34, 122, 6, 45, 44, -92, -15, 3, 73, -107, 121, -43, -117, 22, 71, -31, -2, -2, 13, -128, -14, 126, 52, 69, 62, 115, 41, 91, 73, 38, 75, 1, -32, 104, 124, 59, -24, 39, 9, -40, 42, -24, -51, -40, -95, 90, -16, -15, -128, -58, -67, -40, -14, -68, -73, -87, -39, 18, -16, -26, -11, 102, 33, -40, 2, 98, -17, 41, 47, 108, 25, -65, -17, -115, 59, -47, -53, -26, -72, 67, -71, 14, 122, -101, 38, -20, -10, 34, -78, 41, -54, 122, 80, 64, -68, 57, -29, -106, 46, -65, -108, -21, -83, 26, -73, -89, -115, 126};\n        b[174] = new byte[]{-116, 97, 35, -4, 6, -127, 121, -10, -100, -10, -29, -100, -104, 107, -114, -10, 113, -2, 55, -20, -52, -80, 46, 42, 1, -18, -103, 80, 67, 12, 33, 119, 83, 26, 116, -106, -105, -75, -19, -45, -7, -54, -85, 35, -93, -35, -111, -10, -29, -47, -16, -112, -97, 27, -97, -112, -66, -47, -68, -50, -91, 13, 94, 3, 115, -15, 18, -82, -111, 124, -93, 43, -116, 114, 79, 38, 100, -39, 94, -76, -124, 73, 56, -33, -113, 122, 13, 45, 79, -62, -86, -96, -50, -87, -33, 51, -99, 56, 13, -22, 123, -25, 81, -48, -98, 74, -46, -52, -121, -42, -26, 88, 93, 126, -48, 109, 117, -100, 60, 32, -24, 100, 22, 89, 13, 51, -115, 80, -45, -85, -104, -5, -95, -59, -36, 20, -20, -108, 114, -19, 28, -54, 94, 88, 13, -59, 15, -46, 45, -90, 3, 98, 110, -106, 82, 39, 83, 107, -127, -75, -18, -25, 78, -121, -110, 24, 29, -59, 39, 18, -82, 120, 22, -17};\n        b[175] = new byte[]{68, 12, -51, 11, 25, 79, -39, 47, -4, 45, -10, -58, -74, 84, -125, 74, 26, 49, -15, -60, -96, -104, -109, 14, 115, 108, 79, 22, -49, 30, -127, -107, 73, -117, 9, 102, -99, 45, -38, 5, 98, -113, 69, -74, -15, -111, -104, -107, 85, -119, 110, -32, 99, 73, 55, 6, -24, 113, -50, -99, -126, -71, 118, -16, 117, -64, -79, -120, -92, 19, -100, 48, -95, 13, 76, 120, -30, 86, 83, 124, -13, 22, 38, 4, 54, 30, -46, 44, 20, 31, -115, 83, -48, 30, -25, 28, -74, -65, 15, -23, 25, 123, 96, -66, 112, 29, -49, -102, 11, -23, -67, -39, 29, -37, -97, 57, -71, -82, -99, 79, 120, 121, -69, -69, 60, -74, -119, 69, 13, -47, -56, 31, 111, 2, 120, 22, -70, 87, -123, 83, 19, -80, 5, 41, 77, -72, 53, -5, 77, -5, 17, 103, 6, 58, -20, 98, -81, -121, 70, -37, 16, 95, -128, -20, 26, -7, -24, -59, 30, 76, 59, -53, 66, -42, 71};\n        b[176] = new byte[]{-45, -56, 102, 102, -101, 65, 24, -94, -86, 71, -92, 51, -12, 99, 92, -39, 105, 53, 122, -40, 20, -4, -86, 32, 110, 35, -48, -104, 8, 121, 33, 121, 83, 5, -49, 123, 14, -31, 19, -96, -66, 1, 111, -49, 61, -99, -13, -101, 85, 15, -42, 122, 89, -94, 9, 47, 48, 18, 52, -127, 118, 105, -27, -110, 69, 59, -3, -66, 84, 79, 115, -8, -109, 90, 65, -23, -100, 79, 31, -44, 37, 118, 62, 90, 107, 57, 0, -1, 32, -101, -46, 76, -61, 124, -103, 92, 116, 83, -95, -43, -32, 28, -69, -110, -17, -63, 53, -50, -117, 57, -113, -62, -64, -17, 36, 73, -50, -111, -96, -39, -84, -95, 18, 102, -56, 108, 29, 77, -128, -24, -52, 122, 107, 9, 61, -2, -118, -33, -22, 32, 101, 36, 116, 8, 32, 125, -27, -30, -115, -37, -42, 12, 118, 76, -42, -1, -123, 72, 29, 2, 92, 45, 64, 56, 111, 40, -19, -20, -112, 29, 15, 75, -22, -36, 88, 12};\n        b[177] = new byte[]{-48, 104, 107, -127, -76, -110, 28, -14, -42, -73, 36, -74, -102, 116, -79, -84, -48, 35, -3, -36, -85, 21, 7, 49, 34, 3, -29, 79, -65, -69, -15, 38, 117, 101, 49, -100, -45, 123, -20, -102, 86, 120, 103, -10, -50, 59, -50, 4, -9, 34, -101, -107, -94, 57, 117, 33, -43, 94, -68, 121, -20, -67, 36, -118, 66, -4, -74, 2, -126, -80, 9, 20, 52, -19, -27, -1, -116, -17, -28, 87, -62, -83, 20, -32, 27, 30, 44, 21, 49, 65, -44, -45, 92, 45, -52, 26, -126, 75, -59, -51, -41, -69, -21, -128, -29, 98, 104, -8, 97, -104, 88, -79, 116, -103, 9, 82, -94, -46, -21, -71, 51, -57, -23, -128, 96, -39, -11, 67, 18, 21, 29, 52, -15, -58, -31, 104, -118, 5, 45, 100, -128, 54, -88, -115, 37, -124, -81, 77, 6, 97, 25, 103, -53, -76, -125, -58, 44, -33, -96, 32, -29, 28, 104, -88, 113, -43, -66, 111, -125, -93, -104, 75, 62, -110, 112, 3, 63};\n        b[178] = new byte[]{-39, 81, -94, 49, 95, -33, -38, 19, 89, 2, 60, 55, 125, -41, -121, -57, -4, 17, 33, 92, -34, 63, 77, 124, -107, -100, -89, -49, 4, -78, 72, 111, -13, 64, 28, 114, 70, 104, -73, 98, 98, -107, 102, 104, 119, 104, -101, -89, -70, 42, -90, -67, -37, 116, -112, -98, -91, 95, -77, 60, 5, -88, -40, 28, -16, -127, -110, -94, 78, -57, -54, 15, 39, -14, -75, -96, 0, -15, 86, 9, -38, -67, -98, -67, 116, -90, 43, 75, 47, 127, 62, 110, -84, 31, 24, -59, -83, -44, -77, -11, 55, -91, 80, -81, 108, -126, -127, 83, 89, 46, -122, -58, 12, -42, 18, -91, -47, 4, 48, -23, 25, 73, -20, 53, -76, -124, 113, 98, -49, 41, 82, -51, 54, -122, 0, 114, 91, 88, -9, -62, 89, 104, -44, -103, 5, 119, 41, 107, -47, 94, 72, -34, -20, 85, 78, 55, -85, 98, 4, 112, 60, 119, 102, 66, 115, 68, -102, 101, -2, 86, -5, -97, -24, -81, 51, 5, -1, 57};\n        b[179] = new byte[]{-120, -60, -126, -121, 89, -71, -67, -53, 119, 11, -78, -60, -97, -100, 10, 69, -117, 90, -105, 59, -58, -22, -110, -102, -124, 109, 125, -83, 54, -6, 103, -38, -69, -7, -69, -125, -80, -62, -7, -56, -50, -115, -88, 59, -24, 87, 27, 119, 14, -2, -54, 71, 7, 82, -33, 17, -65, 63, 38, -5, 108, -111, -81, 67, 102, -72, 22, 20, 103, 77, -82, 7, -68, -5, -27, -35, -54, 73, 116, -56, 2, 10, -5, 23, 121, 117, -24, 48, -66, 41, 31, 49, 101, -92, -3, 27, 54, -61, 40, -70, -103, -95, 67, 73, 33, 1, 110, 117, 60, 10, -8, 7, 94, -71, -69, 92, -71, 80, -70, 107, -69, 17, 62, 116, 108, 127, 28, -107, 16, -56, -57, -58, -124, -28, -103, -26, 48, -54, 43, 16, -7, 76, -42, 16, -112, 49, 24, -37, -59, -22, -106, 126, -123, -113, -57, 110, -51, 2, -13, 48, -120, 18, -96, 63, 10, 25, -110, -125, -14, 57, -70, -3, -1, 21, -62, -9, -8, -36, -47};\n        b[180] = new byte[]{-124, -34, 62, -57, -5, 10, -12, 84, 89, -97, -103, 101, 107, 14, -1, 92, 49, -80, -122, -35, -63, 112, -116, 64, 20, -2, 9, -96, 106, -107, 64, 44, 60, 115, -110, 14, -107, 42, -118, 16, -27, 98, 98, -53, 53, -102, 123, -28, -93, -87, 21, -83, -51, -94, 48, 64, 60, -121, -60, 108, -80, -98, 29, 36, 26, 69, 13, -97, -37, -111, -24, 66, -54, 20, 38, 90, -101, 41, 102, -48, 47, 68, -34, 125, -102, 62, -89, -57, 68, -127, -126, 86, 6, 113, -61, -14, -82, 125, -34, -46, -21, -17, 24, -98, 103, 98, 104, -45, 3, -72, 42, 7, 70, 62, 20, 81, -128, 99, 8, 0, 59, 126, 57, -118, -100, 83, -84, -63, 108, -100, -97, 26, -9, 93, -58, -50, -102, 27, 37, -41, 7, -117, 14, 97, 126, -90, 10, -38, 42, -88, -15, 36, -13, 86, 88, -38, 24, -57, 57, 89, 44, -49, -21, -37, -59, 13, 49, -46, 75, 127, 88, 73, -10, -60, -13, -35, 19, 60, 24, 38};\n    }\n    private static byte[] utf8(String s) {\n\n        // We would use commons-codec-1.4.jar own utility method for this, but we\n        // need this class to be able to run against commons-codec-1.3.jar, hence the\n        // duplication here.\n        \n        try {\n            return s != null ? s.getBytes(\"UTF-8\") : null;\n        } catch (UnsupportedEncodingException uee) {\n            throw new IllegalStateException(uee.toString());\n        }\n    }\n    public void testEncoder() throws EncoderException {\n        Encoder enc = new Base64();\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                byte[] base64 = utf8(STRINGS[i]);\n                byte[] binary = BYTES[i];\n                boolean b = Arrays.equals(base64, (byte[]) enc.encode(binary));\n                assertTrue(\"Encoder test-\" + i, b);\n            }\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n    public static final int MIME_CHUNK_SIZE = 76;\n    public static final int PEM_CHUNK_SIZE = 64;\n    /**\n     * <p>\n     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once\n     * with the data to decode, and once with inAvail set to \"-1\" to alert decoder that EOF has been reached. The \"-1\"\n     * call is not necessary when decoding, but it doesn't hurt, either.\n     * </p>\n     * <p>\n     * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are\n     * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,\n     * garbage-out philosophy: it will not check the provided data for validity.\n     * </p>\n     * <p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     * \n     * @param in\n     *            byte[] array of ascii data to base64 decode.\n     * @param inPos\n     *            Position to start reading data from.\n     * @param inAvail\n     *            Amount of bytes available from input for encoding.\n     */\n    void decode(byte[] in, int inPos, int inAvail);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n    public static final int MIME_CHUNK_SIZE = 76;\n    public static final int PEM_CHUNK_SIZE = 64;\n    /**\n     * <p>\n     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once\n     * with the data to decode, and once with inAvail set to \"-1\" to alert decoder that EOF has been reached. The \"-1\"\n     * call is not necessary when decoding, but it doesn't hurt, either.\n     * </p>\n     * <p>\n     * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are\n     * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,\n     * garbage-out philosophy: it will not check the provided data for validity.\n     * </p>\n     * <p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     * \n     * @param in\n     *            byte[] array of ascii data to base64 decode.\n     * @param inPos\n     *            Position to start reading data from.\n     * @param inAvail\n     *            Amount of bytes available from input for encoding.\n     */\n    void decode(byte[] in, int inPos, int inAvail);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void testBase64EmptyInputStream(int chuckSize) throws Exception {\n        byte[] emptyEncoded = new byte[0];\n        byte[] emptyDecoded = new byte[0];\n        testByteByByte(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n        testByChunk(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n    }\n    private void testByChunk(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base64InputStream(in, true, chunkSize, seperator);\n        byte[] output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base64InputStream(in);\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, seperator);\n            in = new Base64InputStream(in, false);\n        }\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }\n    private void testByteByByte(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base64InputStream(in, true, chunkSize, seperator);\n        byte[] output = new byte[encoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base64InputStream(in);\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, seperator);\n            in = new Base64InputStream(in, false);\n        }\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }\n     * @throws Exception for some failure scenarios. */ public void testCodec98NPE() throws Exception { byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream\n * is to ENCODE, but this behaviour can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @author Apache Software Foundation \n * @version $Id$\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.4\n */\npublic class Base64InputStream extends FilterInputStream {\n    private final boolean doEncode;\n    private final Base64 base64;\n    private final byte[] singleByte = new byte[1];\n    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    public int read(byte b[], int offset, int len) throws IOException;\n    /**\n     * Reads one <code>byte</code> from this input stream.\n     * \n     * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.\n     * @throws IOException\n     *             if an I/O error occurs.\n     */\n    public int read() throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream\n * is to ENCODE, but this behaviour can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @author Apache Software Foundation \n * @version $Id$\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.4\n */\npublic class Base64InputStream extends FilterInputStream {\n    private final boolean doEncode;\n    private final Base64 base64;\n    private final byte[] singleByte = new byte[1];\n    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    public int read(byte b[], int offset, int len) throws IOException;\n    /**\n     * Reads one <code>byte</code> from this input stream.\n     * \n     * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.\n     * @throws IOException\n     *             if an I/O error occurs.\n     */\n    public int read() throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void testBase64EmptyInputStream(int chuckSize) throws Exception {\n        byte[] emptyEncoded = new byte[0];\n        byte[] emptyDecoded = new byte[0];\n        testByteByByte(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n        testByChunk(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n    }\n    private void testByChunk(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base64InputStream(in, true, chunkSize, seperator);\n        byte[] output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base64InputStream(in);\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, seperator);\n            in = new Base64InputStream(in, false);\n        }\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }\n    private void testByteByByte(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base64InputStream(in, true, chunkSize, seperator);\n        byte[] output = new byte[encoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base64InputStream(in);\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, seperator);\n            in = new Base64InputStream(in, false);\n        }\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }\n     * @throws Exception for some failure scenarios. */ public void testCodec101() throws Exception { byte[] codec101 = StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3);\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n    public static final int MIME_CHUNK_SIZE = 76;\n    public static final int PEM_CHUNK_SIZE = 64;\n    /**\n     * Encodes a byte[] containing binary data, into a String containing characters in the Base64 alphabet.\n     *\n     * @param pArray\n     *            a byte array containing binary data\n     * @return A String containing only Base64 character data\n     * @since 1.4\n     */    \n    public String encodeToString(byte[] pArray);\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked);\n    /**\n     * Encodes binary data using the base64 algorithm but does not chunk the output.\n     * \n     * @param binaryData\n     *            binary data to encode\n     * @return byte[] containing Base64 characters in their UTF-8 representation.\n     */\n    public static byte[] encodeBase64(byte[] binaryData);\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @param maxResultSize\n     *            The maximum result size to accept.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than maxResultSize\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize);\n    /**\n     * Encodes binary data using the base64 algorithm into 76 character blocks separated by CRLF.\n     *\n     * @param binaryData\n     *            binary data to encode\n     * @return String containing Base64 characters.\n     * @since 1.4\n     */    \n    public static String encodeBase64String(byte[] binaryData);\n    /**\n     * Decodes a Base64 String into octets\n     *\n     * @param base64String\n     *            String containing Base64 data\n     * @return Array containing decoded data.\n     * @since 1.4\n     */\n    public static byte[] decodeBase64(String base64String);\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe);\n    /**\n     * Decodes Base64 data into octets\n     * \n     * @param base64Data\n     *            Byte array containing Base64 data\n     * @return Array containing decoded data.\n     */\n    public static byte[] decodeBase64(byte[] base64Data);\n    /**\n     * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The\n     * url-safe variation emits - and _ instead of + and / characters.\n     *\n     * @param binaryData\n     *            binary data to encode\n     * @return String containing Base64 characters\n     * @since 1.4\n     */    \n    public static String encodeBase64URLSafeString(byte[] binaryData);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n    public static final int MIME_CHUNK_SIZE = 76;\n    public static final int PEM_CHUNK_SIZE = 64;\n    /**\n     * Encodes a byte[] containing binary data, into a String containing characters in the Base64 alphabet.\n     *\n     * @param pArray\n     *            a byte array containing binary data\n     * @return A String containing only Base64 character data\n     * @since 1.4\n     */    \n    public String encodeToString(byte[] pArray);\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked);\n    /**\n     * Encodes binary data using the base64 algorithm but does not chunk the output.\n     * \n     * @param binaryData\n     *            binary data to encode\n     * @return byte[] containing Base64 characters in their UTF-8 representation.\n     */\n    public static byte[] encodeBase64(byte[] binaryData);\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @param maxResultSize\n     *            The maximum result size to accept.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than maxResultSize\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize);\n    /**\n     * Encodes binary data using the base64 algorithm into 76 character blocks separated by CRLF.\n     *\n     * @param binaryData\n     *            binary data to encode\n     * @return String containing Base64 characters.\n     * @since 1.4\n     */    \n    public static String encodeBase64String(byte[] binaryData);\n    /**\n     * Decodes a Base64 String into octets\n     *\n     * @param base64String\n     *            String containing Base64 data\n     * @return Array containing decoded data.\n     * @since 1.4\n     */\n    public static byte[] decodeBase64(String base64String);\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe);\n    /**\n     * Decodes Base64 data into octets\n     * \n     * @param base64Data\n     *            Byte array containing Base64 data\n     * @return Array containing decoded data.\n     */\n    public static byte[] decodeBase64(byte[] base64Data);\n    /**\n     * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The\n     * url-safe variation emits - and _ instead of + and / characters.\n     *\n     * @param binaryData\n     *            binary data to encode\n     * @return String containing Base64 characters\n     * @since 1.4\n     */    \n    public static String encodeBase64URLSafeString(byte[] binaryData);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @version $Id$\n */\npublic class Base64Test extends TestCase {\n    private void testEncodeOverMaxSize(int maxSize) throws Exception {\n        try {\n            Base64.encodeBase64(Base64TestData.DECODED, true, false, maxSize);\n            fail(\"Expected \" + IllegalArgumentException.class.getName());\n        } catch (IllegalArgumentException e) {\n            // Expceted\n        }\n    }\n    private void testDecodeEncode(String encodedText) {\n        String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n        String encodedText2 = Base64.encodeBase64String(StringUtils.getBytesUtf8(decodedText));\n        assertEquals(encodedText, encodedText2);\n    }\n    private void testEncodeDecode(String plainText) {\n        String encodedText = Base64.encodeBase64String(StringUtils.getBytesUtf8(plainText));\n        String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n        assertEquals(plainText, decodedText);\n    }\n    private String toString(byte[] data) {\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < data.length; i++) {\n            buf.append(data[i]);\n            if (i != data.length - 1) {\n                buf.append(\",\");\n            }\n        }\n        return buf.toString();\n    }\n    public void testByteToStringVariations() throws DecoderException {\n        Base64 base64 = new Base64(0);\n        byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n        byte[] b2 = new byte[0];\n        byte[] b3 = null;\n        byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\".toCharArray());  // for url-safe tests\n\n        assertEquals(\"byteToString Hello World\", \"SGVsbG8gV29ybGQ=\", base64.encodeToString(b1));\n        assertEquals(\"byteToString static Hello World\", \"SGVsbG8gV29ybGQ=\", Base64.encodeBase64String(b1));\n        assertEquals(\"byteToString \\\"\\\"\", \"\", base64.encodeToString(b2));\n        assertEquals(\"byteToString static \\\"\\\"\", \"\", Base64.encodeBase64String(b2));\n        assertEquals(\"byteToString null\", null, base64.encodeToString(b3));\n        assertEquals(\"byteToString static null\", null, Base64.encodeBase64String(b3));\n        assertEquals(\"byteToString UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\", base64.encodeToString(b4));\n        assertEquals(\"byteToString static UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\", Base64.encodeBase64String(b4));\n        assertEquals(\"byteToString static-url-safe UUID\", \"K_fMJwH-Q5e0nr7tWsxwkA\", Base64.encodeBase64URLSafeString(b4));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream\n * is to ENCODE, but this behaviour can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @author Apache Software Foundation \n * @version $Id$\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.4\n */\npublic class Base64InputStream extends FilterInputStream {\n    private final boolean doEncode;\n    private final Base64 base64;\n    private final byte[] singleByte = new byte[1];\n    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    public int read(byte b[], int offset, int len) throws IOException;\n    /**\n     * Reads one <code>byte</code> from this input stream.\n     * \n     * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.\n     * @throws IOException\n     *             if an I/O error occurs.\n     */\n    public int read() throws IOException;\n}\n/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n    public static final int MIME_CHUNK_SIZE = 76;\n    public static final int PEM_CHUNK_SIZE = 64;\n    /**\n     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail\n     * bytes. Returns how many bytes were actually extracted.\n     * \n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided byte[] array.\n     */\n    int readResults(byte[] b, int bPos, int bAvail);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream\n * is to ENCODE, but this behaviour can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @author Apache Software Foundation \n * @version $Id$\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.4\n */\npublic class Base64InputStream extends FilterInputStream {\n    private final boolean doEncode;\n    private final Base64 base64;\n    private final byte[] singleByte = new byte[1];\n    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    public int read(byte b[], int offset, int len) throws IOException;\n    /**\n     * Reads one <code>byte</code> from this input stream.\n     * \n     * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.\n     * @throws IOException\n     *             if an I/O error occurs.\n     */\n    public int read() throws IOException;\n}\n/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n    public static final int MIME_CHUNK_SIZE = 76;\n    public static final int PEM_CHUNK_SIZE = 64;\n    /**\n     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail\n     * bytes. Returns how many bytes were actually extracted.\n     * \n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided byte[] array.\n     */\n    int readResults(byte[] b, int bPos, int bAvail);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void testBase64EmptyInputStream(int chuckSize) throws Exception {\n        byte[] emptyEncoded = new byte[0];\n        byte[] emptyDecoded = new byte[0];\n        testByteByByte(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n        testByChunk(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n    }\n    private void testByChunk(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base64InputStream(in, true, chunkSize, seperator);\n        byte[] output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base64InputStream(in);\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, seperator);\n            in = new Base64InputStream(in, false);\n        }\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }\n    private void testByteByByte(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {\n\n        // Start with encode.\n        InputStream in = new ByteArrayInputStream(decoded);\n        in = new Base64InputStream(in, true, chunkSize, seperator);\n        byte[] output = new byte[encoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new ByteArrayInputStream(encoded);\n        in = new Base64InputStream(in);\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, seperator);\n            in = new Base64InputStream(in, false);\n        }\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }\n    public void testCodec105() throws IOException {\n        Base64InputStream in = new Base64InputStream(new Codec105ErrorInputStream(), true, 0, null);\n        for (int i = 0; i < 5; i++) {\n            in.read();\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n    public static final int MIME_CHUNK_SIZE = 76;\n    public static final int PEM_CHUNK_SIZE = 64;\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @param maxResultSize\n     *            The maximum result size to accept.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than maxResultSize\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize);\n    /**\n     * Encodes binary data using the base64 algorithm but does not chunk the output.\n     * \n     * @param binaryData\n     *            binary data to encode\n     * @return byte[] containing Base64 characters in their UTF-8 representation.\n     */\n    public static byte[] encodeBase64(byte[] binaryData);\n    /**\n     * Encodes binary data using the base64 algorithm but does not chunk the output.\n     *\n     * NOTE:  We changed the behaviour of this method from multi-line chunking (commons-codec-1.4) to\n     * single-line non-chunking (commons-codec-1.5). \n     * \n     * @param binaryData\n     *            binary data to encode\n     * @return String containing Base64 characters.\n     * @since 1.4 (NOTE:  1.4 chunked the output, whereas 1.5 does not).\n     */    \n    public static String encodeBase64String(byte[] binaryData);\n    /**\n     * Decodes a Base64 String into octets\n     *\n     * @param base64String\n     *            String containing Base64 data\n     * @return Array containing decoded data.\n     * @since 1.4\n     */\n    public static byte[] decodeBase64(String base64String);\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe);\n    /**\n     * Decodes Base64 data into octets\n     * \n     * @param base64Data\n     *            Byte array containing Base64 data\n     * @return Array containing decoded data.\n     */\n    public static byte[] decodeBase64(byte[] base64Data);\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n * \n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\npublic class Base64 implements BinaryEncoder, BinaryDecoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n    public static final int MIME_CHUNK_SIZE = 76;\n    public static final int PEM_CHUNK_SIZE = 64;\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @param maxResultSize\n     *            The maximum result size to accept.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than maxResultSize\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize);\n    /**\n     * Encodes binary data using the base64 algorithm but does not chunk the output.\n     * \n     * @param binaryData\n     *            binary data to encode\n     * @return byte[] containing Base64 characters in their UTF-8 representation.\n     */\n    public static byte[] encodeBase64(byte[] binaryData);\n    /**\n     * Encodes binary data using the base64 algorithm but does not chunk the output.\n     *\n     * NOTE:  We changed the behaviour of this method from multi-line chunking (commons-codec-1.4) to\n     * single-line non-chunking (commons-codec-1.5). \n     * \n     * @param binaryData\n     *            binary data to encode\n     * @return String containing Base64 characters.\n     * @since 1.4 (NOTE:  1.4 chunked the output, whereas 1.5 does not).\n     */    \n    public static String encodeBase64String(byte[] binaryData);\n    /**\n     * Decodes a Base64 String into octets\n     *\n     * @param base64String\n     *            String containing Base64 data\n     * @return Array containing decoded data.\n     * @since 1.4\n     */\n    public static byte[] decodeBase64(String base64String);\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe);\n    /**\n     * Decodes Base64 data into octets\n     * \n     * @param base64Data\n     *            Byte array containing Base64 data\n     * @return Array containing decoded data.\n     */\n    public static byte[] decodeBase64(byte[] base64Data);\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * \n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @version $Id$\n */\npublic class Base64Test extends TestCase {\n    private void testEncodeOverMaxSize(int maxSize) throws Exception {\n        try {\n            Base64.encodeBase64(Base64TestData.DECODED, true, false, maxSize);\n            fail(\"Expected \" + IllegalArgumentException.class.getName());\n        } catch (IllegalArgumentException e) {\n            // Expected\n        }\n    }\n    private void testDecodeEncode(String encodedText) {\n        String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n        String encodedText2 = Base64.encodeBase64String(StringUtils.getBytesUtf8(decodedText));\n        assertEquals(encodedText, encodedText2);\n    }\n    private void testEncodeDecode(String plainText) {\n        String encodedText = Base64.encodeBase64String(StringUtils.getBytesUtf8(plainText));\n        String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n        assertEquals(plainText, decodedText);\n    }\n    private String toString(byte[] data) {\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < data.length; i++) {\n            buf.append(data[i]);\n            if (i != data.length - 1) {\n                buf.append(\",\");\n            }\n        }\n        return buf.toString();\n    }\n    public void testCodec112() { // size calculation assumes always chunked\n        byte[] in = new byte[] {0};\n        byte[] out=Base64.encodeBase64(in);\n        Base64.encodeBase64(in, false, false, out.length);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A static factory class used to construct the \"TypeInfo\" objects.\n *\n * @author Inderjeet Singh\n * @author Joel Leitch\n */\nfinal class TypeInfoFactory {\n  private static Type[] extractRealTypes(\n      Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass);\n  private static Type getActualType(\n      Type typeToEvaluate, Type parentType, Class<?> rawParentClass);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A static factory class used to construct the \"TypeInfo\" objects.\n *\n * @author Inderjeet Singh\n * @author Joel Leitch\n */\nfinal class TypeInfoFactory {\n  private static Type[] extractRealTypes(\n      Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass);\n  private static Type getActualType(\n      Type typeToEvaluate, Type parentType, Class<?> rawParentClass);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testSingle() throws Exception {\n    Gson gson = new Gson();\n    Bar bar1 = new Bar(\"someString\", 1);\n    ArrayList<Integer> arrayList = new ArrayList<Integer>();\n    arrayList.add(1);\n    arrayList.add(2);\n    bar1.map.put(\"key1\", arrayList);\n    bar1.map.put(\"key2\", new ArrayList<Integer>());\n    String json = gson.toJson(bar1);\n    System.out.println(json);\n\n    Bar bar2 = gson.fromJson(json, Bar.class);\n    assertEquals(bar1, bar2);\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Type adapter that reflects over the fields and methods of a class.\n */\npublic final class ReflectiveTypeAdapterFactory implements TypeAdapterFactory {\n  private final ConstructorConstructor constructorConstructor;\n  private final FieldNamingStrategy fieldNamingPolicy;\n  private final Excluder excluder;\n  private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n      final Gson context, final Field field, final String name,\n      final TypeToken<?> fieldType, boolean serialize, boolean deserialize);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Type adapter that reflects over the fields and methods of a class.\n */\npublic final class ReflectiveTypeAdapterFactory implements TypeAdapterFactory {\n  private final ConstructorConstructor constructorConstructor;\n  private final FieldNamingStrategy fieldNamingPolicy;\n  private final Excluder excluder;\n  private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n      final Gson context, final Field field, final String name,\n      final TypeToken<?> fieldType, boolean serialize, boolean deserialize);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\n    Gson gson = new Gson();\n    String json = gson.toJson(new GadgetWithPrimitivePart(42));\n    assertEquals(\"{\\\"part\\\":\\\"42\\\"}\", json);\n    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);\n    assertEquals(42, gadget.part);\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Type adapters for basic types.\n */\npublic final class TypeAdapters {\n  public static <TT> TypeAdapterFactory newFactory(\n      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Type adapters for basic types.\n */\npublic final class TypeAdapters {\n  public static <TT> TypeAdapterFactory newFactory(\n      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  private String extractElementFromArray(String json) {\n    return json.substring(json.indexOf('[') + 1, json.indexOf(']'));\n  }\n  public void testNumberAsStringDeserialization() {\n    Number value = gson.fromJson(\"\\\"18\\\"\", Number.class);\n    assertEquals(18, value.intValue());\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This reader walks the elements of a JsonElement as if it was coming from a\n * character stream.\n *\n * @author Jesse Wilson\n */\npublic final class JsonTreeReader extends JsonReader {\n  @Override public JsonToken peek() throws IOException;\n  @Override public void skipValue() throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This reader walks the elements of a JsonElement as if it was coming from a\n * character stream.\n *\n * @author Jesse Wilson\n */\npublic final class JsonTreeReader extends JsonReader {\n  @Override public JsonToken peek() throws IOException;\n  @Override public void skipValue() throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testSkipValue_filledJsonObject() throws IOException {\n    JsonObject jsonObject = new JsonObject();\n    JsonArray jsonArray = new JsonArray();\n    jsonArray.add('c');\n    jsonArray.add(\"text\");\n    jsonObject.add(\"a\", jsonArray);\n    jsonObject.addProperty(\"b\", true);\n    jsonObject.addProperty(\"i\", 1);\n    jsonObject.add(\"n\", JsonNull.INSTANCE);\n    JsonObject jsonObject2 = new JsonObject();\n    jsonObject2.addProperty(\"n\", 2L);\n    jsonObject.add(\"o\", jsonObject2);\n    jsonObject.addProperty(\"s\", \"text\");\n    JsonTreeReader in = new JsonTreeReader(jsonObject);\n    in.skipValue();\n    assertEquals(JsonToken.END_DOCUMENT, in.peek());\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value as a stream of tokens. This stream includes both literal\n * values (strings, numbers, booleans, and nulls) as well as the begin and\n * end delimiters of objects and arrays. The tokens are traversed in\n * depth-first order, the same order that they appear in the JSON document.\n * Within JSON objects, name/value pairs are represented by a single token.\n *\n * <h3>Parsing JSON</h3>\n * To create a recursive descent parser for your own JSON streams, first create\n * an entry point method that creates a {@code JsonReader}.\n *\n * <p>Next, create handler methods for each structure in your JSON text. You'll\n * need a method for each object type and for each array type.\n * <ul>\n *   <li>Within <strong>array handling</strong> methods, first call {@link\n *       #beginArray} to consume the array's opening bracket. Then create a\n *       while loop that accumulates values, terminating when {@link #hasNext}\n *       is false. Finally, read the array's closing bracket by calling {@link\n *       #endArray}.\n *   <li>Within <strong>object handling</strong> methods, first call {@link\n *       #beginObject} to consume the object's opening brace. Then create a\n *       while loop that assigns values to local variables based on their name.\n *       This loop should terminate when {@link #hasNext} is false. Finally,\n *       read the object's closing brace by calling {@link #endObject}.\n * </ul>\n * <p>When a nested object or array is encountered, delegate to the\n * corresponding handler method.\n *\n * <p>When an unknown name is encountered, strict parsers should fail with an\n * exception. Lenient parsers should call {@link #skipValue()} to recursively\n * skip the value's nested tokens, which may otherwise conflict.\n *\n * <p>If a value may be null, you should first check using {@link #peek()}.\n * Null literals can be consumed using either {@link #nextNull()} or {@link\n * #skipValue()}.\n *\n * <h3>Example</h3>\n * Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I read a JSON stream in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonReader!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code implements the parser for the above structure: <pre>   {@code\n *\n *   public List<Message> readJsonStream(InputStream in) throws IOException {\n *     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n *     try {\n *       return readMessagesArray(reader);\n *     } finally {\n *       reader.close();\n *     }\n *   }\n *\n *   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n *     List<Message> messages = new ArrayList<Message>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       messages.add(readMessage(reader));\n *     }\n *     reader.endArray();\n *     return messages;\n *   }\n *\n *   public Message readMessage(JsonReader reader) throws IOException {\n *     long id = -1;\n *     String text = null;\n *     User user = null;\n *     List<Double> geo = null;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"id\")) {\n *         id = reader.nextLong();\n *       } else if (name.equals(\"text\")) {\n *         text = reader.nextString();\n *       } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) {\n *         geo = readDoublesArray(reader);\n *       } else if (name.equals(\"user\")) {\n *         user = readUser(reader);\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new Message(id, text, user, geo);\n *   }\n *\n *   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n *     List<Double> doubles = new ArrayList<Double>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       doubles.add(reader.nextDouble());\n *     }\n *     reader.endArray();\n *     return doubles;\n *   }\n *\n *   public User readUser(JsonReader reader) throws IOException {\n *     String username = null;\n *     int followersCount = -1;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"name\")) {\n *         username = reader.nextString();\n *       } else if (name.equals(\"followers_count\")) {\n *         followersCount = reader.nextInt();\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new User(username, followersCount);\n *   }}</pre>\n *\n * <h3>Number Handling</h3>\n * This reader permits numeric values to be read as strings and string values to\n * be read as numbers. For example, both elements of the JSON array {@code\n * [1, \"1\"]} may be read using either {@link #nextInt} or {@link #nextString}.\n * This behavior is intended to prevent lossy numeric conversions: double is\n * JavaScript's only numeric type and very large values like {@code\n * 9007199254740993} cannot be represented exactly on that platform. To minimize\n * precision loss, extremely large values should be written and read as strings\n * in JSON.\n *\n * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n * Web servers that serve private data using JSON may be vulnerable to <a\n * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n * request forgery</a> attacks. In such an attack, a malicious site gains access\n * to a private JSON file by executing it with an HTML {@code <script>} tag.\n *\n * <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable\n * by {@code <script>} tags, disarming the attack. Since the prefix is malformed\n * JSON, strict parsing fails when it is encountered. This class permits the\n * non-execute prefix when {@link #setLenient(boolean) lenient parsing} is\n * enabled.\n *\n * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n * of this class are not thread safe.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonReader implements Closeable {\n  private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n  private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;\n  private static final int PEEKED_NONE = 0;\n  private static final int PEEKED_BEGIN_OBJECT = 1;\n  private static final int PEEKED_END_OBJECT = 2;\n  private static final int PEEKED_BEGIN_ARRAY = 3;\n  private static final int PEEKED_END_ARRAY = 4;\n  private static final int PEEKED_TRUE = 5;\n  private static final int PEEKED_FALSE = 6;\n  private static final int PEEKED_NULL = 7;\n  private static final int PEEKED_SINGLE_QUOTED = 8;\n  private static final int PEEKED_DOUBLE_QUOTED = 9;\n  private static final int PEEKED_UNQUOTED = 10;\n  private static final int PEEKED_BUFFERED = 11;\n  private static final int PEEKED_SINGLE_QUOTED_NAME = 12;\n  private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;\n  private static final int PEEKED_UNQUOTED_NAME = 14;\n  private static final int PEEKED_LONG = 15;\n  private static final int PEEKED_NUMBER = 16;\n  private static final int PEEKED_EOF = 17;\n  private static final int NUMBER_CHAR_NONE = 0;\n  private static final int NUMBER_CHAR_SIGN = 1;\n  private static final int NUMBER_CHAR_DIGIT = 2;\n  private static final int NUMBER_CHAR_DECIMAL = 3;\n  private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;\n  private static final int NUMBER_CHAR_EXP_E = 5;\n  private static final int NUMBER_CHAR_EXP_SIGN = 6;\n  private static final int NUMBER_CHAR_EXP_DIGIT = 7;\n  private final Reader in;\n  private boolean lenient = false;\n  private final char[] buffer = new char[1024];\n  private int pos = 0;\n  private int limit = 0;\n  private int lineNumber = 0;\n  private int lineStart = 0;\n  private long peekedLong;\n  private int peekedNumberLength;\n  private String peekedString;\n  private int[] stack = new int[32];\n  private int stackSize = 0;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * end of the current object.\n   */\n  public void endObject() throws IOException;\n  /**\n   * Configure this parser to be liberal in what it accepts. By default,\n   * this parser is strict and only accepts JSON as specified by <a\n   * href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the\n   * parser to lenient causes it to ignore the following syntax errors:\n   *\n   * <ul>\n   *   <li>Streams that start with the <a href=\"#nonexecuteprefix\">non-execute\n   *       prefix</a>, <code>\")]}'\\n\"</code>.\n   *   <li>Streams that include multiple top-level values. With strict parsing,\n   *       each stream must contain exactly one top-level value.\n   *   <li>Top-level values of any type. With strict parsing, the top-level\n   *       value must be an object or an array.\n   *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link\n   *       Double#isInfinite() infinities}.\n   *   <li>End of line comments starting with {@code //} or {@code #} and\n   *       ending with a newline character.\n   *   <li>C-style comments starting with {@code /*} and ending with\n   *       {@code *}{@code /}. Such comments may not be nested.\n   *   <li>Names that are unquoted or {@code 'single quoted'}.\n   *   <li>Strings that are unquoted or {@code 'single quoted'}.\n   *   <li>Array elements separated by {@code ;} instead of {@code ,}.\n   *   <li>Unnecessary array separators. These are interpreted as if null\n   *       was the omitted value.\n   *   <li>Names and values separated by {@code =} or {@code =>} instead of\n   *       {@code :}.\n   *   <li>Name/value pairs separated by {@code ;} instead of {@code ,}.\n   * </ul>\n   */\n  public final void setLenient(boolean lenient);\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * beginning of a new array.\n   */\n  public void beginArray() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * end of the current array.\n   */\n  public void endArray() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,\n   * consuming it. If the next token is a number, this method will return its\n   * string form.\n   *\n   * @throws IllegalStateException if the next token is not a string or if\n   *     this reader is closed.\n   */\n  public String nextString() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,\n   * consuming it.\n   *\n   * @throws IllegalStateException if the next token is not a boolean or if\n   *     this reader is closed.\n   */\n  public boolean nextBoolean() throws IOException;\n  private int peekNumber() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,\n   * consuming it. If the next token is a string, this method will attempt to\n   * parse it as an int. If the next token's numeric value cannot be exactly\n   * represented by a Java {@code int}, this method throws.\n   *\n   * @throws IllegalStateException if the next token is not a literal value.\n   * @throws NumberFormatException if the next literal value cannot be parsed\n   *     as a number, or exactly represented as an int.\n   */\n  public int nextInt() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is a\n   * literal null.\n   *\n   * @throws IllegalStateException if the next token is not null or if this\n   *     reader is closed.\n   */\n  public void nextNull() throws IOException;\n  /**\n   * Skips the next value recursively. If it is an object or array, all nested\n   * elements are skipped. This method is intended for use when the JSON token\n   * stream contains unrecognized or unhandled values.\n   */\n  public void skipValue() throws IOException;\n  /**\n   * Returns the next token, a {@link com.google.gson.stream.JsonToken#NAME property name}, and\n   * consumes it.\n   *\n   * @throws java.io.IOException if the next token in the stream is not a property\n   *     name.\n   */\n  public String nextName() throws IOException;\n  /**\n   * Returns the type of the next token without consuming it.\n   */\n  public JsonToken peek() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * beginning of a new object.\n   */\n  public void beginObject() throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value as a stream of tokens. This stream includes both literal\n * values (strings, numbers, booleans, and nulls) as well as the begin and\n * end delimiters of objects and arrays. The tokens are traversed in\n * depth-first order, the same order that they appear in the JSON document.\n * Within JSON objects, name/value pairs are represented by a single token.\n *\n * <h3>Parsing JSON</h3>\n * To create a recursive descent parser for your own JSON streams, first create\n * an entry point method that creates a {@code JsonReader}.\n *\n * <p>Next, create handler methods for each structure in your JSON text. You'll\n * need a method for each object type and for each array type.\n * <ul>\n *   <li>Within <strong>array handling</strong> methods, first call {@link\n *       #beginArray} to consume the array's opening bracket. Then create a\n *       while loop that accumulates values, terminating when {@link #hasNext}\n *       is false. Finally, read the array's closing bracket by calling {@link\n *       #endArray}.\n *   <li>Within <strong>object handling</strong> methods, first call {@link\n *       #beginObject} to consume the object's opening brace. Then create a\n *       while loop that assigns values to local variables based on their name.\n *       This loop should terminate when {@link #hasNext} is false. Finally,\n *       read the object's closing brace by calling {@link #endObject}.\n * </ul>\n * <p>When a nested object or array is encountered, delegate to the\n * corresponding handler method.\n *\n * <p>When an unknown name is encountered, strict parsers should fail with an\n * exception. Lenient parsers should call {@link #skipValue()} to recursively\n * skip the value's nested tokens, which may otherwise conflict.\n *\n * <p>If a value may be null, you should first check using {@link #peek()}.\n * Null literals can be consumed using either {@link #nextNull()} or {@link\n * #skipValue()}.\n *\n * <h3>Example</h3>\n * Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I read a JSON stream in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonReader!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code implements the parser for the above structure: <pre>   {@code\n *\n *   public List<Message> readJsonStream(InputStream in) throws IOException {\n *     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n *     try {\n *       return readMessagesArray(reader);\n *     } finally {\n *       reader.close();\n *     }\n *   }\n *\n *   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n *     List<Message> messages = new ArrayList<Message>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       messages.add(readMessage(reader));\n *     }\n *     reader.endArray();\n *     return messages;\n *   }\n *\n *   public Message readMessage(JsonReader reader) throws IOException {\n *     long id = -1;\n *     String text = null;\n *     User user = null;\n *     List<Double> geo = null;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"id\")) {\n *         id = reader.nextLong();\n *       } else if (name.equals(\"text\")) {\n *         text = reader.nextString();\n *       } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) {\n *         geo = readDoublesArray(reader);\n *       } else if (name.equals(\"user\")) {\n *         user = readUser(reader);\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new Message(id, text, user, geo);\n *   }\n *\n *   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n *     List<Double> doubles = new ArrayList<Double>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       doubles.add(reader.nextDouble());\n *     }\n *     reader.endArray();\n *     return doubles;\n *   }\n *\n *   public User readUser(JsonReader reader) throws IOException {\n *     String username = null;\n *     int followersCount = -1;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"name\")) {\n *         username = reader.nextString();\n *       } else if (name.equals(\"followers_count\")) {\n *         followersCount = reader.nextInt();\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new User(username, followersCount);\n *   }}</pre>\n *\n * <h3>Number Handling</h3>\n * This reader permits numeric values to be read as strings and string values to\n * be read as numbers. For example, both elements of the JSON array {@code\n * [1, \"1\"]} may be read using either {@link #nextInt} or {@link #nextString}.\n * This behavior is intended to prevent lossy numeric conversions: double is\n * JavaScript's only numeric type and very large values like {@code\n * 9007199254740993} cannot be represented exactly on that platform. To minimize\n * precision loss, extremely large values should be written and read as strings\n * in JSON.\n *\n * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n * Web servers that serve private data using JSON may be vulnerable to <a\n * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n * request forgery</a> attacks. In such an attack, a malicious site gains access\n * to a private JSON file by executing it with an HTML {@code <script>} tag.\n *\n * <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable\n * by {@code <script>} tags, disarming the attack. Since the prefix is malformed\n * JSON, strict parsing fails when it is encountered. This class permits the\n * non-execute prefix when {@link #setLenient(boolean) lenient parsing} is\n * enabled.\n *\n * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n * of this class are not thread safe.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonReader implements Closeable {\n  private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n  private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;\n  private static final int PEEKED_NONE = 0;\n  private static final int PEEKED_BEGIN_OBJECT = 1;\n  private static final int PEEKED_END_OBJECT = 2;\n  private static final int PEEKED_BEGIN_ARRAY = 3;\n  private static final int PEEKED_END_ARRAY = 4;\n  private static final int PEEKED_TRUE = 5;\n  private static final int PEEKED_FALSE = 6;\n  private static final int PEEKED_NULL = 7;\n  private static final int PEEKED_SINGLE_QUOTED = 8;\n  private static final int PEEKED_DOUBLE_QUOTED = 9;\n  private static final int PEEKED_UNQUOTED = 10;\n  private static final int PEEKED_BUFFERED = 11;\n  private static final int PEEKED_SINGLE_QUOTED_NAME = 12;\n  private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;\n  private static final int PEEKED_UNQUOTED_NAME = 14;\n  private static final int PEEKED_LONG = 15;\n  private static final int PEEKED_NUMBER = 16;\n  private static final int PEEKED_EOF = 17;\n  private static final int NUMBER_CHAR_NONE = 0;\n  private static final int NUMBER_CHAR_SIGN = 1;\n  private static final int NUMBER_CHAR_DIGIT = 2;\n  private static final int NUMBER_CHAR_DECIMAL = 3;\n  private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;\n  private static final int NUMBER_CHAR_EXP_E = 5;\n  private static final int NUMBER_CHAR_EXP_SIGN = 6;\n  private static final int NUMBER_CHAR_EXP_DIGIT = 7;\n  private final Reader in;\n  private boolean lenient = false;\n  private final char[] buffer = new char[1024];\n  private int pos = 0;\n  private int limit = 0;\n  private int lineNumber = 0;\n  private int lineStart = 0;\n  private long peekedLong;\n  private int peekedNumberLength;\n  private String peekedString;\n  private int[] stack = new int[32];\n  private int stackSize = 0;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * end of the current object.\n   */\n  public void endObject() throws IOException;\n  /**\n   * Configure this parser to be liberal in what it accepts. By default,\n   * this parser is strict and only accepts JSON as specified by <a\n   * href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the\n   * parser to lenient causes it to ignore the following syntax errors:\n   *\n   * <ul>\n   *   <li>Streams that start with the <a href=\"#nonexecuteprefix\">non-execute\n   *       prefix</a>, <code>\")]}'\\n\"</code>.\n   *   <li>Streams that include multiple top-level values. With strict parsing,\n   *       each stream must contain exactly one top-level value.\n   *   <li>Top-level values of any type. With strict parsing, the top-level\n   *       value must be an object or an array.\n   *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link\n   *       Double#isInfinite() infinities}.\n   *   <li>End of line comments starting with {@code //} or {@code #} and\n   *       ending with a newline character.\n   *   <li>C-style comments starting with {@code /*} and ending with\n   *       {@code *}{@code /}. Such comments may not be nested.\n   *   <li>Names that are unquoted or {@code 'single quoted'}.\n   *   <li>Strings that are unquoted or {@code 'single quoted'}.\n   *   <li>Array elements separated by {@code ;} instead of {@code ,}.\n   *   <li>Unnecessary array separators. These are interpreted as if null\n   *       was the omitted value.\n   *   <li>Names and values separated by {@code =} or {@code =>} instead of\n   *       {@code :}.\n   *   <li>Name/value pairs separated by {@code ;} instead of {@code ,}.\n   * </ul>\n   */\n  public final void setLenient(boolean lenient);\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * beginning of a new array.\n   */\n  public void beginArray() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * end of the current array.\n   */\n  public void endArray() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,\n   * consuming it. If the next token is a number, this method will return its\n   * string form.\n   *\n   * @throws IllegalStateException if the next token is not a string or if\n   *     this reader is closed.\n   */\n  public String nextString() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,\n   * consuming it.\n   *\n   * @throws IllegalStateException if the next token is not a boolean or if\n   *     this reader is closed.\n   */\n  public boolean nextBoolean() throws IOException;\n  private int peekNumber() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,\n   * consuming it. If the next token is a string, this method will attempt to\n   * parse it as an int. If the next token's numeric value cannot be exactly\n   * represented by a Java {@code int}, this method throws.\n   *\n   * @throws IllegalStateException if the next token is not a literal value.\n   * @throws NumberFormatException if the next literal value cannot be parsed\n   *     as a number, or exactly represented as an int.\n   */\n  public int nextInt() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is a\n   * literal null.\n   *\n   * @throws IllegalStateException if the next token is not null or if this\n   *     reader is closed.\n   */\n  public void nextNull() throws IOException;\n  /**\n   * Skips the next value recursively. If it is an object or array, all nested\n   * elements are skipped. This method is intended for use when the JSON token\n   * stream contains unrecognized or unhandled values.\n   */\n  public void skipValue() throws IOException;\n  /**\n   * Returns the next token, a {@link com.google.gson.stream.JsonToken#NAME property name}, and\n   * consumes it.\n   *\n   * @throws java.io.IOException if the next token in the stream is not a property\n   *     name.\n   */\n  public String nextName() throws IOException;\n  /**\n   * Returns the type of the next token without consuming it.\n   */\n  public JsonToken peek() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * beginning of a new object.\n   */\n  public void beginObject() throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  private void assertNotANumber(String s) throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[\" + s + \"]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(JsonToken.STRING, reader.peek());\n    assertEquals(s, reader.nextString());\n    reader.endArray();\n  }\n  private void testFailWithPosition(String message, String json) throws IOException {\n    // Validate that it works reading the string normally.\n    JsonReader reader1 = new JsonReader(reader(json));\n    reader1.setLenient(true);\n    reader1.beginArray();\n    reader1.nextString();\n    try {\n      reader1.peek();\n      fail();\n    } catch (IOException expected) {\n      assertEquals(message, expected.getMessage());\n    }\n\n    // Also validate that it works when skipping.\n    JsonReader reader2 = new JsonReader(reader(json));\n    reader2.setLenient(true);\n    reader2.beginArray();\n    reader2.skipValue();\n    try {\n      reader2.peek();\n      fail();\n    } catch (IOException expected) {\n      assertEquals(message, expected.getMessage());\n    }\n  }\n  private String repeat(char c, int count) {\n    char[] array = new char[count];\n    Arrays.fill(array, c);\n    return new String(array);\n  }\n  private void assertDocument(String document, Object... expectations) throws IOException {\n    JsonReader reader = new JsonReader(reader(document));\n    reader.setLenient(true);\n    for (Object expectation : expectations) {\n      if (expectation == BEGIN_OBJECT) {\n        reader.beginObject();\n      } else if (expectation == BEGIN_ARRAY) {\n        reader.beginArray();\n      } else if (expectation == END_OBJECT) {\n        reader.endObject();\n      } else if (expectation == END_ARRAY) {\n        reader.endArray();\n      } else if (expectation == NAME) {\n        assertEquals(\"name\", reader.nextName());\n      } else if (expectation == BOOLEAN) {\n        assertEquals(false, reader.nextBoolean());\n      } else if (expectation == STRING) {\n        assertEquals(\"string\", reader.nextString());\n      } else if (expectation == NUMBER) {\n        assertEquals(123, reader.nextInt());\n      } else if (expectation == NULL) {\n        reader.nextNull();\n      } else if (expectation == IOException.class) {\n        try {\n          reader.peek();\n          fail();\n        } catch (IOException expected) {\n        }\n      } else {\n        throw new AssertionError();\n      }\n    }\n  }\n  private Reader reader(final String s) {\n    /* if (true) */ return new StringReader(s);\n    /* return new Reader() {\n      int position = 0;\n      @Override public int read(char[] buffer, int offset, int count) throws IOException {\n        if (position == s.length()) {\n          return -1;\n        } else if (count > 0) {\n          buffer[offset] = s.charAt(position++);\n          return 1;\n        } else {\n          throw new IllegalArgumentException();\n        }\n      }\n      @Override public void close() throws IOException {\n      }\n    }; */\n  }\n  public void testNegativeZero() throws Exception {\n\t  \tJsonReader reader = new JsonReader(reader(\"[-0]\"));\n\t    reader.setLenient(false);\n\t    reader.beginArray();\n\t    assertEquals(NUMBER, reader.peek());\n\t    assertEquals(\"-0\", reader.nextString());\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Static methods for working with types.\n *\n * @author Bob Lee\n * @author Jesse Wilson\n */\npublic final class $Gson$Types {\n  /**\n   * Returns an array type whose elements are all instances of\n   * {@code componentType}.\n   *\n   * @return a {@link java.io.Serializable serializable} generic array type.\n   */\n  public static GenericArrayType arrayOf(Type componentType);\n  /**\n   * Returns a type that represents an unknown type that extends {@code bound}.\n   * For example, if {@code bound} is {@code CharSequence.class}, this returns\n   * {@code ? extends CharSequence}. If {@code bound} is {@code Object.class},\n   * this returns {@code ?}, which is shorthand for {@code ? extends Object}.\n   */\n  public static WildcardType subtypeOf(Type bound);\n  /**\n   * Returns a type that represents an unknown supertype of {@code bound}. For\n   * example, if {@code bound} is {@code String.class}, this returns {@code ?\n   * super String}.\n   */\n  public static WildcardType supertypeOf(Type bound);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Static methods for working with types.\n *\n * @author Bob Lee\n * @author Jesse Wilson\n */\npublic final class $Gson$Types {\n  /**\n   * Returns an array type whose elements are all instances of\n   * {@code componentType}.\n   *\n   * @return a {@link java.io.Serializable serializable} generic array type.\n   */\n  public static GenericArrayType arrayOf(Type componentType);\n  /**\n   * Returns a type that represents an unknown type that extends {@code bound}.\n   * For example, if {@code bound} is {@code CharSequence.class}, this returns\n   * {@code ? extends CharSequence}. If {@code bound} is {@code Object.class},\n   * this returns {@code ?}, which is shorthand for {@code ? extends Object}.\n   */\n  public static WildcardType subtypeOf(Type bound);\n  /**\n   * Returns a type that represents an unknown supertype of {@code bound}. For\n   * example, if {@code bound} is {@code String.class}, this returns {@code ?\n   * super String}.\n   */\n  public static WildcardType supertypeOf(Type bound);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testDoubleSupertype() {\n    assertEquals($Gson$Types.supertypeOf(Number.class), $Gson$Types.supertypeOf($Gson$Types.supertypeOf(Number.class)));\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonWriter implements Closeable, Flushable {\n  private static final String[] REPLACEMENT_CHARS;\n  private static final String[] HTML_SAFE_REPLACEMENT_CHARS;\n  /**\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter value(Boolean value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value the literal string value, or null to encode a null literal.\n   * @return this writer.\n   */\n  public JsonWriter value(String value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(Number value) throws IOException;\n  /**\n   * Ends encoding the current array.\n   *\n   * @return this writer.\n   */\n  public JsonWriter endArray() throws IOException;\n  /**\n   * Configure this writer to relax its syntax rules. By default, this writer\n   * only emits well-formed JSON as specified by <a\n   * href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>. Setting the writer\n   * to lenient permits the following:\n   * <ul>\n   *   <li>Top-level values of any type. With strict writing, the top-level\n   *       value must be an object or an array.\n   *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link\n   *       Double#isInfinite() infinities}.\n   * </ul>\n   */\n  public final void setLenient(boolean lenient);\n  /**\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter value(long value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException;\n  /**\n   * Begins encoding a new array. Each call to this method must be paired with\n   * a call to {@link #endArray}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter beginArray() throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter value(boolean value) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonWriter implements Closeable, Flushable {\n  private static final String[] REPLACEMENT_CHARS;\n  private static final String[] HTML_SAFE_REPLACEMENT_CHARS;\n  /**\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter value(Boolean value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value the literal string value, or null to encode a null literal.\n   * @return this writer.\n   */\n  public JsonWriter value(String value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(Number value) throws IOException;\n  /**\n   * Ends encoding the current array.\n   *\n   * @return this writer.\n   */\n  public JsonWriter endArray() throws IOException;\n  /**\n   * Configure this writer to relax its syntax rules. By default, this writer\n   * only emits well-formed JSON as specified by <a\n   * href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>. Setting the writer\n   * to lenient permits the following:\n   * <ul>\n   *   <li>Top-level values of any type. With strict writing, the top-level\n   *       value must be an object or an array.\n   *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link\n   *       Double#isInfinite() infinities}.\n   * </ul>\n   */\n  public final void setLenient(boolean lenient);\n  /**\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter value(long value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException;\n  /**\n   * Begins encoding a new array. Each call to this method must be paired with\n   * a call to {@link #endArray}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter beginArray() throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter value(boolean value) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testNonFiniteDoublesWhenLenient() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.setLenient(true);\n    jsonWriter.beginArray();\n    jsonWriter.value(Double.NaN);\n    jsonWriter.value(Double.NEGATIVE_INFINITY);\n    jsonWriter.value(Double.POSITIVE_INFINITY);\n    jsonWriter.endArray();\n    assertEquals(\"[NaN,-Infinity,Infinity]\", stringWriter.toString());\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This type adapter supports three subclasses of date: Date, Timestamp, and\n * java.sql.Date.\n *\n * @author Inderjeet Singh\n * @author Joel Leitch\n */\nfinal class DefaultDateTypeAdapter extends TypeAdapter<Date> {\n  private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n  private final Class<? extends Date> dateType;\n  private final DateFormat enUsFormat;\n  private final DateFormat localFormat;\n  @Override\n  public void write(JsonWriter out, Date value) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This type adapter supports three subclasses of date: Date, Timestamp, and\n * java.sql.Date.\n *\n * @author Inderjeet Singh\n * @author Joel Leitch\n */\nfinal class DefaultDateTypeAdapter extends TypeAdapter<Date> {\n  private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n  private final Class<? extends Date> dateType;\n  private final DateFormat enUsFormat;\n  private final DateFormat localFormat;\n  @Override\n  public void write(JsonWriter out, Date value) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Joel Leitch\n */\npublic class DefaultDateTypeAdapterTest extends TestCase {\n  private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\n    TimeZone defaultTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    Locale defaultLocale = Locale.getDefault();\n    Locale.setDefault(locale);\n    try {\n      assertFormatted(\"Jan 1, 1970 12:00:00 AM\", new DefaultDateTypeAdapter(Date.class));\n      assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n      assertFormatted(\"Jan 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));\n      assertFormatted(\"January 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));\n      assertFormatted(\"1/1/70 12:00 AM\",\n          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n      assertFormatted(\"Jan 1, 1970 12:00:00 AM\",\n          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n      assertFormatted(\"January 1, 1970 12:00:00 AM UTC\",\n          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n      assertFormatted(\"Thursday, January 1, 1970 12:00:00 AM UTC\",\n          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n    } finally {\n      TimeZone.setDefault(defaultTimeZone);\n      Locale.setDefault(defaultLocale);\n    }\n  }\n  private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {\n    assertEquals(toLiteral(formatted), adapter.toJson(new Date(0)));\n  }\n  private void assertParsed(String date, DefaultDateTypeAdapter adapter) throws IOException {\n    assertEquals(date, new Date(0), adapter.fromJson(toLiteral(date)));\n    assertEquals(\"ISO 8601\", new Date(0), adapter.fromJson(toLiteral(\"1970-01-01T00:00:00Z\")));\n  }\n  private static String toLiteral(String s) {\n    return '\"' + s + '\"';\n  }\n  public void testUnexpectedToken() throws Exception {\n    try {\n      DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\n      adapter.fromJson(\"{}\");\n      fail(\"Unexpected token should fail.\");\n    } catch (IllegalStateException expected) { }\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Static methods for working with types.\n *\n * @author Bob Lee\n * @author Jesse Wilson\n */\npublic final class $Gson$Types {\n  static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Static methods for working with types.\n *\n * @author Bob Lee\n * @author Jesse Wilson\n */\npublic final class $Gson$Types {\n  static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  private static int[] toIntArray(Collection collection) {\n    int[] ints = new int[collection.size()];\n    int i = 0;\n    for (Iterator iterator = collection.iterator(); iterator.hasNext(); ++i) {\n      Object obj = iterator.next();\n      if (obj instanceof Integer) {\n        ints[i] = ((Integer)obj).intValue();\n      } else if (obj instanceof Long) {\n        ints[i] = ((Long)obj).intValue();\n      }\n    }\n    return ints;\n  }\n  public void testIssue1107() {\n    String json = \"{\\n\" +\n            \"  \\\"inBig\\\": {\\n\" +\n            \"    \\\"key\\\": [\\n\" +\n            \"      { \\\"inSmall\\\": \\\"hello\\\" }\\n\" +\n            \"    ]\\n\" +\n            \"  }\\n\" +\n            \"}\";\n    BigClass bigClass = new Gson().fromJson(json, BigClass.class);\n    SmallClass small = bigClass.inBig.get(\"key\").get(0);\n    assertNotNull(small);\n    assertEquals(\"hello\", small.inSmall);\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Type adapters for basic types.\n */\npublic final class TypeAdapters {\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Type adapters for basic types.\n */\npublic final class TypeAdapters {\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * support is provided in Gson. The tests for Map types are available in {@link MapTest}.\n *\n * @author Inderjeet Singh\n * @author Joel Leitch\n */\npublic class DefaultTypeAdaptersTest extends TestCase {\n  private void testNullSerializationAndDeserialization(Class<?> c) {\n    assertEquals(\"null\", gson.toJson(null, c));\n    assertEquals(null, gson.fromJson(\"null\", c));\n  }\n  private void assertEqualsDate(Date date, int year, int month, int day) {\n    assertEquals(year-1900, date.getYear());\n    assertEquals(month, date.getMonth());\n    assertEquals(day, date.getDate());\n  }\n  private void assertEqualsTime(Date date, int hours, int minutes, int seconds) {\n    assertEquals(hours, date.getHours());\n    assertEquals(minutes, date.getMinutes());\n    assertEquals(seconds, date.getSeconds());\n  }\n  public void testJsonElementTypeMismatch() {\n    try {\n      gson.fromJson(\"\\\"abc\\\"\", JsonObject.class);\n      fail();\n    } catch (JsonSyntaxException expected) {\n      assertEquals(\"Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive\", expected.getMessage());\n    }\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Returns a function that can construct an instance of a requested type.\n */\npublic final class ConstructorConstructor {\n  private final Map<Type, InstanceCreator<?>> instanceCreators;\n  public <T> ObjectConstructor<T> get(TypeToken<T> typeToken);\n  @SuppressWarnings(\"unchecked\") // use runtime checks to guarantee that 'T' is what it is\n  private <T> ObjectConstructor<T> newDefaultImplementationConstructor(\n      final Type type, Class<? super T> rawType);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Returns a function that can construct an instance of a requested type.\n */\npublic final class ConstructorConstructor {\n  private final Map<Type, InstanceCreator<?>> instanceCreators;\n  public <T> ObjectConstructor<T> get(TypeToken<T> typeToken);\n  @SuppressWarnings(\"unchecked\") // use runtime checks to guarantee that 'T' is what it is\n  private <T> ObjectConstructor<T> newDefaultImplementationConstructor(\n      final Type type, Class<? super T> rawType);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  private <K, V> Map<K, V> newMap(K key1, V value1, K key2, V value2) {\n    Map<K, V> result = new LinkedHashMap<K, V>();\n    result.put(key1, value1);\n    result.put(key2, value2);\n    return result;\n  }\n  public void testConcurrentMap() throws Exception {\n    Type typeOfMap = new TypeToken<ConcurrentMap<Integer, String>>() {}.getType();\n    ConcurrentMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(123));\n    assertEquals(\"456\", map.get(123));\n    String json = gson.toJson(map);\n    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonWriter implements Closeable, Flushable {\n  private static final String[] REPLACEMENT_CHARS;\n  private static final String[] HTML_SAFE_REPLACEMENT_CHARS;\n  /**\n   * Writes {@code value} directly to the writer without quoting or\n   * escaping.\n   *\n   * @param value the literal string value, or null to encode a null literal.\n   * @return this writer.\n   */\n  public JsonWriter jsonValue(String value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(Number value) throws IOException;\n  /**\n   * Begins encoding a new object. Each call to this method must be paired\n   * with a call to {@link #endObject}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter beginObject() throws IOException;\n  /**\n   * Begins encoding a new array. Each call to this method must be paired with\n   * a call to {@link #endArray}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter beginArray() throws IOException;\n  /**\n   * Configure this writer to relax its syntax rules. By default, this writer\n   * only emits well-formed JSON as specified by <a\n   * href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>. Setting the writer\n   * to lenient permits the following:\n   * <ul>\n   *   <li>Top-level values of any type. With strict writing, the top-level\n   *       value must be an object or an array.\n   *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link\n   *       Double#isInfinite() infinities}.\n   * </ul>\n   */\n  public final void setLenient(boolean lenient);\n  /**\n   * Encodes {@code null}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter nullValue() throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value the literal string value, or null to encode a null literal.\n   * @return this writer.\n   */\n  public JsonWriter value(String value) throws IOException;\n  /**\n   * Inserts any necessary separators and whitespace before a name. Also\n   * adjusts the stack to expect the name's value.\n   */\n  private void beforeName() throws IOException;\n  /**\n   * Returns the value on the top of the stack.\n   */\n  private int peek();\n  /**\n   * Ends encoding the current array.\n   *\n   * @return this writer.\n   */\n  public JsonWriter endArray() throws IOException;\n  /**\n   * Ends encoding the current object.\n   *\n   * @return this writer.\n   */\n  public JsonWriter endObject() throws IOException;\n}\n/**\n * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value as a stream of tokens. This stream includes both literal\n * values (strings, numbers, booleans, and nulls) as well as the begin and\n * end delimiters of objects and arrays. The tokens are traversed in\n * depth-first order, the same order that they appear in the JSON document.\n * Within JSON objects, name/value pairs are represented by a single token.\n *\n * <h3>Parsing JSON</h3>\n * To create a recursive descent parser for your own JSON streams, first create\n * an entry point method that creates a {@code JsonReader}.\n *\n * <p>Next, create handler methods for each structure in your JSON text. You'll\n * need a method for each object type and for each array type.\n * <ul>\n *   <li>Within <strong>array handling</strong> methods, first call {@link\n *       #beginArray} to consume the array's opening bracket. Then create a\n *       while loop that accumulates values, terminating when {@link #hasNext}\n *       is false. Finally, read the array's closing bracket by calling {@link\n *       #endArray}.\n *   <li>Within <strong>object handling</strong> methods, first call {@link\n *       #beginObject} to consume the object's opening brace. Then create a\n *       while loop that assigns values to local variables based on their name.\n *       This loop should terminate when {@link #hasNext} is false. Finally,\n *       read the object's closing brace by calling {@link #endObject}.\n * </ul>\n * <p>When a nested object or array is encountered, delegate to the\n * corresponding handler method.\n *\n * <p>When an unknown name is encountered, strict parsers should fail with an\n * exception. Lenient parsers should call {@link #skipValue()} to recursively\n * skip the value's nested tokens, which may otherwise conflict.\n *\n * <p>If a value may be null, you should first check using {@link #peek()}.\n * Null literals can be consumed using either {@link #nextNull()} or {@link\n * #skipValue()}.\n *\n * <h3>Example</h3>\n * Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I read a JSON stream in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonReader!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code implements the parser for the above structure: <pre>   {@code\n *\n *   public List<Message> readJsonStream(InputStream in) throws IOException {\n *     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n *     try {\n *       return readMessagesArray(reader);\n *     } finally {\n *       reader.close();\n *     }\n *   }\n *\n *   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n *     List<Message> messages = new ArrayList<Message>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       messages.add(readMessage(reader));\n *     }\n *     reader.endArray();\n *     return messages;\n *   }\n *\n *   public Message readMessage(JsonReader reader) throws IOException {\n *     long id = -1;\n *     String text = null;\n *     User user = null;\n *     List<Double> geo = null;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"id\")) {\n *         id = reader.nextLong();\n *       } else if (name.equals(\"text\")) {\n *         text = reader.nextString();\n *       } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) {\n *         geo = readDoublesArray(reader);\n *       } else if (name.equals(\"user\")) {\n *         user = readUser(reader);\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new Message(id, text, user, geo);\n *   }\n *\n *   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n *     List<Double> doubles = new ArrayList<Double>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       doubles.add(reader.nextDouble());\n *     }\n *     reader.endArray();\n *     return doubles;\n *   }\n *\n *   public User readUser(JsonReader reader) throws IOException {\n *     String username = null;\n *     int followersCount = -1;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"name\")) {\n *         username = reader.nextString();\n *       } else if (name.equals(\"followers_count\")) {\n *         followersCount = reader.nextInt();\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new User(username, followersCount);\n *   }}</pre>\n *\n * <h3>Number Handling</h3>\n * This reader permits numeric values to be read as strings and string values to\n * be read as numbers. For example, both elements of the JSON array {@code\n * [1, \"1\"]} may be read using either {@link #nextInt} or {@link #nextString}.\n * This behavior is intended to prevent lossy numeric conversions: double is\n * JavaScript's only numeric type and very large values like {@code\n * 9007199254740993} cannot be represented exactly on that platform. To minimize\n * precision loss, extremely large values should be written and read as strings\n * in JSON.\n *\n * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n * Web servers that serve private data using JSON may be vulnerable to <a\n * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n * request forgery</a> attacks. In such an attack, a malicious site gains access\n * to a private JSON file by executing it with an HTML {@code <script>} tag.\n *\n * <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable\n * by {@code <script>} tags, disarming the attack. Since the prefix is malformed\n * JSON, strict parsing fails when it is encountered. This class permits the\n * non-execute prefix when {@link #setLenient(boolean) lenient parsing} is\n * enabled.\n *\n * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n * of this class are not thread safe.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonReader implements Closeable {\n  private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n  private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;\n  private static final int PEEKED_NONE = 0;\n  private static final int PEEKED_BEGIN_OBJECT = 1;\n  private static final int PEEKED_END_OBJECT = 2;\n  private static final int PEEKED_BEGIN_ARRAY = 3;\n  private static final int PEEKED_END_ARRAY = 4;\n  private static final int PEEKED_TRUE = 5;\n  private static final int PEEKED_FALSE = 6;\n  private static final int PEEKED_NULL = 7;\n  private static final int PEEKED_SINGLE_QUOTED = 8;\n  private static final int PEEKED_DOUBLE_QUOTED = 9;\n  private static final int PEEKED_UNQUOTED = 10;\n  private static final int PEEKED_BUFFERED = 11;\n  private static final int PEEKED_SINGLE_QUOTED_NAME = 12;\n  private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;\n  private static final int PEEKED_UNQUOTED_NAME = 14;\n  private static final int PEEKED_LONG = 15;\n  private static final int PEEKED_NUMBER = 16;\n  private static final int PEEKED_EOF = 17;\n  private static final int NUMBER_CHAR_NONE = 0;\n  private static final int NUMBER_CHAR_SIGN = 1;\n  private static final int NUMBER_CHAR_DIGIT = 2;\n  private static final int NUMBER_CHAR_DECIMAL = 3;\n  private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;\n  private static final int NUMBER_CHAR_EXP_E = 5;\n  private static final int NUMBER_CHAR_EXP_SIGN = 6;\n  private static final int NUMBER_CHAR_EXP_DIGIT = 7;\n  private final Reader in;\n  private boolean lenient = false;\n  private final char[] buffer = new char[1024];\n  private int pos = 0;\n  private int limit = 0;\n  private int lineNumber = 0;\n  private int lineStart = 0;\n  private long peekedLong;\n  private int peekedNumberLength;\n  private String peekedString;\n  private int[] stack = new int[32];\n  private int stackSize = 0;\n  /**\n   * Returns the type of the next token without consuming it.\n   */\n  public JsonToken peek() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * end of the current object.\n   */\n  public void endObject() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * beginning of a new object.\n   */\n  public void beginObject() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * beginning of a new array.\n   */\n  public void beginArray() throws IOException;\n  /**\n   * Configure this parser to be liberal in what it accepts. By default,\n   * this parser is strict and only accepts JSON as specified by <a\n   * href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the\n   * parser to lenient causes it to ignore the following syntax errors:\n   *\n   * <ul>\n   *   <li>Streams that start with the <a href=\"#nonexecuteprefix\">non-execute\n   *       prefix</a>, <code>\")]}'\\n\"</code>.\n   *   <li>Streams that include multiple top-level values. With strict parsing,\n   *       each stream must contain exactly one top-level value.\n   *   <li>Top-level values of any type. With strict parsing, the top-level\n   *       value must be an object or an array.\n   *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link\n   *       Double#isInfinite() infinities}.\n   *   <li>End of line comments starting with {@code //} or {@code #} and\n   *       ending with a newline character.\n   *   <li>C-style comments starting with {@code /*} and ending with\n   *       {@code *}{@code /}. Such comments may not be nested.\n   *   <li>Names that are unquoted or {@code 'single quoted'}.\n   *   <li>Strings that are unquoted or {@code 'single quoted'}.\n   *   <li>Array elements separated by {@code ;} instead of {@code ,}.\n   *   <li>Unnecessary array separators. These are interpreted as if null\n   *       was the omitted value.\n   *   <li>Names and values separated by {@code =} or {@code =>} instead of\n   *       {@code :}.\n   *   <li>Name/value pairs separated by {@code ;} instead of {@code ,}.\n   * </ul>\n   */\n  public final void setLenient(boolean lenient);\n  int doPeek() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,\n   * consuming it. If the next token is a number, this method will return its\n   * string form.\n   *\n   * @throws IllegalStateException if the next token is not a string or if\n   *     this reader is closed.\n   */\n  public String nextString() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is a\n   * literal null.\n   *\n   * @throws IllegalStateException if the next token is not null or if this\n   *     reader is closed.\n   */\n  public void nextNull() throws IOException;\n  /**\n   * Returns the next token, a {@link com.google.gson.stream.JsonToken#NAME property name}, and\n   * consumes it.\n   *\n   * @throws java.io.IOException if the next token in the stream is not a property\n   *     name.\n   */\n  public String nextName() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * end of the current array.\n   */\n  public void endArray() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,\n   * consuming it. If the next token is a string, this method will attempt to\n   * parse it as an int. If the next token's numeric value cannot be exactly\n   * represented by a Java {@code int}, this method throws.\n   *\n   * @throws IllegalStateException if the next token is not a literal value.\n   * @throws NumberFormatException if the next literal value cannot be parsed\n   *     as a number, or exactly represented as an int.\n   */\n  public int nextInt() throws IOException;\n  /**\n   * Skips the next value recursively. If it is an object or array, all nested\n   * elements are skipped. This method is intended for use when the JSON token\n   * stream contains unrecognized or unhandled values.\n   */\n  public void skipValue() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,\n   * consuming it.\n   *\n   * @throws IllegalStateException if the next token is not a boolean or if\n   *     this reader is closed.\n   */\n  public boolean nextBoolean() throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonWriter implements Closeable, Flushable {\n  private static final String[] REPLACEMENT_CHARS;\n  private static final String[] HTML_SAFE_REPLACEMENT_CHARS;\n  /**\n   * Writes {@code value} directly to the writer without quoting or\n   * escaping.\n   *\n   * @param value the literal string value, or null to encode a null literal.\n   * @return this writer.\n   */\n  public JsonWriter jsonValue(String value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(Number value) throws IOException;\n  /**\n   * Begins encoding a new object. Each call to this method must be paired\n   * with a call to {@link #endObject}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter beginObject() throws IOException;\n  /**\n   * Begins encoding a new array. Each call to this method must be paired with\n   * a call to {@link #endArray}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter beginArray() throws IOException;\n  /**\n   * Configure this writer to relax its syntax rules. By default, this writer\n   * only emits well-formed JSON as specified by <a\n   * href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>. Setting the writer\n   * to lenient permits the following:\n   * <ul>\n   *   <li>Top-level values of any type. With strict writing, the top-level\n   *       value must be an object or an array.\n   *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link\n   *       Double#isInfinite() infinities}.\n   * </ul>\n   */\n  public final void setLenient(boolean lenient);\n  /**\n   * Encodes {@code null}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter nullValue() throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value the literal string value, or null to encode a null literal.\n   * @return this writer.\n   */\n  public JsonWriter value(String value) throws IOException;\n  /**\n   * Inserts any necessary separators and whitespace before a name. Also\n   * adjusts the stack to expect the name's value.\n   */\n  private void beforeName() throws IOException;\n  /**\n   * Returns the value on the top of the stack.\n   */\n  private int peek();\n  /**\n   * Ends encoding the current array.\n   *\n   * @return this writer.\n   */\n  public JsonWriter endArray() throws IOException;\n  /**\n   * Ends encoding the current object.\n   *\n   * @return this writer.\n   */\n  public JsonWriter endObject() throws IOException;\n}\n/**\n * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value as a stream of tokens. This stream includes both literal\n * values (strings, numbers, booleans, and nulls) as well as the begin and\n * end delimiters of objects and arrays. The tokens are traversed in\n * depth-first order, the same order that they appear in the JSON document.\n * Within JSON objects, name/value pairs are represented by a single token.\n *\n * <h3>Parsing JSON</h3>\n * To create a recursive descent parser for your own JSON streams, first create\n * an entry point method that creates a {@code JsonReader}.\n *\n * <p>Next, create handler methods for each structure in your JSON text. You'll\n * need a method for each object type and for each array type.\n * <ul>\n *   <li>Within <strong>array handling</strong> methods, first call {@link\n *       #beginArray} to consume the array's opening bracket. Then create a\n *       while loop that accumulates values, terminating when {@link #hasNext}\n *       is false. Finally, read the array's closing bracket by calling {@link\n *       #endArray}.\n *   <li>Within <strong>object handling</strong> methods, first call {@link\n *       #beginObject} to consume the object's opening brace. Then create a\n *       while loop that assigns values to local variables based on their name.\n *       This loop should terminate when {@link #hasNext} is false. Finally,\n *       read the object's closing brace by calling {@link #endObject}.\n * </ul>\n * <p>When a nested object or array is encountered, delegate to the\n * corresponding handler method.\n *\n * <p>When an unknown name is encountered, strict parsers should fail with an\n * exception. Lenient parsers should call {@link #skipValue()} to recursively\n * skip the value's nested tokens, which may otherwise conflict.\n *\n * <p>If a value may be null, you should first check using {@link #peek()}.\n * Null literals can be consumed using either {@link #nextNull()} or {@link\n * #skipValue()}.\n *\n * <h3>Example</h3>\n * Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I read a JSON stream in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonReader!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code implements the parser for the above structure: <pre>   {@code\n *\n *   public List<Message> readJsonStream(InputStream in) throws IOException {\n *     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n *     try {\n *       return readMessagesArray(reader);\n *     } finally {\n *       reader.close();\n *     }\n *   }\n *\n *   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n *     List<Message> messages = new ArrayList<Message>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       messages.add(readMessage(reader));\n *     }\n *     reader.endArray();\n *     return messages;\n *   }\n *\n *   public Message readMessage(JsonReader reader) throws IOException {\n *     long id = -1;\n *     String text = null;\n *     User user = null;\n *     List<Double> geo = null;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"id\")) {\n *         id = reader.nextLong();\n *       } else if (name.equals(\"text\")) {\n *         text = reader.nextString();\n *       } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) {\n *         geo = readDoublesArray(reader);\n *       } else if (name.equals(\"user\")) {\n *         user = readUser(reader);\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new Message(id, text, user, geo);\n *   }\n *\n *   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n *     List<Double> doubles = new ArrayList<Double>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       doubles.add(reader.nextDouble());\n *     }\n *     reader.endArray();\n *     return doubles;\n *   }\n *\n *   public User readUser(JsonReader reader) throws IOException {\n *     String username = null;\n *     int followersCount = -1;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"name\")) {\n *         username = reader.nextString();\n *       } else if (name.equals(\"followers_count\")) {\n *         followersCount = reader.nextInt();\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new User(username, followersCount);\n *   }}</pre>\n *\n * <h3>Number Handling</h3>\n * This reader permits numeric values to be read as strings and string values to\n * be read as numbers. For example, both elements of the JSON array {@code\n * [1, \"1\"]} may be read using either {@link #nextInt} or {@link #nextString}.\n * This behavior is intended to prevent lossy numeric conversions: double is\n * JavaScript's only numeric type and very large values like {@code\n * 9007199254740993} cannot be represented exactly on that platform. To minimize\n * precision loss, extremely large values should be written and read as strings\n * in JSON.\n *\n * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n * Web servers that serve private data using JSON may be vulnerable to <a\n * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n * request forgery</a> attacks. In such an attack, a malicious site gains access\n * to a private JSON file by executing it with an HTML {@code <script>} tag.\n *\n * <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable\n * by {@code <script>} tags, disarming the attack. Since the prefix is malformed\n * JSON, strict parsing fails when it is encountered. This class permits the\n * non-execute prefix when {@link #setLenient(boolean) lenient parsing} is\n * enabled.\n *\n * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n * of this class are not thread safe.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonReader implements Closeable {\n  private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n  private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;\n  private static final int PEEKED_NONE = 0;\n  private static final int PEEKED_BEGIN_OBJECT = 1;\n  private static final int PEEKED_END_OBJECT = 2;\n  private static final int PEEKED_BEGIN_ARRAY = 3;\n  private static final int PEEKED_END_ARRAY = 4;\n  private static final int PEEKED_TRUE = 5;\n  private static final int PEEKED_FALSE = 6;\n  private static final int PEEKED_NULL = 7;\n  private static final int PEEKED_SINGLE_QUOTED = 8;\n  private static final int PEEKED_DOUBLE_QUOTED = 9;\n  private static final int PEEKED_UNQUOTED = 10;\n  private static final int PEEKED_BUFFERED = 11;\n  private static final int PEEKED_SINGLE_QUOTED_NAME = 12;\n  private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;\n  private static final int PEEKED_UNQUOTED_NAME = 14;\n  private static final int PEEKED_LONG = 15;\n  private static final int PEEKED_NUMBER = 16;\n  private static final int PEEKED_EOF = 17;\n  private static final int NUMBER_CHAR_NONE = 0;\n  private static final int NUMBER_CHAR_SIGN = 1;\n  private static final int NUMBER_CHAR_DIGIT = 2;\n  private static final int NUMBER_CHAR_DECIMAL = 3;\n  private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;\n  private static final int NUMBER_CHAR_EXP_E = 5;\n  private static final int NUMBER_CHAR_EXP_SIGN = 6;\n  private static final int NUMBER_CHAR_EXP_DIGIT = 7;\n  private final Reader in;\n  private boolean lenient = false;\n  private final char[] buffer = new char[1024];\n  private int pos = 0;\n  private int limit = 0;\n  private int lineNumber = 0;\n  private int lineStart = 0;\n  private long peekedLong;\n  private int peekedNumberLength;\n  private String peekedString;\n  private int[] stack = new int[32];\n  private int stackSize = 0;\n  /**\n   * Returns the type of the next token without consuming it.\n   */\n  public JsonToken peek() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * end of the current object.\n   */\n  public void endObject() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * beginning of a new object.\n   */\n  public void beginObject() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * beginning of a new array.\n   */\n  public void beginArray() throws IOException;\n  /**\n   * Configure this parser to be liberal in what it accepts. By default,\n   * this parser is strict and only accepts JSON as specified by <a\n   * href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the\n   * parser to lenient causes it to ignore the following syntax errors:\n   *\n   * <ul>\n   *   <li>Streams that start with the <a href=\"#nonexecuteprefix\">non-execute\n   *       prefix</a>, <code>\")]}'\\n\"</code>.\n   *   <li>Streams that include multiple top-level values. With strict parsing,\n   *       each stream must contain exactly one top-level value.\n   *   <li>Top-level values of any type. With strict parsing, the top-level\n   *       value must be an object or an array.\n   *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link\n   *       Double#isInfinite() infinities}.\n   *   <li>End of line comments starting with {@code //} or {@code #} and\n   *       ending with a newline character.\n   *   <li>C-style comments starting with {@code /*} and ending with\n   *       {@code *}{@code /}. Such comments may not be nested.\n   *   <li>Names that are unquoted or {@code 'single quoted'}.\n   *   <li>Strings that are unquoted or {@code 'single quoted'}.\n   *   <li>Array elements separated by {@code ;} instead of {@code ,}.\n   *   <li>Unnecessary array separators. These are interpreted as if null\n   *       was the omitted value.\n   *   <li>Names and values separated by {@code =} or {@code =>} instead of\n   *       {@code :}.\n   *   <li>Name/value pairs separated by {@code ;} instead of {@code ,}.\n   * </ul>\n   */\n  public final void setLenient(boolean lenient);\n  int doPeek() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,\n   * consuming it. If the next token is a number, this method will return its\n   * string form.\n   *\n   * @throws IllegalStateException if the next token is not a string or if\n   *     this reader is closed.\n   */\n  public String nextString() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is a\n   * literal null.\n   *\n   * @throws IllegalStateException if the next token is not null or if this\n   *     reader is closed.\n   */\n  public void nextNull() throws IOException;\n  /**\n   * Returns the next token, a {@link com.google.gson.stream.JsonToken#NAME property name}, and\n   * consumes it.\n   *\n   * @throws java.io.IOException if the next token in the stream is not a property\n   *     name.\n   */\n  public String nextName() throws IOException;\n  /**\n   * Consumes the next token from the JSON stream and asserts that it is the\n   * end of the current array.\n   */\n  public void endArray() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,\n   * consuming it. If the next token is a string, this method will attempt to\n   * parse it as an int. If the next token's numeric value cannot be exactly\n   * represented by a Java {@code int}, this method throws.\n   *\n   * @throws IllegalStateException if the next token is not a literal value.\n   * @throws NumberFormatException if the next literal value cannot be parsed\n   *     as a number, or exactly represented as an int.\n   */\n  public int nextInt() throws IOException;\n  /**\n   * Skips the next value recursively. If it is an object or array, all nested\n   * elements are skipped. This method is intended for use when the JSON token\n   * stream contains unrecognized or unhandled values.\n   */\n  public void skipValue() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,\n   * consuming it.\n   *\n   * @throws IllegalStateException if the next token is not a boolean or if\n   *     this reader is closed.\n   */\n  public boolean nextBoolean() throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  private void assertNotANumber(String s) throws IOException {\n    JsonReader reader = new JsonReader(reader(\"[\" + s + \"]\"));\n    reader.setLenient(true);\n    reader.beginArray();\n    assertEquals(JsonToken.STRING, reader.peek());\n    assertEquals(s, reader.nextString());\n    reader.endArray();\n  }\n  private void testFailWithPosition(String message, String json) throws IOException {\n    // Validate that it works reading the string normally.\n    JsonReader reader1 = new JsonReader(reader(json));\n    reader1.setLenient(true);\n    reader1.beginArray();\n    reader1.nextString();\n    try {\n      reader1.peek();\n      fail();\n    } catch (IOException expected) {\n      assertEquals(message, expected.getMessage());\n    }\n\n    // Also validate that it works when skipping.\n    JsonReader reader2 = new JsonReader(reader(json));\n    reader2.setLenient(true);\n    reader2.beginArray();\n    reader2.skipValue();\n    try {\n      reader2.peek();\n      fail();\n    } catch (IOException expected) {\n      assertEquals(message, expected.getMessage());\n    }\n  }\n  private String repeat(char c, int count) {\n    char[] array = new char[count];\n    Arrays.fill(array, c);\n    return new String(array);\n  }\n  private void assertDocument(String document, Object... expectations) throws IOException {\n    JsonReader reader = new JsonReader(reader(document));\n    reader.setLenient(true);\n    for (Object expectation : expectations) {\n      if (expectation == BEGIN_OBJECT) {\n        reader.beginObject();\n      } else if (expectation == BEGIN_ARRAY) {\n        reader.beginArray();\n      } else if (expectation == END_OBJECT) {\n        reader.endObject();\n      } else if (expectation == END_ARRAY) {\n        reader.endArray();\n      } else if (expectation == NAME) {\n        assertEquals(\"name\", reader.nextName());\n      } else if (expectation == BOOLEAN) {\n        assertEquals(false, reader.nextBoolean());\n      } else if (expectation == STRING) {\n        assertEquals(\"string\", reader.nextString());\n      } else if (expectation == NUMBER) {\n        assertEquals(123, reader.nextInt());\n      } else if (expectation == NULL) {\n        reader.nextNull();\n      } else if (expectation == IOException.class) {\n        try {\n          reader.peek();\n          fail();\n        } catch (IOException expected) {\n        }\n      } else {\n        throw new AssertionError();\n      }\n    }\n  }\n  private Reader reader(final String s) {\n    /* if (true) */ return new StringReader(s);\n    /* return new Reader() {\n      int position = 0;\n      @Override public int read(char[] buffer, int offset, int count) throws IOException {\n        if (position == s.length()) {\n          return -1;\n        } else if (count > 0) {\n          buffer[offset] = s.charAt(position++);\n          return 1;\n        } else {\n          throw new IllegalArgumentException();\n        }\n      }\n      @Override public void close() throws IOException {\n      }\n    }; */\n  }\n  public void testTopLevelValueTypeWithSkipValue() throws IOException {\n    JsonReader reader = new JsonReader(reader(\"true\"));\n    reader.skipValue();\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Utilities methods for manipulating dates in iso8601 format. This is much much faster and GC friendly than using SimpleDateFormat so\n * highly suitable if you (un)serialize lots of date objects.\n * \n * Supported parse format: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:]mm]]\n * \n * @see <a href=\"http://www.w3.org/TR/NOTE-datetime\">this specification</a>\n */\npublic class ISO8601Utils\n{\n    private static final String UTC_ID = \"UTC\";\n    private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(UTC_ID);\n    /**\n     * Parse a date from ISO-8601 formatted string. It expects a format\n     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n     * \n     * @param date ISO string to parse in the appropriate format.\n     * @param pos The position to start parsing from, updated to where parsing stopped.\n     * @return the parsed date\n     * @throws ParseException if the date is not in the appropriate format\n     */\n    public static Date parse(String date, ParsePosition pos) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Utilities methods for manipulating dates in iso8601 format. This is much much faster and GC friendly than using SimpleDateFormat so\n * highly suitable if you (un)serialize lots of date objects.\n * \n * Supported parse format: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:]mm]]\n * \n * @see <a href=\"http://www.w3.org/TR/NOTE-datetime\">this specification</a>\n */\npublic class ISO8601Utils\n{\n    private static final String UTC_ID = \"UTC\";\n    private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(UTC_ID);\n    /**\n     * Parse a date from ISO-8601 formatted string. It expects a format\n     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n     * \n     * @param date ISO string to parse in the appropriate format.\n     * @param pos The position to start parsing from, updated to where parsing stopped.\n     * @return the parsed date\n     * @throws ParseException if the date is not in the appropriate format\n     */\n    public static Date parse(String date, ParsePosition pos) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Joel Leitch\n */\npublic class DefaultDateTypeAdapterTest extends TestCase {\n  private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\n    TimeZone defaultTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    Locale defaultLocale = Locale.getDefault();\n    Locale.setDefault(locale);\n    try {\n      assertFormatted(\"Jan 1, 1970 12:00:00 AM\", new DefaultDateTypeAdapter());\n      assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n      assertFormatted(\"Jan 1, 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n      assertFormatted(\"January 1, 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n      assertFormatted(\"1/1/70 12:00 AM\",\n          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n      assertFormatted(\"Jan 1, 1970 12:00:00 AM\",\n          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n      assertFormatted(\"January 1, 1970 12:00:00 AM UTC\",\n          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n      assertFormatted(\"Thursday, January 1, 1970 12:00:00 AM UTC\",\n          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n    } finally {\n      TimeZone.setDefault(defaultTimeZone);\n      Locale.setDefault(defaultLocale);\n    }\n  }\n  private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {\n    assertEquals(formatted, adapter.serialize(new Date(0), Date.class, null).getAsString());\n  }\n  private void assertParsed(String date, DefaultDateTypeAdapter  adapter) {\n    assertEquals(date, new Date(0), adapter.deserialize(new JsonPrimitive(date), Date.class, null));\n    assertEquals(\"ISO 8601\", new Date(0), adapter.deserialize(\n        new JsonPrimitive(\"1970-01-01T00:00:00Z\"), Date.class, null));\n  }\n  public void testDateDeserializationISO8601() throws Exception {\n  \tDefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();\n    assertParsed(\"1970-01-01T00:00:00.000Z\", adapter);\n    assertParsed(\"1970-01-01T00:00Z\", adapter);\n    assertParsed(\"1970-01-01T00:00:00+00:00\", adapter);\n    assertParsed(\"1970-01-01T01:00:00+01:00\", adapter);\n    assertParsed(\"1970-01-01T01:00:00+01\", adapter);\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Given a type T, looks for the annotation {@link JsonAdapter} and uses an instance of the\n * specified class as the default type adapter.\n *\n * @since 2.3\n */\npublic final class JsonAdapterAnnotationTypeAdapterFactory implements TypeAdapterFactory {\n  private final ConstructorConstructor constructorConstructor;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Given a type T, looks for the annotation {@link JsonAdapter} and uses an instance of the\n * specified class as the default type adapter.\n *\n * @since 2.3\n */\npublic final class JsonAdapterAnnotationTypeAdapterFactory implements TypeAdapterFactory {\n  private final ConstructorConstructor constructorConstructor;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testNullSafeBugDeserialize() throws Exception {\n    Device device = gson.fromJson(\"{'id':'ec57803e2'}\", Device.class);\n    assertEquals(\"ec57803e2\", device.id);\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value as a stream of tokens. This stream includes both literal\n * values (strings, numbers, booleans, and nulls) as well as the begin and\n * end delimiters of objects and arrays. The tokens are traversed in\n * depth-first order, the same order that they appear in the JSON document.\n * Within JSON objects, name/value pairs are represented by a single token.\n *\n * <h3>Parsing JSON</h3>\n * To create a recursive descent parser for your own JSON streams, first create\n * an entry point method that creates a {@code JsonReader}.\n *\n * <p>Next, create handler methods for each structure in your JSON text. You'll\n * need a method for each object type and for each array type.\n * <ul>\n *   <li>Within <strong>array handling</strong> methods, first call {@link\n *       #beginArray} to consume the array's opening bracket. Then create a\n *       while loop that accumulates values, terminating when {@link #hasNext}\n *       is false. Finally, read the array's closing bracket by calling {@link\n *       #endArray}.\n *   <li>Within <strong>object handling</strong> methods, first call {@link\n *       #beginObject} to consume the object's opening brace. Then create a\n *       while loop that assigns values to local variables based on their name.\n *       This loop should terminate when {@link #hasNext} is false. Finally,\n *       read the object's closing brace by calling {@link #endObject}.\n * </ul>\n * <p>When a nested object or array is encountered, delegate to the\n * corresponding handler method.\n *\n * <p>When an unknown name is encountered, strict parsers should fail with an\n * exception. Lenient parsers should call {@link #skipValue()} to recursively\n * skip the value's nested tokens, which may otherwise conflict.\n *\n * <p>If a value may be null, you should first check using {@link #peek()}.\n * Null literals can be consumed using either {@link #nextNull()} or {@link\n * #skipValue()}.\n *\n * <h3>Example</h3>\n * Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I read a JSON stream in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonReader!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code implements the parser for the above structure: <pre>   {@code\n *\n *   public List<Message> readJsonStream(InputStream in) throws IOException {\n *     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n *     try {\n *       return readMessagesArray(reader);\n *     } finally {\n *       reader.close();\n *     }\n *   }\n *\n *   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n *     List<Message> messages = new ArrayList<Message>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       messages.add(readMessage(reader));\n *     }\n *     reader.endArray();\n *     return messages;\n *   }\n *\n *   public Message readMessage(JsonReader reader) throws IOException {\n *     long id = -1;\n *     String text = null;\n *     User user = null;\n *     List<Double> geo = null;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"id\")) {\n *         id = reader.nextLong();\n *       } else if (name.equals(\"text\")) {\n *         text = reader.nextString();\n *       } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) {\n *         geo = readDoublesArray(reader);\n *       } else if (name.equals(\"user\")) {\n *         user = readUser(reader);\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new Message(id, text, user, geo);\n *   }\n *\n *   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n *     List<Double> doubles = new ArrayList<Double>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       doubles.add(reader.nextDouble());\n *     }\n *     reader.endArray();\n *     return doubles;\n *   }\n *\n *   public User readUser(JsonReader reader) throws IOException {\n *     String username = null;\n *     int followersCount = -1;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"name\")) {\n *         username = reader.nextString();\n *       } else if (name.equals(\"followers_count\")) {\n *         followersCount = reader.nextInt();\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new User(username, followersCount);\n *   }}</pre>\n *\n * <h3>Number Handling</h3>\n * This reader permits numeric values to be read as strings and string values to\n * be read as numbers. For example, both elements of the JSON array {@code\n * [1, \"1\"]} may be read using either {@link #nextInt} or {@link #nextString}.\n * This behavior is intended to prevent lossy numeric conversions: double is\n * JavaScript's only numeric type and very large values like {@code\n * 9007199254740993} cannot be represented exactly on that platform. To minimize\n * precision loss, extremely large values should be written and read as strings\n * in JSON.\n *\n * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n * Web servers that serve private data using JSON may be vulnerable to <a\n * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n * request forgery</a> attacks. In such an attack, a malicious site gains access\n * to a private JSON file by executing it with an HTML {@code <script>} tag.\n *\n * <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable\n * by {@code <script>} tags, disarming the attack. Since the prefix is malformed\n * JSON, strict parsing fails when it is encountered. This class permits the\n * non-execute prefix when {@link #setLenient(boolean) lenient parsing} is\n * enabled.\n *\n * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n * of this class are not thread safe.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonReader implements Closeable {\n  private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n  private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;\n  private static final int PEEKED_NONE = 0;\n  private static final int PEEKED_BEGIN_OBJECT = 1;\n  private static final int PEEKED_END_OBJECT = 2;\n  private static final int PEEKED_BEGIN_ARRAY = 3;\n  private static final int PEEKED_END_ARRAY = 4;\n  private static final int PEEKED_TRUE = 5;\n  private static final int PEEKED_FALSE = 6;\n  private static final int PEEKED_NULL = 7;\n  private static final int PEEKED_SINGLE_QUOTED = 8;\n  private static final int PEEKED_DOUBLE_QUOTED = 9;\n  private static final int PEEKED_UNQUOTED = 10;\n  private static final int PEEKED_BUFFERED = 11;\n  private static final int PEEKED_SINGLE_QUOTED_NAME = 12;\n  private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;\n  private static final int PEEKED_UNQUOTED_NAME = 14;\n  private static final int PEEKED_LONG = 15;\n  private static final int PEEKED_NUMBER = 16;\n  private static final int PEEKED_EOF = 17;\n  private static final int NUMBER_CHAR_NONE = 0;\n  private static final int NUMBER_CHAR_SIGN = 1;\n  private static final int NUMBER_CHAR_DIGIT = 2;\n  private static final int NUMBER_CHAR_DECIMAL = 3;\n  private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;\n  private static final int NUMBER_CHAR_EXP_E = 5;\n  private static final int NUMBER_CHAR_EXP_SIGN = 6;\n  private static final int NUMBER_CHAR_EXP_DIGIT = 7;\n  private final Reader in;\n  private boolean lenient = false;\n  private final char[] buffer = new char[1024];\n  private int pos = 0;\n  private int limit = 0;\n  private int lineNumber = 0;\n  private int lineStart = 0;\n  private long peekedLong;\n  private int peekedNumberLength;\n  private String peekedString;\n  private int[] stack = new int[32];\n  private int stackSize = 0;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,\n   * consuming it. If the next token is a string, this method will attempt to\n   * parse it as a long. If the next token's numeric value cannot be exactly\n   * represented by a Java {@code long}, this method throws.\n   *\n   * @throws IllegalStateException if the next token is not a literal value.\n   * @throws NumberFormatException if the next literal value cannot be parsed\n   *     as a number, or exactly represented as a long.\n   */\n  public long nextLong() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,\n   * consuming it. If the next token is a string, this method will attempt to\n   * parse it as an int. If the next token's numeric value cannot be exactly\n   * represented by a Java {@code int}, this method throws.\n   *\n   * @throws IllegalStateException if the next token is not a literal value.\n   * @throws NumberFormatException if the next literal value cannot be parsed\n   *     as a number, or exactly represented as an int.\n   */\n  public int nextInt() throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value as a stream of tokens. This stream includes both literal\n * values (strings, numbers, booleans, and nulls) as well as the begin and\n * end delimiters of objects and arrays. The tokens are traversed in\n * depth-first order, the same order that they appear in the JSON document.\n * Within JSON objects, name/value pairs are represented by a single token.\n *\n * <h3>Parsing JSON</h3>\n * To create a recursive descent parser for your own JSON streams, first create\n * an entry point method that creates a {@code JsonReader}.\n *\n * <p>Next, create handler methods for each structure in your JSON text. You'll\n * need a method for each object type and for each array type.\n * <ul>\n *   <li>Within <strong>array handling</strong> methods, first call {@link\n *       #beginArray} to consume the array's opening bracket. Then create a\n *       while loop that accumulates values, terminating when {@link #hasNext}\n *       is false. Finally, read the array's closing bracket by calling {@link\n *       #endArray}.\n *   <li>Within <strong>object handling</strong> methods, first call {@link\n *       #beginObject} to consume the object's opening brace. Then create a\n *       while loop that assigns values to local variables based on their name.\n *       This loop should terminate when {@link #hasNext} is false. Finally,\n *       read the object's closing brace by calling {@link #endObject}.\n * </ul>\n * <p>When a nested object or array is encountered, delegate to the\n * corresponding handler method.\n *\n * <p>When an unknown name is encountered, strict parsers should fail with an\n * exception. Lenient parsers should call {@link #skipValue()} to recursively\n * skip the value's nested tokens, which may otherwise conflict.\n *\n * <p>If a value may be null, you should first check using {@link #peek()}.\n * Null literals can be consumed using either {@link #nextNull()} or {@link\n * #skipValue()}.\n *\n * <h3>Example</h3>\n * Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I read a JSON stream in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonReader!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code implements the parser for the above structure: <pre>   {@code\n *\n *   public List<Message> readJsonStream(InputStream in) throws IOException {\n *     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n *     try {\n *       return readMessagesArray(reader);\n *     } finally {\n *       reader.close();\n *     }\n *   }\n *\n *   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n *     List<Message> messages = new ArrayList<Message>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       messages.add(readMessage(reader));\n *     }\n *     reader.endArray();\n *     return messages;\n *   }\n *\n *   public Message readMessage(JsonReader reader) throws IOException {\n *     long id = -1;\n *     String text = null;\n *     User user = null;\n *     List<Double> geo = null;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"id\")) {\n *         id = reader.nextLong();\n *       } else if (name.equals(\"text\")) {\n *         text = reader.nextString();\n *       } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) {\n *         geo = readDoublesArray(reader);\n *       } else if (name.equals(\"user\")) {\n *         user = readUser(reader);\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new Message(id, text, user, geo);\n *   }\n *\n *   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n *     List<Double> doubles = new ArrayList<Double>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       doubles.add(reader.nextDouble());\n *     }\n *     reader.endArray();\n *     return doubles;\n *   }\n *\n *   public User readUser(JsonReader reader) throws IOException {\n *     String username = null;\n *     int followersCount = -1;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"name\")) {\n *         username = reader.nextString();\n *       } else if (name.equals(\"followers_count\")) {\n *         followersCount = reader.nextInt();\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new User(username, followersCount);\n *   }}</pre>\n *\n * <h3>Number Handling</h3>\n * This reader permits numeric values to be read as strings and string values to\n * be read as numbers. For example, both elements of the JSON array {@code\n * [1, \"1\"]} may be read using either {@link #nextInt} or {@link #nextString}.\n * This behavior is intended to prevent lossy numeric conversions: double is\n * JavaScript's only numeric type and very large values like {@code\n * 9007199254740993} cannot be represented exactly on that platform. To minimize\n * precision loss, extremely large values should be written and read as strings\n * in JSON.\n *\n * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n * Web servers that serve private data using JSON may be vulnerable to <a\n * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n * request forgery</a> attacks. In such an attack, a malicious site gains access\n * to a private JSON file by executing it with an HTML {@code <script>} tag.\n *\n * <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable\n * by {@code <script>} tags, disarming the attack. Since the prefix is malformed\n * JSON, strict parsing fails when it is encountered. This class permits the\n * non-execute prefix when {@link #setLenient(boolean) lenient parsing} is\n * enabled.\n *\n * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n * of this class are not thread safe.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonReader implements Closeable {\n  private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n  private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;\n  private static final int PEEKED_NONE = 0;\n  private static final int PEEKED_BEGIN_OBJECT = 1;\n  private static final int PEEKED_END_OBJECT = 2;\n  private static final int PEEKED_BEGIN_ARRAY = 3;\n  private static final int PEEKED_END_ARRAY = 4;\n  private static final int PEEKED_TRUE = 5;\n  private static final int PEEKED_FALSE = 6;\n  private static final int PEEKED_NULL = 7;\n  private static final int PEEKED_SINGLE_QUOTED = 8;\n  private static final int PEEKED_DOUBLE_QUOTED = 9;\n  private static final int PEEKED_UNQUOTED = 10;\n  private static final int PEEKED_BUFFERED = 11;\n  private static final int PEEKED_SINGLE_QUOTED_NAME = 12;\n  private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;\n  private static final int PEEKED_UNQUOTED_NAME = 14;\n  private static final int PEEKED_LONG = 15;\n  private static final int PEEKED_NUMBER = 16;\n  private static final int PEEKED_EOF = 17;\n  private static final int NUMBER_CHAR_NONE = 0;\n  private static final int NUMBER_CHAR_SIGN = 1;\n  private static final int NUMBER_CHAR_DIGIT = 2;\n  private static final int NUMBER_CHAR_DECIMAL = 3;\n  private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;\n  private static final int NUMBER_CHAR_EXP_E = 5;\n  private static final int NUMBER_CHAR_EXP_SIGN = 6;\n  private static final int NUMBER_CHAR_EXP_DIGIT = 7;\n  private final Reader in;\n  private boolean lenient = false;\n  private final char[] buffer = new char[1024];\n  private int pos = 0;\n  private int limit = 0;\n  private int lineNumber = 0;\n  private int lineStart = 0;\n  private long peekedLong;\n  private int peekedNumberLength;\n  private String peekedString;\n  private int[] stack = new int[32];\n  private int stackSize = 0;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,\n   * consuming it. If the next token is a string, this method will attempt to\n   * parse it as a long. If the next token's numeric value cannot be exactly\n   * represented by a Java {@code long}, this method throws.\n   *\n   * @throws IllegalStateException if the next token is not a literal value.\n   * @throws NumberFormatException if the next literal value cannot be parsed\n   *     as a number, or exactly represented as a long.\n   */\n  public long nextLong() throws IOException;\n  /**\n   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,\n   * consuming it. If the next token is a string, this method will attempt to\n   * parse it as an int. If the next token's numeric value cannot be exactly\n   * represented by a Java {@code int}, this method throws.\n   *\n   * @throws IllegalStateException if the next token is not a literal value.\n   * @throws NumberFormatException if the next literal value cannot be parsed\n   *     as a number, or exactly represented as an int.\n   */\n  public int nextInt() throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  private <K, V> Map<K, V> newMap(K key1, V value1, K key2, V value2) {\n    Map<K, V> result = new LinkedHashMap<K, V>();\n    result.put(key1, value1);\n    result.put(key2, value2);\n    return result;\n  }\n  public void testMapDeserializationWithUnquotedLongKeys() {\n    long longKey = 9876543210L;\n    String json = String.format(\"{%d:\\\"456\\\"}\", longKey);\n    Type typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();\n    Map<Long, String> map = gson.fromJson(json, typeOfMap);\n    assertEquals(1, map.size());\n    assertTrue(map.containsKey(longKey));\n    assertEquals(\"456\", map.get(longKey));\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Do sneaky things to allocate objects without invoking their constructors.\n *\n * @author Joel Leitch\n * @author Jesse Wilson\n */\npublic abstract class UnsafeAllocator {\n  public abstract <T> T newInstance(Class<T> c) throws Exception;\n  public abstract <T> T newInstance(Class<T> c) throws Exception;\n\n  public static UnsafeAllocator create();\n  public static UnsafeAllocator create();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Do sneaky things to allocate objects without invoking their constructors.\n *\n * @author Joel Leitch\n * @author Jesse Wilson\n */\npublic abstract class UnsafeAllocator {\n  public abstract <T> T newInstance(Class<T> c) throws Exception;\n  public abstract <T> T newInstance(Class<T> c) throws Exception;\n\n  public static UnsafeAllocator create();\n  public static UnsafeAllocator create();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testInterfaceInstantiation() {\n    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n    try {\n      unsafeAllocator.newInstance(Interface.class);\n      fail();\n    } catch (Exception e) {\n      assertEquals(e.getClass(), UnsupportedOperationException.class);\n    }\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This writer creates a JsonElement.\n */\npublic final class JsonTreeWriter extends JsonWriter {\n  @Override public JsonWriter endArray() throws IOException;\n  @Override public JsonWriter value(boolean value) throws IOException;\n  @Override public JsonWriter beginArray() throws IOException;\n  @Override public JsonWriter value(double value) throws IOException;\n  @Override public JsonWriter value(long value) throws IOException;\n  @Override public JsonWriter value(Number value) throws IOException;\n  @Override public JsonWriter value(String value) throws IOException;\n}\n/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonWriter implements Closeable, Flushable {\n  private static final String[] REPLACEMENT_CHARS;\n  private static final String[] HTML_SAFE_REPLACEMENT_CHARS;\n  /**\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter value(long value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException;\n  /**\n   * Ends encoding the current array.\n   *\n   * @return this writer.\n   */\n  public JsonWriter endArray() throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter value(boolean value) throws IOException;\n  /**\n   * Begins encoding a new array. Each call to this method must be paired with\n   * a call to {@link #endArray}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter beginArray() throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(Number value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value the literal string value, or null to encode a null literal.\n   * @return this writer.\n   */\n  public JsonWriter value(String value) throws IOException;\n}\n/**\n * Type adapters for basic types.\n */\npublic final class TypeAdapters {\n  public static <TT> TypeAdapterFactory newFactory(\n      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This writer creates a JsonElement.\n */\npublic final class JsonTreeWriter extends JsonWriter {\n  @Override public JsonWriter endArray() throws IOException;\n  @Override public JsonWriter value(boolean value) throws IOException;\n  @Override public JsonWriter beginArray() throws IOException;\n  @Override public JsonWriter value(double value) throws IOException;\n  @Override public JsonWriter value(long value) throws IOException;\n  @Override public JsonWriter value(Number value) throws IOException;\n  @Override public JsonWriter value(String value) throws IOException;\n}\n/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\npublic class JsonWriter implements Closeable, Flushable {\n  private static final String[] REPLACEMENT_CHARS;\n  private static final String[] HTML_SAFE_REPLACEMENT_CHARS;\n  /**\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter value(long value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException;\n  /**\n   * Ends encoding the current array.\n   *\n   * @return this writer.\n   */\n  public JsonWriter endArray() throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter value(boolean value) throws IOException;\n  /**\n   * Begins encoding a new array. Each call to this method must be paired with\n   * a call to {@link #endArray}.\n   *\n   * @return this writer.\n   */\n  public JsonWriter beginArray() throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   */\n  public JsonWriter value(Number value) throws IOException;\n  /**\n   * Encodes {@code value}.\n   *\n   * @param value the literal string value, or null to encode a null literal.\n   * @return this writer.\n   */\n  public JsonWriter value(String value) throws IOException;\n}\n/**\n * Type adapters for basic types.\n */\npublic final class TypeAdapters {\n  public static <TT> TypeAdapterFactory newFactory(\n      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testBoxedBooleans() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.beginArray();\n    jsonWriter.value((Boolean) true);\n    jsonWriter.value((Boolean) false);\n    jsonWriter.value((Boolean) null);\n    jsonWriter.endArray();\n    assertEquals(\"[true,false,null]\", stringWriter.toString());\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n A HTML Document.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Document extends Element {\n    private void normalise(Element element);\n    /**\n     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.\n     @param text unencoded text\n     @return this document\n     */\n    @Override\n    public Element text(String text);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n A HTML Document.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Document extends Element {\n    private void normalise(Element element);\n    /**\n     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.\n     @param text unencoded text\n     @return this document\n     */\n    @Override\n    public Element text(String text);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void createsStructureFromBodySnippet() {\n        // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine\n        // needs to move into the start of the body\n        String html = \"foo <b>bar</b> baz\";\n        Document doc = Jsoup.parse(html);\n        assertEquals (\"foo bar baz\", doc.text());\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic abstract class Node implements Cloneable {\n    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic abstract class Node implements Cloneable {\n    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void absHandlesRelativeQuery() {\n        Document doc = Jsoup.parse(\"<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>\", \"http://jsoup.org/path/file?bar\");\n\n        Element a1 = doc.select(\"a\").first();\n        assertEquals(\"http://jsoup.org/path/file?foo\", a1.absUrl(\"href\"));\n\n        Element a2 = doc.select(\"a\").get(1);\n        assertEquals(\"http://jsoup.org/path/bar.html?foo\", a2.absUrl(\"href\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n CSS-like element selector, that finds elements matching a query.\n\n <h2>Selector syntax</h2>\n A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n elements, attributes, and attribute values).\n <p/>\n The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n is equivalent).\n\n <table>\n  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em></td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n  </table>\n\n @see Element#select(String)\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Selector {\n    private final Element root;\n    private final LinkedHashSet<Element> elements; // LHS for unique and ordered elements\n    private final String query;\n    private final TokenQueue tq;\n    private Elements matches(boolean own);\n    /**\n     Find elements matching selector.\n     @param query CSS selector\n     @param roots root elements to descend into\n     @return matching elements, empty if not\n     */\n    public static Elements select(String query, Iterable<Element> roots);\n    private Elements findElements();\n    private Elements select();\n    /**\n     Find elements matching selector.\n     @param query CSS selector\n     @param root root element to descend into\n     @return matching elements, empty if not\n     */\n    public static Elements select(String query, Element root);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n CSS-like element selector, that finds elements matching a query.\n\n <h2>Selector syntax</h2>\n A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n elements, attributes, and attribute values).\n <p/>\n The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n is equivalent).\n\n <table>\n  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em></td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n  </table>\n\n @see Element#select(String)\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Selector {\n    private final Element root;\n    private final LinkedHashSet<Element> elements; // LHS for unique and ordered elements\n    private final String query;\n    private final TokenQueue tq;\n    private Elements matches(boolean own);\n    /**\n     Find elements matching selector.\n     @param query CSS selector\n     @param roots root elements to descend into\n     @return matching elements, empty if not\n     */\n    public static Elements select(String query, Iterable<Element> roots);\n    private Elements findElements();\n    private Elements select();\n    /**\n     Find elements matching selector.\n     @param query CSS selector\n     @param root root element to descend into\n     @return matching elements, empty if not\n     */\n    public static Elements select(String query, Element root);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void notAll() {\n        Document doc = Jsoup.parse(\"<p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.body().select(\":not(p)\"); // should just be the span\n        assertEquals(2, el1.size());\n        assertEquals(\"body\", el1.first().tagName());\n        assertEquals(\"span\", el1.last().tagName());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n CSS-like element selector, that finds elements matching a query.\n\n <h2>Selector syntax</h2>\n A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n elements, attributes, and attribute values).\n <p/>\n The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n is equivalent).\n\n <table>\n  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em>. See also {@link Elements#not(String)}</td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n  </table>\n\n @see Element#select(String)\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Selector {\n    private final Element root;\n    private final LinkedHashSet<Element> elements; // LHS for unique and ordered elements\n    private final String query;\n    private final TokenQueue tq;\n    private Elements select();\n    private void combinator(char combinator);\n    /**\n     Find elements matching selector.\n     @param query CSS selector\n     @param root root element to descend into\n     @return matching elements, empty if not\n     */\n    public static Elements select(String query, Element root);\n    /**\n     Find elements matching selector.\n     @param query CSS selector\n     @param roots root elements to descend into\n     @return matching elements, empty if not\n     */\n    public static Elements select(String query, Iterable<Element> roots);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n CSS-like element selector, that finds elements matching a query.\n\n <h2>Selector syntax</h2>\n A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n elements, attributes, and attribute values).\n <p/>\n The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n is equivalent).\n\n <table>\n  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em>. See also {@link Elements#not(String)}</td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n  </table>\n\n @see Element#select(String)\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Selector {\n    private final Element root;\n    private final LinkedHashSet<Element> elements; // LHS for unique and ordered elements\n    private final String query;\n    private final TokenQueue tq;\n    private Elements select();\n    private void combinator(char combinator);\n    /**\n     Find elements matching selector.\n     @param query CSS selector\n     @param root root element to descend into\n     @return matching elements, empty if not\n     */\n    public static Elements select(String query, Element root);\n    /**\n     Find elements matching selector.\n     @param query CSS selector\n     @param roots root elements to descend into\n     @return matching elements, empty if not\n     */\n    public static Elements select(String query, Iterable<Element> roots);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testByAttributeRegexCombined() {\n        Document doc = Jsoup.parse(\"<div><table class=x><td>Hello</td></table></div>\");\n        Elements els = doc.select(\"div table[class~=x|y]\");\n        assertEquals(1, els.size());\n        assertEquals(\"Hello\", els.text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic abstract class Node implements Cloneable {\n    /**\n     * Test if this element has an attribute.\n     * @param attributeKey The attribute key to check.\n     * @return true if the attribute exists, false if not.\n     */\n    public boolean hasAttr(String attributeKey);\n    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic abstract class Node implements Cloneable {\n    /**\n     * Test if this element has an attribute.\n     * @param attributeKey The attribute key to check.\n     * @return true if the attribute exists, false if not.\n     */\n    public boolean hasAttr(String attributeKey);\n    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesAbsPrefixOnHasAttr() {\n        // 1: no abs url; 2: has abs url\n        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='http://jsoup.org/'>Two</a>\");\n        Element one = doc.select(\"#1\").first();\n        Element two = doc.select(\"#2\").first();\n\n        assertFalse(one.hasAttr(\"abs:href\"));\n        assertTrue(one.hasAttr(\"href\"));\n        assertEquals(\"\", one.absUrl(\"href\"));\n\n        assertTrue(two.hasAttr(\"abs:href\"));\n        assertTrue(two.hasAttr(\"href\"));\n        assertEquals(\"http://jsoup.org/\", two.absUrl(\"href\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * States and transition activations for the Tokeniser.\n */\n}\n/**\n * Readers the input stream into tokens.\n */\nclass Tokeniser {\n    private CharacterReader reader; // html input\n    private boolean trackErrors = true;\n    private List<ParseError> errors = new ArrayList<ParseError>(); // errors found while tokenising\n    private TokeniserState state = TokeniserState.Data; // current tokenisation state\n    private Token emitPending; // the token we are about to emit on next read\n    private boolean isEmitPending = false;\n    private StringBuilder charBuffer = new StringBuilder(); // buffers characters to output as one token\n    private Token.StartTag lastStartTag; // the last start tag emitted, to test appropriate end tag\n    private boolean selfClosingFlagAcknowledged = true;\n    boolean isAppropriateEndTagToken();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * States and transition activations for the Tokeniser.\n */\n}\n/**\n * Readers the input stream into tokens.\n */\nclass Tokeniser {\n    private CharacterReader reader; // html input\n    private boolean trackErrors = true;\n    private List<ParseError> errors = new ArrayList<ParseError>(); // errors found while tokenising\n    private TokeniserState state = TokeniserState.Data; // current tokenisation state\n    private Token emitPending; // the token we are about to emit on next read\n    private boolean isEmitPending = false;\n    private StringBuilder charBuffer = new StringBuilder(); // buffers characters to output as one token\n    private Token.StartTag lastStartTag; // the last start tag emitted, to test appropriate end tag\n    private boolean selfClosingFlagAcknowledged = true;\n    boolean isAppropriateEndTagToken();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void parsesUnterminatedTextarea() {\n        // don't parse right to end, but break on <p>\n        Document doc = Jsoup.parse(\"<body><p><textarea>one<p>two\");\n        Element t = doc.select(\"textarea\").first();\n        assertEquals(\"one\", t.text());\n        assertEquals(\"two\", doc.select(\"p\").get(1).text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesDataOnlyTags() {\n        String t = \"<style>font-family: bold</style>\";\n        List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\");\n        assertEquals(\"font-family: bold\", tels.get(0).data());\n        assertEquals(\"\", tels.get(0).text());\n\n        String s = \"<p>Hello</p><script>obj.insert('<a rel=\\\"none\\\" />');\\ni++;</script><p>There</p>\";\n        Document doc = Jsoup.parse(s);\n        assertEquals(\"Hello There\", doc.text());\n        assertEquals(\"obj.insert('<a rel=\\\"none\\\" />');\\ni++;\", doc.data());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A {@code <!DOCTPYE>} node.\n */\npublic class DocumentType extends Node {\n    @Override\n    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);\n    @Override\n    public String nodeName();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A {@code <!DOCTPYE>} node.\n */\npublic class DocumentType extends Node {\n    @Override\n    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);\n    @Override\n    public String nodeName();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void outerHtmlGeneration() {\n        DocumentType html5 = new DocumentType(\"html\", \"\", \"\", \"\");\n        assertEquals(\"<!DOCTYPE html>\", html5.outerHtml());\n\n        DocumentType publicDocType = new DocumentType(\"html\", \"-//IETF//DTD HTML//\", \"\", \"\");\n        assertEquals(\"<!DOCTYPE html PUBLIC \\\"-//IETF//DTD HTML//\\\">\", publicDocType.outerHtml());\n\n        DocumentType systemDocType = new DocumentType(\"html\", \"\", \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\", \"\");\n        assertEquals(\"<!DOCTYPE html \\\"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\\\">\", systemDocType.outerHtml());\n\n        DocumentType combo = new DocumentType(\"notHtml\", \"--public\", \"--system\", \"\");\n        assertEquals(\"<!DOCTYPE notHtml PUBLIC \\\"--public\\\" \\\"--system\\\">\", combo.outerHtml());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handles0CharacterAsText() {\n        Document doc = Jsoup.parse(\"0<p>0</p>\");\n        assertEquals(\"0\\n<p>0</p>\", doc.body().html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n CharacterReader cosumes tokens off a string. To replace the old TokenQueue.\n */\nclass CharacterReader {\n    private final String input;\n    private final int length;\n    private int pos = 0;\n    private int mark = 0;\n    String consumeTo(char c);\n    String consumeTo(String seq);\n    int pos();\n    String consumeToAny(char... seq);\n    String consumeToEnd();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n CharacterReader cosumes tokens off a string. To replace the old TokenQueue.\n */\nclass CharacterReader {\n    private final String input;\n    private final int length;\n    private int pos = 0;\n    private int mark = 0;\n    String consumeTo(char c);\n    String consumeTo(String seq);\n    int pos();\n    String consumeToAny(char... seq);\n    String consumeToEnd();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handleCarriageReturnAsLineFeed() {\n        String in = \"one \\r two \\r\\n three\";\n        CharacterReader r = new CharacterReader(in);\n\n        String first = r.consumeTo('\\n');\n        assertEquals(\"one \", first);\n        assertEquals(\"\\n two \\n three\", r.consumeToEnd());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/*\n    Thank you to Ryan Grove (wonko.com) for the Ruby HTML cleaner http://github.com/rgrove/sanitize/, which inspired\n    this whitelist configuration, and the initial defaults.\n */\n/**\n Whitelists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed.\n <p/>\n Start with one of the defaults:\n <ul>\n <li>{@link #none}\n <li>{@link #simpleText}\n <li>{@link #basic}\n <li>{@link #basicWithImages}\n <li>{@link #relaxed}\n </ul>\n <p/>\n If you need to allow more through (please be careful!), tweak a base whitelist with:\n <ul>\n <li>{@link #addTags}\n <li>{@link #addAttributes}\n <li>{@link #addEnforcedAttribute}\n <li>{@link #addProtocols}\n </ul>\n <p/>\n The cleaner and these whitelists assume that you want to clean a <code>body</code> fragment of HTML (to add user\n supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the\n document HTML around the cleaned body HTML, or create a whitelist that allows <code>html</code> and <code>head</code>\n elements as appropriate.\n <p/>\n If you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to\n XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See \n http://ha.ckers.org/xss.html for some XSS attack examples.\n\n @author Jonathan Hedley\n */\npublic class Whitelist {\n    private Set<TagName> tagNames; // tags allowed, lower case. e.g. [p, br, span]\n    private Map<TagName, Set<AttributeKey>> attributes; // tag -> attribute[]. allowed attributes [href] for a tag.\n    private Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; // always set these attribute values\n    private Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols; // allowed URL protocols for attributes\n    private boolean preserveRelativeLinks; // option to preserve relative links\n    /**\n     Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to\n     URLs with the defined protocol.\n     <p/>\n     E.g.: <code>addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\")</code>\n\n     @param tag       Tag the URL protocol is for\n     @param key       Attribute key\n     @param protocols List of valid protocols\n     @return this, for chaining\n     */\n    public Whitelist addProtocols(String tag, String key, String... protocols);\n    /**\n     This whitelist allows the same text tags as {@link #basic}, and also allows <code>img</code> tags, with appropriate\n     attributes, with <code>src</code> pointing to <code>http</code> or <code>https</code>.\n\n     @return whitelist\n     */\n    public static Whitelist basicWithImages();\n    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/*\n    Thank you to Ryan Grove (wonko.com) for the Ruby HTML cleaner http://github.com/rgrove/sanitize/, which inspired\n    this whitelist configuration, and the initial defaults.\n */\n/**\n Whitelists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed.\n <p/>\n Start with one of the defaults:\n <ul>\n <li>{@link #none}\n <li>{@link #simpleText}\n <li>{@link #basic}\n <li>{@link #basicWithImages}\n <li>{@link #relaxed}\n </ul>\n <p/>\n If you need to allow more through (please be careful!), tweak a base whitelist with:\n <ul>\n <li>{@link #addTags}\n <li>{@link #addAttributes}\n <li>{@link #addEnforcedAttribute}\n <li>{@link #addProtocols}\n </ul>\n <p/>\n The cleaner and these whitelists assume that you want to clean a <code>body</code> fragment of HTML (to add user\n supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the\n document HTML around the cleaned body HTML, or create a whitelist that allows <code>html</code> and <code>head</code>\n elements as appropriate.\n <p/>\n If you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to\n XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See \n http://ha.ckers.org/xss.html for some XSS attack examples.\n\n @author Jonathan Hedley\n */\npublic class Whitelist {\n    private Set<TagName> tagNames; // tags allowed, lower case. e.g. [p, br, span]\n    private Map<TagName, Set<AttributeKey>> attributes; // tag -> attribute[]. allowed attributes [href] for a tag.\n    private Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; // always set these attribute values\n    private Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols; // allowed URL protocols for attributes\n    private boolean preserveRelativeLinks; // option to preserve relative links\n    /**\n     Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to\n     URLs with the defined protocol.\n     <p/>\n     E.g.: <code>addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\")</code>\n\n     @param tag       Tag the URL protocol is for\n     @param key       Attribute key\n     @param protocols List of valid protocols\n     @return this, for chaining\n     */\n    public Whitelist addProtocols(String tag, String key, String... protocols);\n    /**\n     This whitelist allows the same text tags as {@link #basic}, and also allows <code>img</code> tags, with appropriate\n     attributes, with <code>src</code> pointing to <code>http</code> or <code>https</code>.\n\n     @return whitelist\n     */\n    public static Whitelist basicWithImages();\n    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesCustomProtocols() {\n        String html = \"<img src='cid:12345' /> <img src='data:gzzt' />\";\n        String dropped = Jsoup.clean(html, Whitelist.basicWithImages());\n        assertEquals(\"<img /> \\n<img />\", dropped);\n\n        String preserved = Jsoup.clean(html, Whitelist.basicWithImages().addProtocols(\"img\", \"src\", \"cid\", \"data\"));\n        assertEquals(\"<img src=\\\"cid:12345\\\" /> \\n<img src=\\\"data:gzzt\\\" />\", preserved);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Parser {\n    private static final String SQ = \"'\";\n    private static final String DQ = \"\\\"\";\n    private static final Tag htmlTag = Tag.valueOf(\"html\");\n    private static final Tag headTag = Tag.valueOf(\"head\");\n    private static final Tag bodyTag = Tag.valueOf(\"body\");\n    private static final Tag titleTag = Tag.valueOf(\"title\");\n    private static final Tag textareaTag = Tag.valueOf(\"textarea\");\n    private final LinkedList<Element> stack;\n    private final TokenQueue tq;\n    private final Document doc;\n    private String baseUri;\n    /**\n     Parse HTML into a Document.\n     @param html HTML to parse\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return parsed Document\n     */\n    public static Document parse(String html, String baseUri);\n    private Document parse();\n    private void parseStartTag();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Parser {\n    private static final String SQ = \"'\";\n    private static final String DQ = \"\\\"\";\n    private static final Tag htmlTag = Tag.valueOf(\"html\");\n    private static final Tag headTag = Tag.valueOf(\"head\");\n    private static final Tag bodyTag = Tag.valueOf(\"body\");\n    private static final Tag titleTag = Tag.valueOf(\"title\");\n    private static final Tag textareaTag = Tag.valueOf(\"textarea\");\n    private final LinkedList<Element> stack;\n    private final TokenQueue tq;\n    private final Document doc;\n    private String baseUri;\n    /**\n     Parse HTML into a Document.\n     @param html HTML to parse\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return parsed Document\n     */\n    public static Document parse(String html, String baseUri);\n    private Document parse();\n    private void parseStartTag();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesTextAfterData() {\n        String h = \"<html><body>pre <script>inner</script> aft</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head></head><body>pre <script>inner</script> aft</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void discardsSpuriousByteOrderMark() {\n        String html = \"\\uFEFF<html><head><title>One</title></head><body>Two</body></html>\";\n        ByteBuffer buffer = Charset.forName(\"UTF-8\").encode(html);\n        Document doc = DataUtil.parseByteData(buffer, \"UTF-8\", \"http://foo.com/\", Parser.htmlParser());\n        assertEquals(\"One\", doc.head().text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Parses a CSS selector into an Evaluator tree.\n */\nclass QueryParser {\n    private TokenQueue tq;\n    private String query;\n    private List<Evaluator> evals = new ArrayList<Evaluator>();\n    private void combinator(char combinator);\n    /**\n     * Parse a CSS query into an Evaluator.\n     * @param query CSS query\n     * @return Evaluator\n     */\n    public static Evaluator parse(String query);\n    /**\n     * Parse the query\n     * @return Evaluator\n     */\n    Evaluator parse();\n}\n/**\n * Base combining (and, or) evaluator.\n */\nabstract class CombiningEvaluator extends Evaluator {\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Parses a CSS selector into an Evaluator tree.\n */\nclass QueryParser {\n    private TokenQueue tq;\n    private String query;\n    private List<Evaluator> evals = new ArrayList<Evaluator>();\n    private void combinator(char combinator);\n    /**\n     * Parse a CSS query into an Evaluator.\n     * @param query CSS query\n     * @return Evaluator\n     */\n    public static Evaluator parse(String query);\n    /**\n     * Parse the query\n     * @return Evaluator\n     */\n    Evaluator parse();\n}\n/**\n * Base combining (and, or) evaluator.\n */\nabstract class CombiningEvaluator extends Evaluator {\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesCommasInSelector() {\n        Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n\n        Elements ps = doc.select(\"[name=1,2]\");\n        assertEquals(1, ps.size());\n\n        Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n        assertEquals(2, containers.size());\n        assertEquals(\"div\", containers.get(0).tagName());\n        assertEquals(\"li\", containers.get(1).tagName());\n        assertEquals(\"123\", containers.get(1).text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n A list of {@link Element Elements}, with methods that act on every element in the list.\n <p/>\n To get an Elements object, use the {@link Element#select(String)} method.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Elements implements List<Element>, Cloneable {\n    private List<Element> contents;\n    /**\n     * Get the combined text of all the matched elements.\n     * <p>\n     * Note that it is possible to get repeats if the matched elements contain both parent elements and their own\n     * children, as the Element.text() method returns the combined text of a parent and all its children.\n     * @return string of all text: unescaped and no HTML.\n     * @see Element#text()\n     */\n    public String text();\n    @Override\n\tpublic Elements clone();\n    /**\n     * Get the combined outer HTML of all matched elements.\n     * @return string of all element's outer HTML.\n     * @see #text()\n     * @see #html()\n     */\n    public String outerHtml();\n    public int size() return contents.size();};\n    public Element get(int index) return contents.get(index);};\n    /**\n     * Find matching elements within this element list.\n     * @param query A {@link Selector} query\n     * @return the filtered list of elements, or an empty list if none match.\n     */\n    public Elements select(String query);\n}\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    private Set<String> classNames;\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text);\n    /**\n     * Wrap the supplied HTML around this element.\n     *\n     * @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitrarily deep.\n     * @return this element, for chaining.\n     */\n    @Override\n    public Element wrap(String html);\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling();\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling();\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String cssQuery);\n    private void text(StringBuilder accum);\n    /**\n     * Gets the combined text of this element and all its children.\n     * <p>\n     * For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n     *\n     * @return unencoded text, or empty string if none.\n     * @see #ownText()\n     * @see #textNodes()\n     */\n    public String text();\n    /**\n     * Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling\n     * of itself, so will not be included in the returned list.\n     * @return sibling elements\n     */\n    public Elements siblingElements();\n}\n/**\n The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic abstract class Node implements Cloneable {\n    private void reindexChildren();\n    /**\n     Get this node's previous sibling.\n     @return the previous sibling, or null if this is the first sibling\n     */\n    public Node previousSibling();\n    /**\n     Get the outer HTML of this node.\n     @return HTML\n     */\n    public String outerHtml();\n    /**\n     Get this node's next sibling.\n     @return next sibling, or null if this is the last sibling\n     */\n    public Node nextSibling();\n    protected void outerHtml(StringBuilder accum);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n A list of {@link Element Elements}, with methods that act on every element in the list.\n <p/>\n To get an Elements object, use the {@link Element#select(String)} method.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Elements implements List<Element>, Cloneable {\n    private List<Element> contents;\n    /**\n     * Get the combined text of all the matched elements.\n     * <p>\n     * Note that it is possible to get repeats if the matched elements contain both parent elements and their own\n     * children, as the Element.text() method returns the combined text of a parent and all its children.\n     * @return string of all text: unescaped and no HTML.\n     * @see Element#text()\n     */\n    public String text();\n    @Override\n\tpublic Elements clone();\n    /**\n     * Get the combined outer HTML of all matched elements.\n     * @return string of all element's outer HTML.\n     * @see #text()\n     * @see #html()\n     */\n    public String outerHtml();\n    public int size() return contents.size();};\n    public Element get(int index) return contents.get(index);};\n    /**\n     * Find matching elements within this element list.\n     * @param query A {@link Selector} query\n     * @return the filtered list of elements, or an empty list if none match.\n     */\n    public Elements select(String query);\n}\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    private Set<String> classNames;\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text);\n    /**\n     * Wrap the supplied HTML around this element.\n     *\n     * @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitrarily deep.\n     * @return this element, for chaining.\n     */\n    @Override\n    public Element wrap(String html);\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling();\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling();\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String cssQuery);\n    private void text(StringBuilder accum);\n    /**\n     * Gets the combined text of this element and all its children.\n     * <p>\n     * For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n     *\n     * @return unencoded text, or empty string if none.\n     * @see #ownText()\n     * @see #textNodes()\n     */\n    public String text();\n    /**\n     * Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling\n     * of itself, so will not be included in the returned list.\n     * @return sibling elements\n     */\n    public Elements siblingElements();\n}\n/**\n The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic abstract class Node implements Cloneable {\n    private void reindexChildren();\n    /**\n     Get this node's previous sibling.\n     @return the previous sibling, or null if this is the first sibling\n     */\n    public Node previousSibling();\n    /**\n     Get the outer HTML of this node.\n     @return HTML\n     */\n    public String outerHtml();\n    /**\n     Get this node's next sibling.\n     @return next sibling, or null if this is the last sibling\n     */\n    public Node nextSibling();\n    protected void outerHtml(StringBuilder accum);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void elementIsNotASiblingOfItself() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        assertEquals(\"Two\", p2.text());\n        Elements els = p2.siblingElements();\n        assertEquals(2, els.size());\n        assertEquals(\"<p>One</p>\", els.get(0).outerHtml());\n        assertEquals(\"<p>Three</p>\", els.get(1).outerHtml());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n CharacterReader cosumes tokens off a string. To replace the old TokenQueue.\n */\nclass CharacterReader {\n    private final String input;\n    private final int length;\n    private int pos = 0;\n    private int mark = 0;\n    String consumeLetterSequence();\n}\n/**\n * Readers the input stream into tokens.\n */\nclass Tokeniser {\n    private CharacterReader reader; // html input\n    private ParseErrorList errors; // errors found while tokenising\n    private TokeniserState state = TokeniserState.Data; // current tokenisation state\n    private Token emitPending; // the token we are about to emit on next read\n    private boolean isEmitPending = false;\n    private StringBuilder charBuffer = new StringBuilder(); // buffers characters to output as one token\n    private Token.StartTag lastStartTag; // the last start tag emitted, to test appropriate end tag\n    private boolean selfClosingFlagAcknowledged = true;\n    Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n CharacterReader cosumes tokens off a string. To replace the old TokenQueue.\n */\nclass CharacterReader {\n    private final String input;\n    private final int length;\n    private int pos = 0;\n    private int mark = 0;\n    String consumeLetterSequence();\n}\n/**\n * Readers the input stream into tokens.\n */\nclass Tokeniser {\n    private CharacterReader reader; // html input\n    private ParseErrorList errors; // errors found while tokenising\n    private TokeniserState state = TokeniserState.Data; // current tokenisation state\n    private Token emitPending; // the token we are about to emit on next read\n    private boolean isEmitPending = false;\n    private StringBuilder charBuffer = new StringBuilder(); // buffers characters to output as one token\n    private Token.StartTag lastStartTag; // the last start tag emitted, to test appropriate end tag\n    private boolean selfClosingFlagAcknowledged = true;\n    Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void letterDigitEntities() {\n        String html = \"<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>\";\n        Document doc = Jsoup.parse(html);\n        Element p = doc.select(\"p\").first();\n        assertEquals(\"&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;\", p.html());\n        assertEquals(\"\u00b9\u00b2\u00b3\u00bc\u00bd\u00be\", p.text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * States and transition activations for the Tokeniser.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * States and transition activations for the Tokeniser.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesQuotesInCommentsInScripts() {\n        String html = \"<script>\\n\" +\n                \"  <!--\\n\" +\n                \"    document.write('</scr' + 'ipt>');\\n\" +\n                \"  // -->\\n\" +\n                \"</script>\";\n        Document node = Jsoup.parseBodyFragment(html);\n        assertEquals(\"<script>\\n\" + \"  <!--\\n\" + \"    document.write('</scr' + 'ipt>');\\n\" + \"  // -->\\n\" + \"</script>\", node.body().html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML Tag capabilities.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Tag {\n    private static final Map<String, Tag> tags = new HashMap<String, Tag>(); // map of known tags\n    private String tagName;\n    private boolean isBlock = true; // block or inline\n    private boolean formatAsBlock = true; // should be formatted as a block\n    private boolean canContainBlock = true; // Can this tag hold block level tags?\n    private boolean canContainInline = true; // only pcdata if not\n    private boolean empty = false; // can hold nothing; e.g. img\n    private boolean selfClosing = false; // can self close (<foo />). used for unknown tags that self close, without forcing them as empty.\n    private boolean preserveWhitespace = false; // for pre, textarea, script etc\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML Tag capabilities.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Tag {\n    private static final Map<String, Tag> tags = new HashMap<String, Tag>(); // map of known tags\n    private String tagName;\n    private boolean isBlock = true; // block or inline\n    private boolean formatAsBlock = true; // should be formatted as a block\n    private boolean canContainBlock = true; // Can this tag hold block level tags?\n    private boolean canContainInline = true; // only pcdata if not\n    private boolean empty = false; // can hold nothing; e.g. img\n    private boolean selfClosing = false; // can self close (<foo />). used for unknown tags that self close, without forcing them as empty.\n    private boolean preserveWhitespace = false; // for pre, textarea, script etc\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void preservesSpaceInTextArea() {\n        // preserve because the tag is marked as preserve white space\n        Document doc = Jsoup.parse(\"<textarea>\\n\\tOne\\n\\tTwo\\n\\tThree\\n</textarea>\");\n        String expect = \"One\\n\\tTwo\\n\\tThree\"; // the leading and trailing spaces are dropped as a convenience to authors\n        Element el = doc.select(\"textarea\").first();\n        assertEquals(expect, el.text());\n        assertEquals(expect, el.val());\n        assertEquals(expect, el.html());\n        assertEquals(\"<textarea>\\n\\t\" + expect + \"\\n</textarea>\", el.outerHtml()); // but preserved in round-trip html\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n that you are expecting; no junk, and no cross-site scripting attacks!\n <p/>\n The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain\n HTML that is allowed by the whitelist.\n <p/>\n It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the\n canned white-lists only allow body contained tags.\n <p/>\n Rather than interacting directly with a Cleaner object, generally see the {@code clean} methods in {@link org.jsoup.Jsoup}.\n */\npublic class Cleaner {\n    private Whitelist whitelist;\n    /**\n     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.\n     @param dirtyDocument Untrusted base document to clean.\n     @return cleaned document.\n     */\n    public Document clean(Document dirtyDocument);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n that you are expecting; no junk, and no cross-site scripting attacks!\n <p/>\n The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain\n HTML that is allowed by the whitelist.\n <p/>\n It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the\n canned white-lists only allow body contained tags.\n <p/>\n Rather than interacting directly with a Cleaner object, generally see the {@code clean} methods in {@link org.jsoup.Jsoup}.\n */\npublic class Cleaner {\n    private Whitelist whitelist;\n    /**\n     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.\n     @param dirtyDocument Untrusted base document to clean.\n     @return cleaned document.\n     */\n    public Document clean(Document dirtyDocument);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesFramesets() {\n        String dirty = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\" /><frame src=\\\"foo\\\" /></frameset></html>\";\n        String clean = Jsoup.clean(dirty, Whitelist.basic());\n        assertEquals(\"\", clean); // nothing good can come out of that\n\n        Document dirtyDoc = Jsoup.parse(dirty);\n        Document cleanDoc = new Cleaner(Whitelist.basic()).clean(dirtyDoc);\n        assertFalse(cleanDoc == null);\n        assertEquals(0, cleanDoc.body().childNodes().size());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n     */\n    static String getCharsetFromContentType(String contentType);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n     */\n    static String getCharsetFromContentType(String contentType);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testCharset() {\n        assertEquals(\"utf-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=utf-8 \"));\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset=UTF-8\"));\n        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1\"));\n        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html\"));\n        assertEquals(null, DataUtil.getCharsetFromContentType(null));\n        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html;charset=Unknown\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\npublic class Entities {\n    static String unescape(String string);\n    /**\n     * Check if the input is a known named entity\n     * @param name the possible entity name (e.g. \"lt\" or \"amp\")\n     * @return true if a known named entity\n     */\n    public static boolean isNamedEntity(String name);\n    /**\n     * Unescape the input string.\n     * @param string\n     * @param strict if \"strict\" (that is, requires trailing ';' char, otherwise that's optional)\n     * @return\n     */\n    static String unescape(String string, boolean strict);\n}\n/**\n * Parses HTML into a {@link org.jsoup.nodes.Document}. Generally best to use one of the  more convenient parse methods\n * in {@link org.jsoup.Jsoup}.\n */\npublic class Parser {\n    private static final int DEFAULT_MAX_ERRORS = 0; // by default, error tracking is disabled.\n    private TreeBuilder treeBuilder;\n    private int maxErrors = DEFAULT_MAX_ERRORS;\n    private ParseErrorList errors;\n    /**\n     * Parse a fragment of HTML into the {@code body} of a Document.\n     *\n     * @param bodyHtml fragment of HTML\n     * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     *\n     * @return Document, with empty head, and HTML parsed into body\n     */\n    public static Document parseBodyFragment(String bodyHtml, String baseUri);\n}\n/**\n * Readers the input stream into tokens.\n */\nclass Tokeniser {\n    private CharacterReader reader; // html input\n    private ParseErrorList errors; // errors found while tokenising\n    private TokeniserState state = TokeniserState.Data; // current tokenisation state\n    private Token emitPending; // the token we are about to emit on next read\n    private boolean isEmitPending = false;\n    private StringBuilder charBuffer = new StringBuilder(); // buffers characters to output as one token\n    private Token.StartTag lastStartTag; // the last start tag emitted, to test appropriate end tag\n    private boolean selfClosingFlagAcknowledged = true;\n    Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\npublic class Entities {\n    static String unescape(String string);\n    /**\n     * Check if the input is a known named entity\n     * @param name the possible entity name (e.g. \"lt\" or \"amp\")\n     * @return true if a known named entity\n     */\n    public static boolean isNamedEntity(String name);\n    /**\n     * Unescape the input string.\n     * @param string\n     * @param strict if \"strict\" (that is, requires trailing ';' char, otherwise that's optional)\n     * @return\n     */\n    static String unescape(String string, boolean strict);\n}\n/**\n * Parses HTML into a {@link org.jsoup.nodes.Document}. Generally best to use one of the  more convenient parse methods\n * in {@link org.jsoup.Jsoup}.\n */\npublic class Parser {\n    private static final int DEFAULT_MAX_ERRORS = 0; // by default, error tracking is disabled.\n    private TreeBuilder treeBuilder;\n    private int maxErrors = DEFAULT_MAX_ERRORS;\n    private ParseErrorList errors;\n    /**\n     * Parse a fragment of HTML into the {@code body} of a Document.\n     *\n     * @param bodyHtml fragment of HTML\n     * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     *\n     * @return Document, with empty head, and HTML parsed into body\n     */\n    public static Document parseBodyFragment(String bodyHtml, String baseUri);\n}\n/**\n * Readers the input stream into tokens.\n */\nclass Tokeniser {\n    private CharacterReader reader; // html input\n    private ParseErrorList errors; // errors found while tokenising\n    private TokeniserState state = TokeniserState.Data; // current tokenisation state\n    private Token emitPending; // the token we are about to emit on next read\n    private boolean isEmitPending = false;\n    private StringBuilder charBuffer = new StringBuilder(); // buffers characters to output as one token\n    private Token.StartTag lastStartTag; // the last start tag emitted, to test appropriate end tag\n    private boolean selfClosingFlagAcknowledged = true;\n    Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void unescape() {\n        String text = \"Hello &amp;&LT&gt; &reg &angst; &angst &#960; &#960 &#x65B0; there &! &frac34; &copy; &COPY;\";\n        assertEquals(\"Hello &<> \u00ae \u00c5 &angst \u03c0 \u03c0 \u65b0 there &! \u00be \u00a9 \u00a9\", Entities.unescape(text));\n\n        assertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n A HTML Document.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Document extends Element {\n    private OutputSettings outputSettings = new OutputSettings();\n    private QuirksMode quirksMode = QuirksMode.noQuirks;\n    /**\n     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.\n     @param text unencoded text\n     @return this document\n     */\n    @Override\n    public Element text(String text);\n    /**\n     Get the string contents of the document's {@code title} element.\n     @return Trimmed title, or empty string if none set.\n     */\n    public String title();\n    /**\n     Create a valid, empty shell of a document, suitable for adding more elements to.\n     @param baseUri baseUri of document\n     @return document with html, head, and body elements.\n     */\n    static public Document createShell(String baseUri);\n    /**\n     Set the document's {@code title} element. Updates the existing element, or adds {@code title} to {@code head} if\n     not present\n     @param title string to set as title\n     */\n    public void title(String title);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n A HTML Document.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Document extends Element {\n    private OutputSettings outputSettings = new OutputSettings();\n    private QuirksMode quirksMode = QuirksMode.noQuirks;\n    /**\n     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.\n     @param text unencoded text\n     @return this document\n     */\n    @Override\n    public Element text(String text);\n    /**\n     Get the string contents of the document's {@code title} element.\n     @return Trimmed title, or empty string if none set.\n     */\n    public String title();\n    /**\n     Create a valid, empty shell of a document, suitable for adding more elements to.\n     @param baseUri baseUri of document\n     @return document with html, head, and body elements.\n     */\n    static public Document createShell(String baseUri);\n    /**\n     Set the document's {@code title} element. Updates the existing element, or adds {@code title} to {@code head} if\n     not present\n     @param title string to set as title\n     */\n    public void title(String title);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testTitles() {\n        Document noTitle = Jsoup.parse(\"<p>Hello</p>\");\n        Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\");\n        \n        assertEquals(\"\", noTitle.title());\n        noTitle.title(\"Hello\");\n        assertEquals(\"Hello\", noTitle.title());\n        assertEquals(\"Hello\", noTitle.select(\"title\").first().text());\n        \n        assertEquals(\"First\", withTitle.title());\n        withTitle.title(\"Hello\");\n        assertEquals(\"Hello\", withTitle.title());\n        assertEquals(\"Hello\", withTitle.select(\"title\").first().text());\n\n        Document normaliseTitle = Jsoup.parse(\"<title>   Hello\\nthere   \\n   now   \\n\");\n        assertEquals(\"Hello there now\", normaliseTitle.title());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private final Tag tag;\n    private Set<String> classNames;\n    /**\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String query);\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html();\n    /**\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     */\n    public Element wrap(String html);\n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html);\n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html);\n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html);\n    private void html(StringBuilder accum);\n}\n/**\n HTML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,\n but it should capture most of what we need to know to intelligently parse a doc.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Tag {\n    private static final Map<String, Tag> tags = new HashMap<String, Tag>();\n    private static final Tag defaultAncestor;\n    public String toString();\n    public String getName();\n    /**\n     Test if this tag, the prospective parent, can accept the proposed child.\n     @param child potential child tag.\n     @return true if this can contain child.\n     */\n    boolean canContain(Tag child);\n    Tag getImplicitParent();\n}\n/**\n Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Parser {\n    private static final String SQ = \"'\";\n    private static final String DQ = \"\\\"\";\n    private static final Tag htmlTag = Tag.valueOf(\"html\");\n    private static final Tag headTag = Tag.valueOf(\"head\");\n    private static final Tag bodyTag = Tag.valueOf(\"body\");\n    private static final Tag titleTag = Tag.valueOf(\"title\");\n    private static final Tag textareaTag = Tag.valueOf(\"textarea\");\n    private final LinkedList<Element> stack;\n    private final TokenQueue tq;\n    private final Document doc;\n    private String baseUri;\n    private boolean stackHasValidParent(Tag childTag);\n    private Element addChildToParent(Element child, boolean isEmptyElement);\n    /**\n     Parse a fragment of HTML into the {@code body} of a Document, with relaxed parsing enabled. Relaxed, in this\n     context, means that implicit tags are not automatically created when missing.\n     @param bodyHtml fragment of HTML\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return Document, with empty head, and HTML parsed into body\n     */\n\n    private Document parse();\n    /**\n     Parse a fragment of HTML into the {@code body} of a Document.\n     @param bodyHtml fragment of HTML\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return Document, with empty head, and HTML parsed into body\n     */\n    public static Document parseBodyFragment(String bodyHtml, String baseUri);\n    /**\n     Parse HTML into a Document.\n     @param html HTML to parse\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return parsed Document\n     */\n    public static Document parse(String html, String baseUri);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private final Tag tag;\n    private Set<String> classNames;\n    /**\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String query);\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html();\n    /**\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     */\n    public Element wrap(String html);\n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html);\n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html);\n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html);\n    private void html(StringBuilder accum);\n}\n/**\n HTML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,\n but it should capture most of what we need to know to intelligently parse a doc.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Tag {\n    private static final Map<String, Tag> tags = new HashMap<String, Tag>();\n    private static final Tag defaultAncestor;\n    public String toString();\n    public String getName();\n    /**\n     Test if this tag, the prospective parent, can accept the proposed child.\n     @param child potential child tag.\n     @return true if this can contain child.\n     */\n    boolean canContain(Tag child);\n    Tag getImplicitParent();\n}\n/**\n Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Parser {\n    private static final String SQ = \"'\";\n    private static final String DQ = \"\\\"\";\n    private static final Tag htmlTag = Tag.valueOf(\"html\");\n    private static final Tag headTag = Tag.valueOf(\"head\");\n    private static final Tag bodyTag = Tag.valueOf(\"body\");\n    private static final Tag titleTag = Tag.valueOf(\"title\");\n    private static final Tag textareaTag = Tag.valueOf(\"textarea\");\n    private final LinkedList<Element> stack;\n    private final TokenQueue tq;\n    private final Document doc;\n    private String baseUri;\n    private boolean stackHasValidParent(Tag childTag);\n    private Element addChildToParent(Element child, boolean isEmptyElement);\n    /**\n     Parse a fragment of HTML into the {@code body} of a Document, with relaxed parsing enabled. Relaxed, in this\n     context, means that implicit tags are not automatically created when missing.\n     @param bodyHtml fragment of HTML\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return Document, with empty head, and HTML parsed into body\n     */\n\n    private Document parse();\n    /**\n     Parse a fragment of HTML into the {@code body} of a Document.\n     @param bodyHtml fragment of HTML\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return Document, with empty head, and HTML parsed into body\n     */\n    public static Document parseBodyFragment(String bodyHtml, String baseUri);\n    /**\n     Parse HTML into a Document.\n     @param html HTML to parse\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return parsed Document\n     */\n    public static Document parse(String html, String baseUri);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testAppendRowToTable() {\n        Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n        Element table = doc.select(\"table\").first();\n        table.append(\"<tr><td>2</td></tr>\");\n\n        assertEquals(\"<table><tr><td>1</td></tr><tr><td>2</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n that you are expecting; no junk, and no cross-site scripting attacks!\n <p/>\n The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain\n HTML that is allowed by the whitelist.\n <p/>\n It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the\n canned white-lists only allow body contained tags.\n <p/>\n Rather than interacting directly with a Cleaner object, generally see the {@code clean} methods in {@link org.jsoup.Jsoup}.\n */\npublic class Cleaner {\n    private Whitelist whitelist;\n    /**\n     Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.\n     */\n    private int copySafeNodes(Element root, Element destination);\n    /**\n     Determines if the input document is valid, against the whitelist. It is considered valid if all the tags and attributes\n     in the input HTML are allowed by the whitelist.\n     <p/>\n     This method can be used as a validator for user input forms. An invalid document will still be cleaned successfully\n     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document\n     to ensure enforced attributes are set correctly, and that the output is tidied.\n     @param dirtyDocument document to test\n     @return true if no tags or attributes need to be removed; false if they do\n     */\n    public boolean isValid(Document dirtyDocument);\n    /**\n     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.\n     @param dirtyDocument Untrusted base document to clean.\n     @return cleaned document.\n     */\n    public Document clean(Document dirtyDocument);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n that you are expecting; no junk, and no cross-site scripting attacks!\n <p/>\n The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain\n HTML that is allowed by the whitelist.\n <p/>\n It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the\n canned white-lists only allow body contained tags.\n <p/>\n Rather than interacting directly with a Cleaner object, generally see the {@code clean} methods in {@link org.jsoup.Jsoup}.\n */\npublic class Cleaner {\n    private Whitelist whitelist;\n    /**\n     Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.\n     */\n    private int copySafeNodes(Element root, Element destination);\n    /**\n     Determines if the input document is valid, against the whitelist. It is considered valid if all the tags and attributes\n     in the input HTML are allowed by the whitelist.\n     <p/>\n     This method can be used as a validator for user input forms. An invalid document will still be cleaned successfully\n     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document\n     to ensure enforced attributes are set correctly, and that the output is tidied.\n     @param dirtyDocument document to test\n     @return true if no tags or attributes need to be removed; false if they do\n     */\n    public boolean isValid(Document dirtyDocument);\n    /**\n     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.\n     @param dirtyDocument Untrusted base document to clean.\n     @return cleaned document.\n     */\n    public Document clean(Document dirtyDocument);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testIsValid() {\n        String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\";\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        assertTrue(Jsoup.isValid(ok, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * @author Jonathan Hedley\n */\npublic class XmlTreeBuilder extends TreeBuilder {\n    void insert(Token.Comment commentToken);\n}\n/**\n * States and transition activations for the Tokeniser.\n */\n}\n/**\n * Parse tokens for the Tokeniser.\n */\nabstract class Token {\n    String tokenType();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * @author Jonathan Hedley\n */\npublic class XmlTreeBuilder extends TreeBuilder {\n    void insert(Token.Comment commentToken);\n}\n/**\n * States and transition activations for the Tokeniser.\n */\n}\n/**\n * Parse tokens for the Tokeniser.\n */\nabstract class Token {\n    String tokenType();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesXmlDeclarationAsDeclaration() {\n        String html = \"<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->\";\n        Document doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<?xml encoding='UTF-8' ?> <body> One </body> <!-- comment -->\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n        assertEquals(\"#declaration\", doc.childNode(0).nodeName());\n        assertEquals(\"#comment\", doc.childNode(2).nodeName());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    private Set<String> classNames;\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String cssQuery);\n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html);\n    @Override\n    public int hashCode();\n    private void html(StringBuilder accum);\n    public Set<String> classNames();\n    @Override\n    public Element clone();\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html();\n    public Element classNames(Set<String> classNames);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    private Set<String> classNames;\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String cssQuery);\n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html);\n    @Override\n    public int hashCode();\n    private void html(StringBuilder accum);\n    public Set<String> classNames();\n    @Override\n    public Element clone();\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html();\n    public Element classNames(Set<String> classNames);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testClonesClassnames() {\n        Document doc = Jsoup.parse(\"<div class='one two'></div>\");\n        Element div = doc.select(\"div\").first();\n        Set<String> classes = div.classNames();\n        assertEquals(2, classes.size());\n        assertTrue(classes.contains(\"one\"));\n        assertTrue(classes.contains(\"two\"));\n\n        Element copy = div.clone();\n        Set<String> copyClasses = copy.classNames();\n        assertEquals(2, copyClasses.size());\n        assertTrue(copyClasses.contains(\"one\"));\n        assertTrue(copyClasses.contains(\"two\"));\n        copyClasses.add(\"three\");\n        copyClasses.remove(\"one\");\n\n        assertTrue(classes.contains(\"one\"));\n        assertFalse(classes.contains(\"three\"));\n        assertFalse(copyClasses.contains(\"one\"));\n        assertTrue(copyClasses.contains(\"three\"));\n\n        assertEquals(\"\", div.html());\n        assertEquals(\"\", copy.html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\nclass HtmlTreeBuilder extends TreeBuilder {\n    private HtmlTreeBuilderState state; // the current state\n    private HtmlTreeBuilderState originalState; // original / marked state\n    private boolean baseUriSetFromDoc = false;\n    private Element headElement; // the current head element\n    private FormElement formElement; // the current form element\n    private Element contextElement; // fragment parse context -- could be null even if fragment parsing\n    private DescendableLinkedList<Element> formattingElements = new DescendableLinkedList<Element>(); // active (open) formatting elements\n    private List<Token.Character> pendingTableCharacters = new ArrayList<Token.Character>(); // chars in table to be shifted out\n    private boolean framesetOk = true; // if ok to go into frameset\n    private boolean fosterInserts = false; // if next inserts should be fostered\n    private boolean fragmentParsing = false; // if parsing a fragment of html\n    Element insert(Token.StartTag startTag);\n    @Override\n    Document parse(String input, String baseUri, ParseErrorList errors);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\nclass HtmlTreeBuilder extends TreeBuilder {\n    private HtmlTreeBuilderState state; // the current state\n    private HtmlTreeBuilderState originalState; // original / marked state\n    private boolean baseUriSetFromDoc = false;\n    private Element headElement; // the current head element\n    private FormElement formElement; // the current form element\n    private Element contextElement; // fragment parse context -- could be null even if fragment parsing\n    private DescendableLinkedList<Element> formattingElements = new DescendableLinkedList<Element>(); // active (open) formatting elements\n    private List<Token.Character> pendingTableCharacters = new ArrayList<Token.Character>(); // chars in table to be shifted out\n    private boolean framesetOk = true; // if ok to go into frameset\n    private boolean fosterInserts = false; // if next inserts should be fostered\n    private boolean fragmentParsing = false; // if parsing a fragment of html\n    Element insert(Token.StartTag startTag);\n    @Override\n    Document parse(String input, String baseUri, ParseErrorList errors);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesKnownEmptyBlocks() {\n        // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.\n        String h = \"<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<div id=\\\"1\\\"></div><script src=\\\"/foo\\\"></script><div id=\\\"2\\\"><img /><img /></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n CharacterReader consumes tokens off a string. To replace the old TokenQueue.\n */\nclass CharacterReader {\n    private final char[] input;\n    private final int length;\n    private int pos = 0;\n    private int mark = 0;\n    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq);\n    /**\n     * Returns the number of characters between the current position and the next instance of the input char\n     * @param c scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(char c);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n CharacterReader consumes tokens off a string. To replace the old TokenQueue.\n */\nclass CharacterReader {\n    private final char[] input;\n    private final int length;\n    private int pos = 0;\n    private int mark = 0;\n    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq);\n    /**\n     * Returns the number of characters between the current position and the next instance of the input char\n     * @param c scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(char c);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void nextIndexOfUnmatched() {\n        CharacterReader r = new CharacterReader(\"<[[one]]\");\n        assertEquals(-1, r.nextIndexOf(\"]]>\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesUnclosedAnchors() {\n        String h = \"<a href='http://example.com/'>Link<p>Error link</a>\";\n        Document doc = Jsoup.parse(h);\n        String want = \"<a href=\\\"http://example.com/\\\">Link</a>\\n<p><a href=\\\"http://example.com/\\\">Error link</a></p>\";\n        assertEquals(want, doc.body().html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser);\n    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n     */\n    static String getCharsetFromContentType(String contentType);\n    /**\n     * Loads a file to a Document.\n     * @param in file to load\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(File in, String charsetName, String baseUri) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser);\n    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n     */\n    static String getCharsetFromContentType(String contentType);\n    /**\n     * Loads a file to a Document.\n     * @param in file to load\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(File in, String charsetName, String baseUri) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void shouldCorrectCharsetForDuplicateCharsetString() {\n        assertEquals(\"iso-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=charset=iso-8859-1\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    private Set<String> classNames;\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html();\n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html);\n    private void html(StringBuilder accum);\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String cssQuery);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    private Set<String> classNames;\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html();\n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html);\n    private void html(StringBuilder accum);\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String cssQuery);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testNotPretty() {\n        Document doc = Jsoup.parse(\"<div>   \\n<p>Hello\\n there\\n</p></div>\");\n        doc.outputSettings().prettyPrint(false);\n        assertEquals(\"<html><head></head><body><div>   \\n<p>Hello\\n there\\n</p></div></body></html>\", doc.html());\n\n        Element div = doc.select(\"div\").first();\n        assertEquals(\"   \\n<p>Hello\\n there\\n</p>\", div.html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void convertsImageToImg() {\n        // image to img, unless in a svg. old html cruft.\n        String h = \"<body><image><svg><image /></svg></body>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<img />\\n<svg>\\n <image />\\n</svg>\", doc.body().html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void discardsSpuriousByteOrderMarkWhenNoCharsetSet() {\n        String html = \"\\uFEFF<html><head><title>One</title></head><body>Two</body></html>\";\n        ByteBuffer buffer = Charset.forName(\"UTF-8\").encode(html);\n        Document doc = DataUtil.parseByteData(buffer, null, \"http://foo.com/\", Parser.htmlParser());\n        assertEquals(\"One\", doc.head().text());\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HMTL entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n * <p/>\n * Draft implementation. Do not consume.\n */\npublic class Entities {\n    static String escape(String string, Document.OutputSettings out);\n    static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HMTL entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n * <p/>\n * Draft implementation. Do not consume.\n */\npublic class Entities {\n    static String escape(String string, Document.OutputSettings out);\n    static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void escape() {\n        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there\";\n        String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n        String escapedAsciiFull = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended);\n        String escapedUtf = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n\n        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#960; &#26032; there\", escapedAscii);\n        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#26032; there\", escapedAsciiFull);\n        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there\", escapedUtf);\n        // odd that it's defined as aring in base but angst in full\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A {@code <!DOCTYPE>} node.\n */\npublic class DocumentType extends Node {\n    @Override\n    public String nodeName();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A {@code <!DOCTYPE>} node.\n */\npublic class DocumentType extends Node {\n    @Override\n    public String nodeName();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void constructorValidationOkWithBlankName() {\n        DocumentType fail = new DocumentType(\"\",\"\", \"\", \"\");\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * </p>\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     * </p>\n     * \n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String cssQuery);\n    @Override\n    public int hashCode();\n    @Override\n    public boolean equals(Object o);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * </p>\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     * </p>\n     * \n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String cssQuery);\n    @Override\n    public int hashCode();\n    @Override\n    public boolean equals(Object o);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testHashAndEquals() {\n        String doc1 = \"<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>\" +\n                \"<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>\";\n\n        Document doc = Jsoup.parse(doc1);\n        Elements els = doc.select(\"p\");\n\n        /*\n        for (Element el : els) {\n            System.out.println(el.hashCode() + \" - \" + el.outerHtml());\n        }\n\n        0 1534787905 - <p class=\"one\">One</p>\n        1 1534787905 - <p class=\"one\">One</p>\n        2 1539683239 - <p class=\"one\">Two</p>\n        3 1535455211 - <p class=\"two\">One</p>\n        4 1534787905 - <p class=\"one\">One</p>\n        5 1534787905 - <p class=\"one\">One</p>\n        6 1539683239 - <p class=\"one\">Two</p>\n        7 1535455211 - <p class=\"two\">One</p>\n        */\n        assertEquals(8, els.size());\n        Element e0 = els.get(0);\n        Element e1 = els.get(1);\n        Element e2 = els.get(2);\n        Element e3 = els.get(3);\n        Element e4 = els.get(4);\n        Element e5 = els.get(5);\n        Element e6 = els.get(6);\n        Element e7 = els.get(7);\n\n        assertEquals(e0, e1);\n        assertEquals(e0, e4);\n        assertEquals(e0, e5);\n        assertFalse(e0.equals(e2));\n        assertFalse(e0.equals(e3));\n        assertFalse(e0.equals(e6));\n        assertFalse(e0.equals(e7));\n\n        assertEquals(e0.hashCode(), e1.hashCode());\n        assertEquals(e0.hashCode(), e4.hashCode());\n        assertEquals(e0.hashCode(), e5.hashCode());\n        assertFalse(e0.hashCode() == (e2.hashCode()));\n        assertFalse(e0.hashCode() == (e3).hashCode());\n        assertFalse(e0.hashCode() == (e6).hashCode());\n        assertFalse(e0.hashCode() == (e7).hashCode());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void createsFormData() {\n        String html = \"<form><input name='one' value='two'><select name='three'><option value='not'>\" +\n                \"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>\" +\n                \"<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>\" +\n                \"<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>\" +\n                \"<input name='ten' value='text' disabled>\" +\n                \"</form>\";\n        Document doc = Jsoup.parse(html);\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        List<Connection.KeyVal> data = form.formData();\n\n        assertEquals(6, data.size());\n        assertEquals(\"one=two\", data.get(0).toString());\n        assertEquals(\"three=four\", data.get(1).toString());\n        assertEquals(\"three=five\", data.get(2).toString());\n        assertEquals(\"six=seven\", data.get(3).toString());\n        assertEquals(\"seven=on\", data.get(4).toString()); // set\n        assertEquals(\"eight=on\", data.get(5).toString()); // default\n        // nine should not appear, not checked checkbox\n        // ten should not appear, disabled\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n    private static <E extends Element> Integer indexInList(Element search, List<E> elements);\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * </p>\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     * </p>\n     * \n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.\n     */\n    public Elements select(String cssQuery);\n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n    private static <E extends Element> Integer indexInList(Element search, List<E> elements);\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * </p>\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     * </p>\n     * \n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.\n     */\n    public Elements select(String cssQuery);\n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testElementSiblingIndexSameContent() {\n        Document doc = Jsoup.parse(\"<div><p>One</p>...<p>One</p>...<p>One</p>\");\n        Elements ps = doc.select(\"p\");\n        assertTrue(0 == ps.get(0).elementSiblingIndex());\n        assertTrue(1 == ps.get(1).elementSiblingIndex());\n        assertTrue(2 == ps.get(2).elementSiblingIndex());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * @author Jonathan Hedley\n */\nabstract class TreeBuilder {\n    private Token.StartTag start = new Token.StartTag(); // start tag to process\n    private Token.EndTag end  = new Token.EndTag();\n    protected abstract boolean process(Token token);\n\n    protected boolean processStartTag(String name);\n    Document parse(String input, String baseUri);\n    Document parse(String input, String baseUri, ParseErrorList errors);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * @author Jonathan Hedley\n */\nabstract class TreeBuilder {\n    private Token.StartTag start = new Token.StartTag(); // start tag to process\n    private Token.EndTag end  = new Token.EndTag();\n    protected abstract boolean process(Token token);\n\n    protected boolean processStartTag(String name);\n    Document parse(String input, String baseUri);\n    Document parse(String input, String baseUri, ParseErrorList errors);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testInvalidTableContents() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/table-invalid-elements.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        doc.outputSettings().prettyPrint(true);\n        String rendered = doc.toString();\n        int endOfEmail = rendered.indexOf(\"Comment\");\n        int guarantee = rendered.indexOf(\"Why am I here?\");\n        assertTrue(\"Comment not found\", endOfEmail > -1);\n        assertTrue(\"Search text not found\", guarantee > -1);\n        assertTrue(\"Search text did not come after comment\", guarantee > endOfEmail);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    void resetInsertionMode();\n    @Override\n    Document parse(String input, String baseUri, ParseErrorList errors);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    void resetInsertionMode();\n    @Override\n    Document parse(String input, String baseUri, ParseErrorList errors);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testReinsertionModeForThCelss() {\n        String body = \"<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>\";\n        Document doc = Jsoup.parse(body);\n        assertEquals(1, doc.body().children().size());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\npublic class Entities {\n    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\npublic class Entities {\n    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private Document createHtmlDocument(String charset) {\n        final Document doc = Document.createShell(\"\");\n        doc.head().appendElement(\"meta\").attr(\"charset\", charset);\n        doc.head().appendElement(\"meta\").attr(\"name\", \"charset\").attr(\"content\", charset);\n        \n        return doc;\n    }\n    private Document createXmlDocument(String version, String charset, boolean addDecl) {\n        final Document doc = new Document(\"\");\n        doc.appendElement(\"root\").text(\"node\");\n        doc.outputSettings().syntax(Syntax.xml);\n        \n        if( addDecl == true ) {\n            XmlDeclaration decl = new XmlDeclaration(\"xml\", \"\", false);\n            decl.attr(\"version\", version);\n            decl.attr(\"encoding\", charset);\n            doc.prependChild(decl);\n        }\n        \n        return doc;\n    }\n    public void testShiftJisRoundtrip() throws Exception {\n        String input =\n                \"<html>\"\n                        +   \"<head>\"\n                        +     \"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=Shift_JIS\\\" />\"\n                        +   \"</head>\"\n                        +   \"<body>\"\n                        +     \"before&nbsp;after\"\n                        +   \"</body>\"\n                        + \"</html>\";\n        InputStream is = new ByteArrayInputStream(input.getBytes(Charset.forName(\"ASCII\")));\n\n        Document doc = Jsoup.parse(is, null, \"http://example.com\");\n        doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);\n\n        String output = new String(doc.html().getBytes(doc.outputSettings().charset()), doc.outputSettings().charset());\n\n        assertFalse(\"Should not have contained a '?'.\", output.contains(\"?\"));\n        assertTrue(\"Should have contained a '&#xa0;' or a '&nbsp;'.\", output.contains(\"&#xa0;\") || output.contains(\"&nbsp;\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\npublic class Entities {\n    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\npublic class Entities {\n    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void escapesGtInXmlAttributesButNotInHtml() {\n        // https://github.com/jhy/jsoup/issues/528 - < is OK in HTML attribute values, but not in XML\n\n\n        String docHtml = \"<a title='<p>One</p>'>One</a>\";\n        Document doc = Jsoup.parse(docHtml);\n        Element element = doc.select(\"a\").first();\n\n        doc.outputSettings().escapeMode(base);\n        assertEquals(\"<a title=\\\"<p>One</p>\\\">One</a>\", element.outerHtml());\n\n        doc.outputSettings().escapeMode(xhtml);\n        assertEquals(\"<a title=\\\"&lt;p>One&lt;/p>\\\">One</a>\", element.outerHtml());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implementation of {@link Connection}.\n * @see org.jsoup.Jsoup#connect(String)\n */\npublic class HttpConnection implements Connection {\n    public static final String  CONTENT_ENCODING = \"Content-Encoding\";\n    private static final String CONTENT_TYPE = \"Content-Type\";\n    private static final String MULTIPART_FORM_DATA = \"multipart/form-data\";\n    private static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";\n    public Connection header(String name, String value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implementation of {@link Connection}.\n * @see org.jsoup.Jsoup#connect(String)\n */\npublic class HttpConnection implements Connection {\n    public static final String  CONTENT_ENCODING = \"Content-Encoding\";\n    private static final String CONTENT_TYPE = \"Content-Type\";\n    private static final String MULTIPART_FORM_DATA = \"multipart/form-data\";\n    private static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";\n    public Connection header(String name, String value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void sameHeadersCombineWithComma() {\n        Map<String, List<String>> headers = new HashMap<String, List<String>>();\n        List<String> values = new ArrayList<String>();\n        values.add(\"no-cache\");\n        values.add(\"no-store\");\n        headers.put(\"Cache-Control\", values);\n        HttpConnection.Response res = new HttpConnection.Response();\n        res.processResponseHeaders(headers);\n        assertEquals(\"no-cache, no-store\", res.header(\"Cache-Control\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic abstract class Node implements Cloneable {\n    private static final List<Node> EMPTY_NODES = Collections.emptyList();\n    /**\n     Get the outer HTML of this node.\n     @param accum accumulator to place HTML into\n     */\n    abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);\n\n    abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);\n\n    @Override\n    public String toString();\n    protected void addChildren(int index, Node... children);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic abstract class Node implements Cloneable {\n    private static final List<Node> EMPTY_NODES = Collections.emptyList();\n    /**\n     Get the outer HTML of this node.\n     @param accum accumulator to place HTML into\n     */\n    abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);\n\n    abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);\n\n    @Override\n    public String toString();\n    protected void addChildren(int index, Node... children);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {\n        Document doc = new Document(\"\");\n        Element body = doc.appendElement(\"body\");\n        body.appendElement(\"div1\");\n        body.appendElement(\"div2\");\n        final Element div3 = body.appendElement(\"div3\");\n        div3.text(\"Check\");\n        final Element div4 = body.appendElement(\"div4\");\n\n        ArrayList<Element> toMove = new ArrayList<Element>();\n        toMove.add(div3);\n        toMove.add(div4);\n\n        body.insertChildren(0, toMove);\n\n        String result = doc.toString().replaceAll(\"\\\\s+\", \"\");\n        assertEquals(\"<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>\", result);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Parser {\n    private static final String SQ = \"'\";\n    private static final String DQ = \"\\\"\";\n    private static final Tag htmlTag = Tag.valueOf(\"html\");\n    private static final Tag headTag = Tag.valueOf(\"head\");\n    private static final Tag bodyTag = Tag.valueOf(\"body\");\n    private static final Tag titleTag = Tag.valueOf(\"title\");\n    private static final Tag textareaTag = Tag.valueOf(\"textarea\");\n    private final LinkedList<Element> stack;\n    private final TokenQueue tq;\n    private final Document doc;\n    private String baseUri;\n    private boolean relaxed = false;\n    private Document parse();\n    private Attribute parseAttribute();\n    /**\n     Parse HTML into a Document.\n     @param html HTML to parse\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return parsed Document\n     */\n    public static Document parse(String html, String baseUri);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Parser {\n    private static final String SQ = \"'\";\n    private static final String DQ = \"\\\"\";\n    private static final Tag htmlTag = Tag.valueOf(\"html\");\n    private static final Tag headTag = Tag.valueOf(\"head\");\n    private static final Tag bodyTag = Tag.valueOf(\"body\");\n    private static final Tag titleTag = Tag.valueOf(\"title\");\n    private static final Tag textareaTag = Tag.valueOf(\"textarea\");\n    private final LinkedList<Element> stack;\n    private final TokenQueue tq;\n    private final Document doc;\n    private String baseUri;\n    private boolean relaxed = false;\n    private Document parse();\n    private Attribute parseAttribute();\n    /**\n     Parse HTML into a Document.\n     @param html HTML to parse\n     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     @return parsed Document\n     */\n    public static Document parse(String html, String baseUri);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void parsesQuiteRoughAttributes() {\n        String html = \"<p =a>One<a =a\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<p>One<a></a></p>\", doc.body().html());\n        \n        doc = Jsoup.parse(\"<p .....\");\n        assertEquals(\"<p></p>\", doc.body().html());\n        \n        doc = Jsoup.parse(\"<p .....<p!!\");\n        assertEquals(\"<p></p>\\n<p></p>\", doc.body().html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    private static final int UNICODE_BOM = 0xFEFF;\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    private static final int UNICODE_BOM = 0xFEFF;\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void supportsBOMinFiles() throws IOException {\n        // test files from http://www.i18nl10n.com/korean/utftest/\n        File in = getFile(\"/bomtests/bom_utf16be.html\");\n        Document doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-16BE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf16le.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-16LE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf32be.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-32BE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf32le.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-32LE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n CharacterReader consumes tokens off a string. To replace the old TokenQueue.\n */\nfinal class CharacterReader {\n    private static final int maxCacheLen = 12;\n    private final char[] input;\n    private final int length;\n    private int pos = 0;\n    private int mark = 0;\n    private final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage\n    boolean matchesLetter();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n CharacterReader consumes tokens off a string. To replace the old TokenQueue.\n */\nfinal class CharacterReader {\n    private static final int maxCacheLen = 12;\n    private final char[] input;\n    private final int length;\n    private int pos = 0;\n    private int mark = 0;\n    private final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage\n    boolean matchesLetter();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testSupportsNonAsciiTags() {\n        String body = \"<\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5>Yes</\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5>\";\n        Document doc = Jsoup.parse(body);\n        Elements els = doc.select(\"\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5\");\n        assertEquals(\"Yes\", els.text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\npublic class XmlTreeBuilder extends TreeBuilder {\n    void insert(Token.Comment commentToken);\n    @Override\n    protected void initialiseParse(String input, String baseUri, ParseErrorList errors);\n}\n/**\n An XML Declaration.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class XmlDeclaration extends Node {\n    private final String name;\n    private final boolean isProcessingInstruction; // <! if true, <? if false, declaration (and last data char should be ?)\n    @Override\n    public String toString();\n    /**\n     * Get the name of this declaration.\n     * @return name of this declaration.\n     */\n    public String name();\n}\n/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    private static final int UNICODE_BOM = 0xFEFF;\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\npublic class XmlTreeBuilder extends TreeBuilder {\n    void insert(Token.Comment commentToken);\n    @Override\n    protected void initialiseParse(String input, String baseUri, ParseErrorList errors);\n}\n/**\n An XML Declaration.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class XmlDeclaration extends Node {\n    private final String name;\n    private final boolean isProcessingInstruction; // <! if true, <? if false, declaration (and last data char should be ?)\n    @Override\n    public String toString();\n    /**\n     * Get the name of this declaration.\n     * @return name of this declaration.\n     */\n    public String name();\n}\n/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n    private static final int bufferSize = 0x20000; // ~130K.\n    private static final int UNICODE_BOM = 0xFEFF;\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private Document createHtmlDocument(String charset) {\n        final Document doc = Document.createShell(\"\");\n        doc.head().appendElement(\"meta\").attr(\"charset\", charset);\n        doc.head().appendElement(\"meta\").attr(\"name\", \"charset\").attr(\"content\", charset);\n        \n        return doc;\n    }\n    private Document createXmlDocument(String version, String charset, boolean addDecl) {\n        final Document doc = new Document(\"\");\n        doc.appendElement(\"root\").text(\"node\");\n        doc.outputSettings().syntax(Syntax.xml);\n        \n        if( addDecl == true ) {\n            XmlDeclaration decl = new XmlDeclaration(\"xml\", \"\", false);\n            decl.attr(\"version\", version);\n            decl.attr(\"encoding\", charset);\n            doc.prependChild(decl);\n        }\n        \n        return doc;\n    }\n    public void testMetaCharsetUpdateXmlNoCharset() {\n        final Document doc = createXmlDocument(\"1.0\", \"none\", false);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n        \n        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        assertEquals(xmlCharsetUTF8, doc.toString());\n        \n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A character queue with parsing helpers.\n *\n * @author Jonathan Hedley\n */\npublic class TokenQueue {\n    private String queue;\n    private int pos = 0;\n    private static final char ESC = '\\\\'; // escape char for chomp balanced.\n    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A character queue with parsing helpers.\n *\n * @author Jonathan Hedley\n */\npublic class TokenQueue {\n    private String queue;\n    private int pos = 0;\n    private static final char ESC = '\\\\'; // escape char for chomp balanced.\n    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void attributeWithBrackets() {\n        String html = \"<div data='End]'>One</div> <div data='[Another)]]'>Two</div>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"One\", doc.select(\"div[data='End]'\").first().text());\n        assertEquals(\"Two\", doc.select(\"div[data='[Another)]]'\").first().text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n * for integration with toolsets that use the W3C DOM.\n * <p>\n * This class is currently <b>experimental</b>, please provide feedback on utility and any problems experienced.\n * </p>\n */\npublic class W3CDom {\n    /**\n     * Convert a jsoup Document to a W3C Document.\n     * @param in jsoup doc\n     * @return w3c doc\n     */\n    public Document fromJsoup(org.jsoup.nodes.Document in);\n    /**\n     * Converts a jsoup document into the provided W3C Document. If required, you can set options on the output document\n     * before converting.\n     * @param in jsoup doc\n     * @param out w3c doc\n     * @see org.jsoup.helper.W3CDom#fromJsoup(org.jsoup.nodes.Document)\n     */\n    public void convert(org.jsoup.nodes.Document in, Document out);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n * for integration with toolsets that use the W3C DOM.\n * <p>\n * This class is currently <b>experimental</b>, please provide feedback on utility and any problems experienced.\n * </p>\n */\npublic class W3CDom {\n    /**\n     * Convert a jsoup Document to a W3C Document.\n     * @param in jsoup doc\n     * @return w3c doc\n     */\n    public Document fromJsoup(org.jsoup.nodes.Document in);\n    /**\n     * Converts a jsoup document into the provided W3C Document. If required, you can set options on the output document\n     * before converting.\n     * @param in jsoup doc\n     * @param out w3c doc\n     * @see org.jsoup.helper.W3CDom#fromJsoup(org.jsoup.nodes.Document)\n     */\n    public void convert(org.jsoup.nodes.Document in, Document out);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void handlesInvalidAttributeNames() {\n        String html = \"<html><head></head><body style=\\\"color: red\\\" \\\" name\\\"></body></html>\";\n        org.jsoup.nodes.Document jsoupDoc;\n        jsoupDoc = Jsoup.parse(html);\n        Element body = jsoupDoc.select(\"body\").first();\n        assertTrue(body.hasAttr(\"\\\"\")); // actually an attribute with key '\"'. Correct per HTML5 spec, but w3c xml dom doesn't dig it\n        assertTrue(body.hasAttr(\"name\\\"\"));\n\n        Document w3Doc = new W3CDom().fromJsoup(jsoupDoc);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * States and transition activations for the Tokeniser.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * States and transition activations for the Tokeniser.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void dropsSlashFromAttributeName() {\n        String html = \"<img /onerror='doMyJob'/>\";\n        Document doc = Jsoup.parse(html);\n        assertTrue(\"SelfClosingStartTag ignores last character\", doc.select(\"img[onerror]\").size() != 0);\n        assertEquals(\"<img onerror=\\\"doMyJob\\\">\", doc.body().html());\n\n        doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<img onerror=\\\"doMyJob\\\" />\", doc.html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A {@code <!DOCTYPE>} node.\n */\npublic class DocumentType extends Node {\n    public static final String PUBLIC_KEY = \"PUBLIC\";\n    public static final String SYSTEM_KEY = \"SYSTEM\";\n    private static final String NAME = \"name\";\n    private static final String PUBLIC_ID = \"publicId\";\n    private static final String SYSTEM_ID = \"systemId\";\n    @Override\n    void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out);\n    /**\n     * Create a new doctype element.\n     * @param name the doctype's name\n     * @param publicId the doctype's public ID\n     * @param systemId the doctype's system ID\n     * @param baseUri the doctype's base URI\n     */\n\n\n    @Override\n    public String nodeName();\n    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException;\n}\n/**\n * States and transition activations for the Tokeniser.\n */\n}\n/**\n * Parse tokens for the Tokeniser.\n */\nabstract class Token {\n    /**\n     * Reset the data represent by this token, for reuse. Prevents the need to create transfer objects for every\n     * piece of data, which immediately get GCed.\n     */\n    abstract Token reset();\n\n    static void reset(StringBuilder sb);\n}\n/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\npublic class XmlTreeBuilder extends TreeBuilder {\n    void insert(Token.Character characterToken);\n    Document parse(String input, String baseUri);\n}\n/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A {@code <!DOCTYPE>} node.\n */\npublic class DocumentType extends Node {\n    public static final String PUBLIC_KEY = \"PUBLIC\";\n    public static final String SYSTEM_KEY = \"SYSTEM\";\n    private static final String NAME = \"name\";\n    private static final String PUBLIC_ID = \"publicId\";\n    private static final String SYSTEM_ID = \"systemId\";\n    @Override\n    void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out);\n    /**\n     * Create a new doctype element.\n     * @param name the doctype's name\n     * @param publicId the doctype's public ID\n     * @param systemId the doctype's system ID\n     * @param baseUri the doctype's base URI\n     */\n\n\n    @Override\n    public String nodeName();\n    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException;\n}\n/**\n * States and transition activations for the Tokeniser.\n */\n}\n/**\n * Parse tokens for the Tokeniser.\n */\nabstract class Token {\n    /**\n     * Reset the data represent by this token, for reuse. Prevents the need to create transfer objects for every\n     * piece of data, which immediately get GCed.\n     */\n    abstract Token reset();\n\n    static void reset(StringBuilder sb);\n}\n/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\npublic class XmlTreeBuilder extends TreeBuilder {\n    void insert(Token.Character characterToken);\n    Document parse(String input, String baseUri);\n}\n/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private String htmlOutput(String in) {\n        DocumentType type = (DocumentType) Jsoup.parse(in).childNode(0);\n        return type.outerHtml();\n    }\n    private String xmlOutput(String in) {\n        return Jsoup.parse(in, \"\", Parser.xmlParser()).childNode(0).outerHtml();\n    }\n    @Test public void testRoundTrip() {\n        String base = \"<!DOCTYPE html>\";\n        assertEquals(\"<!doctype html>\", htmlOutput(base));\n        assertEquals(base, xmlOutput(base));\n\n        String publicDoc = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n        assertEquals(publicDoc, htmlOutput(publicDoc));\n        assertEquals(publicDoc, xmlOutput(publicDoc));\n\n        String systemDoc = \"<!DOCTYPE html SYSTEM \\\"exampledtdfile.dtd\\\">\";\n        assertEquals(systemDoc, htmlOutput(systemDoc));\n        assertEquals(systemDoc, xmlOutput(systemDoc));\n\n        String legacyDoc = \"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\">\";\n        assertEquals(legacyDoc, htmlOutput(legacyDoc));\n        assertEquals(legacyDoc, xmlOutput(legacyDoc));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The attributes of an Element.\n * <p>\n * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n * </p>\n * <p>\n * Attribute name and value comparisons are  <b>case sensitive</b>. By default for HTML, attribute names are\n * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n * name.\n * </p>\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Attributes implements Iterable<Attribute>, Cloneable {\n    private LinkedHashMap<String, Attribute> attributes = null;\n    /**\n     Remove an attribute by key. <b>Case insensitive.</b>\n     @param key attribute key to remove\n     */\n    public void removeIgnoreCase(String key);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The attributes of an Element.\n * <p>\n * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n * </p>\n * <p>\n * Attribute name and value comparisons are  <b>case sensitive</b>. By default for HTML, attribute names are\n * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n * name.\n * </p>\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Attributes implements Iterable<Attribute>, Cloneable {\n    private LinkedHashMap<String, Attribute> attributes = null;\n    /**\n     Remove an attribute by key. <b>Case insensitive.</b>\n     @param key attribute key to remove\n     */\n    public void removeIgnoreCase(String key);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testChainedRemoveAttributes() {\n        String html = \"<a one two three four>Text</a>\";\n        Document doc = Jsoup.parse(html);\n        Element a = doc.select(\"a\").first();\n        a\n            .removeAttr(\"zero\")\n            .removeAttr(\"one\")\n            .removeAttr(\"two\")\n            .removeAttr(\"three\")\n            .removeAttr(\"four\")\n            .removeAttr(\"five\");\n        assertEquals(\"<a>Text</a>\", a.outerHtml());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Parses HTML into a {@link org.jsoup.nodes.Document}. Generally best to use one of the  more convenient parse methods\n * in {@link org.jsoup.Jsoup}.\n */\npublic class Parser {\n    private static final int DEFAULT_MAX_ERRORS = 0; // by default, error tracking is disabled.\n    private TreeBuilder treeBuilder;\n    private int maxErrors = DEFAULT_MAX_ERRORS;\n    private ParseErrorList errors;\n    private ParseSettings settings;\n    /**\n     * Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context.\n     *\n     * @param fragmentHtml the fragment of HTML to parse\n     * @param context (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This\n     * provides stack context (for implicit element creation).\n     * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     *\n     * @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.\n     */\n    public static List<Node> parseFragment(String fragmentHtml, Element context, String baseUri);\n}\n/**\n The core public access point to the jsoup functionality.\n\n @author Jonathan Hedley */\npublic class Jsoup {\n    /**\n     * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of\n     * permitted tags and attributes.\n     * <p>The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an\n     * existing document. If you want to clean full documents, use {@link Cleaner#clean(Document)} instead, and add\n     * structural tags (<code>html, head, body</code> etc) to the whitelist.\n     *\n     * @param bodyHtml input untrusted HTML (body fragment)\n     * @param baseUri URL to resolve relative URLs against\n     * @param whitelist white-list of permitted HTML elements\n     * @param outputSettings document output settings; use to control pretty-printing and entity escape modes\n     * @return safe HTML (body fragment)\n     * @see Cleaner#clean(Document)\n     */\n    public static String clean(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings);\n    /**\n     Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation.\n     <p>The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output.\n     <p>Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.)\n     @param bodyHtml HTML to test\n     @param whitelist whitelist to test against\n     @return true if no tags or attributes were removed; false otherwise\n     @see #clean(String, org.jsoup.safety.Whitelist) \n     */\n    public static boolean isValid(String bodyHtml, Whitelist whitelist);\n}\n/**\n The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n that you are expecting; no junk, and no cross-site scripting attacks!\n <p>\n The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain\n HTML that is allowed by the whitelist.\n </p>\n <p>\n It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the\n canned white-lists only allow body contained tags.\n </p>\n <p>\n Rather than interacting directly with a Cleaner object, generally see the {@code clean} methods in {@link org.jsoup.Jsoup}.\n </p>\n */\npublic class Cleaner {\n    private Whitelist whitelist;\n    /**\n     Determines if the input document <b>body</b>is valid, against the whitelist. It is considered valid if all the tags and attributes\n     in the input HTML are allowed by the whitelist, and that there is no content in the <code>head</code>.\n     <p>\n     This method can be used as a validator for user input. An invalid document will still be cleaned successfully\n     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document\n     to ensure enforced attributes are set correctly, and that the output is tidied.\n     </p>\n     @param dirtyDocument document to test\n     @return true if no tags or attributes need to be removed; false if they do\n     */\n    public boolean isValid(Document dirtyDocument);\n    /**\n     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.\n     @param dirtyDocument Untrusted base document to clean.\n     @return cleaned document.\n     */\n    public Document clean(Document dirtyDocument);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Parses HTML into a {@link org.jsoup.nodes.Document}. Generally best to use one of the  more convenient parse methods\n * in {@link org.jsoup.Jsoup}.\n */\npublic class Parser {\n    private static final int DEFAULT_MAX_ERRORS = 0; // by default, error tracking is disabled.\n    private TreeBuilder treeBuilder;\n    private int maxErrors = DEFAULT_MAX_ERRORS;\n    private ParseErrorList errors;\n    private ParseSettings settings;\n    /**\n     * Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context.\n     *\n     * @param fragmentHtml the fragment of HTML to parse\n     * @param context (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This\n     * provides stack context (for implicit element creation).\n     * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n     *\n     * @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.\n     */\n    public static List<Node> parseFragment(String fragmentHtml, Element context, String baseUri);\n}\n/**\n The core public access point to the jsoup functionality.\n\n @author Jonathan Hedley */\npublic class Jsoup {\n    /**\n     * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of\n     * permitted tags and attributes.\n     * <p>The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an\n     * existing document. If you want to clean full documents, use {@link Cleaner#clean(Document)} instead, and add\n     * structural tags (<code>html, head, body</code> etc) to the whitelist.\n     *\n     * @param bodyHtml input untrusted HTML (body fragment)\n     * @param baseUri URL to resolve relative URLs against\n     * @param whitelist white-list of permitted HTML elements\n     * @param outputSettings document output settings; use to control pretty-printing and entity escape modes\n     * @return safe HTML (body fragment)\n     * @see Cleaner#clean(Document)\n     */\n    public static String clean(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings);\n    /**\n     Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation.\n     <p>The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output.\n     <p>Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.)\n     @param bodyHtml HTML to test\n     @param whitelist whitelist to test against\n     @return true if no tags or attributes were removed; false otherwise\n     @see #clean(String, org.jsoup.safety.Whitelist) \n     */\n    public static boolean isValid(String bodyHtml, Whitelist whitelist);\n}\n/**\n The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n that you are expecting; no junk, and no cross-site scripting attacks!\n <p>\n The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain\n HTML that is allowed by the whitelist.\n </p>\n <p>\n It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the\n canned white-lists only allow body contained tags.\n </p>\n <p>\n Rather than interacting directly with a Cleaner object, generally see the {@code clean} methods in {@link org.jsoup.Jsoup}.\n </p>\n */\npublic class Cleaner {\n    private Whitelist whitelist;\n    /**\n     Determines if the input document <b>body</b>is valid, against the whitelist. It is considered valid if all the tags and attributes\n     in the input HTML are allowed by the whitelist, and that there is no content in the <code>head</code>.\n     <p>\n     This method can be used as a validator for user input. An invalid document will still be cleaned successfully\n     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document\n     to ensure enforced attributes are set correctly, and that the output is tidied.\n     </p>\n     @param dirtyDocument document to test\n     @return true if no tags or attributes need to be removed; false if they do\n     */\n    public boolean isValid(Document dirtyDocument);\n    /**\n     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.\n     @param dirtyDocument Untrusted base document to clean.\n     @return cleaned document.\n     */\n    public Document clean(Document dirtyDocument);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testIsValidBodyHtml() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        assertTrue(Jsoup.isValid(ok, Whitelist.basic()));\n        assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(ok, Whitelist.none()));\n        assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Parse tokens for the Tokeniser.\n */\nabstract class Token {\n    /**\n     * Reset the data represent by this token, for reuse. Prevents the need to create transfer objects for every\n     * piece of data, which immediately get GCed.\n     */\n    abstract Token reset();\n\n    static void reset(StringBuilder sb);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Parse tokens for the Tokeniser.\n */\nabstract class Token {\n    /**\n     * Reset the data represent by this token, for reuse. Prevents the need to create transfer objects for every\n     * piece of data, which immediately get GCed.\n     */\n    abstract Token reset();\n\n    static void reset(StringBuilder sb);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesControlCodeInAttributeName() {\n        Document doc = Jsoup.parse(\"<p><a \\06=foo>One</a><a/\\06=bar><a foo\\06=bar>Two</a></p>\");\n        assertEquals(\"<p><a>One</a><a></a><a foo=\\\"bar\\\">Two</a></p>\", doc.body().html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HMTL entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\npublic class Entities {\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HMTL entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\npublic class Entities {\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testYahooArticle() throws IOException {\n        File in = getFile(\"/htmltests/yahoo-article-1.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china\");\n        Element p = doc.select(\"p:contains(Volt will be sold in the United States\").first();\n        assertEquals(\"In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.\", p.text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n    public Element classNames(Set<String> classNames);\n    public boolean hasClass(String className);\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * </p>\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     * </p>\n     * \n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.\n     */\n    public Elements select(String cssQuery);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private Tag tag;\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n    public Element classNames(Set<String> classNames);\n    public boolean hasClass(String className);\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * </p>\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     * </p>\n     * \n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.\n     */\n    public Elements select(String cssQuery);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void hasClassCaseInsensitive() {\n        Elements els = Jsoup.parse(\"<p Class=One>One <p class=Two>Two <p CLASS=THREE>THREE\").select(\"p\");\n        Element one = els.get(0);\n        Element two = els.get(1);\n        Element thr = els.get(2);\n\n        assertTrue(one.hasClass(\"One\"));\n        assertTrue(one.hasClass(\"ONE\"));\n\n        assertTrue(two.hasClass(\"TWO\"));\n        assertTrue(two.hasClass(\"Two\"));\n\n        assertTrue(thr.hasClass(\"ThreE\"));\n        assertTrue(thr.hasClass(\"three\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void caseSensitiveParseTree() {\n        String html = \"<r><X>A</X><y>B</y></r>\";\n        Parser parser = Parser.htmlParser();\n        parser.settings(ParseSettings.preserveCase);\n        Document doc = parser.parseInput(html, \"\");\n        assertEquals(\"<r> <X> A </X> <y> B </y> </r>\", StringUtil.normaliseWhitespace(doc.body().html()));\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    Element insertEmpty(Token.StartTag startTag);\n    @Override\n    public String toString();\n}\n/**\n * Readers the input stream into tokens.\n */\nfinal class Tokeniser {\n    void emit(Token token);\n    Token read();\n    TokeniserState getState();\n    void advanceTransition(TokeniserState state);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    Element insertEmpty(Token.StartTag startTag);\n    @Override\n    public String toString();\n}\n/**\n * Readers the input stream into tokens.\n */\nfinal class Tokeniser {\n    void emit(Token token);\n    Token read();\n    TokeniserState getState();\n    void advanceTransition(TokeniserState state);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void selfClosingOnNonvoidIsError() {\n        String html = \"<p>test</p><div /><div>Two</div>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        assertEquals(1, parser.getErrors().size());\n        assertEquals(\"18: Tag cannot be self closing; not a void tag\", parser.getErrors().get(0).toString());\n\n        assertFalse(Jsoup.isValid(html, Whitelist.relaxed()));\n        String clean = Jsoup.clean(html, Whitelist.relaxed());\n        assertEquals(\"<p>test</p> <div></div> <div> Two </div>\", StringUtil.normaliseWhitespace(clean));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesKnownEmptyStyle() {\n        String h = \"<html><head><style /><meta name=foo></head><body>One</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><style></style><meta name=\\\"foo\\\"></head><body>One</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    void clearStackToTableContext();\n}\n/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    void clearStackToTableContext();\n}\n/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  @Test public void testTemplateInsideTable() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/table-polymer-template.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        doc.outputSettings().prettyPrint(true);\n\n        Elements templates = doc.body().getElementsByTag(\"template\");\n        for (Element template : templates) {\n            assertTrue(template.childNodes().size() > 1);\n        }\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private static final List<Node> EMPTY_NODES = Collections.emptyList();\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n    private Tag tag;\n    private WeakReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children\n    private Attributes attributes;\n    private String baseUri;\n    @Override\n    public Element clone();\n    /**\n     * Gets the combined text of this element and all its children. Whitespace is normalized and trimmed.\n     * <p>\n     * For example, given HTML {@code <p>Hello  <b>there</b> now! </p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n     *\n     * @return unencoded text, or empty string if none.\n     * @see #ownText()\n     * @see #textNodes()\n     */\n    public String text();\n    /**\n     * Insert the specified node into the DOM after this node (as a following sibling).\n     * @param node to add after this element\n     * @return this element, for chaining\n     * @see #before(Node)\n     */\n    @Override\n    public Element after(Node node);\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text);\n    protected List<Node> ensureChildNodes();\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * </p>\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling();\n    /**\n     * Insert the specified HTML into the DOM after this element (as a following sibling).\n     *\n     * @param html HTML to add after this element\n     * @return this element, for chaining\n     * @see #before(String)\n     */\n    @Override\n    public Element after(String html);\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * </p>\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}\n     * @see #childNode(int)\n     */\n    public Element child(int index);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private static final List<Node> EMPTY_NODES = Collections.emptyList();\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n    private Tag tag;\n    private WeakReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children\n    private Attributes attributes;\n    private String baseUri;\n    @Override\n    public Element clone();\n    /**\n     * Gets the combined text of this element and all its children. Whitespace is normalized and trimmed.\n     * <p>\n     * For example, given HTML {@code <p>Hello  <b>there</b> now! </p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n     *\n     * @return unencoded text, or empty string if none.\n     * @see #ownText()\n     * @see #textNodes()\n     */\n    public String text();\n    /**\n     * Insert the specified node into the DOM after this node (as a following sibling).\n     * @param node to add after this element\n     * @return this element, for chaining\n     * @see #before(Node)\n     */\n    @Override\n    public Element after(Node node);\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text);\n    protected List<Node> ensureChildNodes();\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * </p>\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling();\n    /**\n     * Insert the specified HTML into the DOM after this element (as a following sibling).\n     *\n     * @param html HTML to add after this element\n     * @return this element, for chaining\n     * @see #before(String)\n     */\n    @Override\n    public Element after(String html);\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * </p>\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}\n     * @see #childNode(int)\n     */\n    public Element child(int index);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testNextElementSiblingAfterClone() {\n        // via https://github.com/jhy/jsoup/issues/951\n        String html = \"<!DOCTYPE html><html lang=\\\"en\\\"><head></head><body><div>Initial element</div></body></html>\";\n        String expectedText = \"New element\";\n        String cloneExpect = \"New element in clone\";\n\n        Document original = Jsoup.parse(html);\n        Document clone = original.clone();\n\n        Element originalElement = original.body().child(0);\n        originalElement.after(\"<div>\" + expectedText + \"</div>\");\n        Element originalNextElementSibling = originalElement.nextElementSibling();\n        Element originalNextSibling = (Element) originalElement.nextSibling();\n        assertEquals(expectedText, originalNextElementSibling.text());\n        assertEquals(expectedText, originalNextSibling.text());\n\n        Element cloneElement = clone.body().child(0);\n        cloneElement.after(\"<div>\" + cloneExpect + \"</div>\");\n        Element cloneNextElementSibling = cloneElement.nextElementSibling();\n        Element cloneNextSibling = (Element) cloneElement.nextSibling();\n        assertEquals(cloneExpect, cloneNextElementSibling.text());\n        assertEquals(cloneExpect, cloneNextSibling.text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes);\n    private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes);\n    @Override\n    public String toString();\n    ParseSettings defaultSettings();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes);\n    private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes);\n    @Override\n    public String toString();\n    ParseSettings defaultSettings();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void handlesDeepStack() {\n        // inspired by http://sv.stargate.wikia.com/wiki/M2J and https://github.com/jhy/jsoup/issues/955\n        // I didn't put it in the integration tests, because explorer and intellij kept dieing trying to preview/index it\n\n        // Arrange\n        StringBuilder longBody = new StringBuilder(500000);\n        for (int i = 0; i < 25000; i++) {\n            longBody.append(i).append(\"<dl><dd>\");\n        }\n        for (int i = 0; i < 25000; i++) {\n            longBody.append(i).append(\"</dd></dl>\");\n        }\n\n        // Act\n        long start = System.currentTimeMillis();\n        Document doc = Parser.parseBodyFragment(longBody.toString(), \"\");\n\n        // Assert\n        assertEquals(2, doc.body().childNodeSize());\n        assertEquals(25000, doc.select(\"dd\").size());\n        assertTrue(System.currentTimeMillis() - start < 1000);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n    /**\n     * Add a form control element to this form.\n     * @param element form control to add\n     * @return this form element, for chaining\n     */\n    public FormElement addElement(Element element);\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n    /**\n     * Add a form control element to this form.\n     * @param element form control to add\n     * @return this form element, for chaining\n     */\n    public FormElement addElement(Element element);\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void removeFormElement() {\n        String html = \"<html>\\n\" +\n                \"  <body> \\n\" +\n                \"      <form action=\\\"/hello.php\\\" method=\\\"post\\\">\\n\" +\n                \"      User:<input type=\\\"text\\\" name=\\\"user\\\" />\\n\" +\n                \"      Password:<input type=\\\"password\\\" name=\\\"pass\\\" />\\n\" +\n                \"      <input type=\\\"submit\\\" name=\\\"login\\\" value=\\\"login\\\" />\\n\" +\n                \"   </form>\\n\" +\n                \"  </body>\\n\" +\n                \"</html>  \";\n        Document doc = Jsoup.parse(html);\n        FormElement form = (FormElement) doc.selectFirst(\"form\");\n        Element pass = form.selectFirst(\"input[name=pass]\");\n        pass.remove();\n\n        List<Connection.KeyVal> data = form.formData();\n        assertEquals(2, data.size());\n        assertEquals(\"user\", data.get(0).key());\n        assertEquals(\"login\", data.get(1).key());\n        assertEquals(null, doc.selectFirst(\"input[name=pass]\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n A HTML Document.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Document extends Element {\n    private OutputSettings outputSettings = new OutputSettings();\n    /**\n     Create a valid, empty shell of a document, suitable for adding more elements to.\n     @param baseUri baseUri of document\n     @return document with html, head, and body elements.\n     */\n    static public Document createShell(String baseUri);\n    /**\n     Normalise the document. This happens after the parse phase so generally does not need to be called.\n     Moves any text content that is not in the body element into the body.\n     @return this document after normalisation\n     */\n    public Document normalise();\n    private void normaliseTextNodes(Element element);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n A HTML Document.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Document extends Element {\n    private OutputSettings outputSettings = new OutputSettings();\n    /**\n     Create a valid, empty shell of a document, suitable for adding more elements to.\n     @param baseUri baseUri of document\n     @return document with html, head, and body elements.\n     */\n    static public Document createShell(String baseUri);\n    /**\n     Normalise the document. This happens after the parse phase so generally does not need to be called.\n     Moves any text content that is not in the body element into the body.\n     @return this document after normalisation\n     */\n    public Document normalise();\n    private void normaliseTextNodes(Element element);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testNormalisesStructure() {\n        Document doc = Jsoup.parse(\"<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body></html>\");\n        assertEquals(\"<html><head><script>one</script><noscript></noscript></head><body><p>two</p><p>three</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private static final List<Node> EMPTY_NODES = Collections.emptyList();\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n    private Tag tag;\n    private WeakReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children\n    private Attributes attributes;\n    private String baseUri;\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html();\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text);\n    static boolean preserveWhitespace(Node node);\n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html);\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public <T extends Appendable> T html(T appendable);\n    private void html(StringBuilder accum);\n    /**\n     * Gets the combined text of this element and all its children. Whitespace is normalized and trimmed.\n     * <p>\n     * For example, given HTML {@code <p>Hello  <b>there</b> now! </p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n     *\n     * @return unencoded text, or empty string if none.\n     * @see #ownText()\n     * @see #textNodes()\n     */\n    public String text();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private static final List<Node> EMPTY_NODES = Collections.emptyList();\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n    private Tag tag;\n    private WeakReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children\n    private Attributes attributes;\n    private String baseUri;\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html();\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text);\n    static boolean preserveWhitespace(Node node);\n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html);\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public <T extends Appendable> T html(T appendable);\n    private void html(StringBuilder accum);\n    /**\n     * Gets the combined text of this element and all its children. Whitespace is normalized and trimmed.\n     * <p>\n     * For example, given HTML {@code <p>Hello  <b>there</b> now! </p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n     *\n     * @return unencoded text, or empty string if none.\n     * @see #ownText()\n     * @see #textNodes()\n     */\n    public String text();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testKeepsPreTextAtDepth() {\n        String h = \"<pre><code><span><b>code\\n\\ncode</b></span></code></pre>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"code\\n\\ncode\", doc.text());\n        assertEquals(\"<pre><code><span><b>code\\n\\ncode</b></span></code></pre>\", doc.body().html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Evaluates that an element matches the selector.\n */\npublic abstract class Evaluator {\n    /**\n     * Test if the element meets the evaluator's requirements.\n     *\n     * @param root    Root of the matching subtree\n     * @param element tested element\n     * @return Returns <tt>true</tt> if the requirements are met or\n     * <tt>false</tt> otherwise\n     */\n    public abstract boolean matches(Element root, Element element);\n\n    /**\n     * Evaluator for tag name\n     */\n    public static final class Tag extends Evaluator;\n}\n/**\n * Parses a CSS selector into an Evaluator tree.\n */\npublic class QueryParser {\n    private TokenQueue tq;\n    private String query;\n    private List<Evaluator> evals = new ArrayList<>();\n    /**\n     * Parse a CSS query into an Evaluator.\n     * @param query CSS query\n     * @return Evaluator\n     */\n    public static Evaluator parse(String query);\n    /**\n     * Parse the query\n     * @return Evaluator\n     */\n    Evaluator parse();\n    private void findElements();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Evaluates that an element matches the selector.\n */\npublic abstract class Evaluator {\n    /**\n     * Test if the element meets the evaluator's requirements.\n     *\n     * @param root    Root of the matching subtree\n     * @param element tested element\n     * @return Returns <tt>true</tt> if the requirements are met or\n     * <tt>false</tt> otherwise\n     */\n    public abstract boolean matches(Element root, Element element);\n\n    /**\n     * Evaluator for tag name\n     */\n    public static final class Tag extends Evaluator;\n}\n/**\n * Parses a CSS selector into an Evaluator tree.\n */\npublic class QueryParser {\n    private TokenQueue tq;\n    private String query;\n    private List<Evaluator> evals = new ArrayList<>();\n    /**\n     * Parse a CSS query into an Evaluator.\n     * @param query CSS query\n     * @return Evaluator\n     */\n    public static Evaluator parse(String query);\n    /**\n     * Parse the query\n     * @return Evaluator\n     */\n    Evaluator parse();\n    private void findElements();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n    @Test public void splitOnBr() {\n        String html = \"<div><p>One<br>Two<br>Three</p></div>\";\n        Document doc = Jsoup.parse(html);\n\n        Elements els = doc.select(\"p:matchText\");\n        assertEquals(3, els.size());\n        assertEquals(\"One\", els.get(0).text());\n        assertEquals(\"Two\", els.get(1).text());\n        assertEquals(\"Three\", els.get(2).toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes.\n */\npublic final class CharacterReader {\n    private static final int maxStringCacheLen = 12;\n    private static final int readAheadLimit = (int) (maxBufferLen * 0.75);\n    private final char[] charBuf;\n    private final Reader reader;\n    private int bufLength;\n    private int bufSplitPoint;\n    private int bufPos;\n    private int readerPos;\n    private int bufMark;\n    private final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage\n    String consumeTo(String seq);\n    boolean matchConsume(String seq);\n    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count);\n    /**\n     * Tests if all the content has been read.\n     * @return true if nothing left to read.\n     */\n    public boolean isEmpty();\n    /**\n     * Reads characters up to the specific char.\n     * @param c the delimiter\n     * @return the chars read\n     */\n    public String consumeTo(char c);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes.\n */\npublic final class CharacterReader {\n    private static final int maxStringCacheLen = 12;\n    private static final int readAheadLimit = (int) (maxBufferLen * 0.75);\n    private final char[] charBuf;\n    private final Reader reader;\n    private int bufLength;\n    private int bufSplitPoint;\n    private int bufPos;\n    private int readerPos;\n    private int bufMark;\n    private final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage\n    String consumeTo(String seq);\n    boolean matchConsume(String seq);\n    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count);\n    /**\n     * Tests if all the content has been read.\n     * @return true if nothing left to read.\n     */\n    public boolean isEmpty();\n    /**\n     * Reads characters up to the specific char.\n     * @param c the delimiter\n     * @return the chars read\n     */\n    public String consumeTo(char c);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void consumeToNonexistentEndWhenAtAnd() {\n        CharacterReader r = new CharacterReader(\"<!\");\n        assertTrue(r.matchConsume(\"<!\"));\n        assertTrue(r.isEmpty());\n\n        String after = r.consumeTo('>');\n        assertEquals(\"\", after);\n\n        assertTrue(r.isEmpty());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n * for integration with toolsets that use the W3C DOM.\n */\npublic class W3CDom {\n    /**\n     * Converts a jsoup document into the provided W3C Document. If required, you can set options on the output document\n     * before converting.\n     * @param in jsoup doc\n     * @param out w3c doc\n     * @see org.jsoup.helper.W3CDom#fromJsoup(org.jsoup.nodes.Document)\n     */\n    public void convert(org.jsoup.nodes.Document in, Document out);\n    /**\n     * Convert a jsoup Document to a W3C Document.\n     * @param in jsoup doc\n     * @return w3c doc\n     */\n    public Document fromJsoup(org.jsoup.nodes.Document in);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n * for integration with toolsets that use the W3C DOM.\n */\npublic class W3CDom {\n    /**\n     * Converts a jsoup document into the provided W3C Document. If required, you can set options on the output document\n     * before converting.\n     * @param in jsoup doc\n     * @param out w3c doc\n     * @see org.jsoup.helper.W3CDom#fromJsoup(org.jsoup.nodes.Document)\n     */\n    public void convert(org.jsoup.nodes.Document in, Document out);\n    /**\n     * Convert a jsoup Document to a W3C Document.\n     * @param in jsoup doc\n     * @return w3c doc\n     */\n    public Document fromJsoup(org.jsoup.nodes.Document in);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void namespacePreservation() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/namespaces.xhtml\");\n        org.jsoup.nodes.Document jsoupDoc;\n        jsoupDoc = Jsoup.parse(in, \"UTF-8\");\n\n        Document doc;\n        org.jsoup.helper.W3CDom jDom = new org.jsoup.helper.W3CDom();\n        doc = jDom.fromJsoup(jsoupDoc);\n\n        Node htmlEl = doc.getChildNodes().item(0);\n        assertEquals(\"http://www.w3.org/1999/xhtml\", htmlEl.getNamespaceURI());\n        assertEquals(\"html\", htmlEl.getLocalName());\n        assertEquals(\"html\", htmlEl.getNodeName());\n\n        // inherits default namespace\n        Node head = htmlEl.getFirstChild();\n        assertEquals(\"http://www.w3.org/1999/xhtml\", head.getNamespaceURI());\n        assertEquals(\"head\", head.getLocalName());\n        assertEquals(\"head\", head.getNodeName());\n\n        Node epubTitle = htmlEl.getChildNodes().item(2).getChildNodes().item(3);\n        assertEquals(\"Check\", epubTitle.getTextContent());\n        assertEquals(\"http://www.idpf.org/2007/ops\", epubTitle.getNamespaceURI());\n        assertEquals(\"title\", epubTitle.getLocalName());\n        assertEquals(\"epub:title\", epubTitle.getNodeName());\n\n        Node xSection = epubTitle.getNextSibling().getNextSibling();\n        assertEquals(\"urn:test\", xSection.getNamespaceURI());\n        assertEquals(\"section\", xSection.getLocalName());\n        assertEquals(\"x:section\", xSection.getNodeName());\n\n        // https://github.com/jhy/jsoup/issues/977\n        // does not keep last set namespace\n        Node svg = xSection.getNextSibling().getNextSibling();\n        assertEquals(\"http://www.w3.org/2000/svg\", svg.getNamespaceURI());\n        assertEquals(\"svg\", svg.getLocalName());\n        assertEquals(\"svg\", svg.getNodeName());\n\n        Node path = svg.getChildNodes().item(1);\n        assertEquals(\"http://www.w3.org/2000/svg\", path.getNamespaceURI());\n        assertEquals(\"path\", path.getLocalName());\n        assertEquals(\"path\", path.getNodeName());\n\n        Node clip = path.getChildNodes().item(1);\n        assertEquals(\"http://example.com/clip\", clip.getNamespaceURI());\n        assertEquals(\"clip\", clip.getLocalName());\n        assertEquals(\"clip\", clip.getNodeName());\n        assertEquals(\"456\", clip.getTextContent());\n\n        Node picture = svg.getNextSibling().getNextSibling();\n        assertEquals(\"http://www.w3.org/1999/xhtml\", picture.getNamespaceURI());\n        assertEquals(\"picture\", picture.getLocalName());\n        assertEquals(\"picture\", picture.getNodeName());\n\n        Node img = picture.getFirstChild();\n        assertEquals(\"http://www.w3.org/1999/xhtml\", img.getNamespaceURI());\n        assertEquals(\"img\", img.getLocalName());\n        assertEquals(\"img\", img.getNodeName());\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A minimal String utility class. Designed for internal jsoup use only.\n */\npublic final class StringUtil {\n    /**\n     * Tests if a code point is \"whitespace\" as defined by what it looks like. Used for Element.text etc.\n     * @param c code point to test\n     * @return true if code point is whitespace, false otherwise\n     */\n    public static boolean isActuallyWhitespace(int c);\n    /**\n     * After normalizing the whitespace within a string, appends it to a string builder.\n     * @param accum builder to append to\n     * @param string string to normalize whitespace within\n     * @param stripLeading set to true if you wish to remove any leading whitespace\n     */\n    public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A minimal String utility class. Designed for internal jsoup use only.\n */\npublic final class StringUtil {\n    /**\n     * Tests if a code point is \"whitespace\" as defined by what it looks like. Used for Element.text etc.\n     * @param c code point to test\n     * @return true if code point is whitespace, false otherwise\n     */\n    public static boolean isActuallyWhitespace(int c);\n    /**\n     * After normalizing the whitespace within a string, appends it to a string builder.\n     * @param accum builder to append to\n     * @param string string to normalize whitespace within\n     * @param stripLeading set to true if you wish to remove any leading whitespace\n     */\n    public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testNormalizesInvisiblesInText() {\n        // return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);\n        String escaped = \"This&shy;is&#x200b;one&#x200c;long&#x200d;word\";\n        String decoded = \"This\\u00ADis\\u200Bone\\u200Clong\\u200Dword\"; // browser would not display those soft hyphens / other chars, so we don't want them in the text\n\n        Document doc = Jsoup.parse(\"<p>\" + escaped);\n        Element p = doc.select(\"p\").first();\n        doc.outputSettings().charset(\"ascii\"); // so that the outer html is easier to see with escaped invisibles\n        assertEquals(\"Thisisonelongword\", p.text()); // text is normalized\n        assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml()); // html / whole text keeps &shy etc;\n        assertEquals(decoded, p.textNodes().get(0).getWholeText());\n\n        Element matched = doc.select(\"p:contains(Thisisonelongword)\").first(); // really just oneloneword, no invisibles\n        assertEquals(\"p\", matched.nodeName());\n        assertTrue(matched.is(\":containsOwn(Thisisonelongword)\"));\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The attributes of an Element.\n * <p>\n * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n * </p>\n * <p>\n * Attribute name and value comparisons are  generally <b>case sensitive</b>. By default for HTML, attribute names are\n * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n * name.\n * </p>\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Attributes implements Iterable<Attribute>, Cloneable {\n    private static final int InitialCapacity = 4; // todo - analyze Alexa 1MM sites, determine best setting\n    private static final int GrowthFactor = 2;\n    private static final String EmptyString = \"\";\n    private int size = 0; // number of slots used (not capacity, which is keys.length\n    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The attributes of an Element.\n * <p>\n * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n * </p>\n * <p>\n * Attribute name and value comparisons are  generally <b>case sensitive</b>. By default for HTML, attribute names are\n * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n * name.\n * </p>\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Attributes implements Iterable<Attribute>, Cloneable {\n    private static final int InitialCapacity = 4; // todo - analyze Alexa 1MM sites, determine best setting\n    private static final int GrowthFactor = 2;\n    private static final String EmptyString = \"\";\n    private int size = 0; // number of slots used (not capacity, which is keys.length\n    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void booleanAttributeOutput() {\n        Document doc = Jsoup.parse(\"<img src=foo noshade='' nohref async=async autofocus=false>\");\n        Element img = doc.selectFirst(\"img\");\n\n        assertEquals(\"<img src=\\\"foo\\\" noshade nohref async autofocus=\\\"false\\\">\", img.outerHtml());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  @Test public void preSkipsFirstNewline() {\n        Document doc = Jsoup.parse(\"<pre>\\n\\nOne\\nTwo\\n</pre>\");\n        Element pre = doc.selectFirst(\"pre\");\n        assertEquals(\"One\\nTwo\", pre.text());\n        assertEquals(\"\\nOne\\nTwo\\n\", pre.wholeText());\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");\n    private static final int firstReadBufferSize = 1024 * 5;\n    /**\n     * Loads a file to a Document.\n     * @param in file to load\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(File in, String charsetName, String baseUri) throws IOException;\n    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");\n    private static final int firstReadBufferSize = 1024 * 5;\n    /**\n     * Loads a file to a Document.\n     * @param in file to load\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(File in, String charsetName, String baseUri) throws IOException;\n    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private static String ihVal(String key, Document doc) {\n        return doc.select(\"th:contains(\" + key + \") + td\").first().text();\n    }\n    public void handlesEmptyStreamDuringParseRead() throws IOException {\n        // this handles situations where the remote server sets a content length greater than it actually writes\n\n        Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n            .timeout(200)\n            .execute();\n\n        boolean threw = false;\n        try {\n            Document document = res.parse();\n            assertEquals(\"Something\", document.title());\n        } catch (IOException e) {\n            threw = true;\n        }\n        assertEquals(true, threw);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>abstract class LeafNode extends Node {\n    protected final boolean hasAttributes();\n    @Override\n    public int childNodeSize();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>abstract class LeafNode extends Node {\n    protected final boolean hasAttributes();\n    @Override\n    public int childNodeSize();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void testLeadNodesHaveNoChildren() {\n        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n        Element div = doc.select(\"div\").first();\n        TextNode tn = (TextNode) div.childNode(0);\n        List<Node> nodes = tn.childNodes();\n        assertEquals(0, nodes.size());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic abstract class Node {\n    /**\n     Get the outer HTML of this node.\n     @return HTML\n     */\n    public String outerHtml();\n    /**\n     * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.\n     */\n    public void remove();\n    /**\n     Get the outer HTML of this node.\n     @param accum accumulator to place HTML into\n     */\n    abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);\n\n    abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);\n\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic abstract class Node {\n    /**\n     Get the outer HTML of this node.\n     @return HTML\n     */\n    public String outerHtml();\n    /**\n     * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.\n     */\n    public void remove();\n    /**\n     Get the outer HTML of this node.\n     @param accum accumulator to place HTML into\n     */\n    abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);\n\n    abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);\n\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void parentlessToString() {\n        Document doc = Jsoup.parse(\"<img src='foo'>\");\n        Element img = doc.select(\"img\").first();\n        assertEquals(\"\\n<img src=\\\"foo\\\" />\", img.toString());\n\n        img.remove(); // lost its parent\n        assertEquals(\"<img src=\\\"foo\\\" />\", img.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\npublic class XmlTreeBuilder extends TreeBuilder {\n    void insert(Token.Comment commentToken);\n    Document parse(Reader input, String baseUri);\n    Document parse(String input, String baseUri);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\npublic class XmlTreeBuilder extends TreeBuilder {\n    void insert(Token.Comment commentToken);\n    Document parse(Reader input, String baseUri);\n    Document parse(String input, String baseUri);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void handlesDodgyXmlDecl() {\n        String xml = \"<?xml version='1.0'><val>One</val>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        assertEquals(\"One\", doc.select(\"val\").text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");\n    private static final int firstReadBufferSize = 1024 * 5;\n    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException;\n    /**\n     * Loads a file to a Document.\n     * @param in file to load\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(File in, String charsetName, String baseUri) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");\n    private static final int firstReadBufferSize = 1024 * 5;\n    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException;\n    /**\n     * Loads a file to a Document.\n     * @param in file to load\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(File in, String charsetName, String baseUri) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private InputStream stream(String data) {\n        return new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));\n    }\n    private InputStream stream(String data, String charset) {\n        try {\n            return new ByteArrayInputStream(data.getBytes(charset));\n        } catch (UnsupportedEncodingException e) {\n            fail();\n        }\n        return null;\n    }\n    public void supportsXmlCharsetDeclaration() throws IOException {\n        String encoding = \"iso-8859-1\";\n        InputStream soup = new ByteArrayInputStream((\n            \"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\"?>\" +\n                \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\" +\n                \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\">Hell\u00f6 W\u00f6rld!</html>\"\n        ).getBytes(encoding));\n\n        Document doc = Jsoup.parse(soup, null, \"\");\n        assertEquals(\"Hell\u00f6 W\u00f6rld!\", doc.body().text());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");\n    private static final int firstReadBufferSize = 1024 * 5;\n    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");\n    private static final int firstReadBufferSize = 1024 * 5;\n    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void fallbackToUtfIfCantEncode() throws IOException {\n        // that charset can't be encoded, so make sure we flip to utf\n\n        String in = \"<html><meta charset=\\\"ISO-2022-CN\\\"/>One</html>\";\n        Document doc = Jsoup.parse(new ByteArrayInputStream(in.getBytes()), null, \"\");\n\n        assertEquals(\"UTF-8\", doc.charset().name());\n        assertEquals(\"One\", doc.text());\n\n        String html = doc.outerHtml();\n        assertEquals(\"<html><head><meta charset=\\\"UTF-8\\\"></head><body>One</body></html>\", TextUtil.stripNewlines(html));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes.\n */\npublic final class CharacterReader {\n    private static final int maxStringCacheLen = 12;\n    private static final int readAheadLimit = (int) (maxBufferLen * 0.75);\n    private final char[] charBuf;\n    private final Reader reader;\n    private int bufLength;\n    private int bufSplitPoint;\n    private int bufPos;\n    private int readerPos;\n    private int bufMark;\n    private final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage\n    String consumeTagName();\n}\n/**\n * States and transition activations for the Tokeniser.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes.\n */\npublic final class CharacterReader {\n    private static final int maxStringCacheLen = 12;\n    private static final int readAheadLimit = (int) (maxBufferLen * 0.75);\n    private final char[] charBuf;\n    private final Reader reader;\n    private int bufLength;\n    private int bufSplitPoint;\n    private int bufPos;\n    private int readerPos;\n    private int bufMark;\n    private final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage\n    String consumeTagName();\n}\n/**\n * States and transition activations for the Tokeniser.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void parsesQuiteRoughAttributes() {\n        String html = \"<p =a>One<a <p>Something</p>Else\";\n        // this (used to; now gets cleaner) gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated\n        Document doc = Jsoup.parse(html);\n\n        // NOTE: per spec this should be the test case. but impacts too many ppl\n        // assertEquals(\"<p =a>One<a <p>Something</a></p>\\n<a <p>Else</a>\", doc.body().html());  assertEquals(\"<p =a>One<a></a></p><p><a>Something</a></p><a>Else</a>\", TextUtil.stripNewlines(doc.body().html()));\n\n        doc = Jsoup.parse(\"<p .....>\");\n        assertEquals(\"<p .....></p>\", doc.body().html());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n * for integration with toolsets that use the W3C DOM.\n */\npublic class W3CDom {\n    /**\n     * Converts a jsoup document into the provided W3C Document. If required, you can set options on the output document\n     * before converting.\n     * @param in jsoup doc\n     * @param out w3c doc\n     * @see org.jsoup.helper.W3CDom#fromJsoup(org.jsoup.nodes.Document)\n     */\n    public void convert(org.jsoup.nodes.Document in, Document out);\n    /**\n     * Convert a jsoup Document to a W3C Document.\n     * @param in jsoup doc\n     * @return w3c doc\n     */\n    public Document fromJsoup(org.jsoup.nodes.Document in);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n * for integration with toolsets that use the W3C DOM.\n */\npublic class W3CDom {\n    /**\n     * Converts a jsoup document into the provided W3C Document. If required, you can set options on the output document\n     * before converting.\n     * @param in jsoup doc\n     * @param out w3c doc\n     * @see org.jsoup.helper.W3CDom#fromJsoup(org.jsoup.nodes.Document)\n     */\n    public void convert(org.jsoup.nodes.Document in, Document out);\n    /**\n     * Convert a jsoup Document to a W3C Document.\n     * @param in jsoup doc\n     * @return w3c doc\n     */\n    public Document fromJsoup(org.jsoup.nodes.Document in);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void treatsUndeclaredNamespaceAsLocalName() {\n        String html = \"<fb:like>One</fb:like>\";\n        org.jsoup.nodes.Document doc = Jsoup.parse(html);\n\n        Document w3Doc = new W3CDom().fromJsoup(doc);\n        Node htmlEl = w3Doc.getFirstChild();\n\n        assertNull(htmlEl.getNamespaceURI());\n        assertEquals(\"html\", htmlEl.getLocalName());\n        assertEquals(\"html\", htmlEl.getNodeName());\n\n        Node fb = htmlEl.getFirstChild().getNextSibling().getFirstChild();\n        assertNull(fb.getNamespaceURI());\n        assertEquals(\"like\", fb.getLocalName());\n        assertEquals(\"fb:like\", fb.getNodeName());\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n A comment node.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Comment extends LeafNode {\n    private static final String COMMENT_KEY = \"comment\";\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n A comment node.\n\n @author Jonathan Hedley, jonathan@hedley.net */\npublic class Comment extends LeafNode {\n    private static final String COMMENT_KEY = \"comment\";\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void handlesLTinScript() {\n        // https://github.com/jhy/jsoup/issues/1139\n        String html = \"<script> var a=\\\"<?\\\"; var b=\\\"?>\\\"; </script>\";\n        Document doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<script> var a=\\\"\\n <!--?\\\"; var b=\\\"?-->\\\"; </script>\", doc.html()); // converted from pseudo xmldecl to comment\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    void pushActiveFormattingElements(Element in);\n    boolean inSelectScope(String targetName);\n    void popStackToClose(String elName);\n    void popStackToClose(String... elNames);\n    boolean isSpecial(Element el);\n    void resetInsertionMode();\n    void popStackToBefore(String elName);\n    Element getFromStack(String elName);\n    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes);\n    private void clearStackToContext(String... nodeNames);\n    void reconstructFormattingElements();\n    Element getActiveFormattingElement(String nodeName);\n    List<String> getPendingTableCharacters();\n}\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private static final List<Node> EMPTY_NODES = Collections.emptyList();\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n    private Tag tag;\n    private WeakReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children\n    private Attributes attributes;\n    private String baseUri;\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html();\n    @Override\n    public <T extends Appendable> T html(T appendable);\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}. If you are using {@link ParseSettings#preserveCase\n     * case preserving parsing}, this will return the source's original case.\n     * \n     * @return the tag name\n     */\n    public String tagName();\n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html);\n}\n/**\n * HTML Tag capabilities.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Tag {\n    private static final Map<String, Tag> tags = new HashMap<>(); // map of known tags\n    private String tagName;\n    private boolean isBlock = true; // block or inline\n    private boolean formatAsBlock = true; // should be formatted as a block\n    private boolean canContainInline = true; // only pcdata if not\n    private boolean empty = false; // can hold nothing; e.g. img\n    private boolean selfClosing = false; // can self close (<foo />). used for unknown tags that self close, without forcing them as empty.\n    private boolean preserveWhitespace = false; // for pre, textarea, script etc\n    private boolean formList = false; // a control that appears in forms: input, textarea, output etc\n    private boolean formSubmit = false; // a control that can be submitted in a form: input etc\n    /**\n     * Get this tag's name.\n     *\n     * @return the tag's name\n     */\n    public String getName();\n}\n/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    void pushActiveFormattingElements(Element in);\n    boolean inSelectScope(String targetName);\n    void popStackToClose(String elName);\n    void popStackToClose(String... elNames);\n    boolean isSpecial(Element el);\n    void resetInsertionMode();\n    void popStackToBefore(String elName);\n    Element getFromStack(String elName);\n    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes);\n    private void clearStackToContext(String... nodeNames);\n    void reconstructFormattingElements();\n    Element getActiveFormattingElement(String nodeName);\n    List<String> getPendingTableCharacters();\n}\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private static final List<Node> EMPTY_NODES = Collections.emptyList();\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n    private Tag tag;\n    private WeakReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children\n    private Attributes attributes;\n    private String baseUri;\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html();\n    @Override\n    public <T extends Appendable> T html(T appendable);\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}. If you are using {@link ParseSettings#preserveCase\n     * case preserving parsing}, this will return the source's original case.\n     * \n     * @return the tag name\n     */\n    public String tagName();\n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html);\n}\n/**\n * HTML Tag capabilities.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Tag {\n    private static final Map<String, Tag> tags = new HashMap<>(); // map of known tags\n    private String tagName;\n    private boolean isBlock = true; // block or inline\n    private boolean formatAsBlock = true; // should be formatted as a block\n    private boolean canContainInline = true; // only pcdata if not\n    private boolean empty = false; // can hold nothing; e.g. img\n    private boolean selfClosing = false; // can self close (<foo />). used for unknown tags that self close, without forcing them as empty.\n    private boolean preserveWhitespace = false; // for pre, textarea, script etc\n    private boolean formList = false; // a control that appears in forms: input, textarea, output etc\n    private boolean formSubmit = false; // a control that can be submitted in a form: input etc\n    /**\n     * Get this tag's name.\n     *\n     * @return the tag's name\n     */\n    public String getName();\n}\n/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void preservedCaseLinksCantNest() {\n        String html = \"<A>ONE <A>Two</A></A>\";\n        Document doc = Parser.htmlParser()\n            .settings(ParseSettings.preserveCase)\n            .parseInput(html, \"\");\n        assertEquals(\"<A> ONE </A> <A> Two </A>\", StringUtil.normaliseWhitespace(doc.body().html()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n A single key + value attribute. (Only used for presentation.)\n */\npublic class Attribute implements Map.Entry<String, String>, Cloneable  {\n    /**\n     Get the attribute key.\n     @return the attribute key\n     */\n    public String getKey();\n    /**\n     Get the attribute value.\n     @return the attribute value\n     */\n    public String getValue();\n    /**\n     Set the attribute key; case is preserved.\n     @param key the new key; must not be null\n     */\n    public void setKey(String key);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n A single key + value attribute. (Only used for presentation.)\n */\npublic class Attribute implements Map.Entry<String, String>, Cloneable  {\n    /**\n     Get the attribute key.\n     @return the attribute key\n     */\n    public String getKey();\n    /**\n     Get the attribute value.\n     @return the attribute value\n     */\n    public String getValue();\n    /**\n     Set the attribute key; case is preserved.\n     @param key the new key; must not be null\n     */\n    public void setKey(String key);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void booleanAttributesAreEmptyStringValues() {\n        Document doc = Jsoup.parse(\"<div hidden>\");\n        Attributes attributes = doc.body().child(0).attributes();\n        assertEquals(\"\", attributes.get(\"hidden\"));\n\n        Attribute first = attributes.iterator().next();\n        assertEquals(\"hidden\", first.getKey());\n        assertEquals(\"\", first.getValue());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n A single key + value attribute. (Only used for presentation.)\n */\npublic class Attribute implements Map.Entry<String, String>, Cloneable  {\n    /**\n     Set the attribute value.\n     @param val the new attribute value; must not be null\n     */\n    public String setValue(String val);\n    /**\n     Get the attribute value.\n     @return the attribute value\n     */\n    public String getValue();\n    /**\n     Get the attribute key.\n     @return the attribute key\n     */\n    public String getKey();\n    /**\n     Set the attribute key; case is preserved.\n     @param key the new key; must not be null\n     */\n    public void setKey(String key);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n A single key + value attribute. (Only used for presentation.)\n */\npublic class Attribute implements Map.Entry<String, String>, Cloneable  {\n    /**\n     Set the attribute value.\n     @param val the new attribute value; must not be null\n     */\n    public String setValue(String val);\n    /**\n     Get the attribute value.\n     @return the attribute value\n     */\n    public String getValue();\n    /**\n     Get the attribute key.\n     @return the attribute key\n     */\n    public String getKey();\n    /**\n     Set the attribute key; case is preserved.\n     @param key the new key; must not be null\n     */\n    public void setKey(String key);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void settersOnOrphanAttribute() {\n        Attribute attr = new Attribute(\"one\", \"two\");\n        attr.setKey(\"three\");\n        String oldVal = attr.setValue(\"four\");\n        assertEquals(\"two\", oldVal);\n        assertEquals(\"three\", attr.getKey());\n        assertEquals(\"four\", attr.getValue());\n        assertEquals(null, attr.parent);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\npublic class Entities {\n    static String unescape(String string);\n    static String escape(String string, Document.OutputSettings out);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\npublic class Entities {\n    static String unescape(String string);\n    static String escape(String string, Document.OutputSettings out);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void unescape() {\n        String text = \"Hello &amp;&LT&gt; &angst &#960; &#960 &#x65B0; there &! &frac34;\";\n        assertEquals(\"Hello &<> \u00c5 \u03c0 \u03c0 \u65b0 there &! \u00be\", Entities.unescape(text));\n\n        assertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implementation of {@link Connection}.\n * @see org.jsoup.Jsoup#connect(String)\n */\npublic class HttpConnection implements Connection {\n    public static final String CONTENT_ENCODING = \"Content-Encoding\";\n    private static final String USER_AGENT = \"User-Agent\";\n    public static final String CONTENT_TYPE = \"Content-Type\";\n    public static final String MULTIPART_FORM_DATA = \"multipart/form-data\";\n    public static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";\n    private static final int HTTP_TEMP_REDIR = 307; // http/1.1 temporary redirect, not in Java's set.\n    private static final String DefaultUploadType = \"application/octet-stream\";\n    public Connection postDataCharset(String charset);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implementation of {@link Connection}.\n * @see org.jsoup.Jsoup#connect(String)\n */\npublic class HttpConnection implements Connection {\n    public static final String CONTENT_ENCODING = \"Content-Encoding\";\n    private static final String USER_AGENT = \"User-Agent\";\n    public static final String CONTENT_TYPE = \"Content-Type\";\n    public static final String MULTIPART_FORM_DATA = \"multipart/form-data\";\n    public static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";\n    private static final int HTTP_TEMP_REDIR = 307; // http/1.1 temporary redirect, not in Java's set.\n    private static final String DefaultUploadType = \"application/octet-stream\";\n    public Connection postDataCharset(String charset);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Rule public MultiLocaleRule rule = new MultiLocaleRule();\n    @Test public void handlesHeaderEncodingOnRequest() {\n        Connection.Request req = new HttpConnection.Request();\n        req.addHeader(\"xxx\", \"\u00e9\");\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes.\n */\npublic final class CharacterReader {\n    private static final int maxStringCacheLen = 12;\n    private static final int readAheadLimit = (int) (maxBufferLen * 0.75);\n    private final char[] charBuf;\n    private final Reader reader;\n    private int bufLength;\n    private int bufSplitPoint;\n    private int bufPos;\n    private int readerPos;\n    private int bufMark = -1;\n    private final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage\n    boolean containsIgnoreCase(String seq);\n    private void bufferUp();\n}\npublic class UncheckedIOException extends RuntimeException {\n    public IOException ioException();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes.\n */\npublic final class CharacterReader {\n    private static final int maxStringCacheLen = 12;\n    private static final int readAheadLimit = (int) (maxBufferLen * 0.75);\n    private final char[] charBuf;\n    private final Reader reader;\n    private int bufLength;\n    private int bufSplitPoint;\n    private int bufPos;\n    private int readerPos;\n    private int bufMark = -1;\n    private final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage\n    boolean containsIgnoreCase(String seq);\n    private void bufferUp();\n}\npublic class UncheckedIOException extends RuntimeException {\n    public IOException ioException();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private static String ihVal(String key, Document doc) {\n        final Element first = doc.select(\"th:contains(\" + key + \") + td\").first();\n        return first != null ? first.text() : null;\n    }\n    public void testBinaryThrowsExceptionWhenTypeIgnored() {\n        Connection con = Jsoup.connect(FileServlet.Url);\n        con.data(FileServlet.LocationParam, \"/htmltests/thumb.jpg\");\n        con.data(FileServlet.ContentTypeParam, \"image/jpeg\");\n        con.ignoreContentType(true);\n\n        boolean threw = false;\n        try {\n            con.execute();\n            Document doc = con.response().parse();\n        } catch (IOException e) {\n            threw = true;\n            assertEquals(\"Input is binary and unsupported\", e.getMessage());\n        }\n        assertTrue(threw);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    void error(HtmlTreeBuilderState state);\n}\n/**\n * Controls parser settings, to optionally preserve tag and/or attribute name case.\n */\npublic class ParseSettings {\n    public static final ParseSettings htmlDefault;\n    public static final ParseSettings preserveCase;\n    /**\n     * Returns true if preserving tag name case.\n     */\n    public boolean preserveTagCase();\n}\n/**\n * Parse tokens for the Tokeniser.\n */\nabstract class Token {\n    /**\n     * Reset the data represent by this token, for reuse. Prevents the need to create transfer objects for every\n     * piece of data, which immediately get GCed.\n     */\n    abstract Token reset();\n\n    static void reset(StringBuilder sb);\n}\n/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\npublic class XmlTreeBuilder extends TreeBuilder {\n    Element insert(Token.StartTag startTag);\n}\n/**\n * The attributes of an Element.\n * <p>\n * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n * </p>\n * <p>\n * Attribute name and value comparisons are  generally <b>case sensitive</b>. By default for HTML, attribute names are\n * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n * name.\n * </p>\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Attributes implements Iterable<Attribute>, Cloneable {\n    private static final int InitialCapacity = 4; // todo - analyze Alexa 1MM sites, determine best setting\n    private static final int GrowthFactor = 2;\n    private static final String EmptyString = \"\";\n    private int size = 0; // number of slots used (not capacity, which is keys.length\n    private void checkCapacity(int minNewSize);\n    /**\n     Get the number of attributes in this set.\n     @return size\n     */\n    public int size();\n    /**\n     * Internal method. Lowercases all keys.\n     */\n    public void normalize();\n    /**\n     * Get an attribute's value by case-insensitive key\n     * @param key the attribute name\n     * @return the first matching attribute value if set; or empty string if not set (ora boolean attribute).\n     */\n    public String getIgnoreCase(String key);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\npublic class HtmlTreeBuilder extends TreeBuilder {\n    void error(HtmlTreeBuilderState state);\n}\n/**\n * Controls parser settings, to optionally preserve tag and/or attribute name case.\n */\npublic class ParseSettings {\n    public static final ParseSettings htmlDefault;\n    public static final ParseSettings preserveCase;\n    /**\n     * Returns true if preserving tag name case.\n     */\n    public boolean preserveTagCase();\n}\n/**\n * Parse tokens for the Tokeniser.\n */\nabstract class Token {\n    /**\n     * Reset the data represent by this token, for reuse. Prevents the need to create transfer objects for every\n     * piece of data, which immediately get GCed.\n     */\n    abstract Token reset();\n\n    static void reset(StringBuilder sb);\n}\n/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\npublic class XmlTreeBuilder extends TreeBuilder {\n    Element insert(Token.StartTag startTag);\n}\n/**\n * The attributes of an Element.\n * <p>\n * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n * </p>\n * <p>\n * Attribute name and value comparisons are  generally <b>case sensitive</b>. By default for HTML, attribute names are\n * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n * name.\n * </p>\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Attributes implements Iterable<Attribute>, Cloneable {\n    private static final int InitialCapacity = 4; // todo - analyze Alexa 1MM sites, determine best setting\n    private static final int GrowthFactor = 2;\n    private static final String EmptyString = \"\";\n    private int size = 0; // number of slots used (not capacity, which is keys.length\n    private void checkCapacity(int minNewSize);\n    /**\n     Get the number of attributes in this set.\n     @return size\n     */\n    public int size();\n    /**\n     * Internal method. Lowercases all keys.\n     */\n    public void normalize();\n    /**\n     * Get an attribute's value by case-insensitive key\n     * @param key the attribute name\n     * @return the first matching attribute value if set; or empty string if not set (ora boolean attribute).\n     */\n    public String getIgnoreCase(String key);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void retainsAttributesOfDifferentCaseIfSensitive() {\n        String html = \"<p One=One One=Two one=Three two=Four two=Five Two=Six>Text</p>\";\n        Parser parser = Parser.htmlParser().settings(ParseSettings.preserveCase);\n        Document doc = parser.parseInput(html, \"\");\n        assertEquals(\"<p One=\\\"One\\\" one=\\\"Three\\\" two=\\\"Four\\\" Two=\\\"Six\\\">Text</p>\", doc.selectFirst(\"p\").outerHtml());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    @Test public void createsFormData() {\n        String html = \"<form><input name='one' value='two'><select name='three'><option value='not'>\" +\n                \"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>\" +\n                \"<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>\" +\n                \"<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>\" +\n                \"<input name='ten' value='text' disabled>\" +\n                \"<input name='eleven' value='text' type='button'>\" +\n                \"</form>\";\n        Document doc = Jsoup.parse(html);\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        List<Connection.KeyVal> data = form.formData();\n\n        assertEquals(6, data.size());\n        assertEquals(\"one=two\", data.get(0).toString());\n        assertEquals(\"three=four\", data.get(1).toString());\n        assertEquals(\"three=five\", data.get(2).toString());\n        assertEquals(\"six=seven\", data.get(3).toString());\n        assertEquals(\"seven=on\", data.get(4).toString()); // set\n        assertEquals(\"eight=on\", data.get(5).toString()); // default\n        // nine should not appear, not checked checkbox\n        // ten should not appear, disabled\n        // eleven should not appear, button\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = Long.valueOf(0L);\n    public static final Long LONG_ONE = Long.valueOf(1L);\n    public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);\n    public static final Integer INTEGER_ZERO = Integer.valueOf(0);\n    public static final Integer INTEGER_ONE = Integer.valueOf(1);\n    public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);\n    public static final Short SHORT_ZERO = Short.valueOf((short) 0);\n    public static final Short SHORT_ONE = Short.valueOf((short) 1);\n    public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);\n    public static final Double DOUBLE_ONE = Double.valueOf(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);\n    public static final Float FLOAT_ZERO = Float.valueOf(0.0f);\n    public static final Float FLOAT_ONE = Float.valueOf(1.0f);\n    public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    * \n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = Long.valueOf(0L);\n    public static final Long LONG_ONE = Long.valueOf(1L);\n    public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);\n    public static final Integer INTEGER_ZERO = Integer.valueOf(0);\n    public static final Integer INTEGER_ONE = Integer.valueOf(1);\n    public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);\n    public static final Short SHORT_ZERO = Short.valueOf((short) 0);\n    public static final Short SHORT_ONE = Short.valueOf((short) 1);\n    public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);\n    public static final Double DOUBLE_ONE = Double.valueOf(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);\n    public static final Float FLOAT_ZERO = Float.valueOf(0.0f);\n    public static final Float FLOAT_ONE = Float.valueOf(1.0f);\n    public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    * \n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private boolean checkCreateNumber(final String val) {\n        try {\n            final Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (final NumberFormatException e) {\n            return false;\n       }\n    }\n    public void TestLang747() {\n        assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));\n        assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));\n        assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));\n        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));\n        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));\n        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));\n        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));\n\n        // Leading zero tests\n        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));\n        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));\n        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));\n        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));\n\n        assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));\n        assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));\n        assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));\n        assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));\n        assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));\n        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));\n        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));\n        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));\n        assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));\n\n        // Leading zero tests\n        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));\n        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));\n        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));\n        assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>FastDateParser is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement for\n * <code>SimpleDateFormat</code> in most parsing situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the\n * <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4228335\">bug</a>/RFE.\n * </p>\n *\n * <p>Only parsing is supported, but all patterns are compatible with\n * SimpleDateFormat.</p>\n *\n * <p>Timing tests indicate this class is as about as fast as SimpleDateFormat\n * in single thread applications and about 25% faster in multi-thread applications.</p>\n *\n * <p>Note that the code only handles Gregorian calendars. The following non-Gregorian\n * calendars use SimpleDateFormat internally, and so will be slower:\n * <ul>\n * <li>ja_JP_TH - Japanese Imperial</li>\n * <li>th_TH (any variant) - Thai Buddhist</li>\n * </ul>\n * </p>\n * @since 3.2\n */\npublic class FastDateParser implements DateParser, Serializable {\n    private static final long serialVersionUID = 1L;\n    private final String pattern;\n    private final TimeZone timeZone;\n    private final Locale locale;\n    private transient Pattern parsePattern;\n    private transient Strategy[] strategies;\n    private transient int thisYear;\n    private transient ConcurrentMap<Integer, KeyValue[]> nameValues;\n    private transient String currentFormatField;\n    private transient Strategy nextStrategy;\n    /**\n     * <p>Get a string version of this formatter.</p>\n     *\n     * @return a debugging string\n     */\n    @Override\n    public String toString();\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String, java.text.ParsePosition)\n     */\n    @Override\n    public Date parse(String source, ParsePosition pos);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#getTimeZone()\n     */\n    @Override\n    public TimeZone getTimeZone();\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String)\n     */\n    @Override\n    public Date parse(String source) throws ParseException;\n    /**\n     * <p>Compare another object for equality with this object.</p>\n     *\n     * @param obj  the object to compare to\n     * @return <code>true</code>if equal to this instance\n     */\n    @Override\n    public boolean equals(Object obj);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>FastDateParser is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement for\n * <code>SimpleDateFormat</code> in most parsing situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the\n * <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4228335\">bug</a>/RFE.\n * </p>\n *\n * <p>Only parsing is supported, but all patterns are compatible with\n * SimpleDateFormat.</p>\n *\n * <p>Timing tests indicate this class is as about as fast as SimpleDateFormat\n * in single thread applications and about 25% faster in multi-thread applications.</p>\n *\n * <p>Note that the code only handles Gregorian calendars. The following non-Gregorian\n * calendars use SimpleDateFormat internally, and so will be slower:\n * <ul>\n * <li>ja_JP_TH - Japanese Imperial</li>\n * <li>th_TH (any variant) - Thai Buddhist</li>\n * </ul>\n * </p>\n * @since 3.2\n */\npublic class FastDateParser implements DateParser, Serializable {\n    private static final long serialVersionUID = 1L;\n    private final String pattern;\n    private final TimeZone timeZone;\n    private final Locale locale;\n    private transient Pattern parsePattern;\n    private transient Strategy[] strategies;\n    private transient int thisYear;\n    private transient ConcurrentMap<Integer, KeyValue[]> nameValues;\n    private transient String currentFormatField;\n    private transient Strategy nextStrategy;\n    /**\n     * <p>Get a string version of this formatter.</p>\n     *\n     * @return a debugging string\n     */\n    @Override\n    public String toString();\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String, java.text.ParsePosition)\n     */\n    @Override\n    public Date parse(String source, ParsePosition pos);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#getTimeZone()\n     */\n    @Override\n    public TimeZone getTimeZone();\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String)\n     */\n    @Override\n    public Date parse(String source) throws ParseException;\n    /**\n     * <p>Compare another object for equality with this object.</p>\n     *\n     * @param obj  the object to compare to\n     * @return <code>true</code>if equal to this instance\n     */\n    @Override\n    public boolean equals(Object obj);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private DateParser getDateInstance(int dateStyle, Locale locale) {\n        return getInstance(FormatCache.getPatternForStyle(Integer.valueOf(dateStyle), null, locale), TimeZone.getDefault(), Locale.getDefault());\n    }\n    private DateParser getInstance(String format, Locale locale) {\n        return getInstance(format, TimeZone.getDefault(), locale);\n    }\n    private DateParser getInstance(String format, TimeZone timeZone) {\n        return getInstance(format, timeZone, Locale.getDefault());\n    }\n    private void testLocales(String format, boolean eraBC) throws Exception {\n\n        Calendar cal= Calendar.getInstance(GMT);\n        cal.clear();\n        cal.set(2003, 1, 10);\n        if (eraBC) {\n            cal.set(Calendar.ERA, GregorianCalendar.BC);\n        }\n        for(Locale locale : Locale.getAvailableLocales()) {\n            // ja_JP_JP cannot handle dates before 1868 properly\n            if (eraBC && locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {\n                continue;\n            }\n            SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n            DateParser fdf = getInstance(format, locale);\n\n            try {\n                checkParse(locale, cal, sdf, fdf);\n            } catch(ParseException ex) {\n                Assert.fail(\"Locale \"+locale+ \" failed with \"+format+\" era \"+(eraBC?\"BC\":\"AD\")+\"\\n\" + trimMessage(ex.toString()));\n            }\n        }\n    }\n    private String trimMessage(String msg) {\n        if (msg.length() < 100) {\n            return msg;\n        }\n        int gmt = msg.indexOf(\"(GMT\");\n        if (gmt > 0) {\n            return msg.substring(0, gmt+4)+\"...)\";\n        }\n        return msg.substring(0, 100)+\"...\";\n    }\n    private void checkParse(Locale locale, Calendar cal, SimpleDateFormat sdf, DateParser fdf) throws ParseException {\n        String formattedDate= sdf.format(cal.getTime());\n        Date expectedTime = sdf.parse(formattedDate);\n        Date actualTime = fdf.parse(formattedDate);\n        assertEquals(locale.toString()+\" \"+formattedDate\n                +\"\\n\",expectedTime, actualTime);\n    }\n    private void testSdfAndFdp(String format, String date, boolean shouldFail)\n            throws Exception {\n        Date dfdp = null;\n        Date dsdf = null;\n        Throwable f = null;\n        Throwable s = null;\n\n        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.US);\n            sdf.setTimeZone(NEW_YORK);\n            dsdf = sdf.parse(date);\n            if (shouldFail) {\n                Assert.fail(\"Expected SDF failure, but got \" + dsdf + \" for [\"+format+\",\"+date+\"]\");\n            }\n        } catch (Exception e) {\n            s = e;\n            if (!shouldFail) {\n                throw e;\n            }\n//            System.out.println(\"sdf:\"+format+\"/\"+date+\"=>\"+e);\n        }\n\n        try {\n            DateParser fdp = getInstance(format, NEW_YORK, Locale.US);\n            dfdp = fdp.parse(date);\n            if (shouldFail) {\n                Assert.fail(\"Expected FDF failure, but got \" + dfdp + \" for [\"+format+\",\"+date+\"] using \"+((FastDateParser)fdp).getParsePattern());\n            }\n        } catch (Exception e) {\n            f = e;\n            if (!shouldFail) {\n                throw e;\n            }\n//            System.out.println(\"fdf:\"+format+\"/\"+date+\"=>\"+e);\n        }\n        // SDF and FDF should produce equivalent results\n        assertTrue(\"Should both or neither throw Exceptions\", (f==null)==(s==null));\n        assertEquals(\"Parsed dates should be equal\", dsdf, dfdp);\n    }\n    public void testLANG_831() throws Exception {\n        testSdfAndFdp(\"M E\",\"3  Tue\", true);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations for random {@code String}s.</p>\n * <p>Currently <em>private high surrogate</em> characters are ignored. \n * These are Unicode characters that fall between the values 56192 (db80)\n * and 56319 (dbff) as we don't know how to handle them. \n * High and low surrogates are correctly dealt with - that is if a \n * high surrogate is randomly chosen, 55296 (d800) to 56191 (db7f) \n * then it is followed by a low surrogate. If a low surrogate is chosen, \n * 56320 (dc00) to 57343 (dfff) then it is placed after a randomly \n * chosen high surrogate. </p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0\n * @version $Id$\n */\npublic class RandomStringUtils {\n    private static final Random RANDOM = new Random();\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of all characters.</p>\n     *\n     * @param count  the length of random string to create\n     * @return the random string\n     */\n    public static String random(int count);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters\n     * specified by the string, must not be empty. \n     * If null, the set of all characters is used.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the String containing the set of characters to use,\n     *  may be null, but must not be empty\n     * @return the random string\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.\n     */\n    public static String random(int count, String chars);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param letters  if {@code true}, generated string will include\n     *  alphabetic characters\n     * @param numbers  if {@code true}, generated string will include\n     *  numeric characters\n     * @return the random string\n     */\n    public static String random(int count, boolean letters, boolean numbers);\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random);\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * default source of randomness.</p>\n     *\n     * <p>This method has exactly the same semantics as\n     * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but\n     * instead of using an externally supplied source of randomness, it uses\n     * the internal static {@link Random} instance.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from.\n     *  If {@code null}, then it will use the set of all chars.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters specified.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the character array containing the set of characters to use,\n     *  may be null\n     * @return the random string\n     * @throws IllegalArgumentException if {@code count} &lt; 0.\n     */\n    public static String random(int count, char... chars);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  if {@code true}, generated string will include\n     *  alphabetic characters\n     * @param numbers  if {@code true}, generated string will include\n     *  numeric characters\n     * @return the random string\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations for random {@code String}s.</p>\n * <p>Currently <em>private high surrogate</em> characters are ignored. \n * These are Unicode characters that fall between the values 56192 (db80)\n * and 56319 (dbff) as we don't know how to handle them. \n * High and low surrogates are correctly dealt with - that is if a \n * high surrogate is randomly chosen, 55296 (d800) to 56191 (db7f) \n * then it is followed by a low surrogate. If a low surrogate is chosen, \n * 56320 (dc00) to 57343 (dfff) then it is placed after a randomly \n * chosen high surrogate. </p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0\n * @version $Id$\n */\npublic class RandomStringUtils {\n    private static final Random RANDOM = new Random();\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of all characters.</p>\n     *\n     * @param count  the length of random string to create\n     * @return the random string\n     */\n    public static String random(int count);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters\n     * specified by the string, must not be empty. \n     * If null, the set of all characters is used.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the String containing the set of characters to use,\n     *  may be null, but must not be empty\n     * @return the random string\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.\n     */\n    public static String random(int count, String chars);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param letters  if {@code true}, generated string will include\n     *  alphabetic characters\n     * @param numbers  if {@code true}, generated string will include\n     *  numeric characters\n     * @return the random string\n     */\n    public static String random(int count, boolean letters, boolean numbers);\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random);\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * default source of randomness.</p>\n     *\n     * <p>This method has exactly the same semantics as\n     * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but\n     * instead of using an externally supplied source of randomness, it uses\n     * the internal static {@link Random} instance.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from.\n     *  If {@code null}, then it will use the set of all chars.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters specified.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the character array containing the set of characters to use,\n     *  may be null\n     * @return the random string\n     * @throws IllegalArgumentException if {@code count} &lt; 0.\n     */\n    public static String random(int count, char... chars);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  if {@code true}, generated string will include\n     *  alphabetic characters\n     * @param numbers  if {@code true}, generated string will include\n     *  numeric characters\n     * @return the random string\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private double chiSquare(int[] expected, int[] observed) {\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = observed[i] - expected[i];\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }           \n    public void testLANG807() {\n        try {\n            RandomStringUtils.random(3,5,5,false,false);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) { // distinguish from Random#nextInt message\n            final String msg = ex.getMessage();\n            assertTrue(\"Message (\" + msg + \") must contain 'start'\", msg.contains(\"start\"));\n            assertTrue(\"Message (\" + msg + \") must contain 'end'\", msg.contains(\"end\"));\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations for random {@code String}s.</p>\n * <p>Currently <em>private high surrogate</em> characters are ignored. \n * These are Unicode characters that fall between the values 56192 (db80)\n * and 56319 (dbff) as we don't know how to handle them. \n * High and low surrogates are correctly dealt with - that is if a \n * high surrogate is randomly chosen, 55296 (d800) to 56191 (db7f) \n * then it is followed by a low surrogate. If a low surrogate is chosen, \n * 56320 (dc00) to 57343 (dfff) then it is placed after a randomly \n * chosen high surrogate. </p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0\n * @version $Id$\n */\npublic class RandomStringUtils {\n    private static final Random RANDOM = new Random();\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of all characters.</p>\n     *\n     * @param count  the length of random string to create\n     * @return the random string\n     */\n    public static String random(int count);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  if {@code true}, generated string will include\n     *  alphabetic characters\n     * @param numbers  if {@code true}, generated string will include\n     *  numeric characters\n     * @return the random string\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param letters  if {@code true}, generated string will include\n     *  alphabetic characters\n     * @param numbers  if {@code true}, generated string will include\n     *  numeric characters\n     * @return the random string\n     */\n    public static String random(int count, boolean letters, boolean numbers);\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters\n     * specified by the string, must not be empty. \n     * If null, the set of all characters is used.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the String containing the set of characters to use,\n     *  may be null, but must not be empty\n     * @return the random string\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.\n     */\n    public static String random(int count, String chars);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters specified.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the character array containing the set of characters to use,\n     *  may be null\n     * @return the random string\n     * @throws IllegalArgumentException if {@code count} &lt; 0.\n     */\n    public static String random(int count, char... chars);\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * default source of randomness.</p>\n     *\n     * <p>This method has exactly the same semantics as\n     * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but\n     * instead of using an externally supplied source of randomness, it uses\n     * the internal static {@link Random} instance.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from.\n     *  If {@code null}, then it will use the set of all chars.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations for random {@code String}s.</p>\n * <p>Currently <em>private high surrogate</em> characters are ignored. \n * These are Unicode characters that fall between the values 56192 (db80)\n * and 56319 (dbff) as we don't know how to handle them. \n * High and low surrogates are correctly dealt with - that is if a \n * high surrogate is randomly chosen, 55296 (d800) to 56191 (db7f) \n * then it is followed by a low surrogate. If a low surrogate is chosen, \n * 56320 (dc00) to 57343 (dfff) then it is placed after a randomly \n * chosen high surrogate. </p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0\n * @version $Id$\n */\npublic class RandomStringUtils {\n    private static final Random RANDOM = new Random();\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of all characters.</p>\n     *\n     * @param count  the length of random string to create\n     * @return the random string\n     */\n    public static String random(int count);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  if {@code true}, generated string will include\n     *  alphabetic characters\n     * @param numbers  if {@code true}, generated string will include\n     *  numeric characters\n     * @return the random string\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of alpha-numeric\n     * characters as indicated by the arguments.</p>\n     *\n     * @param count  the length of random string to create\n     * @param letters  if {@code true}, generated string will include\n     *  alphabetic characters\n     * @param numbers  if {@code true}, generated string will include\n     *  numeric characters\n     * @return the random string\n     */\n    public static String random(int count, boolean letters, boolean numbers);\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters\n     * specified by the string, must not be empty. \n     * If null, the set of all characters is used.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the String containing the set of characters to use,\n     *  may be null, but must not be empty\n     * @return the random string\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.\n     */\n    public static String random(int count, String chars);\n    /**\n     * <p>Creates a random string whose length is the number of characters\n     * specified.</p>\n     *\n     * <p>Characters will be chosen from the set of characters specified.</p>\n     *\n     * @param count  the length of random string to create\n     * @param chars  the character array containing the set of characters to use,\n     *  may be null\n     * @return the random string\n     * @throws IllegalArgumentException if {@code count} &lt; 0.\n     */\n    public static String random(int count, char... chars);\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * default source of randomness.</p>\n     *\n     * <p>This method has exactly the same semantics as\n     * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but\n     * instead of using an externally supplied source of randomness, it uses\n     * the internal static {@link Random} instance.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from.\n     *  If {@code null}, then it will use the set of all chars.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private double chiSquare(int[] expected, int[] observed) {\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = observed[i] - expected[i];\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }           \n    public void testExceptions() {\n        final char[] DUMMY = new char[]{'a'}; // valid char array\n        try {\n            RandomStringUtils.random(-1);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, true, true);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, DUMMY);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, \"\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, (String)null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Assists with the serialization process and performs additional functionality based\n * on serialization.</p>\n * <p>\n * <ul>\n * <li>Deep clone using serialization\n * <li>Serialize managing finally and IOException\n * <li>Deserialize managing finally and IOException\n * </ul>\n *\n * <p>This class throws exceptions for invalid {@code null} inputs.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0\n * @version $Id$\n */\npublic class SerializationUtils {\n    /**\n     * <p>Deep clone an {@code Object} using serialization.</p>\n     *\n     * <p>This is many times slower than writing clone methods by hand\n     * on all objects in your object graph. However, for complex object\n     * graphs, or for those that don't support deep cloning this can\n     * be a simple alternative implementation. Of course all the objects\n     * must be {@code Serializable}.</p>\n     *\n     * @param <T> the type of the object involved\n     * @param object  the {@code Serializable} object to clone\n     * @return the cloned object\n     * @throws SerializationException (runtime) if the serialization fails\n     */\n    public static <T extends Serializable> T clone(T object);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Assists with the serialization process and performs additional functionality based\n * on serialization.</p>\n * <p>\n * <ul>\n * <li>Deep clone using serialization\n * <li>Serialize managing finally and IOException\n * <li>Deserialize managing finally and IOException\n * </ul>\n *\n * <p>This class throws exceptions for invalid {@code null} inputs.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0\n * @version $Id$\n */\npublic class SerializationUtils {\n    /**\n     * <p>Deep clone an {@code Object} using serialization.</p>\n     *\n     * <p>This is many times slower than writing clone methods by hand\n     * on all objects in your object graph. However, for complex object\n     * graphs, or for those that don't support deep cloning this can\n     * be a simple alternative implementation. Of course all the objects\n     * must be {@code Serializable}.</p>\n     *\n     * @param <T> the type of the object involved\n     * @param object  the {@code Serializable} object to clone\n     * @return the cloned object\n     * @throws SerializationException (runtime) if the serialization fails\n     */\n    public static <T extends Serializable> T clone(T object);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void readObject(ObjectInputStream in) throws ClassNotFoundException    {\n        throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE);\n    }\n    public void testPrimitiveTypeClassSerialization() {\n        Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class,\n                boolean.class, char.class, void.class };\n\n        for (Class<?> primitiveType : primitiveTypes) {\n            Class<?> clone = SerializationUtils.clone(primitiveType);\n            assertEquals(primitiveType, clone);\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * {@code null} safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevenshteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The {@code StringUtils} class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - {@code null}</li>\n *  <li>empty - a zero-length string ({@code \"\"})</li>\n *  <li>space - the space character ({@code ' '}, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p>{@code StringUtils} handles {@code null} input Strings quietly.\n * That is to say that a {@code null} input will return {@code null}.\n * Where a {@code boolean} or {@code int} is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the {@code null} handling is that a\n * {@code NullPointerException} should be considered a bug in\n * {@code StringUtils}.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol {@code *} is used to indicate any input including {@code null}.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    private static final Pattern WHITESPACE_BLOCK = Pattern.compile(\"\\\\s+\");\n    /**\n     * <p>Compares two CharSequences, returning {@code true} if they represent\n     * equal sequences of characters.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * @see java.lang.CharSequence#equals(Object)\n     * @param cs1  the first CharSequence, may be {@code null}\n     * @param cs2  the second CharSequence, may be {@code null}\n     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n     * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n     */\n    public static boolean equals(CharSequence cs1, CharSequence cs2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * {@code null} safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevenshteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The {@code StringUtils} class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - {@code null}</li>\n *  <li>empty - a zero-length string ({@code \"\"})</li>\n *  <li>space - the space character ({@code ' '}, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p>{@code StringUtils} handles {@code null} input Strings quietly.\n * That is to say that a {@code null} input will return {@code null}.\n * Where a {@code boolean} or {@code int} is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the {@code null} handling is that a\n * {@code NullPointerException} should be considered a bug in\n * {@code StringUtils}.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol {@code *} is used to indicate any input including {@code null}.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    private static final Pattern WHITESPACE_BLOCK = Pattern.compile(\"\\\\s+\");\n    /**\n     * <p>Compares two CharSequences, returning {@code true} if they represent\n     * equal sequences of characters.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * @see java.lang.CharSequence#equals(Object)\n     * @param cs1  the first CharSequence, may be {@code null}\n     * @param cs2  the second CharSequence, may be {@code null}\n     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n     * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n     */\n    public static boolean equals(CharSequence cs1, CharSequence cs2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testEquals() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        assertTrue(StringUtils.equals(null, null));\n        assertTrue(StringUtils.equals(fooCs, fooCs));\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));\n        assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));\n        assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));\n        assertFalse(StringUtils.equals(fooCs, barCs));\n        assertFalse(StringUtils.equals(fooCs, null));\n        assertFalse(StringUtils.equals(null, fooCs));\n        assertFalse(StringUtils.equals(fooCs, foobarCs));\n        assertFalse(StringUtils.equals(foobarCs, fooCs));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p> Utility methods focusing on type inspection, particularly with regard to\n * generics. </p>\n *\n * @since 3.0\n * @version $Id$\n */\npublic class TypeUtils {\n    /**\n     * <p> Return a map of the type arguments of <code>type</code> in the context of <code>toClass</code>. </p>\n     *\n     * @param type the type in question\n     * @param toClass the class\n     * @param subtypeVarAssigns a map with type variables\n     * @return the map with type arguments\n     */\n    private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns);\n    /**\n     * <p> Retrieves all the type arguments for this parameterized type\n     * including owner hierarchy arguments such as <code>\n     * Outer<K,V>.Inner<T>.DeepInner<E></code> . The arguments are returned in a\n     * {@link Map} specifying the argument type for each {@link TypeVariable}.\n     * </p>\n     *\n     * @param type specifies the subject parameterized type from which to\n     * harvest the parameters.\n     * @return a map of the type arguments to their respective type variables.\n     */\n    public static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type);\n    private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns);\n    /**\n     * <p> Return a map of the type arguments of a parameterized type in the context of <code>toClass</code>. </p>\n     *\n     * @param parameterizedType the parameterized type\n     * @param toClass the class\n     * @param subtypeVarAssigns a map with type variables\n     * @return the map with type arguments\n     */\n    private static Map<TypeVariable<?>, Type> getTypeArguments(\n            ParameterizedType parameterizedType, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns);\n    public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass);\n    /**\n     * <p> Checks if the subject type may be implicitly cast to the target\n     * parameterized type following the Java generics rules. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toParameterizedType the target parameterized type\n     * @param typeVarAssigns a map with type variables\n     * @return true if <code>type</code> is assignable to <code>toType</code>.\n     */\n    private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n            Map<TypeVariable<?>, Type> typeVarAssigns);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p> Utility methods focusing on type inspection, particularly with regard to\n * generics. </p>\n *\n * @since 3.0\n * @version $Id$\n */\npublic class TypeUtils {\n    /**\n     * <p> Return a map of the type arguments of <code>type</code> in the context of <code>toClass</code>. </p>\n     *\n     * @param type the type in question\n     * @param toClass the class\n     * @param subtypeVarAssigns a map with type variables\n     * @return the map with type arguments\n     */\n    private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns);\n    /**\n     * <p> Retrieves all the type arguments for this parameterized type\n     * including owner hierarchy arguments such as <code>\n     * Outer<K,V>.Inner<T>.DeepInner<E></code> . The arguments are returned in a\n     * {@link Map} specifying the argument type for each {@link TypeVariable}.\n     * </p>\n     *\n     * @param type specifies the subject parameterized type from which to\n     * harvest the parameters.\n     * @return a map of the type arguments to their respective type variables.\n     */\n    public static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type);\n    private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns);\n    /**\n     * <p> Return a map of the type arguments of a parameterized type in the context of <code>toClass</code>. </p>\n     *\n     * @param parameterizedType the parameterized type\n     * @param toClass the class\n     * @param subtypeVarAssigns a map with type variables\n     * @return the map with type arguments\n     */\n    private static Map<TypeVariable<?>, Type> getTypeArguments(\n            ParameterizedType parameterizedType, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns);\n    public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass);\n    /**\n     * <p> Checks if the subject type may be implicitly cast to the target\n     * parameterized type following the Java generics rules. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toParameterizedType the target parameterized type\n     * @param typeVarAssigns a map with type variables\n     * @return true if <code>type</code> is assignable to <code>toType</code>.\n     */\n    private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n            Map<TypeVariable<?>, Type> typeVarAssigns);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testGetTypeArguments() {\n        Map<TypeVariable<?>, Type> typeVarAssigns;\n        TypeVariable<?> treeSetTypeVar;\n        Type typeArg;\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        Assert.assertTrue(\"Type var assigns for Comparable from Integer: \" + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar));\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        Assert.assertEquals(\"Type argument of Comparable from Integer: \" + typeArg, Integer.class, typeVarAssigns.get(treeSetTypeVar));\n\n        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        Assert.assertTrue(\"Type var assigns for Comparable from int: \" + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar));\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        Assert.assertEquals(\"Type argument of Comparable from int: \" + typeArg, Integer.class, typeVarAssigns.get(treeSetTypeVar));\n\n        Collection<Integer> col = Arrays.asList(new Integer[0]);\n        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        Assert.assertFalse(\"Type var assigns for Collection from List: \" + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar));\n\n        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\n        Assert.assertTrue(typeVarAssigns.size() == 2);\n        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));\n        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n        Assert.assertEquals(2, typeVarAssigns.size());\n        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n        Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = Long.valueOf(0L);\n    public static final Long LONG_ONE = Long.valueOf(1L);\n    public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);\n    public static final Integer INTEGER_ZERO = Integer.valueOf(0);\n    public static final Integer INTEGER_ONE = Integer.valueOf(1);\n    public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);\n    public static final Short SHORT_ZERO = Short.valueOf((short) 0);\n    public static final Short SHORT_ONE = Short.valueOf((short) 1);\n    public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);\n    public static final Double DOUBLE_ONE = Double.valueOf(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);\n    public static final Float FLOAT_ZERO = Float.valueOf(0.0f);\n    public static final Float FLOAT_ONE = Float.valueOf(1.0f);\n    public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = Long.valueOf(0L);\n    public static final Long LONG_ONE = Long.valueOf(1L);\n    public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);\n    public static final Integer INTEGER_ZERO = Integer.valueOf(0);\n    public static final Integer INTEGER_ONE = Integer.valueOf(1);\n    public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);\n    public static final Short SHORT_ZERO = Short.valueOf((short) 0);\n    public static final Short SHORT_ONE = Short.valueOf((short) 1);\n    public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);\n    public static final Double DOUBLE_ONE = Double.valueOf(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);\n    public static final Float FLOAT_ZERO = Float.valueOf(0.0f);\n    public static final Float FLOAT_ONE = Float.valueOf(1.0f);\n    public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n       }\n    }\n    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\" + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());\n        assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils .createNumber(\"12345678901234567890L\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils .createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils .createNumber(\"10\" + Long.MAX_VALUE));\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));\n\n        // LANG-638\n        assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));\n\n        // LANG-693\n        assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils .createNumber(\"\" + Double.MAX_VALUE));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * An API for translating text. \n * Its core use is to escape and unescape text. Because escaping and unescaping \n * is completely contextual, the API does not present two separate signatures.\n * \n * @since 3.0\n * @version $Id$\n */\npublic abstract class CharSequenceTranslator {\n    public abstract int translate(CharSequence input, int index, Writer out) throws IOException;\n    /**\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     */\n    public final String translate(CharSequence input);\n    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException;\n    /**\n     * Translate a set of codepoints, represented by an int index into a CharSequence, \n     * into another set of codepoints. The number of codepoints consumed must be returned, \n     * and the only IOExceptions thrown must be from interacting with the Writer so that \n     * the top level API may reliable ignore StringWriter IOExceptions. \n     *\n     * @param input CharSequence that is being translated\n     * @param index int representing the current point of translation\n     * @param out Writer to translate the text to\n     * @return int count of codepoints consumed\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public abstract int translate(CharSequence input, int index, Writer out) throws IOException;\n\n    /**\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     */\n    public final String translate(CharSequence input);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * An API for translating text. \n * Its core use is to escape and unescape text. Because escaping and unescaping \n * is completely contextual, the API does not present two separate signatures.\n * \n * @since 3.0\n * @version $Id$\n */\npublic abstract class CharSequenceTranslator {\n    public abstract int translate(CharSequence input, int index, Writer out) throws IOException;\n    /**\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     */\n    public final String translate(CharSequence input);\n    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException;\n    /**\n     * Translate a set of codepoints, represented by an int index into a CharSequence, \n     * into another set of codepoints. The number of codepoints consumed must be returned, \n     * and the only IOExceptions thrown must be from interacting with the Writer so that \n     * the top level API may reliable ignore StringWriter IOExceptions. \n     *\n     * @param input CharSequence that is being translated\n     * @param index int representing the current point of translation\n     * @param out Writer to translate the text to\n     * @return int count of codepoints consumed\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public abstract int translate(CharSequence input, int index, Writer out) throws IOException;\n\n    /**\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     */\n    public final String translate(CharSequence input);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertEscapeJava(String escaped, String original) throws IOException {\n        assertEscapeJava(null, escaped, original);\n    }\n    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n        String converted = StringEscapeUtils.escapeJava(original);\n        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n        assertEquals(message, expected, converted);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.ESCAPE_JAVA.translate(original, writer);\n        assertEquals(expected, writer.toString());\n    }\n    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n        assertUnescapeJava(null, unescaped, original);\n    }\n    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n        String expected = unescaped;\n        String actual = StringEscapeUtils.unescapeJava(original);\n\n        assertEquals(\"unescape(String) failed\" +\n                (message == null ? \"\" : (\": \" + message)) +\n                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n                // we escape this so we can see it in the error message\n                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                expected, actual);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.UNESCAPE_JAVA.translate(original, writer);\n        assertEquals(unescaped, writer.toString());\n\n    }\n    private void checkCsvEscapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.ESCAPE_CSV.translate(value, writer);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }\n    private void checkCsvUnescapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.UNESCAPE_CSV.translate(value, writer);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }\n    public void testLang720() {\n        String input = new StringBuilder(\"\\ud842\\udfb7\").append(\"A\").toString();\n        String escaped = StringEscapeUtils.escapeXml(input);\n        assertEquals(input, escaped);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * {@code SimpleDateFormat} in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * {@code SimpleDateFormat} is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones and some year patterns - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern {@code 'ZZ'} has been made to represent\n * ISO8601 full format time zones (eg. {@code +08:00} or {@code -11:00}).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * <p>Javadoc cites for the year pattern: <i>For formatting, if the number of\n * pattern letters is 2, the year is truncated to 2 digits; otherwise it is\n * interpreted as a number.</i> Starting with Java 1.7 a pattern of 'Y' or\n * 'YYY' will be formatted as '2003', while it was '03' in former Java\n * versions. FastDateFormat implements the behavior of Java 7.</p>\n *\n * @since 2.0\n * @version $Id$\n */\npublic class FastDateFormat extends Format {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    /**\n     * <p>Formats a {@code Calendar} object into the\n     * supplied {@code StringBuffer}.</p>\n     *\n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Calendar calendar, StringBuffer buf);\n    /**\n     * <p>Formats a {@code Date}, {@code Calendar} or\n     * {@code Long} (milliseconds) object.</p>\n     *\n     * @param obj  the object to format\n     * @param toAppendTo  the buffer to append to\n     * @param pos  the position - ignored\n     * @return the buffer passed in\n     */\n    @Override\n    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos);\n    /**\n     * <p>Gets the time zone used by this formatter.</p>\n     *\n     * <p>This zone is always used for {@code Date} formatting. </p>\n     *\n     * @return the time zone\n     */\n    public TimeZone getTimeZone();\n    /**\n     * <p>Gets a formatter instance using the default pattern in the\n     * default locale.</p>\n     *\n     * @return a date/time formatter\n     */\n    public static FastDateFormat getInstance();\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, Locale locale);\n    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern);\n    /**\n     * <p>Returns a list of Rules given a pattern.</p>\n     *\n     * @return a {@code List} of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    protected List<Rule> parsePattern();\n    /**\n     * <p>Formats a {@code Date} object using a {@code GregorianCalendar}.</p>\n     *\n     * @param date  the date to format\n     * @return the formatted string\n     */\n    public String format(Date date);\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone);\n    /**\n     * <p>Formats a {@code Date} object into the\n     * supplied {@code StringBuffer} using a {@code GregorianCalendar}.</p>\n     *\n     * @param date  the date to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Date date, StringBuffer buf);\n    /**\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     */\n    public String format(Calendar calendar);\n    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or {@code null}\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale);\n    /**\n     * <p>Formats a millisecond {@code long} value.</p>\n     *\n     * @param millis  the millisecond value to format\n     * @return the formatted string\n     * @since 2.1\n     */\n    public String format(long millis);\n    /**\n     * <p>Formats a milliseond {@code long} value into the\n     * supplied {@code StringBuffer}.</p>\n     *\n     * @param millis  the millisecond value to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     * @since 2.1\n     */\n    public StringBuffer format(long millis, StringBuffer buf);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * {@code SimpleDateFormat} in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * {@code SimpleDateFormat} is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones and some year patterns - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern {@code 'ZZ'} has been made to represent\n * ISO8601 full format time zones (eg. {@code +08:00} or {@code -11:00}).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * <p>Javadoc cites for the year pattern: <i>For formatting, if the number of\n * pattern letters is 2, the year is truncated to 2 digits; otherwise it is\n * interpreted as a number.</i> Starting with Java 1.7 a pattern of 'Y' or\n * 'YYY' will be formatted as '2003', while it was '03' in former Java\n * versions. FastDateFormat implements the behavior of Java 7.</p>\n *\n * @since 2.0\n * @version $Id$\n */\npublic class FastDateFormat extends Format {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    /**\n     * <p>Formats a {@code Calendar} object into the\n     * supplied {@code StringBuffer}.</p>\n     *\n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Calendar calendar, StringBuffer buf);\n    /**\n     * <p>Formats a {@code Date}, {@code Calendar} or\n     * {@code Long} (milliseconds) object.</p>\n     *\n     * @param obj  the object to format\n     * @param toAppendTo  the buffer to append to\n     * @param pos  the position - ignored\n     * @return the buffer passed in\n     */\n    @Override\n    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos);\n    /**\n     * <p>Gets the time zone used by this formatter.</p>\n     *\n     * <p>This zone is always used for {@code Date} formatting. </p>\n     *\n     * @return the time zone\n     */\n    public TimeZone getTimeZone();\n    /**\n     * <p>Gets a formatter instance using the default pattern in the\n     * default locale.</p>\n     *\n     * @return a date/time formatter\n     */\n    public static FastDateFormat getInstance();\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, Locale locale);\n    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern);\n    /**\n     * <p>Returns a list of Rules given a pattern.</p>\n     *\n     * @return a {@code List} of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    protected List<Rule> parsePattern();\n    /**\n     * <p>Formats a {@code Date} object using a {@code GregorianCalendar}.</p>\n     *\n     * @param date  the date to format\n     * @return the formatted string\n     */\n    public String format(Date date);\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone);\n    /**\n     * <p>Formats a {@code Date} object into the\n     * supplied {@code StringBuffer} using a {@code GregorianCalendar}.</p>\n     *\n     * @param date  the date to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Date date, StringBuffer buf);\n    /**\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     */\n    public String format(Calendar calendar);\n    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or {@code null}\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale);\n    /**\n     * <p>Formats a millisecond {@code long} value.</p>\n     *\n     * @param millis  the millisecond value to format\n     * @return the formatted string\n     * @since 2.1\n     */\n    public String format(long millis);\n    /**\n     * <p>Formats a milliseond {@code long} value into the\n     * supplied {@code StringBuffer}.</p>\n     *\n     * @param millis  the millisecond value to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     * @since 2.1\n     */\n    public StringBuffer format(long millis, StringBuffer buf);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testFormat() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            assertEquals(sdf.format(date1), fdf.format(date1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            assertEquals(\"-0500\", fdf.format(date1));\n            assertEquals(\"-0500\", fdf.format(cal1));\n            assertEquals(\"-0500\", fdf.format(millis1));\n\n            assertEquals(\"-0400\", fdf.format(date2));\n            assertEquals(\"-0400\", fdf.format(cal2));\n            assertEquals(\"-0400\", fdf.format(millis2));\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            assertEquals(\"-05:00\", fdf.format(date1));\n            assertEquals(\"-05:00\", fdf.format(cal1));\n            assertEquals(\"-05:00\", fdf.format(millis1));\n\n            assertEquals(\"-04:00\", fdf.format(date2));\n            assertEquals(\"-04:00\", fdf.format(cal2));\n            assertEquals(\"-04:00\", fdf.format(millis2));\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));\n            assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Translate XML numeric entities of the form &#[xX]?\\d+;? to \n * the specific codepoint.\n *\n * Note that the semi-colon is optional.\n * \n * @since 3.0\n * @version $Id$\n */\npublic class NumericEntityUnescaper extends CharSequenceTranslator {\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Translate XML numeric entities of the form &#[xX]?\\d+;? to \n * the specific codepoint.\n *\n * Note that the semi-colon is optional.\n * \n * @since 3.0\n * @version $Id$\n */\npublic class NumericEntityUnescaper extends CharSequenceTranslator {\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testUnfinishedEntity() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n        String input = \"Test &#x30 not test\";\n        String expected = \"Test \\u0030 not test\";\n\n        String result = neu.translate(input);\n        assertEquals(\"Failed to support unfinished entities (i.e. missing semi-colon\", expected, result);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * {@code null} safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The {@code StringUtils} class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - {@code null}</li>\n *  <li>empty - a zero-length string ({@code \"\"})</li>\n *  <li>space - the space character ({@code ' '}, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p>{@code StringUtils} handles {@code null} input Strings quietly.\n * That is to say that a {@code null} input will return {@code null}.\n * Where a {@code boolean} or {@code int} is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the {@code null} handling is that a\n * {@code NullPointerException} should be considered a bug in\n * {@code StringUtils}.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol {@code *} is used to indicate any input including {@code null}.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    private static final Pattern WHITESPACE_BLOCK = Pattern.compile(\"\\\\s+\");\n    /**\n     * <p>Finds the first index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(String, int)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"\", *)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchSeq  the CharSequence to find, may be null\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, String) to indexOf(CharSequence, CharSequence)\n     */\n    public static int indexOf(CharSequence seq, CharSequence searchSeq);\n    /**\n     * <p>Splits the provided text into an array, separator specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a..b.c\", '.')   = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.split(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChar  the character used as the delimiter\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.0\n     */\n    public static String[] split(String str, char separatorChar);\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     */\n    public static String join(Object[] array, char separator);\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     */\n    public static String join(Object[] array, char separator, int startIndex, int endIndex);\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, {@code null} if null array input\n     */\n    public static String join(Object[] array, String separator);\n    /**\n     * <p>Joins the elements of the provided {@code Iterator} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterator  the {@code Iterator} of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, {@code null} if null iterator input\n     */\n    public static String join(Iterator<?> iterator, String separator);\n    /**\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator, preserving all tokens, including empty tokens created by\n     * adjacent separators. This is an alternative to using StringTokenizer.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null)       = null\n     * StringUtils.splitPreserveAllTokens(\"\")         = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\") = [\"abc\", \"\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\" abc \")    = [\"\", \"abc\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str);\n    /**\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified, preserving all tokens, including empty tokens\n     * created by adjacent separators.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than {@code max} delimited substrings are found, the last\n     * returned string includes all characters after the first {@code max - 1}\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *, *)            = null\n     * StringUtils.splitPreserveAllTokens(\"\", *, *)              = []\n     * StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2) = [\"ab\", \"  de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3) = [\"ab\", \"\", \" de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4) = [\"ab\", \"\", \"\", \"de fg\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, String separatorChars, int max);\n    /**\n     * Gets a CharSequence length or {@code 0} if the CharSequence is\n     * {@code null}.\n     *\n     * @param cs\n     *            a CharSequence or {@code null}\n     * @return CharSequence length or {@code 0} if the CharSequence is\n     *         {@code null}.\n     * @since 2.4\n     * @since 3.0 Changed signature from length(String) to length(CharSequence)\n     */\n    public static int length(CharSequence cs);\n    /**\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start {@code n}\n     * characters from the end of the String.</p>\n     *\n     * <p>A {@code null} String will return {@code null}.\n     * An empty (\"\") String will return \"\".</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *)   = null\n     * StringUtils.substring(\"\", *)     = \"\"\n     * StringUtils.substring(\"abc\", 0)  = \"abc\"\n     * StringUtils.substring(\"abc\", 2)  = \"c\"\n     * StringUtils.substring(\"abc\", 4)  = \"\"\n     * StringUtils.substring(\"abc\", -2) = \"bc\"\n     * StringUtils.substring(\"abc\", -4) = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position, {@code null} if null String input\n     */\n    public static String substring(String str, int start);\n    /**\n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"...is the time for...\"</p>\n     *\n     * <p>Works like {@code abbreviate(String, int)}, but allows you to specify\n     * a \"left edge\" offset.  Note that this left edge is not necessarily going to\n     * be the leftmost character in the result, or the first character following the\n     * ellipses, but it will appear somewhere in the result.\n     *\n     * <p>In no case will it return a String of length greater than\n     * {@code maxWidth}.</p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *, *)                = null\n     * StringUtils.abbreviate(\"\", 0, 4)                  = \"\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", -1, 10) = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 0, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 1, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 4, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 5, 10)  = \"...fghi...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 6, 10)  = \"...ghij...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 8, 10)  = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 10, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 12, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghij\", 0, 3)        = IllegalArgumentException\n     * StringUtils.abbreviate(\"abcdefghij\", 5, 6)        = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param offset  left edge of source String\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, {@code null} if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */\n    public static String abbreviate(String str, int offset, int maxWidth);\n    /**\n     * <p>Finds the first index within a CharSequence from a start position,\n     * handling {@code null}.\n     * This method uses {@link String#indexOf(int, int)} if possible.</p>\n     *\n     * <p>A {@code null} or empty (\"\") CharSequence will return {@code (INDEX_NOT_FOUND) -1}.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, int, int) to indexOf(CharSequence, int, int)\n     */\n    public static int indexOf(CharSequence seq, int searchChar, int startPos);\n    /**\n     * <p>Splits the provided text into an array, separators specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"abc def\", null) = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc def\", \" \")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\", \" \") = [\"abc\", \"def\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    public static String[] split(String str, String separatorChars);\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No separator is added to the joined String.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null)            = null\n     * StringUtils.join([])              = \"\"\n     * StringUtils.join([null])          = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"]) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"]) = \"a\"\n     * </pre>\n     *\n     * @param <T> the specific type of values to join together\n     * @param elements  the values to join together, may be null\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     * @since 3.0 Changed signature to use varargs\n     */\n    public static <T> String join(T... elements);\n    /**\n     * <p>Joins the elements of the provided {@code Iterable} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterable  the {@code Iterable} providing the values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, {@code null} if null iterator input\n     * @since 2.3\n     */\n    public static String join(Iterable<?> iterable, String separator);\n    /**\n     * <p>Finds the first index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(int, int)} if possible.</p>\n     *\n     * <p>A {@code null} or empty (\"\") CharSequence will return {@code INDEX_NOT_FOUND (-1)}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, int) to indexOf(CharSequence, int)\n     */\n    public static int indexOf(CharSequence seq, int searchChar);\n    /**\n     * <p>Finds the first index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(String, int)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search CharSequence always matches.\n     * A start position greater than the string length only matches\n     * an empty search CharSequence.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"\", *, 0)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchSeq  the CharSequence to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, String, int) to indexOf(CharSequence, CharSequence, int)\n     */\n    public static int indexOf(CharSequence seq, CharSequence searchSeq, int startPos);\n    /**\n     * <p>Splits the provided text into an array, separator specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)         = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)           = []\n     * StringUtils.splitPreserveAllTokens(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a..b.c\", '.')   = [\"a\", \"\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.splitPreserveAllTokens(\"a\\tb\\nc\", null) = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c \", ' ')   = [\"a\", \"b\", \"c\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c  \", ' ')   = [\"a\", \"b\", \"c\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c\", ' ')   = [\"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"  a b c\", ' ')  = [\"\", \"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c \", ' ')  = [\"\", a\", \"b\", \"c\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChar  the character used as the delimiter,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, char separatorChar);\n    /**\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.split(null)       = null\n     * StringUtils.split(\"\")         = []\n     * StringUtils.split(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\") = [\"abc\", \"def\"]\n     * StringUtils.split(\" abc \")    = [\"abc\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    public static String[] split(String str);\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, {@code null} if null array input\n     */\n    public static String join(Object[] array, String separator, int startIndex, int endIndex);\n    /**\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start/end {@code n}\n     * characters from the end of the String.</p>\n     *\n     * <p>The returned substring starts with the character in the {@code start}\n     * position and ends before the {@code end} position. All position counting is\n     * zero-based -- i.e., to start at the beginning of the string use\n     * {@code start = 0}. Negative start and end positions can be used to\n     * specify offsets relative to the end of the String.</p>\n     *\n     * <p>If {@code start} is not strictly to the left of {@code end}, \"\"\n     * is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *, *)    = null\n     * StringUtils.substring(\"\", * ,  *)    = \"\";\n     * StringUtils.substring(\"abc\", 0, 2)   = \"ab\"\n     * StringUtils.substring(\"abc\", 2, 0)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 4)   = \"c\"\n     * StringUtils.substring(\"abc\", 4, 6)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 2)   = \"\"\n     * StringUtils.substring(\"abc\", -2, -1) = \"b\"\n     * StringUtils.substring(\"abc\", -4, 2)  = \"ab\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @param end  the position to end at (exclusive), negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position to end positon,\n     *  {@code null} if null String input\n     */\n    public static String substring(String str, int start, int end);\n    /**\n     * <p>Joins the elements of the provided {@code Iterator} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterator  the {@code Iterator} of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, {@code null} if null iterator input\n     * @since 2.0\n     */\n    public static String join(Iterator<?> iterator, char separator);\n    /**\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than {@code max} delimited substrings are found, the last\n     * returned string includes all characters after the first {@code max - 1}\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *, *)            = null\n     * StringUtils.split(\"\", *, *)              = []\n     * StringUtils.split(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    public static String[] split(String str, String separatorChars, int max);\n    /**\n     * <p>Splits the provided text into an array, separators specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)           = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)             = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\", null)   = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc def\", \" \")    = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\", \" \")   = [\"abc\", \"\", def\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\")   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef:\", \":\")  = [\"ab\", \"cd\", \"ef\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef::\", \":\") = [\"ab\", \"cd\", \"ef\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab::cd:ef\", \":\")  = [\"ab\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef\", \":\")     = [\"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"::cd:ef\", \":\")    = [\"\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef:\", \":\")    = [\"\", cd\", \"ef\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, String separatorChars);\n    /**\n     * <p>Joins the elements of the provided {@code Iterable} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterable  the {@code Iterable} providing the values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, {@code null} if null iterator input\n     * @since 2.3\n     */\n    public static String join(Iterable<?> iterable, char separator);\n    /**\n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n     *\n     * <p>Specifically:\n     * <ul>\n     *   <li>If {@code str} is less than {@code maxWidth} characters\n     *       long, return it.</li>\n     *   <li>Else abbreviate it to {@code (substring(str, 0, max-3) + \"...\")}.</li>\n     *   <li>If {@code maxWidth} is less than {@code 4}, throw an\n     *       {@code IllegalArgumentException}.</li>\n     *   <li>In no case will it return a String of length greater than\n     *       {@code maxWidth}.</li>\n     * </ul>\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *)      = null\n     * StringUtils.abbreviate(\"\", 4)        = \"\"\n     * StringUtils.abbreviate(\"abcdefg\", 6) = \"abc...\"\n     * StringUtils.abbreviate(\"abcdefg\", 7) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 8) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 4) = \"a...\"\n     * StringUtils.abbreviate(\"abcdefg\", 3) = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, {@code null} if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */\n    public static String abbreviate(String str, int maxWidth);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * {@code null} safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The {@code StringUtils} class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - {@code null}</li>\n *  <li>empty - a zero-length string ({@code \"\"})</li>\n *  <li>space - the space character ({@code ' '}, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p>{@code StringUtils} handles {@code null} input Strings quietly.\n * That is to say that a {@code null} input will return {@code null}.\n * Where a {@code boolean} or {@code int} is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the {@code null} handling is that a\n * {@code NullPointerException} should be considered a bug in\n * {@code StringUtils}.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol {@code *} is used to indicate any input including {@code null}.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    private static final Pattern WHITESPACE_BLOCK = Pattern.compile(\"\\\\s+\");\n    /**\n     * <p>Finds the first index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(String, int)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"\", *)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchSeq  the CharSequence to find, may be null\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, String) to indexOf(CharSequence, CharSequence)\n     */\n    public static int indexOf(CharSequence seq, CharSequence searchSeq);\n    /**\n     * <p>Splits the provided text into an array, separator specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a..b.c\", '.')   = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.split(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChar  the character used as the delimiter\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.0\n     */\n    public static String[] split(String str, char separatorChar);\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     */\n    public static String join(Object[] array, char separator);\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     */\n    public static String join(Object[] array, char separator, int startIndex, int endIndex);\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, {@code null} if null array input\n     */\n    public static String join(Object[] array, String separator);\n    /**\n     * <p>Joins the elements of the provided {@code Iterator} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterator  the {@code Iterator} of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, {@code null} if null iterator input\n     */\n    public static String join(Iterator<?> iterator, String separator);\n    /**\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator, preserving all tokens, including empty tokens created by\n     * adjacent separators. This is an alternative to using StringTokenizer.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null)       = null\n     * StringUtils.splitPreserveAllTokens(\"\")         = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\") = [\"abc\", \"\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\" abc \")    = [\"\", \"abc\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str);\n    /**\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified, preserving all tokens, including empty tokens\n     * created by adjacent separators.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than {@code max} delimited substrings are found, the last\n     * returned string includes all characters after the first {@code max - 1}\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *, *)            = null\n     * StringUtils.splitPreserveAllTokens(\"\", *, *)              = []\n     * StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2) = [\"ab\", \"  de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3) = [\"ab\", \"\", \" de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4) = [\"ab\", \"\", \"\", \"de fg\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, String separatorChars, int max);\n    /**\n     * Gets a CharSequence length or {@code 0} if the CharSequence is\n     * {@code null}.\n     *\n     * @param cs\n     *            a CharSequence or {@code null}\n     * @return CharSequence length or {@code 0} if the CharSequence is\n     *         {@code null}.\n     * @since 2.4\n     * @since 3.0 Changed signature from length(String) to length(CharSequence)\n     */\n    public static int length(CharSequence cs);\n    /**\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start {@code n}\n     * characters from the end of the String.</p>\n     *\n     * <p>A {@code null} String will return {@code null}.\n     * An empty (\"\") String will return \"\".</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *)   = null\n     * StringUtils.substring(\"\", *)     = \"\"\n     * StringUtils.substring(\"abc\", 0)  = \"abc\"\n     * StringUtils.substring(\"abc\", 2)  = \"c\"\n     * StringUtils.substring(\"abc\", 4)  = \"\"\n     * StringUtils.substring(\"abc\", -2) = \"bc\"\n     * StringUtils.substring(\"abc\", -4) = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position, {@code null} if null String input\n     */\n    public static String substring(String str, int start);\n    /**\n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"...is the time for...\"</p>\n     *\n     * <p>Works like {@code abbreviate(String, int)}, but allows you to specify\n     * a \"left edge\" offset.  Note that this left edge is not necessarily going to\n     * be the leftmost character in the result, or the first character following the\n     * ellipses, but it will appear somewhere in the result.\n     *\n     * <p>In no case will it return a String of length greater than\n     * {@code maxWidth}.</p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *, *)                = null\n     * StringUtils.abbreviate(\"\", 0, 4)                  = \"\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", -1, 10) = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 0, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 1, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 4, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 5, 10)  = \"...fghi...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 6, 10)  = \"...ghij...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 8, 10)  = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 10, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 12, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghij\", 0, 3)        = IllegalArgumentException\n     * StringUtils.abbreviate(\"abcdefghij\", 5, 6)        = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param offset  left edge of source String\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, {@code null} if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */\n    public static String abbreviate(String str, int offset, int maxWidth);\n    /**\n     * <p>Finds the first index within a CharSequence from a start position,\n     * handling {@code null}.\n     * This method uses {@link String#indexOf(int, int)} if possible.</p>\n     *\n     * <p>A {@code null} or empty (\"\") CharSequence will return {@code (INDEX_NOT_FOUND) -1}.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, int, int) to indexOf(CharSequence, int, int)\n     */\n    public static int indexOf(CharSequence seq, int searchChar, int startPos);\n    /**\n     * <p>Splits the provided text into an array, separators specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"abc def\", null) = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc def\", \" \")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\", \" \") = [\"abc\", \"def\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    public static String[] split(String str, String separatorChars);\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No separator is added to the joined String.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null)            = null\n     * StringUtils.join([])              = \"\"\n     * StringUtils.join([null])          = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"]) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"]) = \"a\"\n     * </pre>\n     *\n     * @param <T> the specific type of values to join together\n     * @param elements  the values to join together, may be null\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     * @since 3.0 Changed signature to use varargs\n     */\n    public static <T> String join(T... elements);\n    /**\n     * <p>Joins the elements of the provided {@code Iterable} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterable  the {@code Iterable} providing the values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, {@code null} if null iterator input\n     * @since 2.3\n     */\n    public static String join(Iterable<?> iterable, String separator);\n    /**\n     * <p>Finds the first index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(int, int)} if possible.</p>\n     *\n     * <p>A {@code null} or empty (\"\") CharSequence will return {@code INDEX_NOT_FOUND (-1)}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, int) to indexOf(CharSequence, int)\n     */\n    public static int indexOf(CharSequence seq, int searchChar);\n    /**\n     * <p>Finds the first index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(String, int)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search CharSequence always matches.\n     * A start position greater than the string length only matches\n     * an empty search CharSequence.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"\", *, 0)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchSeq  the CharSequence to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, String, int) to indexOf(CharSequence, CharSequence, int)\n     */\n    public static int indexOf(CharSequence seq, CharSequence searchSeq, int startPos);\n    /**\n     * <p>Splits the provided text into an array, separator specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)         = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)           = []\n     * StringUtils.splitPreserveAllTokens(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a..b.c\", '.')   = [\"a\", \"\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.splitPreserveAllTokens(\"a\\tb\\nc\", null) = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c \", ' ')   = [\"a\", \"b\", \"c\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c  \", ' ')   = [\"a\", \"b\", \"c\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c\", ' ')   = [\"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"  a b c\", ' ')  = [\"\", \"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c \", ' ')  = [\"\", a\", \"b\", \"c\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChar  the character used as the delimiter,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, char separatorChar);\n    /**\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.split(null)       = null\n     * StringUtils.split(\"\")         = []\n     * StringUtils.split(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\") = [\"abc\", \"def\"]\n     * StringUtils.split(\" abc \")    = [\"abc\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    public static String[] split(String str);\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, {@code null} if null array input\n     */\n    public static String join(Object[] array, String separator, int startIndex, int endIndex);\n    /**\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start/end {@code n}\n     * characters from the end of the String.</p>\n     *\n     * <p>The returned substring starts with the character in the {@code start}\n     * position and ends before the {@code end} position. All position counting is\n     * zero-based -- i.e., to start at the beginning of the string use\n     * {@code start = 0}. Negative start and end positions can be used to\n     * specify offsets relative to the end of the String.</p>\n     *\n     * <p>If {@code start} is not strictly to the left of {@code end}, \"\"\n     * is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *, *)    = null\n     * StringUtils.substring(\"\", * ,  *)    = \"\";\n     * StringUtils.substring(\"abc\", 0, 2)   = \"ab\"\n     * StringUtils.substring(\"abc\", 2, 0)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 4)   = \"c\"\n     * StringUtils.substring(\"abc\", 4, 6)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 2)   = \"\"\n     * StringUtils.substring(\"abc\", -2, -1) = \"b\"\n     * StringUtils.substring(\"abc\", -4, 2)  = \"ab\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @param end  the position to end at (exclusive), negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position to end positon,\n     *  {@code null} if null String input\n     */\n    public static String substring(String str, int start, int end);\n    /**\n     * <p>Joins the elements of the provided {@code Iterator} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterator  the {@code Iterator} of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, {@code null} if null iterator input\n     * @since 2.0\n     */\n    public static String join(Iterator<?> iterator, char separator);\n    /**\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than {@code max} delimited substrings are found, the last\n     * returned string includes all characters after the first {@code max - 1}\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *, *)            = null\n     * StringUtils.split(\"\", *, *)              = []\n     * StringUtils.split(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    public static String[] split(String str, String separatorChars, int max);\n    /**\n     * <p>Splits the provided text into an array, separators specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)           = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)             = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\", null)   = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc def\", \" \")    = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\", \" \")   = [\"abc\", \"\", def\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\")   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef:\", \":\")  = [\"ab\", \"cd\", \"ef\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef::\", \":\") = [\"ab\", \"cd\", \"ef\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab::cd:ef\", \":\")  = [\"ab\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef\", \":\")     = [\"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"::cd:ef\", \":\")    = [\"\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef:\", \":\")    = [\"\", cd\", \"ef\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, String separatorChars);\n    /**\n     * <p>Joins the elements of the provided {@code Iterable} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterable  the {@code Iterable} providing the values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, {@code null} if null iterator input\n     * @since 2.3\n     */\n    public static String join(Iterable<?> iterable, char separator);\n    /**\n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n     *\n     * <p>Specifically:\n     * <ul>\n     *   <li>If {@code str} is less than {@code maxWidth} characters\n     *       long, return it.</li>\n     *   <li>Else abbreviate it to {@code (substring(str, 0, max-3) + \"...\")}.</li>\n     *   <li>If {@code maxWidth} is less than {@code 4}, throw an\n     *       {@code IllegalArgumentException}.</li>\n     *   <li>In no case will it return a String of length greater than\n     *       {@code maxWidth}.</li>\n     * </ul>\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *)      = null\n     * StringUtils.abbreviate(\"\", 4)        = \"\"\n     * StringUtils.abbreviate(\"abcdefg\", 6) = \"abc...\"\n     * StringUtils.abbreviate(\"abcdefg\", 7) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 8) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 4) = \"a...\"\n     * StringUtils.abbreviate(\"abcdefg\", 3) = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, {@code null} if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */\n    public static String abbreviate(String str, int maxWidth);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void innerTestSplit(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.split(str, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.split(str2, sepStr);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, \"a\", res[0]);\n\n        res = StringUtils.split(str, sepStr, -1);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 0);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.split(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n    private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.splitPreserveAllTokens(str, sepStr);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.splitPreserveAllTokens(str2, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"\", res[0]);\n        assertEquals(msg, \"a\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n\n        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\n        String abcdefghijklmno = \"abcdefghijklmno\";\n        String message = \"abbreviate(String,int,int) failed\";\n        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n        if (offset >= 0 && offset < abcdefghijklmno.length()) {\n            assertTrue(message + \" -- should contain offset character\",\n                    actual.indexOf((char)('a'+offset)) != -1);\n        }\n        assertTrue(message + \" -- should not be greater than maxWidth\",\n                actual.length() <= maxWidth);\n        assertEquals(message, expected, actual);\n    }\n    public void testJoin_ArrayChar() {\n        assertEquals(null, StringUtils.join((Object[]) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>A suite of utilities surrounding the use of the\n * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n * \n * <p>DateUtils contains a lot of common methods considering manipulations\n * of Dates or Calendars. Some methods require some extra explanation.\n * The truncate, ceiling and round methods could be considered the Math.floor(),\n * Math.ceil() or Math.round versions for dates\n * This way date-fields will be ignored in bottom-up order.\n * As a complement to these methods we've introduced some fragment-methods.\n * With these methods the Date-fields will be ignored in top-down order.\n * Since a date without a year is not a valid date, you have to decide in what\n * kind of date-field you want your result, for instance milliseconds or days.\n * </p>\n *   \n *   \n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n * @author Janek Bogucki\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Robert Scholte\n * @author Paul Benedict\n * @since 2.0\n * @version $Id$\n */\npublic class DateUtils {\n    public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");\n    public static final long MILLIS_PER_SECOND = 1000;\n    public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;\n    public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;\n    public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;\n    public final static int SEMI_MONTH = 1001;\n    /**\n     * Adds to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param calendarField  the calendar field to add to\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     */\n    private static Date add(Date date, int calendarField, int amount);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with, either <code>Date</code>\n     *  or <code>Calendar</code>\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date\n     *  is <code>null</code>\n     * @throws ClassCastException if the object type is not a\n     *  <code>Date</code> or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Object date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Calendar truncate(Calendar date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Date date, int field);\n    /**\n     * <p>Checks if two calendar objects represent the same local time.</p>\n     *\n     * <p>This method compares the values of the fields of the two objects.\n     * In addition, both calendars must be the same of the same type.</p>\n     * \n     * @param cal1  the first calendar, not altered, not null\n     * @param cal2  the second calendar, not altered, not null\n     * @return true if they represent the same millisecond instant\n     * @throws IllegalArgumentException if either date is <code>null</code>\n     * @since 2.1\n     */\n    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2);\n    /**\n     * Sets the specified field to a date returning a new object.  \n     * This does not use a lenient calendar.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param calendarField  the calendar field to set the amount to\n     * @param amount the amount to set\n     * @return a new Date object set with the specified value\n     * @throws IllegalArgumentException if the date is null\n     * @since 2.4\n     */\n    private static Date set(Date date, int calendarField, int amount);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>A suite of utilities surrounding the use of the\n * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n * \n * <p>DateUtils contains a lot of common methods considering manipulations\n * of Dates or Calendars. Some methods require some extra explanation.\n * The truncate, ceiling and round methods could be considered the Math.floor(),\n * Math.ceil() or Math.round versions for dates\n * This way date-fields will be ignored in bottom-up order.\n * As a complement to these methods we've introduced some fragment-methods.\n * With these methods the Date-fields will be ignored in top-down order.\n * Since a date without a year is not a valid date, you have to decide in what\n * kind of date-field you want your result, for instance milliseconds or days.\n * </p>\n *   \n *   \n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n * @author Janek Bogucki\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Robert Scholte\n * @author Paul Benedict\n * @since 2.0\n * @version $Id$\n */\npublic class DateUtils {\n    public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");\n    public static final long MILLIS_PER_SECOND = 1000;\n    public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;\n    public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;\n    public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;\n    public final static int SEMI_MONTH = 1001;\n    /**\n     * Adds to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param calendarField  the calendar field to add to\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     */\n    private static Date add(Date date, int calendarField, int amount);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with, either <code>Date</code>\n     *  or <code>Calendar</code>\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date\n     *  is <code>null</code>\n     * @throws ClassCastException if the object type is not a\n     *  <code>Date</code> or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Object date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Calendar truncate(Calendar date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Date date, int field);\n    /**\n     * <p>Checks if two calendar objects represent the same local time.</p>\n     *\n     * <p>This method compares the values of the fields of the two objects.\n     * In addition, both calendars must be the same of the same type.</p>\n     * \n     * @param cal1  the first calendar, not altered, not null\n     * @param cal2  the second calendar, not altered, not null\n     * @return true if they represent the same millisecond instant\n     * @throws IllegalArgumentException if either date is <code>null</code>\n     * @since 2.1\n     */\n    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2);\n    /**\n     * Sets the specified field to a date returning a new object.  \n     * This does not use a lenient calendar.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param calendarField  the calendar field to set the amount to\n     * @param amount the amount to set\n     * @return a new Date object set with the specified value\n     * @throws IllegalArgumentException if the date is null\n     * @since 2.4\n     */\n    private static Date set(Date date, int calendarField, int amount);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTime(date);\n        assertEquals(year, cal.get(Calendar.YEAR));\n        assertEquals(month, cal.get(Calendar.MONTH));\n        assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));\n        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));\n        assertEquals(min, cal.get(Calendar.MINUTE));\n        assertEquals(sec, cal.get(Calendar.SECOND));\n        assertEquals(mil, cal.get(Calendar.MILLISECOND));\n    }\n    private static void assertWeekIterator(Iterator<?> it, Calendar start) {\n        Calendar end = (Calendar) start.clone();\n        end.add(Calendar.DATE, 6);\n\n        assertWeekIterator(it, start, end);\n    }\n    private static void assertWeekIterator(Iterator<?> it, Date start, Date end) {\n        Calendar calStart = Calendar.getInstance();\n        calStart.setTime(start);\n        Calendar calEnd = Calendar.getInstance();\n        calEnd.setTime(end);\n\n        assertWeekIterator(it, calStart, calEnd);\n    }\n    private static void assertWeekIterator(Iterator<?> it, Calendar start, Calendar end) {\n        Calendar cal = (Calendar) it.next();\n        assertEquals(\"\", start, cal, 0);\n        Calendar last = null;\n        int count = 1;\n        while (it.hasNext()) {\n            //Check this is just a date (no time component)\n            assertEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);\n\n            last = cal;\n            cal = (Calendar) it.next();\n            count++;\n\n            //Check that this is one day more than the last date\n            last.add(Calendar.DATE, 1);\n            assertEquals(\"\", last, cal, 0);\n        }\n        if (count % 7 != 0) {\n            throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");\n        }\n        assertEquals(\"\", end, cal, 0);\n    }\n    private static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {\n            throw new AssertionFailedError(\n                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());\n        }\n    }\n    public void testIsSameLocalTime_Cal() {\n        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n        cal1.set(2004, 6, 9, 13, 45, 0);\n        cal1.set(Calendar.MILLISECOND, 0);\n        cal2.set(2004, 6, 9, 13, 45, 0);\n        cal2.set(Calendar.MILLISECOND, 0);\n        assertEquals(true, DateUtils.isSameLocalTime(cal1, cal2));\n\n        Calendar cal3 = Calendar.getInstance();\n        Calendar cal4 = Calendar.getInstance();\n        cal3.set(2004, 6, 9, 4,  0, 0);\n        cal4.set(2004, 6, 9, 16, 0, 0);\n        cal3.set(Calendar.MILLISECOND, 0);\n        cal4.set(Calendar.MILLISECOND, 0);\n        assertFalse(\"LANG-677\", DateUtils.isSameLocalTime(cal3, cal4));\n        \n        cal2.set(2004, 6, 9, 11, 45, 0);\n        assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));\n        try {\n            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p><code>Fraction</code> is a <code>Number</code> implementation that\n * stores fractions accurately.</p>\n *\n * <p>This class is immutable, and interoperable with most methods that accept\n * a <code>Number</code>.</p>\n *\n * <p>Note that this class is intended for common use cases, it is <i>int</i>\n * based and thus suffers from various overflow issues. For a BigInteger based \n * equivalent, please see the Commons Math BigFraction class. </p>\n *\n * @author Apache Software Foundation\n * @author Travis Reeder\n * @author Tim O'Brien\n * @author Pete Gieser\n * @author C. Scott Ananian\n * @since 2.0\n * @version $Id$\n */\npublic final class Fraction extends Number implements Comparable<Fraction> {\n    private static final long serialVersionUID = 65382027393090L;\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n    private final int numerator;\n    private final int denominator;\n    private transient int hashCode = 0;\n    private transient String toString = null;\n    private transient String toProperString = null;\n    /**\n     * <p>Gets the numerator part of the fraction.</p>\n     *\n     * <p>This method may return a value greater than the denominator, an\n     * improper fraction, such as the seven in 7/4.</p>\n     *\n     * @return the numerator fraction part\n     */\n    public int getNumerator();\n    /**\n     * <p>Gets the denominator part of the fraction.</p>\n     *\n     * @return the denominator fraction part\n     */\n    public int getDenominator();\n    /**\n     * <p>Gets a fraction that is raised to the passed in power.</p>\n     *\n     * <p>The returned fraction is in reduced form.</p>\n     *\n     * @param power  the power to raise the fraction to\n     * @return <code>this</code> if the power is one, <code>ONE</code> if the power\n     * is zero (even if the fraction equals ZERO) or a new fraction instance \n     * raised to the appropriate power\n     * @throws ArithmeticException if the resulting numerator or denominator exceeds\n     *  <code>Integer.MAX_VALUE</code>\n     */\n    public Fraction pow(int power);\n    /**\n     * <p>Creates a reduced <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * <p>For example, if the input parameters represent 2/4, then the created\n     * fraction will be 1/2.</p>\n     *\n     * <p>Any negative signs are resolved to be on the numerator.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance, with the numerator and denominator reduced\n     * @throws ArithmeticException if the denominator is <code>zero</code>\n     */\n    public static Fraction getReducedFraction(int numerator, int denominator);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p><code>Fraction</code> is a <code>Number</code> implementation that\n * stores fractions accurately.</p>\n *\n * <p>This class is immutable, and interoperable with most methods that accept\n * a <code>Number</code>.</p>\n *\n * <p>Note that this class is intended for common use cases, it is <i>int</i>\n * based and thus suffers from various overflow issues. For a BigInteger based \n * equivalent, please see the Commons Math BigFraction class. </p>\n *\n * @author Apache Software Foundation\n * @author Travis Reeder\n * @author Tim O'Brien\n * @author Pete Gieser\n * @author C. Scott Ananian\n * @since 2.0\n * @version $Id$\n */\npublic final class Fraction extends Number implements Comparable<Fraction> {\n    private static final long serialVersionUID = 65382027393090L;\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n    private final int numerator;\n    private final int denominator;\n    private transient int hashCode = 0;\n    private transient String toString = null;\n    private transient String toProperString = null;\n    /**\n     * <p>Gets the numerator part of the fraction.</p>\n     *\n     * <p>This method may return a value greater than the denominator, an\n     * improper fraction, such as the seven in 7/4.</p>\n     *\n     * @return the numerator fraction part\n     */\n    public int getNumerator();\n    /**\n     * <p>Gets the denominator part of the fraction.</p>\n     *\n     * @return the denominator fraction part\n     */\n    public int getDenominator();\n    /**\n     * <p>Gets a fraction that is raised to the passed in power.</p>\n     *\n     * <p>The returned fraction is in reduced form.</p>\n     *\n     * @param power  the power to raise the fraction to\n     * @return <code>this</code> if the power is one, <code>ONE</code> if the power\n     * is zero (even if the fraction equals ZERO) or a new fraction instance \n     * raised to the appropriate power\n     * @throws ArithmeticException if the resulting numerator or denominator exceeds\n     *  <code>Integer.MAX_VALUE</code>\n     */\n    public Fraction pow(int power);\n    /**\n     * <p>Creates a reduced <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * <p>For example, if the input parameters represent 2/4, then the created\n     * fraction will be 1/2.</p>\n     *\n     * <p>Any negative signs are resolved to be on the numerator.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance, with the numerator and denominator reduced\n     * @throws ArithmeticException if the denominator is <code>zero</code>\n     */\n    public static Fraction getReducedFraction(int numerator, int denominator);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Apache Software Foundation\n * @author C. Scott Ananian\n * @version $Id$\n */\npublic class FractionTest extends TestCase {\n    public void testReducedFactory_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 1);\n        assertEquals(2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        assertEquals(22, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        assertEquals(-3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(6, -10);\n        assertEquals(-3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        assertEquals(3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 4);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(15, 10);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(121, 22);\n        assertEquals(11, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        assertEquals(1, f.getNumerator());\n        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Extends <code>java.text.MessageFormat</code> to allow pluggable/additional formatting\n * options for embedded format elements.  Client code should specify a registry\n * of <code>FormatFactory</code> instances associated with <code>String</code>\n * format names.  This registry will be consulted when the format elements are \n * parsed from the message pattern.  In this way custom patterns can be specified,\n * and the formats supported by <code>java.text.MessageFormat</code> can be overridden\n * at the format and/or format style level (see MessageFormat).  A \"format element\"\n * embedded in the message pattern is specified (<b>()?</b> signifies optionality):<br />\n * <code>{</code><i>argument-number</i><b>(</b><code>,</code><i>format-name</i><b>(</b><code>,</code><i>format-style</i><b>)?)?</b><code>}</code>\n *\n * <p>\n * <i>format-name</i> and <i>format-style</i> values are trimmed of surrounding whitespace\n * in the manner of <code>java.text.MessageFormat</code>.  If <i>format-name</i> denotes\n * <code>FormatFactory formatFactoryInstance</code> in <code>registry</code>, a <code>Format</code>\n * matching <i>format-name</i> and <i>format-style</i> is requested from\n * <code>formatFactoryInstance</code>.  If this is successful, the <code>Format</code>\n * found is used for this format element.\n * </p>\n *\n * <p><b>NOTICE:</b> The various subformat mutator methods are considered unnecessary; they exist on the parent\n * class to allow the type of customization which it is the job of this class to provide in\n * a configurable fashion.  These methods have thus been disabled and will throw\n * <code>UnsupportedOperationException</code> if called.\n * </p>\n * \n * <p>Limitations inherited from <code>java.text.MessageFormat</code>:\n * <ul>\n * <li>When using \"choice\" subformats, support for nested formatting instructions is limited\n *     to that provided by the base class.</li>\n * <li>Thread-safety of <code>Format</code>s, including <code>MessageFormat</code> and thus\n *     <code>ExtendedMessageFormat</code>, is not guaranteed.</li>\n * </ul>\n * </p>\n * \n * @author Apache Software Foundation\n * @author Matt Benson\n * @since 2.4\n * @version $Id$\n */\npublic class ExtendedMessageFormat extends MessageFormat {\n    private static final long serialVersionUID = -2362048321261811743L;\n    private static final String DUMMY_PATTERN = \"\";\n    private static final String ESCAPED_QUOTE = \"''\";\n    private static final char START_FMT = ',';\n    private static final char END_FE = '}';\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toPattern();\n    @Override\n    public void setFormatsByArgumentIndex(Format[] newFormats);\n    /**\n     * Apply the specified pattern.\n     * \n     * @param pattern String\n     */\n    @Override\n    public final void applyPattern(String pattern);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Extends <code>java.text.MessageFormat</code> to allow pluggable/additional formatting\n * options for embedded format elements.  Client code should specify a registry\n * of <code>FormatFactory</code> instances associated with <code>String</code>\n * format names.  This registry will be consulted when the format elements are \n * parsed from the message pattern.  In this way custom patterns can be specified,\n * and the formats supported by <code>java.text.MessageFormat</code> can be overridden\n * at the format and/or format style level (see MessageFormat).  A \"format element\"\n * embedded in the message pattern is specified (<b>()?</b> signifies optionality):<br />\n * <code>{</code><i>argument-number</i><b>(</b><code>,</code><i>format-name</i><b>(</b><code>,</code><i>format-style</i><b>)?)?</b><code>}</code>\n *\n * <p>\n * <i>format-name</i> and <i>format-style</i> values are trimmed of surrounding whitespace\n * in the manner of <code>java.text.MessageFormat</code>.  If <i>format-name</i> denotes\n * <code>FormatFactory formatFactoryInstance</code> in <code>registry</code>, a <code>Format</code>\n * matching <i>format-name</i> and <i>format-style</i> is requested from\n * <code>formatFactoryInstance</code>.  If this is successful, the <code>Format</code>\n * found is used for this format element.\n * </p>\n *\n * <p><b>NOTICE:</b> The various subformat mutator methods are considered unnecessary; they exist on the parent\n * class to allow the type of customization which it is the job of this class to provide in\n * a configurable fashion.  These methods have thus been disabled and will throw\n * <code>UnsupportedOperationException</code> if called.\n * </p>\n * \n * <p>Limitations inherited from <code>java.text.MessageFormat</code>:\n * <ul>\n * <li>When using \"choice\" subformats, support for nested formatting instructions is limited\n *     to that provided by the base class.</li>\n * <li>Thread-safety of <code>Format</code>s, including <code>MessageFormat</code> and thus\n *     <code>ExtendedMessageFormat</code>, is not guaranteed.</li>\n * </ul>\n * </p>\n * \n * @author Apache Software Foundation\n * @author Matt Benson\n * @since 2.4\n * @version $Id$\n */\npublic class ExtendedMessageFormat extends MessageFormat {\n    private static final long serialVersionUID = -2362048321261811743L;\n    private static final String DUMMY_PATTERN = \"\";\n    private static final String ESCAPED_QUOTE = \"''\";\n    private static final char START_FMT = ',';\n    private static final char END_FE = '}';\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toPattern();\n    @Override\n    public void setFormatsByArgumentIndex(Format[] newFormats);\n    /**\n     * Apply the specified pattern.\n     * \n     * @param pattern String\n     */\n    @Override\n    public final void applyPattern(String pattern);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {\n        checkBuiltInFormat(pattern, null, args, locales);\n    }\n    private void checkBuiltInFormat(String pattern, Map<String, ?> registry, Object[] args, Locale[] locales) {\n        checkBuiltInFormat(pattern, registry, args, (Locale) null);\n        for (int i = 0; i < locales.length; i++) {\n            checkBuiltInFormat(pattern, registry, args, locales[i]);\n        }\n    }\n    private void checkBuiltInFormat(String pattern, Map<String, ?> registry, Object[] args, Locale locale) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(\"Pattern=[\");\n        buffer.append(pattern);\n        buffer.append(\"], locale=[\");\n        buffer.append(locale);\n        buffer.append(\"]\");\n        MessageFormat mf = createMessageFormat(pattern, locale);\n        // System.out.println(buffer + \", result=[\" + mf.format(args) +\"]\");\n        ExtendedMessageFormat emf = null;\n        if (locale == null) {\n            emf = new ExtendedMessageFormat(pattern);\n        } else {\n            emf = new ExtendedMessageFormat(pattern, locale);\n        }\n        assertEquals(\"format \"    + buffer.toString(), mf.format(args), emf.format(args));\n        assertPatternsEqual(\"toPattern \" + buffer.toString(), mf.toPattern(),  emf.toPattern());\n    }\n    private void assertPatternsEqual(String message, String expected, String actual) {\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertEquals(message, expected, actual);\n        }\n    }\n    private MessageFormat createMessageFormat(String pattern, Locale locale) {\n        MessageFormat result = new MessageFormat(pattern);\n        if (locale != null) {\n            result.setLocale(locale);\n            result.applyPattern(pattern);\n        }\n        return result;\n    }\n    public void testEqualsHashcode() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        assertTrue(\"same, equals()\",   emf.equals(emf));\n        assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        assertTrue(\"equal, equals()\",   emf.equals(other));\n        assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        assertFalse(\"class, equals()\",  emf.equals(other));\n        assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode()); // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        assertFalse(\"pattern, equals()\",   emf.equals(other));\n        assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        assertFalse(\"registry, equals()\",   emf.equals(other));\n        assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        assertFalse(\"locale, equals()\",  emf.equals(other));\n        assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode()); // same hashcode\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = new Long(0L);\n    public static final Long LONG_ONE = new Long(1L);\n    public static final Long LONG_MINUS_ONE = new Long(-1L);\n    public static final Integer INTEGER_ZERO = new Integer(0);\n    public static final Integer INTEGER_ONE = new Integer(1);\n    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n    public static final Short SHORT_ZERO = new Short((short) 0);\n    public static final Short SHORT_ONE = new Short((short) 1);\n    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = new Double(0.0d);\n    public static final Double DOUBLE_ONE = new Double(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n    public static final Float FLOAT_ZERO = new Float(0.0f);\n    public static final Float FLOAT_ONE = new Float(1.0f);\n    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n    /**\n     * <p>Checks whether the String a valid Java number.</p>\n     *\n     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n     * qualifier, scientific notation and numbers marked with a type\n     * qualifier (e.g. 123L).</p>\n     *\n     * <p><code>Null</code> and empty String will return\n     * <code>false</code>.</p>\n     *\n     * @param str  the <code>String</code> to check\n     * @return <code>true</code> if the string is a correctly formatted number\n     */\n    public static boolean isNumber(String str);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = new Long(0L);\n    public static final Long LONG_ONE = new Long(1L);\n    public static final Long LONG_MINUS_ONE = new Long(-1L);\n    public static final Integer INTEGER_ZERO = new Integer(0);\n    public static final Integer INTEGER_ONE = new Integer(1);\n    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n    public static final Short SHORT_ZERO = new Short((short) 0);\n    public static final Short SHORT_ONE = new Short((short) 1);\n    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = new Double(0.0d);\n    public static final Double DOUBLE_ONE = new Double(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n    public static final Float FLOAT_ZERO = new Float(0.0f);\n    public static final Float FLOAT_ONE = new Float(1.0f);\n    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n    /**\n     * <p>Checks whether the String a valid Java number.</p>\n     *\n     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n     * qualifier, scientific notation and numbers marked with a type\n     * qualifier (e.g. 123L).</p>\n     *\n     * <p><code>Null</code> and empty String will return\n     * <code>false</code>.</p>\n     *\n     * @param str  the <code>String</code> to check\n     * @return <code>true</code> if the string is a correctly formatted number\n     */\n    public static boolean isNumber(String str);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n       }\n    }\n    public void testIsNumber() {\n        String val = \"12345\";\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n        val = \"1234.5\";\n        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n        val = \".12345\";\n        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n        val = \"1234E5\";\n        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n        val = \"1234E+5\";\n        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n        val = \"1234E-5\";\n        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n        val = \"123.4E5\";\n        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n        val = \"-1234\";\n        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n        val = \"-1234.5\";\n        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n        val = \"-.12345\";\n        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n        val = \"-1234E5\";\n        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n        val = \"0\";\n        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n        val = \"-0\";\n        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n        val = \"01234\";\n        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n        val = \"-01234\";\n        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n        val = \"0xABC123\";\n        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n        val = \"0x0\";\n        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n        val = \"123.4E21D\";\n        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n        val = \"-221.23F\";\n        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n        val = \"22338L\";\n        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n        val = null;\n        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n        val = \"\";\n        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n        val = \"--2.3\";\n        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n        val = \".12.3\";\n        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E\";\n        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E+-212\";\n        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E2.12\";\n        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n        val = \"0xGF\";\n        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n        val = \"0xFAE-1\";\n        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n        val = \".\";\n        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n        val = \"-0ABC123\";\n        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4E-D\";\n        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4ED\";\n        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n        val = \"1234E5l\";\n        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n        val = \"11a\";\n        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n        val = \"1a\";\n        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n        val = \"a\";\n        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n        val = \"11g\";\n        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n        val = \"11z\";\n        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n        val = \"11def\";\n        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n        val = \"11d11\";\n        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n        val = \"11 11\";\n        assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n        val = \" 1111\";\n        assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\n        val = \"1111 \";\n        assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n\n        // LANG-521\n        val = \"2.\";\n        assertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));\n\n        // LANG-664\n        val = \"1.1L\";\n        assertFalse(\"isNumber(String) LANG-664 failed\", NumberUtils.isNumber(val));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Class holding various entity data for HTML and XML - generally for use with \n * the LookupTranslator.\n * All arrays are of length [*][2].\n *\n * @author Apache Software Foundation\n * @since 3.0\n * @version $Id$\n */\npublic class EntityArrays {\n    public static String[][] ISO8859_1_ESCAPE()  return ISO8859_1_ESCAPE.clone(); };\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Class holding various entity data for HTML and XML - generally for use with \n * the LookupTranslator.\n * All arrays are of length [*][2].\n *\n * @author Apache Software Foundation\n * @since 3.0\n * @version $Id$\n */\npublic class EntityArrays {\n    public static String[][] ISO8859_1_ESCAPE()  return ISO8859_1_ESCAPE.clone(); };\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testISO8859_1_ESCAPE(){\n        Set<String> col0 = new HashSet<String>();\n        Set<String> col1 = new HashSet<String>();\n        String [][] sa = EntityArrays.ISO8859_1_ESCAPE();\n        boolean success = true;\n        for(int i =0; i <sa.length; i++){\n            boolean add0 = col0.add(sa[i][0]);\n            boolean add1 = col1.add(sa[i][1]);\n            if (!add0) { \n                success = false;\n                System.out.println(\"Already added entry 0: \"+i+\" \"+sa[i][0]+\" \"+sa[i][1]);\n            }\n            if (!add1) {\n                success = false;\n                System.out.println(\"Already added entry 1: \"+i+\" \"+sa[i][0]+\" \"+sa[i][1]);\n            }\n        }\n        assertTrue(\"One or more errors detected\",success);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n * \n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author Apache Software Foundation\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\npublic class FastDateFormat extends Format {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    private static String cDefaultPattern; // lazily initialised by getInstance()\n    private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);\n    private final String mPattern;\n    private final TimeZone mTimeZone;\n    private final boolean mTimeZoneForced;\n    private final Locale mLocale;\n    private final boolean mLocaleForced;\n    private transient Rule[] mRules;\n    private transient int mMaxLengthEstimate;\n    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern);\n    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     */\n    public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale);\n    /**\n     * <p>Formats a <code>Date</code>, <code>Calendar</code> or\n     * <code>Long</code> (milliseconds) object.</p>\n     * \n     * @param obj  the object to format\n     * @param toAppendTo  the buffer to append to\n     * @param pos  the position - ignored\n     * @return the buffer passed in\n     */\n    @Override\n    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos);\n    /**\n     * <p>Formats a <code>Calendar</code> object.</p>\n     * \n     * @param calendar  the calendar to format\n     * @return the formatted string\n     */\n    public String format(Calendar calendar);\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone);\n    /**\n     * <p>Formats a <code>Date</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param date  the date to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Date date, StringBuffer buf);\n    /**\n     * <p>Formats a <code>Calendar</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Calendar calendar, StringBuffer buf);\n    /**\n     * <p>Formats a millisecond <code>long</code> value.</p>\n     * \n     * @param millis  the millisecond value to format\n     * @return the formatted string\n     * @since 2.1\n     */\n    public String format(long millis);\n    /**\n     * <p>Formats a <code>Date</code> object.</p>\n     * \n     * @param date  the date to format\n     * @return the formatted string\n     */\n    public String format(Date date);\n    /**\n     * <p>Formats a milliseond <code>long</code> value into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param millis  the millisecond value to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     * @since 2.1\n     */\n    public StringBuffer format(long millis, StringBuffer buf);\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, Locale locale);\n    /**\n     * <p>Gets a formatter instance using the default pattern in the\n     * default locale.</p>\n     * \n     * @return a date/time formatter\n     */\n    public static FastDateFormat getInstance();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n * \n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author Apache Software Foundation\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\npublic class FastDateFormat extends Format {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    private static String cDefaultPattern; // lazily initialised by getInstance()\n    private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);\n    private final String mPattern;\n    private final TimeZone mTimeZone;\n    private final boolean mTimeZoneForced;\n    private final Locale mLocale;\n    private final boolean mLocaleForced;\n    private transient Rule[] mRules;\n    private transient int mMaxLengthEstimate;\n    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern);\n    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     */\n    public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale);\n    /**\n     * <p>Formats a <code>Date</code>, <code>Calendar</code> or\n     * <code>Long</code> (milliseconds) object.</p>\n     * \n     * @param obj  the object to format\n     * @param toAppendTo  the buffer to append to\n     * @param pos  the position - ignored\n     * @return the buffer passed in\n     */\n    @Override\n    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos);\n    /**\n     * <p>Formats a <code>Calendar</code> object.</p>\n     * \n     * @param calendar  the calendar to format\n     * @return the formatted string\n     */\n    public String format(Calendar calendar);\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone);\n    /**\n     * <p>Formats a <code>Date</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param date  the date to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Date date, StringBuffer buf);\n    /**\n     * <p>Formats a <code>Calendar</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Calendar calendar, StringBuffer buf);\n    /**\n     * <p>Formats a millisecond <code>long</code> value.</p>\n     * \n     * @param millis  the millisecond value to format\n     * @return the formatted string\n     * @since 2.1\n     */\n    public String format(long millis);\n    /**\n     * <p>Formats a <code>Date</code> object.</p>\n     * \n     * @param date  the date to format\n     * @return the formatted string\n     */\n    public String format(Date date);\n    /**\n     * <p>Formats a milliseond <code>long</code> value into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param millis  the millisecond value to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     * @since 2.1\n     */\n    public StringBuffer format(long millis, StringBuffer buf);\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, Locale locale);\n    /**\n     * <p>Gets a formatter instance using the default pattern in the\n     * default locale.</p>\n     * \n     * @return a date/time formatter\n     */\n    public static FastDateFormat getInstance();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLang645() {\n        Locale locale = new Locale(\"sv\", \"SE\");\n\n        Calendar cal = Calendar.getInstance();\n        cal.set(2010, 0, 1, 12, 0, 0);\n        Date d = cal.getTime();\n\n        FastDateFormat fdf = FastDateFormat.getInstance(\"EEEE', week 'ww\", locale);\n\n        assertEquals(\"fredag, week 53\", fdf.format(d));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = new Long(0L);\n    public static final Long LONG_ONE = new Long(1L);\n    public static final Long LONG_MINUS_ONE = new Long(-1L);\n    public static final Integer INTEGER_ZERO = new Integer(0);\n    public static final Integer INTEGER_ONE = new Integer(1);\n    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n    public static final Short SHORT_ZERO = new Short((short) 0);\n    public static final Short SHORT_ONE = new Short((short) 1);\n    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = new Double(0.0d);\n    public static final Double DOUBLE_ONE = new Double(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n    public static final Float FLOAT_ZERO = new Float(0.0f);\n    public static final Float FLOAT_ONE = new Float(1.0f);\n    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = new Long(0L);\n    public static final Long LONG_ONE = new Long(1L);\n    public static final Long LONG_MINUS_ONE = new Long(-1L);\n    public static final Integer INTEGER_ZERO = new Integer(0);\n    public static final Integer INTEGER_ONE = new Integer(1);\n    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n    public static final Short SHORT_ZERO = new Short((short) 0);\n    public static final Short SHORT_ONE = new Short((short) 1);\n    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = new Double(0.0d);\n    public static final Double DOUBLE_ONE = new Double(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n    public static final Float FLOAT_ZERO = new Float(0.0f);\n    public static final Float FLOAT_ONE = new Float(1.0f);\n    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n       }\n    }\n    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\" + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils .createNumber(\"12345678901234567890L\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils .createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\"createNumber(String) 16 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils .createNumber(\"10\" + Long.MAX_VALUE));\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", new Float(\"2.\"), NumberUtils.createNumber(\"2.\"));\n\n        // LANG-638\n        assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Translate XML numeric entities of the form &#[xX]?\\d+; to \n * the specific codepoint.\n * \n * @author Apache Software Foundation\n * @since 3.0\n */\npublic class NumericEntityUnescaper extends CharSequenceTranslator {\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Translate XML numeric entities of the form &#[xX]?\\d+; to \n * the specific codepoint.\n * \n * @author Apache Software Foundation\n * @since 3.0\n */\npublic class NumericEntityUnescaper extends CharSequenceTranslator {\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testSupplementaryUnescaping() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n        String input = \"&#68642;\";\n        String expected = \"\\uD803\\uDC22\";\n\n        String result = neu.translate(input);\n        assertEquals(\"Failed to unescape numeric entities supplementary characters\", expected, result);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>\n * Helpers for <code>java.lang.System</code>.\n * </p>\n * \n * <p>\n * If a system property cannot be read due to security restrictions, the corresponding field in this class will be set to <code>null</code>\n * and a message will be written to <code>System.err</code>.\n * </p>\n * \n * <p>\n * #ThreadSafe#\n * </p>\n * \n * @author Apache Software Foundation\n * @author Based on code from Avalon Excalibur\n * @author Based on code from Lucene\n * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n * @author Gary Gregory\n * @author Michael Becke\n * @author Tetsuya Kaneuchi\n * @author Rafal Krupinski\n * @author Jason Gritman\n * @since 1.0\n * @version $Id$\n */\npublic class SystemUtils {\n    private static final int JAVA_VERSION_TRIM_SIZE = 3;\n    private static final String OS_NAME_WINDOWS_PREFIX = \"Windows\";\n    private static final String USER_HOME_KEY = \"user.home\";\n    private static final String USER_DIR_KEY = \"user.dir\";\n    private static final String JAVA_IO_TMPDIR_KEY = \"java.io.tmpdir\";\n    private static final String JAVA_HOME_KEY = \"java.home\";\n    public static final String AWT_TOOLKIT = getSystemProperty(\"awt.toolkit\");\n    public static final String FILE_ENCODING = getSystemProperty(\"file.encoding\");\n    public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\");\n    public static final String JAVA_AWT_FONTS = getSystemProperty(\"java.awt.fonts\");\n    public static final String JAVA_AWT_GRAPHICSENV = getSystemProperty(\"java.awt.graphicsenv\");\n    public static final String JAVA_AWT_HEADLESS = getSystemProperty(\"java.awt.headless\");\n    public static final String JAVA_AWT_PRINTERJOB = getSystemProperty(\"java.awt.printerjob\");\n    public static final String JAVA_CLASS_PATH = getSystemProperty(\"java.class.path\");\n    public static final String JAVA_CLASS_VERSION = getSystemProperty(\"java.class.version\");\n    public static final String JAVA_COMPILER = getSystemProperty(\"java.compiler\");\n    public static final String JAVA_ENDORSED_DIRS = getSystemProperty(\"java.endorsed.dirs\");\n    public static final String JAVA_EXT_DIRS = getSystemProperty(\"java.ext.dirs\");\n    public static final String JAVA_HOME = getSystemProperty(JAVA_HOME_KEY);\n    public static final String JAVA_IO_TMPDIR = getSystemProperty(JAVA_IO_TMPDIR_KEY);\n    public static final String JAVA_LIBRARY_PATH = getSystemProperty(\"java.library.path\");\n    public static final String JAVA_RUNTIME_NAME = getSystemProperty(\"java.runtime.name\");\n    public static final String JAVA_RUNTIME_VERSION = getSystemProperty(\"java.runtime.version\");\n    public static final String JAVA_SPECIFICATION_NAME = getSystemProperty(\"java.specification.name\");\n    public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty(\"java.specification.vendor\");\n    public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(\"java.specification.version\");\n    public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = getSystemProperty(\"java.util.prefs.PreferencesFactory\");\n    public static final String JAVA_VENDOR = getSystemProperty(\"java.vendor\");\n    public static final String JAVA_VENDOR_URL = getSystemProperty(\"java.vendor.url\");\n    public static final String JAVA_VERSION = getSystemProperty(\"java.version\");\n    public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\");\n    public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n    public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n    public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n    public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n    public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n    public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n    public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n    public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n    public static final String OS_NAME = getSystemProperty(\"os.name\");\n    public static final String OS_VERSION = getSystemProperty(\"os.version\");\n    public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n    public static final String USER_DIR = getSystemProperty(USER_DIR_KEY);\n    public static final String USER_HOME = getSystemProperty(USER_HOME_KEY);\n    public static final String USER_LANGUAGE = getSystemProperty(\"user.language\");\n    public static final String USER_NAME = getSystemProperty(\"user.name\");\n    public static final String USER_TIMEZONE = getSystemProperty(\"user.timezone\");\n    public static final String JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n    public static final float JAVA_VERSION_FLOAT = getJavaVersionAsFloat();\n    public static final int JAVA_VERSION_INT = getJavaVersionAsInt();\n    public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\");\n    public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\");\n    public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\");\n    public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\");\n    public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\");\n    public static final boolean IS_JAVA_1_6 = getJavaVersionMatches(\"1.6\");\n    public static final boolean IS_JAVA_1_7 = getJavaVersionMatches(\"1.7\");\n    public static final boolean IS_OS_AIX = getOSMatchesName(\"AIX\");\n    public static final boolean IS_OS_HP_UX = getOSMatchesName(\"HP-UX\");\n    public static final boolean IS_OS_IRIX = getOSMatchesName(\"Irix\");\n    public static final boolean IS_OS_LINUX = getOSMatchesName(\"Linux\") || getOSMatchesName(\"LINUX\");\n    public static final boolean IS_OS_MAC = getOSMatchesName(\"Mac\");\n    public static final boolean IS_OS_MAC_OSX = getOSMatchesName(\"Mac OS X\");\n    public static final boolean IS_OS_OS2 = getOSMatchesName(\"OS/2\");\n    public static final boolean IS_OS_SOLARIS = getOSMatchesName(\"Solaris\");\n    public static final boolean IS_OS_SUN_OS = getOSMatchesName(\"SunOS\");\n    public static final boolean IS_OS_WINDOWS = getOSMatchesName(OS_NAME_WINDOWS_PREFIX);\n    public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.0\");\n    public static final boolean IS_OS_WINDOWS_95 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.0\");\n    public static final boolean IS_OS_WINDOWS_98 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.1\");\n    public static final boolean IS_OS_WINDOWS_ME = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"4.9\");\n    public static final boolean IS_OS_WINDOWS_NT = getOSMatchesName(OS_NAME_WINDOWS_PREFIX + \" NT\");\n    public static final boolean IS_OS_WINDOWS_XP = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.1\");\n    public static final boolean IS_OS_WINDOWS_VISTA = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.0\");\n    public static final boolean IS_OS_WINDOWS_7 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.1\");\n    /**\n     * <p>\n     * Converts the given Java version string to a <code>float</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>1.2f</code> for Java 1.2</li>\n     * <li><code>1.31f</code> for Java 1.3.1</li>\n     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 1.31f for Java 1.3.1\n     */\n    static float toJavaVersionFloat(String version);\n    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 131 for Java 1.3.1\n     */\n    static float toJavaVersionInt(String version);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>\n * Helpers for <code>java.lang.System</code>.\n * </p>\n * \n * <p>\n * If a system property cannot be read due to security restrictions, the corresponding field in this class will be set to <code>null</code>\n * and a message will be written to <code>System.err</code>.\n * </p>\n * \n * <p>\n * #ThreadSafe#\n * </p>\n * \n * @author Apache Software Foundation\n * @author Based on code from Avalon Excalibur\n * @author Based on code from Lucene\n * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n * @author Gary Gregory\n * @author Michael Becke\n * @author Tetsuya Kaneuchi\n * @author Rafal Krupinski\n * @author Jason Gritman\n * @since 1.0\n * @version $Id$\n */\npublic class SystemUtils {\n    private static final int JAVA_VERSION_TRIM_SIZE = 3;\n    private static final String OS_NAME_WINDOWS_PREFIX = \"Windows\";\n    private static final String USER_HOME_KEY = \"user.home\";\n    private static final String USER_DIR_KEY = \"user.dir\";\n    private static final String JAVA_IO_TMPDIR_KEY = \"java.io.tmpdir\";\n    private static final String JAVA_HOME_KEY = \"java.home\";\n    public static final String AWT_TOOLKIT = getSystemProperty(\"awt.toolkit\");\n    public static final String FILE_ENCODING = getSystemProperty(\"file.encoding\");\n    public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\");\n    public static final String JAVA_AWT_FONTS = getSystemProperty(\"java.awt.fonts\");\n    public static final String JAVA_AWT_GRAPHICSENV = getSystemProperty(\"java.awt.graphicsenv\");\n    public static final String JAVA_AWT_HEADLESS = getSystemProperty(\"java.awt.headless\");\n    public static final String JAVA_AWT_PRINTERJOB = getSystemProperty(\"java.awt.printerjob\");\n    public static final String JAVA_CLASS_PATH = getSystemProperty(\"java.class.path\");\n    public static final String JAVA_CLASS_VERSION = getSystemProperty(\"java.class.version\");\n    public static final String JAVA_COMPILER = getSystemProperty(\"java.compiler\");\n    public static final String JAVA_ENDORSED_DIRS = getSystemProperty(\"java.endorsed.dirs\");\n    public static final String JAVA_EXT_DIRS = getSystemProperty(\"java.ext.dirs\");\n    public static final String JAVA_HOME = getSystemProperty(JAVA_HOME_KEY);\n    public static final String JAVA_IO_TMPDIR = getSystemProperty(JAVA_IO_TMPDIR_KEY);\n    public static final String JAVA_LIBRARY_PATH = getSystemProperty(\"java.library.path\");\n    public static final String JAVA_RUNTIME_NAME = getSystemProperty(\"java.runtime.name\");\n    public static final String JAVA_RUNTIME_VERSION = getSystemProperty(\"java.runtime.version\");\n    public static final String JAVA_SPECIFICATION_NAME = getSystemProperty(\"java.specification.name\");\n    public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty(\"java.specification.vendor\");\n    public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(\"java.specification.version\");\n    public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = getSystemProperty(\"java.util.prefs.PreferencesFactory\");\n    public static final String JAVA_VENDOR = getSystemProperty(\"java.vendor\");\n    public static final String JAVA_VENDOR_URL = getSystemProperty(\"java.vendor.url\");\n    public static final String JAVA_VERSION = getSystemProperty(\"java.version\");\n    public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\");\n    public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n    public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n    public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n    public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n    public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n    public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n    public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n    public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n    public static final String OS_NAME = getSystemProperty(\"os.name\");\n    public static final String OS_VERSION = getSystemProperty(\"os.version\");\n    public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n    public static final String USER_DIR = getSystemProperty(USER_DIR_KEY);\n    public static final String USER_HOME = getSystemProperty(USER_HOME_KEY);\n    public static final String USER_LANGUAGE = getSystemProperty(\"user.language\");\n    public static final String USER_NAME = getSystemProperty(\"user.name\");\n    public static final String USER_TIMEZONE = getSystemProperty(\"user.timezone\");\n    public static final String JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n    public static final float JAVA_VERSION_FLOAT = getJavaVersionAsFloat();\n    public static final int JAVA_VERSION_INT = getJavaVersionAsInt();\n    public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\");\n    public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\");\n    public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\");\n    public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\");\n    public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\");\n    public static final boolean IS_JAVA_1_6 = getJavaVersionMatches(\"1.6\");\n    public static final boolean IS_JAVA_1_7 = getJavaVersionMatches(\"1.7\");\n    public static final boolean IS_OS_AIX = getOSMatchesName(\"AIX\");\n    public static final boolean IS_OS_HP_UX = getOSMatchesName(\"HP-UX\");\n    public static final boolean IS_OS_IRIX = getOSMatchesName(\"Irix\");\n    public static final boolean IS_OS_LINUX = getOSMatchesName(\"Linux\") || getOSMatchesName(\"LINUX\");\n    public static final boolean IS_OS_MAC = getOSMatchesName(\"Mac\");\n    public static final boolean IS_OS_MAC_OSX = getOSMatchesName(\"Mac OS X\");\n    public static final boolean IS_OS_OS2 = getOSMatchesName(\"OS/2\");\n    public static final boolean IS_OS_SOLARIS = getOSMatchesName(\"Solaris\");\n    public static final boolean IS_OS_SUN_OS = getOSMatchesName(\"SunOS\");\n    public static final boolean IS_OS_WINDOWS = getOSMatchesName(OS_NAME_WINDOWS_PREFIX);\n    public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.0\");\n    public static final boolean IS_OS_WINDOWS_95 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.0\");\n    public static final boolean IS_OS_WINDOWS_98 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.1\");\n    public static final boolean IS_OS_WINDOWS_ME = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"4.9\");\n    public static final boolean IS_OS_WINDOWS_NT = getOSMatchesName(OS_NAME_WINDOWS_PREFIX + \" NT\");\n    public static final boolean IS_OS_WINDOWS_XP = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.1\");\n    public static final boolean IS_OS_WINDOWS_VISTA = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.0\");\n    public static final boolean IS_OS_WINDOWS_7 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.1\");\n    /**\n     * <p>\n     * Converts the given Java version string to a <code>float</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>1.2f</code> for Java 1.2</li>\n     * <li><code>1.31f</code> for Java 1.3.1</li>\n     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 1.31f for Java 1.3.1\n     */\n    static float toJavaVersionFloat(String version);\n    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 131 for Java 1.3.1\n     */\n    static float toJavaVersionInt(String version);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testJavaVersionAsInt() {\n        assertEquals(0, SystemUtils.toJavaVersionInt(null));\n        assertEquals(0, SystemUtils.toJavaVersionInt(\"\"));\n        assertEquals(0, SystemUtils.toJavaVersionInt(\"0\"));\n        assertEquals(110, SystemUtils.toJavaVersionInt(\"1.1\"));\n        assertEquals(120, SystemUtils.toJavaVersionInt(\"1.2\"));\n        assertEquals(130, SystemUtils.toJavaVersionInt(\"1.3.0\"));\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1\"));\n        assertEquals(140, SystemUtils.toJavaVersionInt(\"1.4.0\"));\n        assertEquals(141, SystemUtils.toJavaVersionInt(\"1.4.1\"));\n        assertEquals(142, SystemUtils.toJavaVersionInt(\"1.4.2\"));\n        assertEquals(150, SystemUtils.toJavaVersionInt(\"1.5.0\"));\n        assertEquals(160, SystemUtils.toJavaVersionInt(\"1.6.0\"));\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"JavaVM-1.3.1\"));\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1 subset\"));\n        // This used to return 0f in [lang] version 2.5:\n        assertEquals(130, SystemUtils.toJavaVersionInt(\"XXX-1.3.x\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = Long.valueOf(0L);\n    public static final Long LONG_ONE = Long.valueOf(1L);\n    public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);\n    public static final Integer INTEGER_ZERO = Integer.valueOf(0);\n    public static final Integer INTEGER_ONE = Integer.valueOf(1);\n    public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);\n    public static final Short SHORT_ZERO = Short.valueOf((short) 0);\n    public static final Short SHORT_ONE = Short.valueOf((short) 1);\n    public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);\n    public static final Double DOUBLE_ONE = Double.valueOf(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);\n    public static final Float FLOAT_ZERO = Float.valueOf(0.0f);\n    public static final Float FLOAT_ONE = Float.valueOf(1.0f);\n    public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    * \n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = Long.valueOf(0L);\n    public static final Long LONG_ONE = Long.valueOf(1L);\n    public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);\n    public static final Integer INTEGER_ZERO = Integer.valueOf(0);\n    public static final Integer INTEGER_ONE = Integer.valueOf(1);\n    public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);\n    public static final Short SHORT_ZERO = Short.valueOf((short) 0);\n    public static final Short SHORT_ONE = Short.valueOf((short) 1);\n    public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);\n    public static final Double DOUBLE_ONE = Double.valueOf(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);\n    public static final Float FLOAT_ZERO = Float.valueOf(0.0f);\n    public static final Float FLOAT_ONE = Float.valueOf(1.0f);\n    public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    * \n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private boolean checkCreateNumber(final String val) {\n        try {\n            final Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (final NumberFormatException e) {\n            return false;\n       }\n    }\n    public void testStringCreateNumberEnsureNoPrecisionLoss(){\n        String shouldBeFloat = \"1.23\";\n        String shouldBeDouble = \"3.40282354e+38\";\n        String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n        \n        assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);\n        assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);\n        assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * <code>null</code> safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The <code>StringUtils</code> class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - <code>null</code></li>\n *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n *  <li>space - the space character (<code>' '</code>, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n * That is to say that a <code>null</code> input will return <code>null</code>.\n * Where a <code>boolean</code> or <code>int</code> is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the <code>null</code> handling is that a\n * <code>NullPointerException</code> should be considered a bug in\n * <code>StringUtils</code>.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @author Apache Software Foundation\n * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n * @author Daniel L. Rall\n * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Arun Mammen Thomas\n * @author Gary Gregory\n * @author Phil Steitz\n * @author Al Chou\n * @author Michael Davey\n * @author Reuben Sivan\n * @author Chris Hyzer\n * @author Scott Johnson\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars);\n    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>INDEX_NOT_FOUND (-1)</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"\", *, 0)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr, int startPos);\n    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars);\n    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"\", *)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr);\n    /**\n     * <p>Finds the first index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#indexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>(INDEX_NOT_FOUND) -1</code>.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar, int startPos);\n    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)            = -1\n     * StringUtils.indexOfAny(\"\", *)              = -1\n     * StringUtils.indexOfAny(*, null)            = -1\n     * StringUtils.indexOfAny(*, \"\")              = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", \"za\") = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\", \"by\") = 3\n     * StringUtils.indexOfAny(\"aba\",\"z\")          = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, String searchChars);\n    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars);\n    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty String (\"\") always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", \"\")      = true\n     * StringUtils.containsNone(\"abab\", \"xyz\") = true\n     * StringUtils.containsNone(\"ab1\", \"xyz\")  = true\n     * StringUtils.containsNone(\"abz\", \"xyz\")  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param invalidChars  a String of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, String invalidChars);\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * <code>null</code> safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The <code>StringUtils</code> class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - <code>null</code></li>\n *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n *  <li>space - the space character (<code>' '</code>, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n * That is to say that a <code>null</code> input will return <code>null</code>.\n * Where a <code>boolean</code> or <code>int</code> is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the <code>null</code> handling is that a\n * <code>NullPointerException</code> should be considered a bug in\n * <code>StringUtils</code>.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @author Apache Software Foundation\n * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n * @author Daniel L. Rall\n * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Arun Mammen Thomas\n * @author Gary Gregory\n * @author Phil Steitz\n * @author Al Chou\n * @author Michael Davey\n * @author Reuben Sivan\n * @author Chris Hyzer\n * @author Scott Johnson\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars);\n    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>INDEX_NOT_FOUND (-1)</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"\", *, 0)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr, int startPos);\n    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars);\n    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"\", *)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr);\n    /**\n     * <p>Finds the first index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#indexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>(INDEX_NOT_FOUND) -1</code>.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar, int startPos);\n    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)            = -1\n     * StringUtils.indexOfAny(\"\", *)              = -1\n     * StringUtils.indexOfAny(*, null)            = -1\n     * StringUtils.indexOfAny(*, \"\")              = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", \"za\") = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\", \"by\") = 3\n     * StringUtils.indexOfAny(\"aba\",\"z\")          = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, String searchChars);\n    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars);\n    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty String (\"\") always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", \"\")      = true\n     * StringUtils.containsNone(\"abab\", \"xyz\") = true\n     * StringUtils.containsNone(\"ab1\", \"xyz\")  = true\n     * StringUtils.containsNone(\"abz\", \"xyz\")  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param invalidChars  a String of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, String invalidChars);\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testContainsNone_CharArrayWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * <code>null</code> safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The <code>StringUtils</code> class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - <code>null</code></li>\n *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n *  <li>space - the space character (<code>' '</code>, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n * That is to say that a <code>null</code> input will return <code>null</code>.\n * Where a <code>boolean</code> or <code>int</code> is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the <code>null</code> handling is that a\n * <code>NullPointerException</code> should be considered a bug in\n * <code>StringUtils</code>.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @author Apache Software Foundation\n * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n * @author Daniel L. Rall\n * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Arun Mammen Thomas\n * @author Gary Gregory\n * @author Phil Steitz\n * @author Al Chou\n * @author Michael Davey\n * @author Reuben Sivan\n * @author Chris Hyzer\n * @author Scott Johnson\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"\", *)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>INDEX_NOT_FOUND (-1)</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar);\n    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars);\n    /**\n     * <p>Finds the first index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#indexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>(INDEX_NOT_FOUND) -1</code>.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar, int startPos);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"\", *, 0)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr, int startPos);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * <code>null</code> safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The <code>StringUtils</code> class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - <code>null</code></li>\n *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n *  <li>space - the space character (<code>' '</code>, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n * That is to say that a <code>null</code> input will return <code>null</code>.\n * Where a <code>boolean</code> or <code>int</code> is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the <code>null</code> handling is that a\n * <code>NullPointerException</code> should be considered a bug in\n * <code>StringUtils</code>.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @author Apache Software Foundation\n * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n * @author Daniel L. Rall\n * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Arun Mammen Thomas\n * @author Gary Gregory\n * @author Phil Steitz\n * @author Al Chou\n * @author Michael Davey\n * @author Reuben Sivan\n * @author Chris Hyzer\n * @author Scott Johnson\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"\", *)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>INDEX_NOT_FOUND (-1)</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar);\n    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars);\n    /**\n     * <p>Finds the first index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#indexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>(INDEX_NOT_FOUND) -1</code>.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar, int startPos);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"\", *, 0)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr, int startPos);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>\tpublic void testContainsAnyCharArrayWithSupplementaryChars() {\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));\n\t\t// Sanity check:\n\t\tassertEquals(-1, CharU20000.indexOf(CharU20001));\n\t\tassertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n\t\tassertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n\t\t// Test:\n\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));\n\t\tassertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));\n\t}\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>\n * Assists in implementing {@link Object#hashCode()} methods.\n * </p>\n * \n * <p>\n * This class enables a good <code>hashCode</code> method to be built for any class. It follows the rules laid out in\n * the book <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a> by Joshua Bloch. Writing a\n * good <code>hashCode</code> method is actually quite difficult. This class aims to simplify the process.\n * </p>\n * \n * <p>\n * All relevant fields from the object should be included in the <code>hashCode</code> method. Derived fields may be\n * excluded. In general, any field used in the <code>equals</code> method must be used in the <code>hashCode</code>\n * method.\n * </p>\n * \n * <p>\n * To use this class write code as follows:\n * </p>\n * \n * <pre>\n * public class Person {\n *   String name;\n *   int age;\n *   boolean smoker;\n *   ...\n *\n *   public int hashCode() {\n *     // you pick a hard-coded, randomly chosen, non-zero, odd number\n *     // ideally different for each class\n *     return new HashCodeBuilder(17, 37).\n *       append(name).\n *       append(age).\n *       append(smoker).\n *       toHashCode();\n *   }\n * }\n * </pre>\n * \n * <p>\n * If required, the superclass <code>hashCode()</code> can be added using {@link #appendSuper}.\n * </p>\n * \n * <p>\n * Alternatively, there is a method that uses reflection to determine the fields to test. Because these fields are\n * usually private, the method, <code>reflectionHashCode</code>, uses <code>AccessibleObject.setAccessible</code>\n * to change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions\n * are set up correctly. It is also slower than testing explicitly.\n * </p>\n * \n * <p>\n * A typical invocation for this method would look like:\n * </p>\n * \n * <pre>\n * public int hashCode() {\n *   return HashCodeBuilder.reflectionHashCode(this);\n * }\n * </pre>\n * \n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Pete Gieser\n * @since 1.0\n * @version $Id$\n */\npublic class HashCodeBuilder {\n    /**\n     * <p>\n     * Returns the registry of objects being traversed by the reflection methods in the current thread.\n     * </p>\n     * \n     * @return Set the registry of objects being traversed\n     * @since 2.3\n     */\n    static Set<IDKey> getRegistry();\n    /**\n     * <p>\n     * The computed <code>hashCode</code> from toHashCode() is returned due to the likelyhood \n     * of bugs in mis-calling toHashCode() and the unlikelyness of it mattering what the hashCode for \n     * HashCodeBuilder itself is.\n     * \n     * @return <code>hashCode</code> based on the fields appended\n     */\n    @Override\n    public int hashCode();\n    public static int reflectionHashCode(Object object, String[] excludeFields);\n    /**\n     * <p>\n     * Registers the given object. Used by the reflection methods to avoid infinite loops.\n     * </p>\n     * \n     * @param value\n     *            The object to register.\n     */\n    static void register(Object value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>\n * Assists in implementing {@link Object#hashCode()} methods.\n * </p>\n * \n * <p>\n * This class enables a good <code>hashCode</code> method to be built for any class. It follows the rules laid out in\n * the book <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a> by Joshua Bloch. Writing a\n * good <code>hashCode</code> method is actually quite difficult. This class aims to simplify the process.\n * </p>\n * \n * <p>\n * All relevant fields from the object should be included in the <code>hashCode</code> method. Derived fields may be\n * excluded. In general, any field used in the <code>equals</code> method must be used in the <code>hashCode</code>\n * method.\n * </p>\n * \n * <p>\n * To use this class write code as follows:\n * </p>\n * \n * <pre>\n * public class Person {\n *   String name;\n *   int age;\n *   boolean smoker;\n *   ...\n *\n *   public int hashCode() {\n *     // you pick a hard-coded, randomly chosen, non-zero, odd number\n *     // ideally different for each class\n *     return new HashCodeBuilder(17, 37).\n *       append(name).\n *       append(age).\n *       append(smoker).\n *       toHashCode();\n *   }\n * }\n * </pre>\n * \n * <p>\n * If required, the superclass <code>hashCode()</code> can be added using {@link #appendSuper}.\n * </p>\n * \n * <p>\n * Alternatively, there is a method that uses reflection to determine the fields to test. Because these fields are\n * usually private, the method, <code>reflectionHashCode</code>, uses <code>AccessibleObject.setAccessible</code>\n * to change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions\n * are set up correctly. It is also slower than testing explicitly.\n * </p>\n * \n * <p>\n * A typical invocation for this method would look like:\n * </p>\n * \n * <pre>\n * public int hashCode() {\n *   return HashCodeBuilder.reflectionHashCode(this);\n * }\n * </pre>\n * \n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Pete Gieser\n * @since 1.0\n * @version $Id$\n */\npublic class HashCodeBuilder {\n    /**\n     * <p>\n     * Returns the registry of objects being traversed by the reflection methods in the current thread.\n     * </p>\n     * \n     * @return Set the registry of objects being traversed\n     * @since 2.3\n     */\n    static Set<IDKey> getRegistry();\n    /**\n     * <p>\n     * The computed <code>hashCode</code> from toHashCode() is returned due to the likelyhood \n     * of bugs in mis-calling toHashCode() and the unlikelyness of it mattering what the hashCode for \n     * HashCodeBuilder itself is.\n     * \n     * @return <code>hashCode</code> based on the fields appended\n     */\n    @Override\n    public int hashCode();\n    public static int reflectionHashCode(Object object, String[] excludeFields);\n    /**\n     * <p>\n     * Registers the given object. Used by the reflection methods to avoid infinite loops.\n     * </p>\n     * \n     * @param value\n     *            The object to register.\n     */\n    static void register(Object value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testReflectionObjectCycle() {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        \n        // Used to caused:\n        // java.lang.StackOverflowError\n        // at java.lang.ClassLoader.getCallerClassLoader(Native Method)\n        // at java.lang.Class.getDeclaredFields(Class.java:992)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:373)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n        // at\n        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n        // at\n        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n\n        a.hashCode();\n        assertNull(HashCodeBuilder.getRegistry());\n        b.hashCode();\n        assertNull(HashCodeBuilder.getRegistry());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operates on classes without using reflection.</p>\n *\n * <p>This class handles invalid <code>null</code> inputs as best it can.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>The notion of a <code>canonical name</code> includes the human\n * readable name for the type, for example <code>int[]</code>. The\n * non-canonical method variants work with the JVM names, such as\n * <code>[I</code>. </p>\n *\n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Norm Deane\n * @author Alban Peignier\n * @author Tomasz Blachowicz\n * @since 2.0\n * @version $Id$\n */\npublic class ClassUtils {\n    public static final char PACKAGE_SEPARATOR_CHAR = '.';\n    public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);\n    public static final char INNER_CLASS_SEPARATOR_CHAR = '$';\n    public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);\n    private static final Map<Class<?>, Class<?>> primitiveWrapperMap = new HashMap<Class<?>, Class<?>>();\n    public static Class<?> getClass(ClassLoader classLoader, String className) throws ClassNotFoundException;\n    public static Class<?> getClass(String className, boolean initialize) throws ClassNotFoundException;\n    public static Class<?> getClass(String className) throws ClassNotFoundException;\n    public static Class<?> getClass(\n            ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException;\n    /**\n     * <p>Converts an array of <code>Object</code> in to an array of <code>Class</code> objects.\n     * If any of these objects is null, a null element will be inserted into the array.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     *\n     * @param array an <code>Object</code> array\n     * @return a <code>Class</code> array, <code>null</code> if null array input\n     * @since 2.4\n     */\n    public static Class<?>[] toClass(Object[] array);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operates on classes without using reflection.</p>\n *\n * <p>This class handles invalid <code>null</code> inputs as best it can.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>The notion of a <code>canonical name</code> includes the human\n * readable name for the type, for example <code>int[]</code>. The\n * non-canonical method variants work with the JVM names, such as\n * <code>[I</code>. </p>\n *\n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Norm Deane\n * @author Alban Peignier\n * @author Tomasz Blachowicz\n * @since 2.0\n * @version $Id$\n */\npublic class ClassUtils {\n    public static final char PACKAGE_SEPARATOR_CHAR = '.';\n    public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);\n    public static final char INNER_CLASS_SEPARATOR_CHAR = '$';\n    public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);\n    private static final Map<Class<?>, Class<?>> primitiveWrapperMap = new HashMap<Class<?>, Class<?>>();\n    public static Class<?> getClass(ClassLoader classLoader, String className) throws ClassNotFoundException;\n    public static Class<?> getClass(String className, boolean initialize) throws ClassNotFoundException;\n    public static Class<?> getClass(String className) throws ClassNotFoundException;\n    public static Class<?> getClass(\n            ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException;\n    /**\n     * <p>Converts an array of <code>Object</code> in to an array of <code>Class</code> objects.\n     * If any of these objects is null, a null element will be inserted into the array.</p>\n     *\n     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n     *\n     * @param array an <code>Object</code> array\n     * @return a <code>Class</code> array, <code>null</code> if null array input\n     * @since 2.4\n     */\n    public static Class<?>[] toClass(Object[] array);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertGetClassReturnsClass( Class<?> c ) throws Exception {\n        assertEquals( c, ClassUtils.getClass( c.getName() ) );\n    }\n    private void assertGetClassThrowsException( String className, Class<?> exceptionType ) throws Exception {\n        try {\n            ClassUtils.getClass( className );\n            fail( \"ClassUtils.getClass() should fail with an exception of type \" + exceptionType.getName() + \" when given class name \\\"\" + className + \"\\\".\" );\n        }\n        catch( Exception e ) {\n            assertTrue( exceptionType.isAssignableFrom( e.getClass() ) );\n        }\n    }\n    private void assertGetClassThrowsNullPointerException( String className ) throws Exception {\n        assertGetClassThrowsException( className, NullPointerException.class );\n    }\n    private void assertGetClassThrowsClassNotFound( String className ) throws Exception {\n        assertGetClassThrowsException( className, ClassNotFoundException.class );\n    }\n    public void testToClass_object() {\n        assertNull(ClassUtils.toClass(null));\n\n        assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY));\n\n        assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class }, ClassUtils.toClass(new Object[] { \"Test\", 1, 99d })));\n\n        assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class }, ClassUtils.toClass(new Object[] { \"Test\", null, 99d })));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Controls <code>String</code> formatting for {@link ToStringBuilder}.\n * The main public interface is always via <code>ToStringBuilder</code>.</p>\n *\n * <p>These classes are intended to be used as <code>Singletons</code>.\n * There is no need to instantiate a new style each time. A program\n * will generally use one of the predefined constants on this class.\n * Alternatively, the {@link StandardToStringStyle} class can be used\n * to set the individual settings. Thus most styles can be achieved\n * without subclassing.</p>\n *\n * <p>If required, a subclass can override as many or as few of the\n * methods as it requires. Each object type (from <code>boolean</code>\n * to <code>long</code> to <code>Object</code> to <code>int[]</code>) has\n * its own methods to output it. Most have two versions, detail and summary.\n *\n * <p>For example, the detail version of the array based methods will\n * output the whole array, whereas the summary method will just output\n * the array length.</p>\n *\n * <p>If you want to format the output of certain objects, such as dates, you\n * must create a subclass and override a method.\n * <pre>\n * public class MyStyle extends ToStringStyle {\n *   protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n *     if (value instanceof Date) {\n *       value = new SimpleDateFormat(\"yyyy-MM-dd\").format(value);\n *     }\n *     buffer.append(value);\n *   }\n * }\n * </pre>\n * </p>\n *\n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Pete Gieser\n * @author Masato Tezuka\n * @since 1.0\n * @version $Id$\n */\npublic abstract class ToStringStyle implements Serializable {\n    public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle();\n    public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle();\n    public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle();\n    public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\n    public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\n    private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>();\n    /**\n     * <p>\n     * Returns the registry of objects being traversed by the <code>reflectionToString</code>\n     * methods in the current thread.\n     * </p>\n     *\n     * @return Set the registry of objects being traversed\n     */\n    static Map<Object, Object> getRegistry();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Controls <code>String</code> formatting for {@link ToStringBuilder}.\n * The main public interface is always via <code>ToStringBuilder</code>.</p>\n *\n * <p>These classes are intended to be used as <code>Singletons</code>.\n * There is no need to instantiate a new style each time. A program\n * will generally use one of the predefined constants on this class.\n * Alternatively, the {@link StandardToStringStyle} class can be used\n * to set the individual settings. Thus most styles can be achieved\n * without subclassing.</p>\n *\n * <p>If required, a subclass can override as many or as few of the\n * methods as it requires. Each object type (from <code>boolean</code>\n * to <code>long</code> to <code>Object</code> to <code>int[]</code>) has\n * its own methods to output it. Most have two versions, detail and summary.\n *\n * <p>For example, the detail version of the array based methods will\n * output the whole array, whereas the summary method will just output\n * the array length.</p>\n *\n * <p>If you want to format the output of certain objects, such as dates, you\n * must create a subclass and override a method.\n * <pre>\n * public class MyStyle extends ToStringStyle {\n *   protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n *     if (value instanceof Date) {\n *       value = new SimpleDateFormat(\"yyyy-MM-dd\").format(value);\n *     }\n *     buffer.append(value);\n *   }\n * }\n * </pre>\n * </p>\n *\n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Pete Gieser\n * @author Masato Tezuka\n * @since 1.0\n * @version $Id$\n */\npublic abstract class ToStringStyle implements Serializable {\n    public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle();\n    public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle();\n    public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle();\n    public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\n    public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\n    private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>();\n    /**\n     * <p>\n     * Returns the registry of objects being traversed by the <code>reflectionToString</code>\n     * methods in the current thread.\n     * </p>\n     *\n     * @return Set the registry of objects being traversed\n     */\n    static Map<Object, Object> getRegistry();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private String toBaseString(Object o) {\n        return o.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(o));\n    }\n    public void testObjectCycle() {\n        ObjectCycle a = new ObjectCycle();\n        ObjectCycle b = new ObjectCycle();\n        a.obj = b;\n        b.obj = a;\n\n        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n        assertEquals(expected, a.toString());\n        validateNullToStringStyleRegistry();\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and\n * primitive wrapper arrays (like <code>Integer[]</code>).</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code>\n * array input. However, an Object array that contains a <code>null</code>\n * element may throw an exception. Each method documents its behaviour.</p>\n *\n * @author Apache Software Foundation\n * @author Moritz Petersen\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Nikolay Metchev\n * @author Matthew Hawthorne\n * @author Tim O'Brien\n * @author Pete Gieser\n * @author Gary Gregory\n * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n * @author Maarten Coene\n * @since 2.0\n * @version $Id$\n */\npublic class ArrayUtils {\n    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n    public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[0];\n    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n    public static final long[] EMPTY_LONG_ARRAY = new long[0];\n    public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n    public static final int[] EMPTY_INT_ARRAY = new int[0];\n    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n    public static final short[] EMPTY_SHORT_ARRAY = new short[0];\n    public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n    public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];\n    public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n    public static final float[] EMPTY_FLOAT_ARRAY = new float[0];\n    public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n    public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];\n    public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];\n    public static final char[] EMPTY_CHAR_ARRAY = new char[0];\n    public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n    public static final int INDEX_NOT_FOUND = -1;\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static double[] add(double[] array, double element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1L], 0, 2L)           = [2L, 1L]\n     * ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L]\n     * ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L]\n     * ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static long[] add(long[] array, int index, long element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0, true)          = [true]\n     * ArrayUtils.add([true], 0, false)       = [false, true]\n     * ArrayUtils.add([false], 1, true)       = [false, true]\n     * ArrayUtils.add([true, false], 1, true) = [true, true, false]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static boolean[] add(boolean[] array, int index, boolean element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1]\n     * ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5]\n     * ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7]\n     * ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static double[] add(double[] array, int index, double element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, '0')       = ['0']\n     * ArrayUtils.add(['1'], '0')      = ['1', '0']\n     * ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1']\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static char[] add(char[] array, char element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static long[] add(long[] array, long element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n     * ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3]\n     * ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static byte[] add(byte[] array, int index, byte element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static byte[] add(byte[] array, byte element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static short[] add(short[] array, short element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n     * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]\n     * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static int[] add(int[] array, int index, int element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, true)          = [true]\n     * ArrayUtils.add([true], false)       = [true, false]\n     * ArrayUtils.add([true, false], true) = [true, false, true]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static boolean[] add(boolean[] array, boolean element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f]\n     * ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f]\n     * ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f]\n     * ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static float[] add(float[] array, int index, float element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0, null)      = [null]\n     * ArrayUtils.add(null, 0, \"a\")       = [\"a\"]\n     * ArrayUtils.add([\"a\"], 1, null)     = [\"a\", null]\n     * ArrayUtils.add([\"a\"], 1, \"b\")      = [\"a\", \"b\"]\n     * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     * @throws IllegalArgumentException if both array and element are null\n     */\n    public static <T> T[] add(T[] array, int index, T element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element, unless the element itself is null,\n     *  in which case the return type is Object[]</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, null)      = [null]\n     * ArrayUtils.add(null, \"a\")       = [\"a\"]\n     * ArrayUtils.add([\"a\"], null)     = [\"a\", null]\n     * ArrayUtils.add([\"a\"], \"b\")      = [\"a\", \"b\"]\n     * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param array  the array to \"add\" the element to, may be <code>null</code>\n     * @param element  the object to add, may be <code>null</code>\n     * @return A new array containing the existing elements plus the new element\n     * The returned array type will be that of the input array (unless null),\n     * in which case it will have the same type as the element.\n     * If both are null, an IllegalArgumentException is thrown\n     * @since 2.1\n     * @throws IllegalArgumentException if both arguments are null\n     */\n    public static <T> T[] add(T[] array, T element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static int[] add(int[] array, int element);\n    /**\n     * Underlying implementation of add(array, index, element) methods.\n     * The last parameter is the class, which may not equal element.getClass\n     * for primitives.\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @param clss the type of the element being added\n     * @return A new array containing the existing elements and the new element\n     */\n    private static Object add(Object array, int index, Object element, Class<?> clss);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0, 'a')            = ['a']\n     * ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a']\n     * ArrayUtils.add(['a', 'b'], 0, 'c')      = ['c', 'a', 'b']\n     * ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b']\n     * ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c']\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static char[] add(char[] array, int index, char element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static float[] add(float[] array, float element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n     * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]\n     * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static short[] add(short[] array, int index, short element);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and\n * primitive wrapper arrays (like <code>Integer[]</code>).</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code>\n * array input. However, an Object array that contains a <code>null</code>\n * element may throw an exception. Each method documents its behaviour.</p>\n *\n * @author Apache Software Foundation\n * @author Moritz Petersen\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Nikolay Metchev\n * @author Matthew Hawthorne\n * @author Tim O'Brien\n * @author Pete Gieser\n * @author Gary Gregory\n * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n * @author Maarten Coene\n * @since 2.0\n * @version $Id$\n */\npublic class ArrayUtils {\n    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n    public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[0];\n    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n    public static final long[] EMPTY_LONG_ARRAY = new long[0];\n    public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n    public static final int[] EMPTY_INT_ARRAY = new int[0];\n    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n    public static final short[] EMPTY_SHORT_ARRAY = new short[0];\n    public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n    public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];\n    public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n    public static final float[] EMPTY_FLOAT_ARRAY = new float[0];\n    public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n    public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];\n    public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];\n    public static final char[] EMPTY_CHAR_ARRAY = new char[0];\n    public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n    public static final int INDEX_NOT_FOUND = -1;\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static double[] add(double[] array, double element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1L], 0, 2L)           = [2L, 1L]\n     * ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L]\n     * ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L]\n     * ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static long[] add(long[] array, int index, long element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0, true)          = [true]\n     * ArrayUtils.add([true], 0, false)       = [false, true]\n     * ArrayUtils.add([false], 1, true)       = [false, true]\n     * ArrayUtils.add([true, false], 1, true) = [true, true, false]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static boolean[] add(boolean[] array, int index, boolean element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1]\n     * ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5]\n     * ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7]\n     * ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static double[] add(double[] array, int index, double element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, '0')       = ['0']\n     * ArrayUtils.add(['1'], '0')      = ['1', '0']\n     * ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1']\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static char[] add(char[] array, char element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static long[] add(long[] array, long element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n     * ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3]\n     * ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static byte[] add(byte[] array, int index, byte element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static byte[] add(byte[] array, byte element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static short[] add(short[] array, short element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n     * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]\n     * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static int[] add(int[] array, int index, int element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, true)          = [true]\n     * ArrayUtils.add([true], false)       = [true, false]\n     * ArrayUtils.add([true, false], true) = [true, false, true]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static boolean[] add(boolean[] array, boolean element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f]\n     * ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f]\n     * ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f]\n     * ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static float[] add(float[] array, int index, float element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0, null)      = [null]\n     * ArrayUtils.add(null, 0, \"a\")       = [\"a\"]\n     * ArrayUtils.add([\"a\"], 1, null)     = [\"a\", null]\n     * ArrayUtils.add([\"a\"], 1, \"b\")      = [\"a\", \"b\"]\n     * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     * @throws IllegalArgumentException if both array and element are null\n     */\n    public static <T> T[] add(T[] array, int index, T element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element, unless the element itself is null,\n     *  in which case the return type is Object[]</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, null)      = [null]\n     * ArrayUtils.add(null, \"a\")       = [\"a\"]\n     * ArrayUtils.add([\"a\"], null)     = [\"a\", null]\n     * ArrayUtils.add([\"a\"], \"b\")      = [\"a\", \"b\"]\n     * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param array  the array to \"add\" the element to, may be <code>null</code>\n     * @param element  the object to add, may be <code>null</code>\n     * @return A new array containing the existing elements plus the new element\n     * The returned array type will be that of the input array (unless null),\n     * in which case it will have the same type as the element.\n     * If both are null, an IllegalArgumentException is thrown\n     * @since 2.1\n     * @throws IllegalArgumentException if both arguments are null\n     */\n    public static <T> T[] add(T[] array, T element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static int[] add(int[] array, int element);\n    /**\n     * Underlying implementation of add(array, index, element) methods.\n     * The last parameter is the class, which may not equal element.getClass\n     * for primitives.\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @param clss the type of the element being added\n     * @return A new array containing the existing elements and the new element\n     */\n    private static Object add(Object array, int index, Object element, Class<?> clss);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0, 'a')            = ['a']\n     * ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a']\n     * ArrayUtils.add(['a', 'b'], 0, 'c')      = ['c', 'a', 'b']\n     * ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b']\n     * ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c']\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static char[] add(char[] array, int index, char element);\n    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0)   = [0]\n     * ArrayUtils.add([1], 0)    = [1, 0]\n     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n     * </pre>\n     *\n     * @param array  the array to copy and add the element to, may be <code>null</code>\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     */\n    public static float[] add(float[] array, float element);\n    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add([1], 0, 2)         = [2, 1]\n     * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]\n     * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     */\n    public static short[] add(short[] array, int index, short element);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLANG571(){\n        String[] stringArray=null;\n        String aString=null;\n        try {\n            @SuppressWarnings(\"unused\")\n            String[] sa = ArrayUtils.add(stringArray, aString);\n            fail(\"Should have caused IllegalArgumentException\");\n        } catch (IllegalArgumentException iae){\n            //expected\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            String[] sa = ArrayUtils.add(stringArray, 0, aString);\n            fail(\"Should have caused IllegalArgumentException\");\n        } catch (IllegalArgumentException iae){\n            //expected\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = new Long(0L);\n    public static final Long LONG_ONE = new Long(1L);\n    public static final Long LONG_MINUS_ONE = new Long(-1L);\n    public static final Integer INTEGER_ZERO = new Integer(0);\n    public static final Integer INTEGER_ONE = new Integer(1);\n    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n    public static final Short SHORT_ZERO = new Short((short) 0);\n    public static final Short SHORT_ONE = new Short((short) 1);\n    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = new Double(0.0d);\n    public static final Double DOUBLE_ONE = new Double(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n    public static final Float FLOAT_ZERO = new Float(0.0f);\n    public static final Float FLOAT_ONE = new Float(1.0f);\n    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = new Long(0L);\n    public static final Long LONG_ONE = new Long(1L);\n    public static final Long LONG_MINUS_ONE = new Long(-1L);\n    public static final Integer INTEGER_ZERO = new Integer(0);\n    public static final Integer INTEGER_ONE = new Integer(1);\n    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n    public static final Short SHORT_ZERO = new Short((short) 0);\n    public static final Short SHORT_ONE = new Short((short) 1);\n    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n    public static final Double DOUBLE_ZERO = new Double(0.0d);\n    public static final Double DOUBLE_ONE = new Double(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n    public static final Float FLOAT_ZERO = new Float(0.0f);\n    public static final Float FLOAT_ONE = new Float(1.0f);\n    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n       }\n    }\n    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\" + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils .createNumber(\"12345678901234567890L\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils .createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\"createNumber(String) 16 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils .createNumber(\"10\" + Long.MAX_VALUE));\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", new Float(\"2.\"), NumberUtils.createNumber(\"2.\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and\n * primitive wrapper arrays (like <code>Integer[]</code>).</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code>\n * array input. However, an Object array that contains a <code>null</code>\n * element may throw an exception. Each method documents its behaviour.</p>\n *\n * @author Apache Software Foundation\n * @author Moritz Petersen\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Nikolay Metchev\n * @author Matthew Hawthorne\n * @author Tim O'Brien\n * @author Pete Gieser\n * @author Gary Gregory\n * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n * @author Maarten Coene\n * @since 2.0\n * @version $Id$\n */\npublic class ArrayUtils {\n    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n    public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[0];\n    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n    public static final long[] EMPTY_LONG_ARRAY = new long[0];\n    public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n    public static final int[] EMPTY_INT_ARRAY = new int[0];\n    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n    public static final short[] EMPTY_SHORT_ARRAY = new short[0];\n    public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n    public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];\n    public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n    public static final float[] EMPTY_FLOAT_ARRAY = new float[0];\n    public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n    public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];\n    public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];\n    public static final char[] EMPTY_CHAR_ARRAY = new char[0];\n    public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n    public static final int INDEX_NOT_FOUND = -1;\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new double[] array.\n     * @since 2.1\n     */\n    public static double[] addAll(double[] array1, double... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new byte[] array.\n     * @since 2.1\n     */\n    public static byte[] addAll(byte[] array1, byte... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new float[] array.\n     * @since 2.1\n     */\n    public static float[] addAll(float[] array1, float... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new long[] array.\n     * @since 2.1\n     */\n    public static long[] addAll(long[] array1, long... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new int[] array.\n     * @since 2.1\n     */\n    public static int[] addAll(int[] array1, int... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new short[] array.\n     * @since 2.1\n     */\n    public static short[] addAll(short[] array1, short... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new char[] array.\n     * @since 2.1\n     */\n    public static char[] addAll(char[] array1, char... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new boolean[] array.\n     * @since 2.1\n     */\n    public static boolean[] addAll(boolean[] array1, boolean... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(null, null)     = null\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * ArrayUtils.addAll([null], [null]) = [null, null]\n     * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>\n     * @return The new array, <code>null</code> if both arrays are <code>null</code>.\n     *      The type of the new array is the type of the first array,\n     *      unless the first array is null, in which case the type is the same as the second array.\n     * @since 2.1\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and\n * primitive wrapper arrays (like <code>Integer[]</code>).</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code>\n * array input. However, an Object array that contains a <code>null</code>\n * element may throw an exception. Each method documents its behaviour.</p>\n *\n * @author Apache Software Foundation\n * @author Moritz Petersen\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Nikolay Metchev\n * @author Matthew Hawthorne\n * @author Tim O'Brien\n * @author Pete Gieser\n * @author Gary Gregory\n * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n * @author Maarten Coene\n * @since 2.0\n * @version $Id$\n */\npublic class ArrayUtils {\n    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n    public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[0];\n    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n    public static final long[] EMPTY_LONG_ARRAY = new long[0];\n    public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n    public static final int[] EMPTY_INT_ARRAY = new int[0];\n    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n    public static final short[] EMPTY_SHORT_ARRAY = new short[0];\n    public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n    public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];\n    public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n    public static final float[] EMPTY_FLOAT_ARRAY = new float[0];\n    public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n    public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];\n    public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];\n    public static final char[] EMPTY_CHAR_ARRAY = new char[0];\n    public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n    public static final int INDEX_NOT_FOUND = -1;\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new double[] array.\n     * @since 2.1\n     */\n    public static double[] addAll(double[] array1, double... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new byte[] array.\n     * @since 2.1\n     */\n    public static byte[] addAll(byte[] array1, byte... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new float[] array.\n     * @since 2.1\n     */\n    public static float[] addAll(float[] array1, float... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new long[] array.\n     * @since 2.1\n     */\n    public static long[] addAll(long[] array1, long... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new int[] array.\n     * @since 2.1\n     */\n    public static int[] addAll(int[] array1, int... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new short[] array.\n     * @since 2.1\n     */\n    public static short[] addAll(short[] array1, short... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new char[] array.\n     * @since 2.1\n     */\n    public static char[] addAll(char[] array1, char... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new boolean[] array.\n     * @since 2.1\n     */\n    public static boolean[] addAll(boolean[] array1, boolean... array2);\n    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(null, null)     = null\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * ArrayUtils.addAll([null], [null]) = [null, null]\n     * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>\n     * @return The new array, <code>null</code> if both arrays are <code>null</code>.\n     *      The type of the new array is the type of the first array,\n     *      unless the first array is null, in which case the type is the same as the second array.\n     * @since 2.1\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testJira567(){\n        Number[] n;\n        // Valid array construction\n        n = ArrayUtils.addAll(new Number[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n        assertEquals(2,n.length);\n        assertEquals(Number.class,n.getClass().getComponentType());\n        try {\n            // Invalid - can't store Long in Integer array\n               n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n               fail(\"Should have generated IllegalArgumentException\");\n        } catch (IllegalArgumentException expected) {\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n * \n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author Apache Software Foundation\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\npublic class FastDateFormat extends Format {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    private static String cDefaultPattern; // lazily initialised by getInstance()\n    private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);\n    private final String mPattern;\n    private final TimeZone mTimeZone;\n    private final boolean mTimeZoneForced;\n    private final Locale mLocale;\n    private final boolean mLocaleForced;\n    private transient Rule[] mRules;\n    private transient int mMaxLengthEstimate;\n    /**\n     * <p>Formats a <code>Date</code> object.</p>\n     * \n     * @param date  the date to format\n     * @return the formatted string\n     */\n    public String format(Date date);\n    /**\n     * <p>Formats a <code>Date</code>, <code>Calendar</code> or\n     * <code>Long</code> (milliseconds) object.</p>\n     * \n     * @param obj  the object to format\n     * @param toAppendTo  the buffer to append to\n     * @param pos  the position - ignored\n     * @return the buffer passed in\n     */\n    @Override\n    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos);\n    /**\n     * <p>Formats a milliseond <code>long</code> value into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param millis  the millisecond value to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     * @since 2.1\n     */\n    public StringBuffer format(long millis, StringBuffer buf);\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone);\n    /**\n     * <p>Formats a millisecond <code>long</code> value.</p>\n     * \n     * @param millis  the millisecond value to format\n     * @return the formatted string\n     * @since 2.1\n     */\n    public String format(long millis);\n    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     */\n    public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale);\n    /**\n     * <p>Formats a <code>Calendar</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Calendar calendar, StringBuffer buf);\n    /**\n     * <p>Formats a <code>Calendar</code> object.</p>\n     * \n     * @param calendar  the calendar to format\n     * @return the formatted string\n     */\n    public String format(Calendar calendar);\n    /**\n     * <p>Gets a formatter instance using the default pattern in the\n     * default locale.</p>\n     * \n     * @return a date/time formatter\n     */\n    public static FastDateFormat getInstance();\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, Locale locale);\n    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern);\n    /**\n     * <p>Formats a <code>Date</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param date  the date to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Date date, StringBuffer buf);\n    /**\n     * <p>Gets the time zone used by this formatter.</p>\n     *\n     * <p>This zone is always used for <code>Date</code> formatting.\n     * If a <code>Calendar</code> is passed in to be formatted, the\n     * time zone on that may be used depending on\n     * {@link #getTimeZoneOverridesCalendar()}.</p>\n     * \n     * @return the time zone\n     */\n    public TimeZone getTimeZone();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n * \n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author Apache Software Foundation\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\npublic class FastDateFormat extends Format {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    private static String cDefaultPattern; // lazily initialised by getInstance()\n    private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);\n    private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);\n    private final String mPattern;\n    private final TimeZone mTimeZone;\n    private final boolean mTimeZoneForced;\n    private final Locale mLocale;\n    private final boolean mLocaleForced;\n    private transient Rule[] mRules;\n    private transient int mMaxLengthEstimate;\n    /**\n     * <p>Formats a <code>Date</code> object.</p>\n     * \n     * @param date  the date to format\n     * @return the formatted string\n     */\n    public String format(Date date);\n    /**\n     * <p>Formats a <code>Date</code>, <code>Calendar</code> or\n     * <code>Long</code> (milliseconds) object.</p>\n     * \n     * @param obj  the object to format\n     * @param toAppendTo  the buffer to append to\n     * @param pos  the position - ignored\n     * @return the buffer passed in\n     */\n    @Override\n    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos);\n    /**\n     * <p>Formats a milliseond <code>long</code> value into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param millis  the millisecond value to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     * @since 2.1\n     */\n    public StringBuffer format(long millis, StringBuffer buf);\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone);\n    /**\n     * <p>Formats a millisecond <code>long</code> value.</p>\n     * \n     * @param millis  the millisecond value to format\n     * @return the formatted string\n     * @since 2.1\n     */\n    public String format(long millis);\n    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     */\n    public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale);\n    /**\n     * <p>Formats a <code>Calendar</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Calendar calendar, StringBuffer buf);\n    /**\n     * <p>Formats a <code>Calendar</code> object.</p>\n     * \n     * @param calendar  the calendar to format\n     * @return the formatted string\n     */\n    public String format(Calendar calendar);\n    /**\n     * <p>Gets a formatter instance using the default pattern in the\n     * default locale.</p>\n     * \n     * @return a date/time formatter\n     */\n    public static FastDateFormat getInstance();\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, Locale locale);\n    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern);\n    /**\n     * <p>Formats a <code>Date</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param date  the date to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Date date, StringBuffer buf);\n    /**\n     * <p>Gets the time zone used by this formatter.</p>\n     *\n     * <p>This zone is always used for <code>Date</code> formatting.\n     * If a <code>Calendar</code> is passed in to be formatted, the\n     * time zone on that may be used depending on\n     * {@link #getTimeZoneOverridesCalendar()}.</p>\n     * \n     * @return the time zone\n     */\n    public TimeZone getTimeZone();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLang538() {\n        final String dateTime = \"2009-10-16T16:42:16.000Z\";\n\n        // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)\n        // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone\n        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));\n        cal.clear();\n        cal.set(2009, 9, 16, 8, 42, 16);\n\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));\n        assertEquals(\"dateTime\", dateTime, format.format(cal));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * <code>null</code> safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The <code>StringUtils</code> class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - <code>null</code></li>\n *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n *  <li>space - the space character (<code>' '</code>, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n * That is to say that a <code>null</code> input will return <code>null</code>.\n * Where a <code>boolean</code> or <code>int</code> is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the <code>null</code> handling is that a\n * <code>NullPointerException</code> should be considered a bug in\n * <code>StringUtils</code>.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n *\n * @see java.lang.String\n * @author Apache Software Foundation\n * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n * @author Daniel L. Rall\n * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Arun Mammen Thomas\n * @author Gary Gregory\n * @author Phil Steitz\n * @author Al Chou\n * @author Michael Davey\n * @author Reuben Sivan\n * @author Chris Hyzer\n * @author Scott Johnson\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr, int startPos);\n    /**\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified, preserving all tokens, including empty tokens \n     * created by adjacent separators.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than <code>max</code> delimited substrings are found, the last\n     * returned string includes all characters after the first <code>max - 1</code>\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *, *)            = null\n     * StringUtils.splitPreserveAllTokens(\"\", *, *)              = []\n     * StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2) = [\"ab\", \"  de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3) = [\"ab\", \"\", \" de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4) = [\"ab\", \"\", \"\", \"de fg\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, String separatorChars, int max);\n    /**\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator, preserving all tokens, including empty tokens created by \n     * adjacent separators. This is an alternative to using StringTokenizer.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null)       = null\n     * StringUtils.splitPreserveAllTokens(\"\")         = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\") = [\"abc\", \"\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\" abc \")    = [\"\", \"abc\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str);\n    /**\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start <code>n</code>\n     * characters from the end of the String.</p>\n     *\n     * <p>A <code>null</code> String will return <code>null</code>.\n     * An empty (\"\") String will return \"\".</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *)   = null\n     * StringUtils.substring(\"\", *)     = \"\"\n     * StringUtils.substring(\"abc\", 0)  = \"abc\"\n     * StringUtils.substring(\"abc\", 2)  = \"c\"\n     * StringUtils.substring(\"abc\", 4)  = \"\"\n     * StringUtils.substring(\"abc\", -2) = \"bc\"\n     * StringUtils.substring(\"abc\", -4) = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position, <code>null</code> if null String input\n     */\n    public static String substring(String str, int start);\n    /**\n     * <p>Finds the first index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#indexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar, int startPos);\n    /**\n     * <p>Splits the provided text into an array, separators specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"abc def\", null) = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc def\", \" \")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\", \" \") = [\"abc\", \"def\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */\n    public static String[] split(String str, String separatorChars);\n    /**\n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"...is the time for...\"</p>\n     *\n     * <p>Works like <code>abbreviate(String, int)</code>, but allows you to specify\n     * a \"left edge\" offset.  Note that this left edge is not necessarily going to\n     * be the leftmost character in the result, or the first character following the\n     * ellipses, but it will appear somewhere in the result.\n     *\n     * <p>In no case will it return a String of length greater than\n     * <code>maxWidth</code>.</p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *, *)                = null\n     * StringUtils.abbreviate(\"\", 0, 4)                  = \"\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", -1, 10) = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 0, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 1, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 4, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 5, 10)  = \"...fghi...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 6, 10)  = \"...ghij...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 8, 10)  = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 10, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 12, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghij\", 0, 3)        = IllegalArgumentException\n     * StringUtils.abbreviate(\"abcdefghij\", 5, 6)        = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param offset  left edge of source String\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */\n    public static String abbreviate(String str, int offset, int maxWidth);\n    /**\n     * Gets a String's length or <code>0</code> if the String is <code>null</code>.\n     * \n     * @param str\n     *            a String or <code>null</code>\n     * @return String length or <code>0</code> if the String is <code>null</code>.\n     * @since 2.4\n     */\n    public static int length(String str);\n    /**\n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> reference passed to this method is a no-op, or if\n     * any \"search string\" or \"string to replace\" is null, that replace will be\n     * ignored. This will not repeat. For repeating replaces, call the\n     * overloaded method.\n     * </p>\n     * \n     * <pre>\n     *  StringUtils.replaceEach(null, *, *)        = null\n     *  StringUtils.replaceEach(\"\", *, *)          = \"\"\n     *  StringUtils.replaceEach(\"aba\", null, null) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[0], null) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", null, new String[0]) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  = \"b\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  = \"aba\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  = \"wcte\"\n     *  (example of how it does not repeat)\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  = \"dcte\"\n     * </pre>\n     * \n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @return the text with any replacements processed, <code>null</code> if\n     *         null String input\n     * @throws IndexOutOfBoundsException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */\n    public static String replaceEach(String text, String[] searchList, String[] replacementList);\n    /**\n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> reference passed to this method is a no-op, or if\n     * any \"search string\" or \"string to replace\" is null, that replace will be\n     * ignored. \n     * </p>\n     * \n     * <pre>\n     *  StringUtils.replaceEach(null, *, *, *) = null\n     *  StringUtils.replaceEach(\"\", *, *, *) = \"\"\n     *  StringUtils.replaceEach(\"aba\", null, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[0], null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", null, new String[0], *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}, *) = \"b\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}, *) = \"aba\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}, *) = \"wcte\"\n     *  (example of how it repeats)\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, false) = \"dcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, true) = \"tcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, *) = IllegalArgumentException\n     * </pre>\n     * \n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @param repeat if true, then replace repeatedly \n     *       until there are no more possible replacements or timeToLive < 0\n     * @param timeToLive\n     *            if less than 0 then there is a circular reference and endless\n     *            loop\n     * @return the text with any replacements processed, <code>null</code> if\n     *         null String input\n     * @throws IllegalArgumentException\n     *             if the search is repeating and there is an endless loop due\n     *             to outputs of one being inputs to another\n     * @throws IndexOutOfBoundsException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */\n    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive);\n    /**\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.split(null)       = null\n     * StringUtils.split(\"\")         = []\n     * StringUtils.split(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\") = [\"abc\", \"def\"]\n     * StringUtils.split(\" abc \")    = [\"abc\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */\n    public static String[] split(String str);\n    /**\n     * <p>Splits the provided text into an array, separator specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)         = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)           = []\n     * StringUtils.splitPreserveAllTokens(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a..b.c\", '.')   = [\"a\", \"\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.splitPreserveAllTokens(\"a\\tb\\nc\", null) = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c \", ' ')   = [\"a\", \"b\", \"c\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c  \", ' ')   = [\"a\", \"b\", \"c\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c\", ' ')   = [\"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"  a b c\", ' ')  = [\"\", \"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c \", ' ')  = [\"\", a\", \"b\", \"c\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChar  the character used as the delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, char separatorChar);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar);\n    /**\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start/end <code>n</code>\n     * characters from the end of the String.</p>\n     *\n     * <p>The returned substring starts with the character in the <code>start</code>\n     * position and ends before the <code>end</code> position. All position counting is\n     * zero-based -- i.e., to start at the beginning of the string use\n     * <code>start = 0</code>. Negative start and end positions can be used to\n     * specify offsets relative to the end of the String.</p>\n     *\n     * <p>If <code>start</code> is not strictly to the left of <code>end</code>, \"\"\n     * is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *, *)    = null\n     * StringUtils.substring(\"\", * ,  *)    = \"\";\n     * StringUtils.substring(\"abc\", 0, 2)   = \"ab\"\n     * StringUtils.substring(\"abc\", 2, 0)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 4)   = \"c\"\n     * StringUtils.substring(\"abc\", 4, 6)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 2)   = \"\"\n     * StringUtils.substring(\"abc\", -2, -1) = \"b\"\n     * StringUtils.substring(\"abc\", -4, 2)  = \"ab\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @param end  the position to end at (exclusive), negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position to end positon,\n     *  <code>null</code> if null String input\n     */\n    public static String substring(String str, int start, int end);\n    /**\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than <code>max</code> delimited substrings are found, the last\n     * returned string includes all characters after the first <code>max - 1</code>\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *, *)            = null\n     * StringUtils.split(\"\", *, *)              = []\n     * StringUtils.split(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */\n    public static String[] split(String str, String separatorChars, int max);\n    /**\n     * <p>Splits the provided text into an array, separators specified, \n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)           = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)             = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\", null)   = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc def\", \" \")    = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\", \" \")   = [\"abc\", \"\", def\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\")   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef:\", \":\")  = [\"ab\", \"cd\", \"ef\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef::\", \":\") = [\"ab\", \"cd\", \"ef\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab::cd:ef\", \":\")  = [\"ab\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef\", \":\")     = [\"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"::cd:ef\", \":\")    = [\"\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef:\", \":\")    = [\"\", cd\", \"ef\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, String separatorChars);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr);\n    /**\n     * <p>Splits the provided text into an array, separator specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a..b.c\", '.')   = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.split(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChar  the character used as the delimiter\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.0\n     */\n    public static String[] split(String str, char separatorChar);\n    /**\n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n     *\n     * <p>Specifically:\n     * <ul>\n     *   <li>If <code>str</code> is less than <code>maxWidth</code> characters\n     *       long, return it.</li>\n     *   <li>Else abbreviate it to <code>(substring(str, 0, max-3) + \"...\")</code>.</li>\n     *   <li>If <code>maxWidth</code> is less than <code>4</code>, throw an\n     *       <code>IllegalArgumentException</code>.</li>\n     *   <li>In no case will it return a String of length greater than\n     *       <code>maxWidth</code>.</li>\n     * </ul>\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *)      = null\n     * StringUtils.abbreviate(\"\", 4)        = \"\"\n     * StringUtils.abbreviate(\"abcdefg\", 6) = \"abc...\"\n     * StringUtils.abbreviate(\"abcdefg\", 7) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 8) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 4) = \"a...\"\n     * StringUtils.abbreviate(\"abcdefg\", 3) = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */\n    public static String abbreviate(String str, int maxWidth);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * <code>null</code> safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The <code>StringUtils</code> class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - <code>null</code></li>\n *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n *  <li>space - the space character (<code>' '</code>, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n * That is to say that a <code>null</code> input will return <code>null</code>.\n * Where a <code>boolean</code> or <code>int</code> is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the <code>null</code> handling is that a\n * <code>NullPointerException</code> should be considered a bug in\n * <code>StringUtils</code>.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n *\n * @see java.lang.String\n * @author Apache Software Foundation\n * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n * @author Daniel L. Rall\n * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Arun Mammen Thomas\n * @author Gary Gregory\n * @author Phil Steitz\n * @author Al Chou\n * @author Michael Davey\n * @author Reuben Sivan\n * @author Chris Hyzer\n * @author Scott Johnson\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr, int startPos);\n    /**\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified, preserving all tokens, including empty tokens \n     * created by adjacent separators.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than <code>max</code> delimited substrings are found, the last\n     * returned string includes all characters after the first <code>max - 1</code>\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *, *)            = null\n     * StringUtils.splitPreserveAllTokens(\"\", *, *)              = []\n     * StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2) = [\"ab\", \"  de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3) = [\"ab\", \"\", \" de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4) = [\"ab\", \"\", \"\", \"de fg\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, String separatorChars, int max);\n    /**\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator, preserving all tokens, including empty tokens created by \n     * adjacent separators. This is an alternative to using StringTokenizer.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null)       = null\n     * StringUtils.splitPreserveAllTokens(\"\")         = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\") = [\"abc\", \"\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\" abc \")    = [\"\", \"abc\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str);\n    /**\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start <code>n</code>\n     * characters from the end of the String.</p>\n     *\n     * <p>A <code>null</code> String will return <code>null</code>.\n     * An empty (\"\") String will return \"\".</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *)   = null\n     * StringUtils.substring(\"\", *)     = \"\"\n     * StringUtils.substring(\"abc\", 0)  = \"abc\"\n     * StringUtils.substring(\"abc\", 2)  = \"c\"\n     * StringUtils.substring(\"abc\", 4)  = \"\"\n     * StringUtils.substring(\"abc\", -2) = \"bc\"\n     * StringUtils.substring(\"abc\", -4) = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position, <code>null</code> if null String input\n     */\n    public static String substring(String str, int start);\n    /**\n     * <p>Finds the first index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#indexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar, int startPos);\n    /**\n     * <p>Splits the provided text into an array, separators specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"abc def\", null) = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc def\", \" \")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\", \" \") = [\"abc\", \"def\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */\n    public static String[] split(String str, String separatorChars);\n    /**\n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"...is the time for...\"</p>\n     *\n     * <p>Works like <code>abbreviate(String, int)</code>, but allows you to specify\n     * a \"left edge\" offset.  Note that this left edge is not necessarily going to\n     * be the leftmost character in the result, or the first character following the\n     * ellipses, but it will appear somewhere in the result.\n     *\n     * <p>In no case will it return a String of length greater than\n     * <code>maxWidth</code>.</p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *, *)                = null\n     * StringUtils.abbreviate(\"\", 0, 4)                  = \"\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", -1, 10) = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 0, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 1, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 4, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 5, 10)  = \"...fghi...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 6, 10)  = \"...ghij...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 8, 10)  = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 10, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 12, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghij\", 0, 3)        = IllegalArgumentException\n     * StringUtils.abbreviate(\"abcdefghij\", 5, 6)        = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param offset  left edge of source String\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */\n    public static String abbreviate(String str, int offset, int maxWidth);\n    /**\n     * Gets a String's length or <code>0</code> if the String is <code>null</code>.\n     * \n     * @param str\n     *            a String or <code>null</code>\n     * @return String length or <code>0</code> if the String is <code>null</code>.\n     * @since 2.4\n     */\n    public static int length(String str);\n    /**\n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> reference passed to this method is a no-op, or if\n     * any \"search string\" or \"string to replace\" is null, that replace will be\n     * ignored. This will not repeat. For repeating replaces, call the\n     * overloaded method.\n     * </p>\n     * \n     * <pre>\n     *  StringUtils.replaceEach(null, *, *)        = null\n     *  StringUtils.replaceEach(\"\", *, *)          = \"\"\n     *  StringUtils.replaceEach(\"aba\", null, null) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[0], null) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", null, new String[0]) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  = \"b\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  = \"aba\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  = \"wcte\"\n     *  (example of how it does not repeat)\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  = \"dcte\"\n     * </pre>\n     * \n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @return the text with any replacements processed, <code>null</code> if\n     *         null String input\n     * @throws IndexOutOfBoundsException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */\n    public static String replaceEach(String text, String[] searchList, String[] replacementList);\n    /**\n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> reference passed to this method is a no-op, or if\n     * any \"search string\" or \"string to replace\" is null, that replace will be\n     * ignored. \n     * </p>\n     * \n     * <pre>\n     *  StringUtils.replaceEach(null, *, *, *) = null\n     *  StringUtils.replaceEach(\"\", *, *, *) = \"\"\n     *  StringUtils.replaceEach(\"aba\", null, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[0], null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", null, new String[0], *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}, *) = \"b\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}, *) = \"aba\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}, *) = \"wcte\"\n     *  (example of how it repeats)\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, false) = \"dcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, true) = \"tcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, *) = IllegalArgumentException\n     * </pre>\n     * \n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @param repeat if true, then replace repeatedly \n     *       until there are no more possible replacements or timeToLive < 0\n     * @param timeToLive\n     *            if less than 0 then there is a circular reference and endless\n     *            loop\n     * @return the text with any replacements processed, <code>null</code> if\n     *         null String input\n     * @throws IllegalArgumentException\n     *             if the search is repeating and there is an endless loop due\n     *             to outputs of one being inputs to another\n     * @throws IndexOutOfBoundsException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */\n    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive);\n    /**\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.split(null)       = null\n     * StringUtils.split(\"\")         = []\n     * StringUtils.split(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\") = [\"abc\", \"def\"]\n     * StringUtils.split(\" abc \")    = [\"abc\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */\n    public static String[] split(String str);\n    /**\n     * <p>Splits the provided text into an array, separator specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)         = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)           = []\n     * StringUtils.splitPreserveAllTokens(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a..b.c\", '.')   = [\"a\", \"\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.splitPreserveAllTokens(\"a\\tb\\nc\", null) = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c \", ' ')   = [\"a\", \"b\", \"c\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c  \", ' ')   = [\"a\", \"b\", \"c\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c\", ' ')   = [\"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"  a b c\", ' ')  = [\"\", \"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c \", ' ')  = [\"\", a\", \"b\", \"c\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChar  the character used as the delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, char separatorChar);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, char searchChar);\n    /**\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start/end <code>n</code>\n     * characters from the end of the String.</p>\n     *\n     * <p>The returned substring starts with the character in the <code>start</code>\n     * position and ends before the <code>end</code> position. All position counting is\n     * zero-based -- i.e., to start at the beginning of the string use\n     * <code>start = 0</code>. Negative start and end positions can be used to\n     * specify offsets relative to the end of the String.</p>\n     *\n     * <p>If <code>start</code> is not strictly to the left of <code>end</code>, \"\"\n     * is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *, *)    = null\n     * StringUtils.substring(\"\", * ,  *)    = \"\";\n     * StringUtils.substring(\"abc\", 0, 2)   = \"ab\"\n     * StringUtils.substring(\"abc\", 2, 0)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 4)   = \"c\"\n     * StringUtils.substring(\"abc\", 4, 6)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 2)   = \"\"\n     * StringUtils.substring(\"abc\", -2, -1) = \"b\"\n     * StringUtils.substring(\"abc\", -4, 2)  = \"ab\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @param end  the position to end at (exclusive), negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position to end positon,\n     *  <code>null</code> if null String input\n     */\n    public static String substring(String str, int start, int end);\n    /**\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than <code>max</code> delimited substrings are found, the last\n     * returned string includes all characters after the first <code>max - 1</code>\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *, *)            = null\n     * StringUtils.split(\"\", *, *)              = []\n     * StringUtils.split(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */\n    public static String[] split(String str, String separatorChars, int max);\n    /**\n     * <p>Splits the provided text into an array, separators specified, \n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)           = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)             = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\", null)   = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc def\", \" \")    = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\", \" \")   = [\"abc\", \"\", def\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\")   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef:\", \":\")  = [\"ab\", \"cd\", \"ef\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef::\", \":\") = [\"ab\", \"cd\", \"ef\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab::cd:ef\", \":\")  = [\"ab\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef\", \":\")     = [\"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"::cd:ef\", \":\")    = [\"\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef:\", \":\")    = [\"\", cd\", \"ef\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, String separatorChars);\n    /**\n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */\n    public static int indexOf(String str, String searchStr);\n    /**\n     * <p>Splits the provided text into an array, separator specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a..b.c\", '.')   = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.split(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChar  the character used as the delimiter\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.0\n     */\n    public static String[] split(String str, char separatorChar);\n    /**\n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n     *\n     * <p>Specifically:\n     * <ul>\n     *   <li>If <code>str</code> is less than <code>maxWidth</code> characters\n     *       long, return it.</li>\n     *   <li>Else abbreviate it to <code>(substring(str, 0, max-3) + \"...\")</code>.</li>\n     *   <li>If <code>maxWidth</code> is less than <code>4</code>, throw an\n     *       <code>IllegalArgumentException</code>.</li>\n     *   <li>In no case will it return a String of length greater than\n     *       <code>maxWidth</code>.</li>\n     * </ul>\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *)      = null\n     * StringUtils.abbreviate(\"\", 4)        = \"\"\n     * StringUtils.abbreviate(\"abcdefg\", 6) = \"abc...\"\n     * StringUtils.abbreviate(\"abcdefg\", 7) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 8) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 4) = \"a...\"\n     * StringUtils.abbreviate(\"abcdefg\", 3) = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */\n    public static String abbreviate(String str, int maxWidth);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void innerTestSplit(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.split(str, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.split(str2, sepStr);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, \"a\", res[0]);\n\n        res = StringUtils.split(str, sepStr, -1);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 0);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.split(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n    private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.splitPreserveAllTokens(str, sepStr);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.splitPreserveAllTokens(str2, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"\", res[0]);\n        assertEquals(msg, \"a\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n\n        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\n        String abcdefghijklmno = \"abcdefghijklmno\";\n        String message = \"abbreviate(String,int,int) failed\";\n        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n        if (offset >= 0 && offset < abcdefghijklmno.length()) {\n            assertTrue(message + \" -- should contain offset character\",\n                    actual.indexOf((char)('a'+offset)) != -1);\n        }\n        assertTrue(message + \" -- should not be greater than maxWidth\",\n                actual.length() <= maxWidth);\n        assertEquals(message, expected, actual);\n    }\n    public void testReplace_StringStringArrayStringArray() {\n\n        \n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEach(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEach(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null),\"aba\");\n\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"dcte\");\n        //JAVADOC TESTS END\n\n        assertEquals(\"bcc\", StringUtils.replaceEach(\"abc\", new String[]{\"a\", \"b\"}, new String[]{\"b\", \"c\"}));\n        assertEquals(\"q651.506bera\", StringUtils.replaceEach(\"d216.102oren\", new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\",  \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\",  \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",  \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"}, new String[]{\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\",  \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\",  \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",  \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\"}));\n\n        // Test null safety inside arrays - LANG-552\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{null}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\", \"b\"}, new String[]{\"c\", null}),\"cbc\");\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Translates a value using a lookup table.\n *\n * @since 3.0\n * @version $Id$\n */\npublic class LookupTranslator extends CharSequenceTranslator {\n    private final HashMap<CharSequence, CharSequence> lookupMap;\n    private final int shortest;\n    private final int longest;\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(final CharSequence input, final int index, final Writer out) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Translates a value using a lookup table.\n *\n * @since 3.0\n * @version $Id$\n */\npublic class LookupTranslator extends CharSequenceTranslator {\n    private final HashMap<CharSequence, CharSequence> lookupMap;\n    private final int shortest;\n    private final int longest;\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(final CharSequence input, final int index, final Writer out) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLang882() throws IOException {\n        final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer(\"one\"), new StringBuffer(\"two\") } });\n        final StringWriter out = new StringWriter();\n        final int result = lt.translate(new StringBuffer(\"one\"), 0, out);\n        assertEquals(\"Incorrect codepoint consumption\", 3, result);\n        assertEquals(\"Incorrect value\", \"two\", out.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * <code>null</code> safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The <code>StringUtils</code> class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - <code>null</code></li>\n *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n *  <li>space - the space character (<code>' '</code>, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n * That is to say that a <code>null</code> input will return <code>null</code>.\n * Where a <code>boolean</code> or <code>int</code> is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the <code>null</code> handling is that a\n * <code>NullPointerException</code> should be considered a bug in\n * <code>StringUtils</code>.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n *\n * @see java.lang.String\n * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n * @author Daniel L. Rall\n * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author Stephen Colebourne\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Arun Mammen Thomas\n * @author Gary Gregory\n * @author Phil Steitz\n * @author Al Chou\n * @author Michael Davey\n * @author Reuben Sivan\n * @author Chris Hyzer\n * @author Scott Johnson\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    /**\n     * <p>Checks if String contains a search String irrespective of case,\n     * handling <code>null</code>. Case-insensitivity is defined as by\n     * {@link String#equalsIgnoreCase(String)}.\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains(\"\", \"\") = true\n     * StringUtils.contains(\"abc\", \"\") = true\n     * StringUtils.contains(\"abc\", \"a\") = true\n     * StringUtils.contains(\"abc\", \"z\") = false\n     * StringUtils.contains(\"abc\", \"A\") = true\n     * StringUtils.contains(\"abc\", \"Z\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String irrespective of\n     * case or false if not or <code>null</code> string input\n     */\n    public static boolean containsIgnoreCase(String str, String searchStr);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations on {@link java.lang.String} that are\n * <code>null</code> safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The <code>StringUtils</code> class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - <code>null</code></li>\n *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n *  <li>space - the space character (<code>' '</code>, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n * That is to say that a <code>null</code> input will return <code>null</code>.\n * Where a <code>boolean</code> or <code>int</code> is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the <code>null</code> handling is that a\n * <code>NullPointerException</code> should be considered a bug in\n * <code>StringUtils</code>.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n *\n * @see java.lang.String\n * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n * @author Daniel L. Rall\n * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author Stephen Colebourne\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Arun Mammen Thomas\n * @author Gary Gregory\n * @author Phil Steitz\n * @author Al Chou\n * @author Michael Davey\n * @author Reuben Sivan\n * @author Chris Hyzer\n * @author Scott Johnson\n * @since 1.0\n * @version $Id$\n */\npublic class StringUtils {\n    public static final String EMPTY = \"\";\n    public static final int INDEX_NOT_FOUND = -1;\n    private static final int PAD_LIMIT = 8192;\n    /**\n     * <p>Checks if String contains a search String irrespective of case,\n     * handling <code>null</code>. Case-insensitivity is defined as by\n     * {@link String#equalsIgnoreCase(String)}.\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains(\"\", \"\") = true\n     * StringUtils.contains(\"abc\", \"\") = true\n     * StringUtils.contains(\"abc\", \"a\") = true\n     * StringUtils.contains(\"abc\", \"z\") = false\n     * StringUtils.contains(\"abc\", \"A\") = true\n     * StringUtils.contains(\"abc\", \"Z\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String irrespective of\n     * case or false if not or <code>null</code> string input\n     */\n    public static boolean containsIgnoreCase(String str, String searchStr);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testContainsIgnoreCase_LocaleIndependence() {\n        Locale orig = Locale.getDefault();\n\n        Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\n\n        String[][] tdata = { \n            { \"i\", \"I\" },\n            { \"I\", \"i\" },\n            { \"\\u03C2\", \"\\u03C3\" },\n            { \"\\u03A3\", \"\\u03C2\" },\n            { \"\\u03A3\", \"\\u03C3\" },\n        };\n\n        String[][] fdata = { \n            { \"\\u00DF\", \"SS\" },\n        };\n\n        try {\n            for (int i = 0; i < locales.length; i++) {\n                Locale.setDefault(locales[i]);\n                for (int j = 0; j < tdata.length; j++) {\n                    assertTrue(Locale.getDefault() + \": \" + j + \" \" + tdata[j][0] + \" \" + tdata[j][1], StringUtils .containsIgnoreCase(tdata[j][0], tdata[j][1]));\n                }\n                for (int j = 0; j < fdata.length; j++) {\n                    assertFalse(Locale.getDefault() + \": \" + j + \" \" + fdata[j][0] + \" \" + fdata[j][1], StringUtils .containsIgnoreCase(fdata[j][0], fdata[j][1]));\n                }\n            }\n        } finally {\n            Locale.setDefault(orig);\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operates on classes without using reflection.</p>\n *\n * <p>This class handles invalid <code>null</code> inputs as best it can.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>The notion of a <code>canonical name</code> includes the human\n * readable name for the type, for example <code>int[]</code>. The\n * non-canonical method variants work with the JVM names, such as\n * <code>[I</code>. </p>\n *\n * @author Stephen Colebourne\n * @author Gary Gregory\n * @author Norm Deane\n * @author Alban Peignier\n * @author Tomasz Blachowicz\n * @since 2.0\n * @version $Id$\n */\npublic class ClassUtils {\n    public static final char PACKAGE_SEPARATOR_CHAR = '.';\n    public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);\n    public static final char INNER_CLASS_SEPARATOR_CHAR = '$';\n    public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);\n    private static final Map<Class<?>, Class<?>> primitiveWrapperMap = new HashMap<Class<?>, Class<?>>();\n    public static String getPackageName(String className);\n    public static String getShortClassName(String className);\n    public static Class<?> getClass(ClassLoader classLoader, String className) throws ClassNotFoundException;\n    public static Class<?> getClass(String className, boolean initialize) throws ClassNotFoundException;\n    public static String getPackageName(Class<?> cls);\n    public static Class<?> getClass(String className) throws ClassNotFoundException;\n    public static Class<?> getClass(\n            ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException;\n    public static String getShortClassName(Object object, String valueIfNull);\n    public static String getShortClassName(Class<?> cls);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operates on classes without using reflection.</p>\n *\n * <p>This class handles invalid <code>null</code> inputs as best it can.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>The notion of a <code>canonical name</code> includes the human\n * readable name for the type, for example <code>int[]</code>. The\n * non-canonical method variants work with the JVM names, such as\n * <code>[I</code>. </p>\n *\n * @author Stephen Colebourne\n * @author Gary Gregory\n * @author Norm Deane\n * @author Alban Peignier\n * @author Tomasz Blachowicz\n * @since 2.0\n * @version $Id$\n */\npublic class ClassUtils {\n    public static final char PACKAGE_SEPARATOR_CHAR = '.';\n    public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);\n    public static final char INNER_CLASS_SEPARATOR_CHAR = '$';\n    public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);\n    private static final Map<Class<?>, Class<?>> primitiveWrapperMap = new HashMap<Class<?>, Class<?>>();\n    public static String getPackageName(String className);\n    public static String getShortClassName(String className);\n    public static Class<?> getClass(ClassLoader classLoader, String className) throws ClassNotFoundException;\n    public static Class<?> getClass(String className, boolean initialize) throws ClassNotFoundException;\n    public static String getPackageName(Class<?> cls);\n    public static Class<?> getClass(String className) throws ClassNotFoundException;\n    public static Class<?> getClass(\n            ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException;\n    public static String getShortClassName(Object object, String valueIfNull);\n    public static String getShortClassName(Class<?> cls);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertGetClassReturnsClass( Class c ) throws Exception {\n        assertEquals( c, ClassUtils.getClass( c.getName() ) );\n    }\n    private void assertGetClassThrowsException( String className, Class exceptionType ) throws Exception {\n        try {\n            ClassUtils.getClass( className );\n            fail( \"ClassUtils.getClass() should fail with an exception of type \" + exceptionType.getName() + \" when given class name \\\"\" + className + \"\\\".\" );\n        }\n        catch( Exception e ) {\n            assertTrue( exceptionType.isAssignableFrom( e.getClass() ) );\n        }\n    }\n    private void assertGetClassThrowsNullPointerException( String className ) throws Exception {\n        assertGetClassThrowsException( className, NullPointerException.class );\n    }\n    private void assertGetClassThrowsClassNotFound( String className ) throws Exception {\n        assertGetClassThrowsException( className, ClassNotFoundException.class );\n    }\n    public void test_getShortClassName_Class() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getShortClassName((Class) null));\n\n        // LANG-535\n        assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));\n        assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));\n\n        // Primitives\n        assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));\n        assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));\n        assertEquals(\"char\", ClassUtils.getShortClassName(char.class));\n        assertEquals(\"short\", ClassUtils.getShortClassName(short.class));\n        assertEquals(\"int\", ClassUtils.getShortClassName(int.class));\n        assertEquals(\"long\", ClassUtils.getShortClassName(long.class));\n        assertEquals(\"float\", ClassUtils.getShortClassName(float.class));\n        assertEquals(\"double\", ClassUtils.getShortClassName(double.class));\n\n        // Primitive Arrays\n        assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));\n        assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));\n        assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));\n        assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));\n        assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));\n        assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));\n        assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));\n        assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));\n\n        // Arrays of arrays of ...\n        assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));\n        assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));\n        assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>\n * Provides HTML and XML entity utilities.\n * </p>\n * \n * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n * \n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @since 2.0\n * @version $Id$\n */\nclass Entities {\n    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>\n * Provides HTML and XML entity utilities.\n * </p>\n * \n * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n * \n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @since 2.0\n * @version $Id$\n */\nclass Entities {\n    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertEscapeJava(String escaped, String original) throws IOException {\n        assertEscapeJava(null, escaped, original);\n    }\n    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n        String converted = StringEscapeUtils.escapeJava(original);\n        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n        assertEquals(message, expected, converted);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.escapeJava(writer, original);\n        assertEquals(expected, writer.toString());\n    }\n    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n        assertUnescapeJava(null, unescaped, original);\n    }\n    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n        String expected = unescaped;\n        String actual = StringEscapeUtils.unescapeJava(original);\n\n        assertEquals(\"unescape(String) failed\" +\n                (message == null ? \"\" : (\": \" + message)) +\n                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n                // we escape this so we can see it in the error message\n                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                expected, actual);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.unescapeJava(writer, original);\n        assertEquals(unescaped, writer.toString());\n\n    }\n    private void checkCsvEscapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.escapeCsv(writer, value);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }\n    private void checkCsvUnescapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.unescapeCsv(writer, value);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }\n    public void testEscapeHtmlHighUnicode() throws java.io.UnsupportedEncodingException {\n        // this is the utf8 representation of the character:\n        // COUNTING ROD UNIT DIGIT THREE\n        // in unicode\n        // codepoint: U+1D362\n        byte[] data = new byte[] { (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 };\n\n        String escaped = StringEscapeUtils.escapeHtml( new String(data, \"UTF8\") );\n        String unescaped = StringEscapeUtils.unescapeHtml( escaped );\n\n        assertEquals( \"High unicode was not escaped correctly\", \"&#119650;\", escaped);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Extends <code>java.text.MessageFormat</code> to allow pluggable/additional formatting\n * options for embedded format elements.  Client code should specify a registry\n * of <code>FormatFactory</code> instances associated with <code>String</code>\n * format names.  This registry will be consulted when the format elements are \n * parsed from the message pattern.  In this way custom patterns can be specified,\n * and the formats supported by <code>java.text.MessageFormat</code> can be overridden\n * at the format and/or format style level (see MessageFormat).  A \"format element\"\n * embedded in the message pattern is specified (<b>()?</b> signifies optionality):<br />\n * <code>{</code><i>argument-number</i><b>(</b><code>,</code><i>format-name</i><b>(</b><code>,</code><i>format-style</i><b>)?)?</b><code>}</code>\n *\n * <p>\n * <i>format-name</i> and <i>format-style</i> values are trimmed of surrounding whitespace\n * in the manner of <code>java.text.MessageFormat</code>.  If <i>format-name</i> denotes\n * <code>FormatFactory formatFactoryInstance</code> in <code>registry</code>, a <code>Format</code>\n * matching <i>format-name</i> and <i>format-style</i> is requested from\n * <code>formatFactoryInstance</code>.  If this is successful, the <code>Format</code>\n * found is used for this format element.\n * </p>\n *\n * <p>NOTICE: The various subformat mutator methods are considered unnecessary; they exist on the parent\n * class to allow the type of customization which it is the job of this class to provide in\n * a configurable fashion.  These methods have thus been disabled and will throw\n * <code>UnsupportedOperationException</code> if called.\n * </p>\n * \n * <p>Limitations inherited from <code>java.text.MessageFormat</code>:\n * <ul>\n * <li>When using \"choice\" subformats, support for nested formatting instructions is limited\n *     to that provided by the base class.</li>\n * <li>Thread-safety of <code>Format</code>s, including <code>MessageFormat</code> and thus\n *     <code>ExtendedMessageFormat</code>, is not guaranteed.</li>\n * </ul>\n * </p>\n * \n * @author Matt Benson\n * @author Niall Pemberton\n * @since 2.4\n * @version $Id$\n */\npublic class ExtendedMessageFormat extends MessageFormat {\n    private static final long serialVersionUID = -2362048321261811743L;\n    private static final String DUMMY_PATTERN = \"\";\n    private static final String ESCAPED_QUOTE = \"''\";\n    private static final char START_FMT = ',';\n    private static final char END_FE = '}';\n    /**\n     * Apply the specified pattern.\n     * \n     * @param pattern String\n     */\n    public final void applyPattern(String pattern);\n    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn);\n    /**\n     * {@inheritDoc}\n     */\n    public String toPattern();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Extends <code>java.text.MessageFormat</code> to allow pluggable/additional formatting\n * options for embedded format elements.  Client code should specify a registry\n * of <code>FormatFactory</code> instances associated with <code>String</code>\n * format names.  This registry will be consulted when the format elements are \n * parsed from the message pattern.  In this way custom patterns can be specified,\n * and the formats supported by <code>java.text.MessageFormat</code> can be overridden\n * at the format and/or format style level (see MessageFormat).  A \"format element\"\n * embedded in the message pattern is specified (<b>()?</b> signifies optionality):<br />\n * <code>{</code><i>argument-number</i><b>(</b><code>,</code><i>format-name</i><b>(</b><code>,</code><i>format-style</i><b>)?)?</b><code>}</code>\n *\n * <p>\n * <i>format-name</i> and <i>format-style</i> values are trimmed of surrounding whitespace\n * in the manner of <code>java.text.MessageFormat</code>.  If <i>format-name</i> denotes\n * <code>FormatFactory formatFactoryInstance</code> in <code>registry</code>, a <code>Format</code>\n * matching <i>format-name</i> and <i>format-style</i> is requested from\n * <code>formatFactoryInstance</code>.  If this is successful, the <code>Format</code>\n * found is used for this format element.\n * </p>\n *\n * <p>NOTICE: The various subformat mutator methods are considered unnecessary; they exist on the parent\n * class to allow the type of customization which it is the job of this class to provide in\n * a configurable fashion.  These methods have thus been disabled and will throw\n * <code>UnsupportedOperationException</code> if called.\n * </p>\n * \n * <p>Limitations inherited from <code>java.text.MessageFormat</code>:\n * <ul>\n * <li>When using \"choice\" subformats, support for nested formatting instructions is limited\n *     to that provided by the base class.</li>\n * <li>Thread-safety of <code>Format</code>s, including <code>MessageFormat</code> and thus\n *     <code>ExtendedMessageFormat</code>, is not guaranteed.</li>\n * </ul>\n * </p>\n * \n * @author Matt Benson\n * @author Niall Pemberton\n * @since 2.4\n * @version $Id$\n */\npublic class ExtendedMessageFormat extends MessageFormat {\n    private static final long serialVersionUID = -2362048321261811743L;\n    private static final String DUMMY_PATTERN = \"\";\n    private static final String ESCAPED_QUOTE = \"''\";\n    private static final char START_FMT = ',';\n    private static final char END_FE = '}';\n    /**\n     * Apply the specified pattern.\n     * \n     * @param pattern String\n     */\n    public final void applyPattern(String pattern);\n    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn);\n    /**\n     * {@inheritDoc}\n     */\n    public String toPattern();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {\n        checkBuiltInFormat(pattern, null, args, locales);\n    }\n    private void checkBuiltInFormat(String pattern, Map registry, Object[] args, Locale[] locales) {\n        checkBuiltInFormat(pattern, registry, args, (Locale) null);\n        for (int i = 0; i < locales.length; i++) {\n            checkBuiltInFormat(pattern, registry, args, locales[i]);\n        }\n    }\n    private void checkBuiltInFormat(String pattern, Map registry, Object[] args, Locale locale) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(\"Pattern=[\");\n        buffer.append(pattern);\n        buffer.append(\"], locale=[\");\n        buffer.append(locale);\n        buffer.append(\"]\");\n        MessageFormat mf = createMessageFormat(pattern, locale);\n        // System.out.println(buffer + \", result=[\" + mf.format(args) +\"]\");\n        ExtendedMessageFormat emf = null;\n        if (locale == null) {\n            emf = new ExtendedMessageFormat(pattern);\n        } else {\n            emf = new ExtendedMessageFormat(pattern, locale);\n        }\n        assertEquals(\"format \"    + buffer.toString(), mf.format(args), emf.format(args));\n        assertPatternsEqual(\"toPattern \" + buffer.toString(), mf.toPattern(),  emf.toPattern());\n    }\n    private void assertPatternsEqual(String message, String expected, String actual) {\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertEquals(message, expected, actual);\n        }\n    }\n    private MessageFormat createMessageFormat(String pattern, Locale locale) {\n        MessageFormat result = new MessageFormat(pattern);\n        if (locale != null) {\n            result.setLocale(locale);\n            result.applyPattern(pattern);\n        }\n        return result;\n    }\n    public void testEscapedQuote_LANG_477() {\n        String pattern = \"it''s a {0,lower} 'test'!\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n        assertEquals(\"it's a dummy test!\", emf.format(new Object[] {\"DUMMY\"}));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author Stephen Colebourne\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @since 1.0\n * @version $Id$\n * \n * @deprecated Moved to org.apache.commons.lang.math.\n *             Class will be removed in Commons Lang 3.0.\n */\npublic final class NumberUtils {\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can hold the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * @param val String containing a number\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String val) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author Stephen Colebourne\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @since 1.0\n * @version $Id$\n * \n * @deprecated Moved to org.apache.commons.lang.math.\n *             Class will be removed in Commons Lang 3.0.\n */\npublic final class NumberUtils {\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can hold the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * @param val String containing a number\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String val) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        } catch (NullPointerException e) {\n            return false;\n        }\n    }\n    public void testLang457() {\n        String[] badInputs = new String[] { \"l\", \"L\", \"f\", \"F\", \"junk\", \"bobL\"};\n        for(int i=0; i<badInputs.length; i++) {\n            try {\n                NumberUtils.createNumber(badInputs[i]);\n                fail(\"NumberFormatException was expected for \" + badInputs[i]);\n            } catch (NumberFormatException e) {\n                return; // expected\n            }\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations on Strings that contain words.</p>\n * \n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code> input.\n * Each method documents its behaviour in more detail.</p>\n * \n * @author Apache Jakarta Velocity\n * @author Stephen Colebourne\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Gary Gregory\n * @since 2.0\n * @version $Id$\n */\npublic class WordUtils {\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     * \n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations on Strings that contain words.</p>\n * \n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code> input.\n * Each method documents its behaviour in more detail.</p>\n * \n * @author Apache Jakarta Velocity\n * @author Stephen Colebourne\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Gary Gregory\n * @since 2.0\n * @version $Id$\n */\npublic class WordUtils {\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     * \n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * \n * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n * @author Stephen Colebourne\n * @version $Id$\n */\npublic class WordUtilsTest extends TestCase {\n    public void testAbbreviate() {\n        // check null and empty are returned respectively\n        assertNull(WordUtils.abbreviate(null, 1,-1,\"\"));\n        assertEquals(StringUtils.EMPTY, WordUtils.abbreviate(\"\", 1,-1,\"\"));\n\n        // test upper limit\n        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 0,5,\"\"));\n        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"\"));\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5,\"\"));\n        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n\n        // test upper limit + append string\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 0,5,\"-\"));\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"-\"));\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, null));\n        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n\n        // test lower value\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n        assertEquals(\"01234\", WordUtils.abbreviate(\"01234 56789\", 5, 10, null));\n        assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, null));\n        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, null));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 15, 20, null));\n\n        // test lower value + append\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"01234 56789\", 5, 10, \"-\"));\n        assertEquals(\"01 23 45 67abc\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, \"abc\"));\n        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, \"\"));\n\n        // others\n        assertEquals(\"\", WordUtils.abbreviate(\"0123456790\", 0,0,\"\"));\n        assertEquals(\"\", WordUtils.abbreviate(\" 0123456790\", 0,-1,\"\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\npublic class StringEscapeUtils {\n    private static final char CSV_DELIMITER = ',';\n    private static final char CSV_QUOTE = '\"';\n    private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);\n    /**\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     * \n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuotes escapes single quotes if <code>true</code>\n     * @param escapeForwardSlash TODO\n     * @return the escaped string\n     */\n    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes);\n    /**\n     * <p>Writes a <code>String</code> value for a CSV column enclosed in double quotes,\n     * if required.</p>\n     *\n     * <p>If the value contains a comma, newline or double quote, then the\n     *    String value is written enclosed in double quotes.</p>\n     * </p>\n     *\n     * <p>Any double quote characters in the value are escaped with another double quote.</p>\n     *\n     * <p>If the value does not contain a comma, newline or double quote, then the\n     *    String value is written unchanged (null values are ignored).</p>\n     * </p>\n     *\n     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param str the input CSV column String, may be null\n     * @param out Writer to write input string to, enclosed in double quotes if it contains\n     * a comma, newline or double quote\n     * @throws IOException if error occurs on underlying Writer\n     * @since 2.4\n     */\n    public static void escapeCsv(Writer out, String str) throws IOException;\n    /**\n     * <p>Escapes the characters in a <code>String</code> using Java String rules to\n     * a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJava(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     */\n    public static void escapeJava(Writer out, String str) throws IOException;\n    /**\n     * <p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n     *\n     * <p>If the value is enclosed in double quotes, and contains a comma, newline \n     *    or double quote, then quotes are removed. \n     * </p>\n     *\n     * <p>Any double quote escaped characters (a pair of double quotes) are unescaped \n     *    to just one double quote. </p>\n     *\n     * <p>If the value is not enclosed in double quotes, or is and does not contain a \n     *    comma, newline or double quote, then the String value is returned unchanged.</p>\n     * </p>\n     *\n     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param str the input CSV column String, may be null\n     * @return the input String, with enclosing double quotes removed and embedded double \n     * quotes unescaped, <code>null</code> if null string input\n     * @since 2.4\n     */\n    public static String unescapeCsv(String str);\n    /**\n     * <p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n     *\n     * <p>If the value is enclosed in double quotes, and contains a comma, newline \n     *    or double quote, then quotes are removed. \n     * </p>\n     *\n     * <p>Any double quote escaped characters (a pair of double quotes) are unescaped \n     *    to just one double quote. </p>\n     *\n     * <p>If the value is not enclosed in double quotes, or is and does not contain a \n     *    comma, newline or double quote, then the String value is returned unchanged.</p>\n     * </p>\n     *\n     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param str the input CSV column String, may be null\n     * @param out Writer to write the input String to, with enclosing double quotes \n     * removed and embedded double quotes unescaped, <code>null</code> if null string input\n     * @throws IOException if error occurs on underlying Writer\n     * @since 2.4\n     */\n    public static void unescapeCsv(Writer out, String str) throws IOException;\n    /**\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules\n     * to a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJavaScript(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     **/\n    public static void escapeJavaScript(Writer out, String str) throws IOException;\n    /**\n     * <p>Unescapes any Java literals found in the <code>String</code>.\n     * For example, it will turn a sequence of <code>'\\'</code> and\n     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n     * is preceded by another <code>'\\'</code>.</p>\n     * \n     * @param str  the <code>String</code> to unescape, may be null\n     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n     */\n    public static String unescapeJava(String str);\n    /**\n     * <p>Unescapes any Java literals found in the <code>String</code> to a\n     * <code>Writer</code>.</p>\n     *\n     * <p>For example, it will turn a sequence of <code>'\\'</code> and\n     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n     * is preceded by another <code>'\\'</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @param out  the <code>Writer</code> used to output unescaped characters\n     * @param str  the <code>String</code> to unescape, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     */\n    public static void unescapeJava(Writer out, String str) throws IOException;\n    /**\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     * \n     * @param out write to receieve the escaped string\n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuote escapes single quotes if <code>true</code>\n     * @param escapeForwardSlash TODO\n     * @throws IOException if an IOException occurs\n     */\n    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException;\n    /**\n     * <p>Returns a <code>String</code> value for a CSV column enclosed in double quotes,\n     * if required.</p>\n     *\n     * <p>If the value contains a comma, newline or double quote, then the\n     *    String value is returned enclosed in double quotes.</p>\n     * </p>\n     *\n     * <p>Any double quote characters in the value are escaped with another double quote.</p>\n     *\n     * <p>If the value does not contain a comma, newline or double quote, then the\n     *    String value is returned unchanged.</p>\n     * </p>\n     *\n     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param str the input CSV column String, may be null\n     * @return the input String, enclosed in double quotes if the value contains a comma,\n     * newline or double quote, <code>null</code> if null string input\n     * @since 2.4\n     */\n    public static String escapeCsv(String str);\n    /**\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n     * <p>Escapes any values it finds into their JavaScript String form.\n     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn\\'t say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     */\n    public static String escapeJavaScript(String str);\n    /**\n     * <p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n     *\n     * <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn't say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     */\n    public static String escapeJava(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\npublic class StringEscapeUtils {\n    private static final char CSV_DELIMITER = ',';\n    private static final char CSV_QUOTE = '\"';\n    private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);\n    /**\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     * \n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuotes escapes single quotes if <code>true</code>\n     * @param escapeForwardSlash TODO\n     * @return the escaped string\n     */\n    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes);\n    /**\n     * <p>Writes a <code>String</code> value for a CSV column enclosed in double quotes,\n     * if required.</p>\n     *\n     * <p>If the value contains a comma, newline or double quote, then the\n     *    String value is written enclosed in double quotes.</p>\n     * </p>\n     *\n     * <p>Any double quote characters in the value are escaped with another double quote.</p>\n     *\n     * <p>If the value does not contain a comma, newline or double quote, then the\n     *    String value is written unchanged (null values are ignored).</p>\n     * </p>\n     *\n     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param str the input CSV column String, may be null\n     * @param out Writer to write input string to, enclosed in double quotes if it contains\n     * a comma, newline or double quote\n     * @throws IOException if error occurs on underlying Writer\n     * @since 2.4\n     */\n    public static void escapeCsv(Writer out, String str) throws IOException;\n    /**\n     * <p>Escapes the characters in a <code>String</code> using Java String rules to\n     * a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJava(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     */\n    public static void escapeJava(Writer out, String str) throws IOException;\n    /**\n     * <p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n     *\n     * <p>If the value is enclosed in double quotes, and contains a comma, newline \n     *    or double quote, then quotes are removed. \n     * </p>\n     *\n     * <p>Any double quote escaped characters (a pair of double quotes) are unescaped \n     *    to just one double quote. </p>\n     *\n     * <p>If the value is not enclosed in double quotes, or is and does not contain a \n     *    comma, newline or double quote, then the String value is returned unchanged.</p>\n     * </p>\n     *\n     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param str the input CSV column String, may be null\n     * @return the input String, with enclosing double quotes removed and embedded double \n     * quotes unescaped, <code>null</code> if null string input\n     * @since 2.4\n     */\n    public static String unescapeCsv(String str);\n    /**\n     * <p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n     *\n     * <p>If the value is enclosed in double quotes, and contains a comma, newline \n     *    or double quote, then quotes are removed. \n     * </p>\n     *\n     * <p>Any double quote escaped characters (a pair of double quotes) are unescaped \n     *    to just one double quote. </p>\n     *\n     * <p>If the value is not enclosed in double quotes, or is and does not contain a \n     *    comma, newline or double quote, then the String value is returned unchanged.</p>\n     * </p>\n     *\n     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param str the input CSV column String, may be null\n     * @param out Writer to write the input String to, with enclosing double quotes \n     * removed and embedded double quotes unescaped, <code>null</code> if null string input\n     * @throws IOException if error occurs on underlying Writer\n     * @since 2.4\n     */\n    public static void unescapeCsv(Writer out, String str) throws IOException;\n    /**\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules\n     * to a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJavaScript(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     **/\n    public static void escapeJavaScript(Writer out, String str) throws IOException;\n    /**\n     * <p>Unescapes any Java literals found in the <code>String</code>.\n     * For example, it will turn a sequence of <code>'\\'</code> and\n     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n     * is preceded by another <code>'\\'</code>.</p>\n     * \n     * @param str  the <code>String</code> to unescape, may be null\n     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n     */\n    public static String unescapeJava(String str);\n    /**\n     * <p>Unescapes any Java literals found in the <code>String</code> to a\n     * <code>Writer</code>.</p>\n     *\n     * <p>For example, it will turn a sequence of <code>'\\'</code> and\n     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n     * is preceded by another <code>'\\'</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @param out  the <code>Writer</code> used to output unescaped characters\n     * @param str  the <code>String</code> to unescape, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     */\n    public static void unescapeJava(Writer out, String str) throws IOException;\n    /**\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     * \n     * @param out write to receieve the escaped string\n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuote escapes single quotes if <code>true</code>\n     * @param escapeForwardSlash TODO\n     * @throws IOException if an IOException occurs\n     */\n    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException;\n    /**\n     * <p>Returns a <code>String</code> value for a CSV column enclosed in double quotes,\n     * if required.</p>\n     *\n     * <p>If the value contains a comma, newline or double quote, then the\n     *    String value is returned enclosed in double quotes.</p>\n     * </p>\n     *\n     * <p>Any double quote characters in the value are escaped with another double quote.</p>\n     *\n     * <p>If the value does not contain a comma, newline or double quote, then the\n     *    String value is returned unchanged.</p>\n     * </p>\n     *\n     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param str the input CSV column String, may be null\n     * @return the input String, enclosed in double quotes if the value contains a comma,\n     * newline or double quote, <code>null</code> if null string input\n     * @since 2.4\n     */\n    public static String escapeCsv(String str);\n    /**\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n     * <p>Escapes any values it finds into their JavaScript String form.\n     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn\\'t say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     */\n    public static String escapeJavaScript(String str);\n    /**\n     * <p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n     *\n     * <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn't say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     */\n    public static String escapeJava(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertEscapeJava(String escaped, String original) throws IOException {\n        assertEscapeJava(null, escaped, original);\n    }\n    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n        String converted = StringEscapeUtils.escapeJava(original);\n        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n        assertEquals(message, expected, converted);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.escapeJava(writer, original);\n        assertEquals(expected, writer.toString());\n    }\n    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n        assertUnescapeJava(null, unescaped, original);\n    }\n    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n        String expected = unescaped;\n        String actual = StringEscapeUtils.unescapeJava(original);\n\n        assertEquals(\"unescape(String) failed\" +\n                (message == null ? \"\" : (\": \" + message)) +\n                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n                // we escape this so we can see it in the error message\n                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                expected, actual);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.unescapeJava(writer, original);\n        assertEquals(unescaped, writer.toString());\n\n    }\n    private void checkCsvEscapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.escapeCsv(writer, value);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }\n    private void checkCsvUnescapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.unescapeCsv(writer, value);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }\n    public void testEscapeJavaWithSlash() {\n        final String input = \"String with a slash (/) in it\";\n\n        final String expected = input;\n        final String actual = StringEscapeUtils.escapeJava(input);\n\n        /**\n         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape\n         * in a Java string.\n         */\n        assertEquals(expected, actual);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\npublic class StrBuilder implements Cloneable {\n    private static final long serialVersionUID = 7628716375283629643L;\n    private String newLine;\n    private String nullText;\n    /**\n     * Appends an object to the builder padding on the left to a fixed width.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the left hand side is lost.\n     * If the object is null, the null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar);\n    /**\n     * Appends an object to the builder padding on the left to a fixed width.\n     * The <code>String.valueOf</code> of the <code>int</code> value is used.\n     * If the formatted value is larger than the length, the left hand side is lost.\n     * \n     * @param value  the value to append\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadLeft(int value, int width, char padChar);\n    /**\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * If the object is null, null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar);\n    /**\n     * Gets a String version of the string builder, creating a new instance\n     * each time the method is called.\n     * <p>\n     * Note that unlike StringBuffer, the string version returned is\n     * independent of the string builder.\n     *\n     * @return the builder as a String\n     */\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\npublic class StrBuilder implements Cloneable {\n    private static final long serialVersionUID = 7628716375283629643L;\n    private String newLine;\n    private String nullText;\n    /**\n     * Appends an object to the builder padding on the left to a fixed width.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the left hand side is lost.\n     * If the object is null, the null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar);\n    /**\n     * Appends an object to the builder padding on the left to a fixed width.\n     * The <code>String.valueOf</code> of the <code>int</code> value is used.\n     * If the formatted value is larger than the length, the left hand side is lost.\n     * \n     * @param value  the value to append\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadLeft(int value, int width, char padChar);\n    /**\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * If the object is null, null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar);\n    /**\n     * Gets a String version of the string builder, creating a new instance\n     * each time the method is called.\n     * <p>\n     * Note that unlike StringBuffer, the string version returned is\n     * independent of the string builder.\n     *\n     * @return the builder as a String\n     */\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLang412Left() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(null, 10, '*');\n        assertEquals( \"Failed to invoke appendFixedWidthPadLeft correctly\", \"**********\", sb.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Assists in implementing {@link Object#equals(Object)} methods.</p>\n *\n * <p> This class provides methods to build a good equals method for any\n * class. It follows rules laid out in\n * <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a>\n * , by Joshua Bloch. In particular the rule for comparing <code>doubles</code>,\n * <code>floats</code>, and arrays can be tricky. Also, making sure that\n * <code>equals()</code> and <code>hashCode()</code> are consistent can be\n * difficult.</p>\n *\n * <p>Two Objects that compare as equals must generate the same hash code,\n * but two Objects with the same hash code do not have to be equal.</p>\n *\n * <p>All relevant fields should be included in the calculation of equals.\n * Derived fields may be ignored. In particular, any field used in\n * generating a hash code must be used in the equals method, and vice\n * versa.</p>\n *\n * <p>Typical use for the code is as follows:</p>\n * <pre>\n * public boolean equals(Object obj) {\n *   if (obj == null) { return false; }\n *   if (obj == this) { return true; }\n *   if (obj.getClass() != getClass()) {\n *     return false;\n *   }\n *   MyClass rhs = (MyClass) obj;\n *   return new EqualsBuilder()\n *                 .appendSuper(super.equals(obj))\n *                 .append(field1, rhs.field1)\n *                 .append(field2, rhs.field2)\n *                 .append(field3, rhs.field3)\n *                 .isEquals();\n *  }\n * </pre>\n *\n * <p> Alternatively, there is a method that uses reflection to determine\n * the fields to test. Because these fields are usually private, the method,\n * <code>reflectionEquals</code>, uses <code>AccessibleObject.setAccessible</code> to\n * change the visibility of the fields. This will fail under a security\n * manager, unless the appropriate permissions are set up correctly. It is\n * also slower than testing explicitly.</p>\n *\n * <p> A typical invocation for this method would look like:</p>\n * <pre>\n * public boolean equals(Object obj) {\n *   return EqualsBuilder.reflectionEquals(this, obj);\n * }\n * </pre>\n *\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Stephen Colebourne\n * @author Gary Gregory\n * @author Pete Gieser\n * @author Arun Mammen Thomas\n * @since 1.0\n * @version $Id$\n */\npublic class EqualsBuilder {\n    private boolean isEquals = true;\n    /**\n     * <p>Test if two <code>double</code>s are equal by testing that the\n     * pattern of bits returned by <code>doubleToLong</code> are equal.</p>\n     *\n     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n     *\n     * <p>It is compatible with the hash code generated by\n     * <code>HashCodeBuilder</code>.</p>\n     *\n     * @param lhs  the left hand <code>double</code>\n     * @param rhs  the right hand <code>double</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(double lhs, double rhs);\n    /**\n     * <p>Deep comparison of array of <code>float</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(float, float)} is used.</p>\n     *\n     * @param lhs  the left hand <code>float[]</code>\n     * @param rhs  the right hand <code>float[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(float[] lhs, float[] rhs);\n    /**\n     * <p>Deep comparison of array of <code>byte</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(byte, byte)} is used.</p>\n     *\n     * @param lhs  the left hand <code>byte[]</code>\n     * @param rhs  the right hand <code>byte[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(byte[] lhs, byte[] rhs);\n    /**\n     * <p>Deep comparison of array of <code>short</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(short, short)} is used.</p>\n     *\n     * @param lhs  the left hand <code>short[]</code>\n     * @param rhs  the right hand <code>short[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(short[] lhs, short[] rhs);\n    /**\n     * <p>\n     * Test if two <code>long</code> s are equal.\n     * </p>\n     * \n     * @param lhs\n     *                  the left hand <code>long</code>\n     * @param rhs\n     *                  the right hand <code>long</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(long lhs, long rhs);\n    /**\n     * <p>Deep comparison of array of <code>double</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(double, double)} is used.</p>\n     *\n     * @param lhs  the left hand <code>double[]</code>\n     * @param rhs  the right hand <code>double[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(double[] lhs, double[] rhs);\n    /**\n     * <p>Deep comparison of array of <code>boolean</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(boolean, boolean)} is used.</p>\n     *\n     * @param lhs  the left hand <code>boolean[]</code>\n     * @param rhs  the right hand <code>boolean[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(boolean[] lhs, boolean[] rhs);\n    /**\n     * <p>Test if two <code>short</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>short</code>\n     * @param rhs  the right hand <code>short</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(short lhs, short rhs);\n    /**\n     * <p>Test if two <code>Object</code>s are equal using their\n     * <code>equals</code> method.</p>\n     *\n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(Object lhs, Object rhs);\n    /**\n     * <p>Test if two <code>booleans</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>boolean</code>\n     * @param rhs  the right hand <code>boolean</code>\n     * @return EqualsBuilder - used to chain calls.\n      */\n    public EqualsBuilder append(boolean lhs, boolean rhs);\n    /**\n     * <p>Deep comparison of array of <code>long</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(long, long)} is used.</p>\n     *\n     * @param lhs  the left hand <code>long[]</code>\n     * @param rhs  the right hand <code>long[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(long[] lhs, long[] rhs);\n    /**\n     * <p>Performs a deep comparison of two <code>Object</code> arrays.</p>\n     *\n     * <p>This also will be called for the top level of\n     * multi-dimensional, ragged, and multi-typed arrays.</p>\n     *\n     * @param lhs  the left hand <code>Object[]</code>\n     * @param rhs  the right hand <code>Object[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(Object[] lhs, Object[] rhs);\n    /**\n     * <p>Test if two <code>char</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>char</code>\n     * @param rhs  the right hand <code>char</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(char lhs, char rhs);\n    /**\n     * <p>Returns <code>true</code> if the fields that have been checked\n     * are all equal.</p>\n     *\n     * @return boolean\n     */\n    public boolean isEquals();\n    /**\n     * <p>Test if two <code>int</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>int</code>\n     * @param rhs  the right hand <code>int</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(int lhs, int rhs);\n    /**\n     * <p>Test if two <code>float</code>s are equal byt testing that the\n     * pattern of bits returned by doubleToLong are equal.</p>\n     *\n     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n     *\n     * <p>It is compatible with the hash code generated by\n     * <code>HashCodeBuilder</code>.</p>\n     *\n     * @param lhs  the left hand <code>float</code>\n     * @param rhs  the right hand <code>float</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(float lhs, float rhs);\n    /**\n     * <p>Deep comparison of array of <code>char</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(char, char)} is used.</p>\n     *\n     * @param lhs  the left hand <code>char[]</code>\n     * @param rhs  the right hand <code>char[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(char[] lhs, char[] rhs);\n    /**\n     * <p>Test if two <code>byte</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>byte</code>\n     * @param rhs  the right hand <code>byte</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(byte lhs, byte rhs);\n    /**\n     * <p>Deep comparison of array of <code>int</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(int, int)} is used.</p>\n     *\n     * @param lhs  the left hand <code>int[]</code>\n     * @param rhs  the right hand <code>int[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(int[] lhs, int[] rhs);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Assists in implementing {@link Object#equals(Object)} methods.</p>\n *\n * <p> This class provides methods to build a good equals method for any\n * class. It follows rules laid out in\n * <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a>\n * , by Joshua Bloch. In particular the rule for comparing <code>doubles</code>,\n * <code>floats</code>, and arrays can be tricky. Also, making sure that\n * <code>equals()</code> and <code>hashCode()</code> are consistent can be\n * difficult.</p>\n *\n * <p>Two Objects that compare as equals must generate the same hash code,\n * but two Objects with the same hash code do not have to be equal.</p>\n *\n * <p>All relevant fields should be included in the calculation of equals.\n * Derived fields may be ignored. In particular, any field used in\n * generating a hash code must be used in the equals method, and vice\n * versa.</p>\n *\n * <p>Typical use for the code is as follows:</p>\n * <pre>\n * public boolean equals(Object obj) {\n *   if (obj == null) { return false; }\n *   if (obj == this) { return true; }\n *   if (obj.getClass() != getClass()) {\n *     return false;\n *   }\n *   MyClass rhs = (MyClass) obj;\n *   return new EqualsBuilder()\n *                 .appendSuper(super.equals(obj))\n *                 .append(field1, rhs.field1)\n *                 .append(field2, rhs.field2)\n *                 .append(field3, rhs.field3)\n *                 .isEquals();\n *  }\n * </pre>\n *\n * <p> Alternatively, there is a method that uses reflection to determine\n * the fields to test. Because these fields are usually private, the method,\n * <code>reflectionEquals</code>, uses <code>AccessibleObject.setAccessible</code> to\n * change the visibility of the fields. This will fail under a security\n * manager, unless the appropriate permissions are set up correctly. It is\n * also slower than testing explicitly.</p>\n *\n * <p> A typical invocation for this method would look like:</p>\n * <pre>\n * public boolean equals(Object obj) {\n *   return EqualsBuilder.reflectionEquals(this, obj);\n * }\n * </pre>\n *\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Stephen Colebourne\n * @author Gary Gregory\n * @author Pete Gieser\n * @author Arun Mammen Thomas\n * @since 1.0\n * @version $Id$\n */\npublic class EqualsBuilder {\n    private boolean isEquals = true;\n    /**\n     * <p>Test if two <code>double</code>s are equal by testing that the\n     * pattern of bits returned by <code>doubleToLong</code> are equal.</p>\n     *\n     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n     *\n     * <p>It is compatible with the hash code generated by\n     * <code>HashCodeBuilder</code>.</p>\n     *\n     * @param lhs  the left hand <code>double</code>\n     * @param rhs  the right hand <code>double</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(double lhs, double rhs);\n    /**\n     * <p>Deep comparison of array of <code>float</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(float, float)} is used.</p>\n     *\n     * @param lhs  the left hand <code>float[]</code>\n     * @param rhs  the right hand <code>float[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(float[] lhs, float[] rhs);\n    /**\n     * <p>Deep comparison of array of <code>byte</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(byte, byte)} is used.</p>\n     *\n     * @param lhs  the left hand <code>byte[]</code>\n     * @param rhs  the right hand <code>byte[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(byte[] lhs, byte[] rhs);\n    /**\n     * <p>Deep comparison of array of <code>short</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(short, short)} is used.</p>\n     *\n     * @param lhs  the left hand <code>short[]</code>\n     * @param rhs  the right hand <code>short[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(short[] lhs, short[] rhs);\n    /**\n     * <p>\n     * Test if two <code>long</code> s are equal.\n     * </p>\n     * \n     * @param lhs\n     *                  the left hand <code>long</code>\n     * @param rhs\n     *                  the right hand <code>long</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(long lhs, long rhs);\n    /**\n     * <p>Deep comparison of array of <code>double</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(double, double)} is used.</p>\n     *\n     * @param lhs  the left hand <code>double[]</code>\n     * @param rhs  the right hand <code>double[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(double[] lhs, double[] rhs);\n    /**\n     * <p>Deep comparison of array of <code>boolean</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(boolean, boolean)} is used.</p>\n     *\n     * @param lhs  the left hand <code>boolean[]</code>\n     * @param rhs  the right hand <code>boolean[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(boolean[] lhs, boolean[] rhs);\n    /**\n     * <p>Test if two <code>short</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>short</code>\n     * @param rhs  the right hand <code>short</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(short lhs, short rhs);\n    /**\n     * <p>Test if two <code>Object</code>s are equal using their\n     * <code>equals</code> method.</p>\n     *\n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(Object lhs, Object rhs);\n    /**\n     * <p>Test if two <code>booleans</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>boolean</code>\n     * @param rhs  the right hand <code>boolean</code>\n     * @return EqualsBuilder - used to chain calls.\n      */\n    public EqualsBuilder append(boolean lhs, boolean rhs);\n    /**\n     * <p>Deep comparison of array of <code>long</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(long, long)} is used.</p>\n     *\n     * @param lhs  the left hand <code>long[]</code>\n     * @param rhs  the right hand <code>long[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(long[] lhs, long[] rhs);\n    /**\n     * <p>Performs a deep comparison of two <code>Object</code> arrays.</p>\n     *\n     * <p>This also will be called for the top level of\n     * multi-dimensional, ragged, and multi-typed arrays.</p>\n     *\n     * @param lhs  the left hand <code>Object[]</code>\n     * @param rhs  the right hand <code>Object[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(Object[] lhs, Object[] rhs);\n    /**\n     * <p>Test if two <code>char</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>char</code>\n     * @param rhs  the right hand <code>char</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(char lhs, char rhs);\n    /**\n     * <p>Returns <code>true</code> if the fields that have been checked\n     * are all equal.</p>\n     *\n     * @return boolean\n     */\n    public boolean isEquals();\n    /**\n     * <p>Test if two <code>int</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>int</code>\n     * @param rhs  the right hand <code>int</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(int lhs, int rhs);\n    /**\n     * <p>Test if two <code>float</code>s are equal byt testing that the\n     * pattern of bits returned by doubleToLong are equal.</p>\n     *\n     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>\n     *\n     * <p>It is compatible with the hash code generated by\n     * <code>HashCodeBuilder</code>.</p>\n     *\n     * @param lhs  the left hand <code>float</code>\n     * @param rhs  the right hand <code>float</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(float lhs, float rhs);\n    /**\n     * <p>Deep comparison of array of <code>char</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(char, char)} is used.</p>\n     *\n     * @param lhs  the left hand <code>char[]</code>\n     * @param rhs  the right hand <code>char[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(char[] lhs, char[] rhs);\n    /**\n     * <p>Test if two <code>byte</code>s are equal.</p>\n     *\n     * @param lhs  the left hand <code>byte</code>\n     * @param rhs  the right hand <code>byte</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(byte lhs, byte rhs);\n    /**\n     * <p>Deep comparison of array of <code>int</code>. Length and all\n     * values are compared.</p>\n     *\n     * <p>The method {@link #append(int, int)} is used.</p>\n     *\n     * @param lhs  the left hand <code>int[]</code>\n     * @param rhs  the right hand <code>int[]</code>\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(int[] lhs, int[] rhs);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testBigDecimal() {\n        BigDecimal o1 = new BigDecimal(\"2.0\");\n        BigDecimal o2 = new BigDecimal(\"2.00\");\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p><code>Fraction</code> is a <code>Number</code> implementation that\n * stores fractions accurately.</p>\n *\n * <p>This class is immutable, and interoperable with most methods that accept\n * a <code>Number</code>.</p>\n *\n * @author Travis Reeder\n * @author Stephen Colebourne\n * @author Tim O'Brien\n * @author Pete Gieser\n * @author C. Scott Ananian\n * @since 2.0\n * @version $Id$\n */\npublic final class Fraction extends Number implements Comparable {\n    private static final long serialVersionUID = 65382027393090L;\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n    private final int numerator;\n    private final int denominator;\n    private transient int hashCode = 0;\n    private transient String toString = null;\n    private transient String toProperString = null;\n    /**\n     * <p>Creates a <code>Fraction</code> instance from a <code>double</code> value.</p>\n     *\n     * <p>This method uses the <a href=\"http://archives.math.utk.edu/articles/atuyl/confrac/\">\n     *  continued fraction algorithm</a>, computing a maximum of\n     *  25 convergents and bounding the denominator by 10,000.</p>\n     *\n     * @param value  the double value to convert\n     * @return a new fraction instance that is close to the value\n     * @throws ArithmeticException if <code>|value| > Integer.MAX_VALUE</code> \n     *  or <code>value = NaN</code>\n     * @throws ArithmeticException if the calculated denominator is <code>zero</code>\n     * @throws ArithmeticException if the the algorithm does not converge\n     */\n    public static Fraction getFraction(double value);\n    /**\n     * <p>Gets the numerator part of the fraction.</p>\n     *\n     * <p>This method may return a value greater than the denominator, an\n     * improper fraction, such as the seven in 7/4.</p>\n     *\n     * @return the numerator fraction part\n     */\n    public int getNumerator();\n    /**\n     * <p>Gets the fraction as a <code>double</code>. This calculates the fraction\n     * as the numerator divided by denominator.</p>\n     *\n     * @return the fraction as a <code>double</code>\n     */\n    public double doubleValue();\n    /**\n     * <p>Creates a <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * <p>Any negative signs are resolved to be on the numerator.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance\n     * @throws ArithmeticException if the denomiator is <code>zero</code>\n     */\n    public static Fraction getFraction(int numerator, int denominator);\n    /**\n     * <p>Creates a <code>Fraction</code> instance with the 3 parts\n     * of a fraction X Y/Z.</p>\n     *\n     * <p>The negative sign must be passed in on the whole number part.</p>\n     *\n     * @param whole  the whole number, for example the one in 'one and three sevenths'\n     * @param numerator  the numerator, for example the three in 'one and three sevenths'\n     * @param denominator  the denominator, for example the seven in 'one and three sevenths'\n     * @return a new fraction instance\n     * @throws ArithmeticException if the denomiator is <code>zero</code>\n     * @throws ArithmeticException if the denominator is negative\n     * @throws ArithmeticException if the numerator is negative\n     * @throws ArithmeticException if the resulting numerator exceeds \n     *  <code>Integer.MAX_VALUE</code>\n     */\n    public static Fraction getFraction(int whole, int numerator, int denominator);\n    /**\n     * <p>Creates a Fraction from a <code>String</code>.</p>\n     *\n     * <p>The formats accepted are:</p>\n     *\n     * <ol>\n     *  <li><code>double</code> String containing a dot</li>\n     *  <li>'X Y/Z'</li>\n     *  <li>'Y/Z'</li>\n     *  <li>'X' (a simple whole number)</li>\n     * </ol>\n     * and a .</p>\n     *\n     * @param str  the string to parse, must not be <code>null</code>\n     * @return the new <code>Fraction</code> instance\n     * @throws IllegalArgumentException if the string is <code>null</code>\n     * @throws NumberFormatException if the number format is invalid\n     */\n    public static Fraction getFraction(String str);\n    /**\n     * <p>Reduce the fraction to the smallest values for the numerator and\n     * denominator, returning the result.</p>\n     * \n     * <p>For example, if this fraction represents 2/4, then the result\n     * will be 1/2.</p>\n     *\n     * @return a new reduced fraction instance, or this if no simplification possible\n     */\n    public Fraction reduce();\n    /**\n     * <p>Gets the denominator part of the fraction.</p>\n     *\n     * @return the denominator fraction part\n     */\n    public int getDenominator();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p><code>Fraction</code> is a <code>Number</code> implementation that\n * stores fractions accurately.</p>\n *\n * <p>This class is immutable, and interoperable with most methods that accept\n * a <code>Number</code>.</p>\n *\n * @author Travis Reeder\n * @author Stephen Colebourne\n * @author Tim O'Brien\n * @author Pete Gieser\n * @author C. Scott Ananian\n * @since 2.0\n * @version $Id$\n */\npublic final class Fraction extends Number implements Comparable {\n    private static final long serialVersionUID = 65382027393090L;\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n    private final int numerator;\n    private final int denominator;\n    private transient int hashCode = 0;\n    private transient String toString = null;\n    private transient String toProperString = null;\n    /**\n     * <p>Creates a <code>Fraction</code> instance from a <code>double</code> value.</p>\n     *\n     * <p>This method uses the <a href=\"http://archives.math.utk.edu/articles/atuyl/confrac/\">\n     *  continued fraction algorithm</a>, computing a maximum of\n     *  25 convergents and bounding the denominator by 10,000.</p>\n     *\n     * @param value  the double value to convert\n     * @return a new fraction instance that is close to the value\n     * @throws ArithmeticException if <code>|value| > Integer.MAX_VALUE</code> \n     *  or <code>value = NaN</code>\n     * @throws ArithmeticException if the calculated denominator is <code>zero</code>\n     * @throws ArithmeticException if the the algorithm does not converge\n     */\n    public static Fraction getFraction(double value);\n    /**\n     * <p>Gets the numerator part of the fraction.</p>\n     *\n     * <p>This method may return a value greater than the denominator, an\n     * improper fraction, such as the seven in 7/4.</p>\n     *\n     * @return the numerator fraction part\n     */\n    public int getNumerator();\n    /**\n     * <p>Gets the fraction as a <code>double</code>. This calculates the fraction\n     * as the numerator divided by denominator.</p>\n     *\n     * @return the fraction as a <code>double</code>\n     */\n    public double doubleValue();\n    /**\n     * <p>Creates a <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * <p>Any negative signs are resolved to be on the numerator.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance\n     * @throws ArithmeticException if the denomiator is <code>zero</code>\n     */\n    public static Fraction getFraction(int numerator, int denominator);\n    /**\n     * <p>Creates a <code>Fraction</code> instance with the 3 parts\n     * of a fraction X Y/Z.</p>\n     *\n     * <p>The negative sign must be passed in on the whole number part.</p>\n     *\n     * @param whole  the whole number, for example the one in 'one and three sevenths'\n     * @param numerator  the numerator, for example the three in 'one and three sevenths'\n     * @param denominator  the denominator, for example the seven in 'one and three sevenths'\n     * @return a new fraction instance\n     * @throws ArithmeticException if the denomiator is <code>zero</code>\n     * @throws ArithmeticException if the denominator is negative\n     * @throws ArithmeticException if the numerator is negative\n     * @throws ArithmeticException if the resulting numerator exceeds \n     *  <code>Integer.MAX_VALUE</code>\n     */\n    public static Fraction getFraction(int whole, int numerator, int denominator);\n    /**\n     * <p>Creates a Fraction from a <code>String</code>.</p>\n     *\n     * <p>The formats accepted are:</p>\n     *\n     * <ol>\n     *  <li><code>double</code> String containing a dot</li>\n     *  <li>'X Y/Z'</li>\n     *  <li>'Y/Z'</li>\n     *  <li>'X' (a simple whole number)</li>\n     * </ol>\n     * and a .</p>\n     *\n     * @param str  the string to parse, must not be <code>null</code>\n     * @return the new <code>Fraction</code> instance\n     * @throws IllegalArgumentException if the string is <code>null</code>\n     * @throws NumberFormatException if the number format is invalid\n     */\n    public static Fraction getFraction(String str);\n    /**\n     * <p>Reduce the fraction to the smallest values for the numerator and\n     * denominator, returning the result.</p>\n     * \n     * <p>For example, if this fraction represents 2/4, then the result\n     * will be 1/2.</p>\n     *\n     * @return a new reduced fraction instance, or this if no simplification possible\n     */\n    public Fraction reduce();\n    /**\n     * <p>Gets the denominator part of the fraction.</p>\n     *\n     * @return the denominator fraction part\n     */\n    public int getDenominator();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n * @author C. Scott Ananian\n * @version $Id$\n */\npublic class FractionTest extends TestCase {\n    public void testReduce() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n        assertSame(result, Fraction.ZERO);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations to assist when working with a {@link Locale}.</p>\n *\n * <p>This class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null} input.\n * Each method documents its behaviour in more detail.</p>\n *\n * @since 2.2\n * @version $Id$\n */\npublic class LocaleUtils {\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str);\n    /**\n     * <p>Obtains the list of countries supported for a given language.</p>\n     * \n     * <p>This method takes a language code and searches to find the\n     * countries available for that language. Variant locales are removed.</p>\n     *\n     * @param languageCode  the 2 letter language code, null returns empty\n     * @return an unmodifiable List of Locale objects, not null\n     */\n    public static List<Locale> countriesByLanguage(String languageCode);\n    /**\n     * <p>Obtains the list of locales to search through when performing\n     * a locale search.</p>\n     *\n     * <pre>\n     * localeLookupList(Locale(\"fr\", \"CA\", \"xxx\"), Locale(\"en\"))\n     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\"), Locale(\"en\"]\n     * </pre>\n     *\n     * <p>The result list begins with the most specific locale, then the\n     * next more general and so on, finishing with the default locale.\n     * The list will never contain the same locale twice.</p>\n     *\n     * @param locale  the locale to start from, null returns empty list\n     * @param defaultLocale  the default locale to use if no other is found\n     * @return the unmodifiable list of Locale objects, 0 being locale, not null\n     */\n    public static List<Locale> localeLookupList(Locale locale, Locale defaultLocale);\n    /**\n     * <p>Obtains the list of languages supported for a given country.</p>\n     *\n     * <p>This method takes a country code and searches to find the\n     * languages available for that country. Variant locales are removed.</p>\n     *\n     * @param countryCode  the 2 letter country code, null returns empty\n     * @return an unmodifiable List of Locale objects, not null\n     */\n    public static List<Locale> languagesByCountry(String countryCode);\n    /**\n     * <p>Obtains the list of locales to search through when performing\n     * a locale search.</p>\n     *\n     * <pre>\n     * localeLookupList(Locale(\"fr\",\"CA\",\"xxx\"))\n     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\")]\n     * </pre>\n     *\n     * @param locale  the locale to start from\n     * @return the unmodifiable list of Locale objects, 0 being locale, not null\n     */\n    public static List<Locale> localeLookupList(Locale locale);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations to assist when working with a {@link Locale}.</p>\n *\n * <p>This class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null} input.\n * Each method documents its behaviour in more detail.</p>\n *\n * @since 2.2\n * @version $Id$\n */\npublic class LocaleUtils {\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str);\n    /**\n     * <p>Obtains the list of countries supported for a given language.</p>\n     * \n     * <p>This method takes a language code and searches to find the\n     * countries available for that language. Variant locales are removed.</p>\n     *\n     * @param languageCode  the 2 letter language code, null returns empty\n     * @return an unmodifiable List of Locale objects, not null\n     */\n    public static List<Locale> countriesByLanguage(String languageCode);\n    /**\n     * <p>Obtains the list of locales to search through when performing\n     * a locale search.</p>\n     *\n     * <pre>\n     * localeLookupList(Locale(\"fr\", \"CA\", \"xxx\"), Locale(\"en\"))\n     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\"), Locale(\"en\"]\n     * </pre>\n     *\n     * <p>The result list begins with the most specific locale, then the\n     * next more general and so on, finishing with the default locale.\n     * The list will never contain the same locale twice.</p>\n     *\n     * @param locale  the locale to start from, null returns empty list\n     * @param defaultLocale  the default locale to use if no other is found\n     * @return the unmodifiable list of Locale objects, 0 being locale, not null\n     */\n    public static List<Locale> localeLookupList(Locale locale, Locale defaultLocale);\n    /**\n     * <p>Obtains the list of languages supported for a given country.</p>\n     *\n     * <p>This method takes a country code and searches to find the\n     * languages available for that country. Variant locales are removed.</p>\n     *\n     * @param countryCode  the 2 letter country code, null returns empty\n     * @return an unmodifiable List of Locale objects, not null\n     */\n    public static List<Locale> languagesByCountry(String countryCode);\n    /**\n     * <p>Obtains the list of locales to search through when performing\n     * a locale search.</p>\n     *\n     * <pre>\n     * localeLookupList(Locale(\"fr\",\"CA\",\"xxx\"))\n     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\")]\n     * </pre>\n     *\n     * @param locale  the locale to start from\n     * @return the unmodifiable list of Locale objects, 0 being locale, not null\n     */\n    public static List<Locale> localeLookupList(Locale locale);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertValidToLocale(String language) {\n        Locale locale = LocaleUtils.toLocale(language);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        //country and variant are empty\n        assertTrue(locale.getCountry() == null || locale.getCountry().isEmpty());\n        assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());\n    }\n    private void assertValidToLocale(String localeString, String language, String country) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        //variant is empty\n        assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());\n    }\n    private void assertValidToLocale(\n            String localeString, String language, \n            String country, String variant) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        assertEquals(variant, locale.getVariant());\n        \n    }\n    private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {\n        List<Locale> localeList = defaultLocale == null ?\n                LocaleUtils.localeLookupList(locale) :\n                LocaleUtils.localeLookupList(locale, defaultLocale);\n        \n        assertEquals(expected.length, localeList.size());\n        assertEquals(Arrays.asList(expected), localeList);\n        assertUnmodifiableCollection(localeList);\n    }\n    private void assertLanguageByCountry(String country, String[] languages) {\n        List<Locale> list = LocaleUtils.languagesByCountry(country);\n        List<Locale> list2 = LocaleUtils.languagesByCountry(country);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (String language : languages) {\n            Iterator<Locale> iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().isEmpty());\n                assertEquals(country, locale.getCountry());\n                if (language.equals(locale.getLanguage())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + language\n                        + \" for country: \" + country);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }\n    private void assertCountriesByLanguage(String language, String[] countries) {\n        List<Locale> list = LocaleUtils.countriesByLanguage(language);\n        List<Locale> list2 = LocaleUtils.countriesByLanguage(language);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (String countrie : countries) {\n            Iterator<Locale> iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().isEmpty());\n                assertEquals(language, locale.getLanguage());\n                if (countrie.equals(locale.getCountry())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + countrie\n                        + \" for country: \" + language);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }\n    private static void assertUnmodifiableCollection(Collection<?> coll) {\n        try {\n            coll.add(null);\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }\n    public void testLang865() {\n        assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");\n        assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");\n        assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            fail(\"Must be at least 3 chars if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            fail(\"Must be uppercase if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            fail(\"Must be uppercase if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            fail(\"Must be letter if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            fail(\"Must be letter if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            fail(\"Must be at least 5 chars if starts with underscore\");\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");\n        } catch (final IllegalArgumentException iae) {\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n * \n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Stephen Colebourne\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\npublic class FastDateFormat extends Format {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    private static String cDefaultPattern;\n    private static Map cInstanceCache = new HashMap(7);\n    private static Map cDateInstanceCache = new HashMap(7);\n    private static Map cTimeInstanceCache = new HashMap(7);\n    private static Map cDateTimeInstanceCache = new HashMap(7);\n    private static Map cTimeZoneDisplayCache = new HashMap(7);\n    private final String mPattern;\n    private final TimeZone mTimeZone;\n    private final boolean mTimeZoneForced;\n    private final Locale mLocale;\n    private final boolean mLocaleForced;\n    private transient Rule[] mRules;\n    private transient int mMaxLengthEstimate;\n    /**\n     * <p>Gets a date/time formatter instance using the specified style,\n     * time zone and locale.</p>\n     * \n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     */\n    public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale);\n    /**\n     * <p>Gets a date formatter instance using the specified style and\n     * locale in the default time zone.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateInstance(int style, Locale locale);\n    /**\n     * <p>Gets the locale used by this formatter.</p>\n     * \n     * @return the locale\n     */\n    public Locale getLocale();\n    /**\n     * <p>Gets a date formatter instance using the specified style, time\n     * zone and locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     */\n    public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale);\n    /**\n     * <p>Gets a date formatter instance using the specified style and\n     * time zone in the default locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateInstance(int style, TimeZone timeZone);\n    /**\n     * <p>Gets a date formatter instance using the specified style in the\n     * default time zone and locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateInstance(int style);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n * \n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Stephen Colebourne\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\npublic class FastDateFormat extends Format {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    private static String cDefaultPattern;\n    private static Map cInstanceCache = new HashMap(7);\n    private static Map cDateInstanceCache = new HashMap(7);\n    private static Map cTimeInstanceCache = new HashMap(7);\n    private static Map cDateTimeInstanceCache = new HashMap(7);\n    private static Map cTimeZoneDisplayCache = new HashMap(7);\n    private final String mPattern;\n    private final TimeZone mTimeZone;\n    private final boolean mTimeZoneForced;\n    private final Locale mLocale;\n    private final boolean mLocaleForced;\n    private transient Rule[] mRules;\n    private transient int mMaxLengthEstimate;\n    /**\n     * <p>Gets a date/time formatter instance using the specified style,\n     * time zone and locale.</p>\n     * \n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     */\n    public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale);\n    /**\n     * <p>Gets a date formatter instance using the specified style and\n     * locale in the default time zone.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateInstance(int style, Locale locale);\n    /**\n     * <p>Gets the locale used by this formatter.</p>\n     * \n     * @return the locale\n     */\n    public Locale getLocale();\n    /**\n     * <p>Gets a date formatter instance using the specified style, time\n     * zone and locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     */\n    public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale);\n    /**\n     * <p>Gets a date formatter instance using the specified style and\n     * time zone in the default locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateInstance(int style, TimeZone timeZone);\n    /**\n     * <p>Gets a date formatter instance using the specified style in the\n     * default time zone and locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateInstance(int style);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void test_changeDefault_Locale_DateInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations on boolean primitives and Boolean objects.</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code> input.\n * Each method documents its behaviour in more detail.</p>\n * \n * @author Stephen Colebourne\n * @author Matthew Hawthorne\n * @author Gary Gregory\n * @since 2.0\n * @version $Id$\n */\npublic class BooleanUtils {\n    /**\n     * <p>Converts a String to a boolean (optimised for performance).</p>\n     * \n     * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n     * (case insensitive) will return <code>true</code>. Otherwise,\n     * <code>false</code> is returned.</p>\n     * \n     * <p>This method performs 4 times faster (JDK1.4) than\n     * <code>Boolean.valueOf(String)</code>. However, this method accepts\n     * 'on' and 'yes' as true values.\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(null)    = false\n     *   BooleanUtils.toBoolean(\"true\")  = true\n     *   BooleanUtils.toBoolean(\"TRUE\")  = true\n     *   BooleanUtils.toBoolean(\"tRUe\")  = true\n     *   BooleanUtils.toBoolean(\"on\")    = true\n     *   BooleanUtils.toBoolean(\"yes\")   = true\n     *   BooleanUtils.toBoolean(\"false\") = false\n     *   BooleanUtils.toBoolean(\"x gti\") = false\n     * </pre>\n     *\n     * @param str  the String to check\n     * @return the boolean value of the string, <code>false</code> if no match\n     */\n    public static boolean toBoolean(String str);\n    /**\n     * <p>Converts a Boolean to a boolean handling <code>null</code>\n     * by returning <code>false</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(Boolean.TRUE)  = true\n     *   BooleanUtils.toBoolean(Boolean.FALSE) = false\n     *   BooleanUtils.toBoolean(null)          = false\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return <code>true</code> or <code>false</code>, \n     *  <code>null</code> returns <code>false</code>\n     */\n    public static boolean toBoolean(Boolean bool);\n    /**\n     * <p>Converts a boolean to a String returning one of the input Strings.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toString(true, \"true\", \"false\")   = \"true\"\n     *   BooleanUtils.toString(false, \"true\", \"false\")  = \"false\"\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @param trueString  the String to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseString  the String to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @return one of the two input Strings\n     */\n    public static String toString(boolean bool, String trueString, String falseString);\n    /**\n     * <p>Converts an int to a boolean using the convention that <code>zero</code>\n     * is <code>false</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(0) = false\n     *   BooleanUtils.toBoolean(1) = true\n     *   BooleanUtils.toBoolean(2) = true\n     * </pre>\n     *\n     * @param value  the int to convert\n     * @return <code>true</code> if non-zero, <code>false</code>\n     *  if zero\n     */\n    public static boolean toBoolean(int value);\n    /**\n     * <p>Converts a String to a Boolean throwing an exception if no match found.</p>\n     * \n     * <p>null is returned if there is no match.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(\"true\", \"true\", \"false\")  = true\n     *   BooleanUtils.toBoolean(\"false\", \"true\", \"false\") = false\n     * </pre>\n     *\n     * @param str  the String to check\n     * @param trueString  the String to match for <code>true</code>\n     *  (case sensitive), may be <code>null</code>\n     * @param falseString  the String to match for <code>false</code>\n     *  (case sensitive), may be <code>null</code>\n     * @return the boolean value of the string\n     * @throws IllegalArgumentException if the String doesn't match\n     */\n    public static boolean toBoolean(String str, String trueString, String falseString);\n    /**\n     * <p>Converts a Boolean to a String returning one of the input Strings.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toString(Boolean.TRUE, \"true\", \"false\", null)   = \"true\"\n     *   BooleanUtils.toString(Boolean.FALSE, \"true\", \"false\", null)  = \"false\"\n     *   BooleanUtils.toString(null, \"true\", \"false\", null)           = null;\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @param trueString  the String to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseString  the String to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @param nullString  the String to return if <code>null</code>,\n     *  may be <code>null</code>\n     * @return one of the three input Strings\n     */\n    public static String toString(Boolean bool, String trueString, String falseString, String nullString);\n    /**\n     * <p>Converts an Integer to a boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false\n     *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true\n     *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false\n     *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true\n     *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseValue  the value to match for <code>false</code>,\n     *  may be <code>null</code>\n     * @return <code>true</code> or <code>false</code>\n     * @throws IllegalArgumentException if no match\n     */\n    public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue);\n    /**\n     * <p>Converts an int to a boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(0, 1, 0) = false\n     *   BooleanUtils.toBoolean(1, 1, 0) = true\n     *   BooleanUtils.toBoolean(2, 1, 2) = false\n     *   BooleanUtils.toBoolean(2, 2, 0) = true\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>\n     * @param falseValue  the value to match for <code>false</code>\n     * @return <code>true</code> or <code>false</code>\n     * @throws IllegalArgumentException if no match\n     */\n    public static boolean toBoolean(int value, int trueValue, int falseValue);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations on boolean primitives and Boolean objects.</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code> input.\n * Each method documents its behaviour in more detail.</p>\n * \n * @author Stephen Colebourne\n * @author Matthew Hawthorne\n * @author Gary Gregory\n * @since 2.0\n * @version $Id$\n */\npublic class BooleanUtils {\n    /**\n     * <p>Converts a String to a boolean (optimised for performance).</p>\n     * \n     * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n     * (case insensitive) will return <code>true</code>. Otherwise,\n     * <code>false</code> is returned.</p>\n     * \n     * <p>This method performs 4 times faster (JDK1.4) than\n     * <code>Boolean.valueOf(String)</code>. However, this method accepts\n     * 'on' and 'yes' as true values.\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(null)    = false\n     *   BooleanUtils.toBoolean(\"true\")  = true\n     *   BooleanUtils.toBoolean(\"TRUE\")  = true\n     *   BooleanUtils.toBoolean(\"tRUe\")  = true\n     *   BooleanUtils.toBoolean(\"on\")    = true\n     *   BooleanUtils.toBoolean(\"yes\")   = true\n     *   BooleanUtils.toBoolean(\"false\") = false\n     *   BooleanUtils.toBoolean(\"x gti\") = false\n     * </pre>\n     *\n     * @param str  the String to check\n     * @return the boolean value of the string, <code>false</code> if no match\n     */\n    public static boolean toBoolean(String str);\n    /**\n     * <p>Converts a Boolean to a boolean handling <code>null</code>\n     * by returning <code>false</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(Boolean.TRUE)  = true\n     *   BooleanUtils.toBoolean(Boolean.FALSE) = false\n     *   BooleanUtils.toBoolean(null)          = false\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return <code>true</code> or <code>false</code>, \n     *  <code>null</code> returns <code>false</code>\n     */\n    public static boolean toBoolean(Boolean bool);\n    /**\n     * <p>Converts a boolean to a String returning one of the input Strings.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toString(true, \"true\", \"false\")   = \"true\"\n     *   BooleanUtils.toString(false, \"true\", \"false\")  = \"false\"\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @param trueString  the String to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseString  the String to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @return one of the two input Strings\n     */\n    public static String toString(boolean bool, String trueString, String falseString);\n    /**\n     * <p>Converts an int to a boolean using the convention that <code>zero</code>\n     * is <code>false</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(0) = false\n     *   BooleanUtils.toBoolean(1) = true\n     *   BooleanUtils.toBoolean(2) = true\n     * </pre>\n     *\n     * @param value  the int to convert\n     * @return <code>true</code> if non-zero, <code>false</code>\n     *  if zero\n     */\n    public static boolean toBoolean(int value);\n    /**\n     * <p>Converts a String to a Boolean throwing an exception if no match found.</p>\n     * \n     * <p>null is returned if there is no match.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(\"true\", \"true\", \"false\")  = true\n     *   BooleanUtils.toBoolean(\"false\", \"true\", \"false\") = false\n     * </pre>\n     *\n     * @param str  the String to check\n     * @param trueString  the String to match for <code>true</code>\n     *  (case sensitive), may be <code>null</code>\n     * @param falseString  the String to match for <code>false</code>\n     *  (case sensitive), may be <code>null</code>\n     * @return the boolean value of the string\n     * @throws IllegalArgumentException if the String doesn't match\n     */\n    public static boolean toBoolean(String str, String trueString, String falseString);\n    /**\n     * <p>Converts a Boolean to a String returning one of the input Strings.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toString(Boolean.TRUE, \"true\", \"false\", null)   = \"true\"\n     *   BooleanUtils.toString(Boolean.FALSE, \"true\", \"false\", null)  = \"false\"\n     *   BooleanUtils.toString(null, \"true\", \"false\", null)           = null;\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @param trueString  the String to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseString  the String to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @param nullString  the String to return if <code>null</code>,\n     *  may be <code>null</code>\n     * @return one of the three input Strings\n     */\n    public static String toString(Boolean bool, String trueString, String falseString, String nullString);\n    /**\n     * <p>Converts an Integer to a boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false\n     *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true\n     *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false\n     *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true\n     *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseValue  the value to match for <code>false</code>,\n     *  may be <code>null</code>\n     * @return <code>true</code> or <code>false</code>\n     * @throws IllegalArgumentException if no match\n     */\n    public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue);\n    /**\n     * <p>Converts an int to a boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(0, 1, 0) = false\n     *   BooleanUtils.toBoolean(1, 1, 0) = true\n     *   BooleanUtils.toBoolean(2, 1, 2) = false\n     *   BooleanUtils.toBoolean(2, 2, 0) = true\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>\n     * @param falseValue  the value to match for <code>false</code>\n     * @return <code>true</code> or <code>false</code>\n     * @throws IllegalArgumentException if no match\n     */\n    public static boolean toBoolean(int value, int trueValue, int falseValue);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void test_toBoolean_String() {\n        assertEquals(false, BooleanUtils.toBoolean((String) null));\n        assertEquals(false, BooleanUtils.toBoolean(\"\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"oof\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"yep\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"trux\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"false\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"a\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"true\")); // interned handled differently\n        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer(\"tr\").append(\"ue\").toString()));\n        assertEquals(true, BooleanUtils.toBoolean(\"truE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"trUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"trUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRue\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRuE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRuE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRue\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TrUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TrUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TruE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"True\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"on\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"oN\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"On\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"ON\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yes\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yeS\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yEs\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yES\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"Yes\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YeS\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YEs\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YES\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"yes?\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"tru\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\npublic class StringEscapeUtils {\n    /**\n     * <p>Unescapes any Java literals found in the <code>String</code>.\n     * For example, it will turn a sequence of <code>'\\'</code> and\n     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n     * is preceded by another <code>'\\'</code>.</p>\n     * \n     * @param str  the <code>String</code> to unescape, may be null\n     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n     */\n    public static String unescapeJava(String str);\n    /**\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     * \n     * @param out write to receieve the escaped string\n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuote escapes single quotes if <code>true</code>\n     * @throws IOException if an IOException occurs\n     */\n    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException;\n    /**\n     * <p>Escapes the characters in a <code>String</code> using Java String rules to\n     * a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJava(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     */\n    public static void escapeJava(Writer out, String str) throws IOException;\n    /**\n     * <p>Unescapes any Java literals found in the <code>String</code> to a\n     * <code>Writer</code>.</p>\n     *\n     * <p>For example, it will turn a sequence of <code>'\\'</code> and\n     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n     * is preceded by another <code>'\\'</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @param out  the <code>Writer</code> used to output unescaped characters\n     * @param str  the <code>String</code> to unescape, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     */\n    public static void unescapeJava(Writer out, String str) throws IOException;\n    /**\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n     * <p>Escapes any values it finds into their JavaScript String form.\n     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn\\'t say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     */\n    public static String escapeJavaScript(String str);\n    /**\n     * <p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n     *\n     * <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn't say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     */\n    public static String escapeJava(String str);\n    /**\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules\n     * to a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJavaScript(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     **/\n    public static void escapeJavaScript(Writer out, String str) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\npublic class StringEscapeUtils {\n    /**\n     * <p>Unescapes any Java literals found in the <code>String</code>.\n     * For example, it will turn a sequence of <code>'\\'</code> and\n     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n     * is preceded by another <code>'\\'</code>.</p>\n     * \n     * @param str  the <code>String</code> to unescape, may be null\n     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n     */\n    public static String unescapeJava(String str);\n    /**\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     * \n     * @param out write to receieve the escaped string\n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuote escapes single quotes if <code>true</code>\n     * @throws IOException if an IOException occurs\n     */\n    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException;\n    /**\n     * <p>Escapes the characters in a <code>String</code> using Java String rules to\n     * a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJava(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     */\n    public static void escapeJava(Writer out, String str) throws IOException;\n    /**\n     * <p>Unescapes any Java literals found in the <code>String</code> to a\n     * <code>Writer</code>.</p>\n     *\n     * <p>For example, it will turn a sequence of <code>'\\'</code> and\n     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n     * is preceded by another <code>'\\'</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @param out  the <code>Writer</code> used to output unescaped characters\n     * @param str  the <code>String</code> to unescape, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     */\n    public static void unescapeJava(Writer out, String str) throws IOException;\n    /**\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n     * <p>Escapes any values it finds into their JavaScript String form.\n     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn\\'t say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     */\n    public static String escapeJavaScript(String str);\n    /**\n     * <p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n     *\n     * <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn't say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     */\n    public static String escapeJava(String str);\n    /**\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules\n     * to a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJavaScript(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     **/\n    public static void escapeJavaScript(Writer out, String str) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertEscapeJava(String escaped, String original) throws IOException {\n        assertEscapeJava(null, escaped, original);\n    }\n    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n        String converted = StringEscapeUtils.escapeJava(original);\n        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n        assertEquals(message, expected, converted);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.escapeJava(writer, original);\n        assertEquals(expected, writer.toString());\n    }\n    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n        assertUnescapeJava(null, unescaped, original);\n    }\n    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n        String expected = unescaped;\n        String actual = StringEscapeUtils.unescapeJava(original);\n\n        assertEquals(\"unescape(String) failed\" +\n                (message == null ? \"\" : (\": \" + message)) +\n                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n                // we escape this so we can see it in the error message\n                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                expected, actual);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.unescapeJava(writer, original);\n        assertEquals(unescaped, writer.toString());\n\n    }\n    public void testEscapeJavaScript() {\n        assertEquals(null, StringEscapeUtils.escapeJavaScript(null));\n        try {\n            StringEscapeUtils.escapeJavaScript(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.escapeJavaScript(null, \"\");\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeJavaScript(\"He didn't say, \\\"stop!\\\"\"));\n        assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\",  StringEscapeUtils.escapeJavaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>A suite of utilities surrounding the use of the\n * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n *\n * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n * @author Stephen Colebourne\n * @author Janek Bogucki\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @since 2.0\n * @version $Id$\n */\npublic class DateUtils {\n    public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");\n    public static final long MILLIS_PER_SECOND = 1000;\n    public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;\n    public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;\n    public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;\n    public final static int SEMI_MONTH = 1001;\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Calendar truncate(Calendar date, int field);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date round(Date date, int field);\n    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Calendar round(Calendar date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with, either <code>Date</code>\n     *  or <code>Calendar</code>\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date\n     *  is <code>null</code>\n     * @throws ClassCastException if the object type is not a\n     *  <code>Date</code> or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Object date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Date date, int field);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with, either Date or Calendar\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ClassCastException if the object type is not a <code>Date</code>\n     *  or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date round(Object date, int field);\n    /**\n     * Adds to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param calendarField  the calendar field to add to\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     */\n    public static Date add(Date date, int calendarField, int amount);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>A suite of utilities surrounding the use of the\n * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n *\n * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n * @author Stephen Colebourne\n * @author Janek Bogucki\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @since 2.0\n * @version $Id$\n */\npublic class DateUtils {\n    public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");\n    public static final long MILLIS_PER_SECOND = 1000;\n    public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;\n    public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;\n    public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;\n    public final static int SEMI_MONTH = 1001;\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Calendar truncate(Calendar date, int field);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date round(Date date, int field);\n    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Calendar round(Calendar date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with, either <code>Date</code>\n     *  or <code>Calendar</code>\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date\n     *  is <code>null</code>\n     * @throws ClassCastException if the object type is not a\n     *  <code>Date</code> or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Object date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Date date, int field);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with, either Date or Calendar\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ClassCastException if the object type is not a <code>Date</code>\n     *  or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date round(Object date, int field);\n    /**\n     * Adds to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param calendarField  the calendar field to add to\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     */\n    public static Date add(Date date, int calendarField, int amount);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTime(date);\n        assertEquals(year, cal.get(Calendar.YEAR));\n        assertEquals(month, cal.get(Calendar.MONTH));\n        assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));\n        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));\n        assertEquals(min, cal.get(Calendar.MINUTE));\n        assertEquals(sec, cal.get(Calendar.SECOND));\n        assertEquals(mil, cal.get(Calendar.MILLISECOND));\n    }\n    private static void assertWeekIterator(Iterator it, Calendar start) {\n        Calendar end = (Calendar) start.clone();\n        end.add(Calendar.DATE, 6);\n\n        assertWeekIterator(it, start, end);\n    }\n    private static void assertWeekIterator(Iterator it, Date start, Date end) {\n        Calendar calStart = Calendar.getInstance();\n        calStart.setTime(start);\n        Calendar calEnd = Calendar.getInstance();\n        calEnd.setTime(end);\n\n        assertWeekIterator(it, calStart, calEnd);\n    }\n    private static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {\n        Calendar cal = (Calendar) it.next();\n        assertEquals(\"\", start, cal, 0);\n        Calendar last = null;\n        int count = 1;\n        while (it.hasNext()) {\n            //Check this is just a date (no time component)\n            assertEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);\n\n            last = cal;\n            cal = (Calendar) it.next();\n            count++;\n\n            //Check that this is one day more than the last date\n            last.add(Calendar.DATE, 1);\n            assertEquals(\"\", last, cal, 0);\n        }\n        if (count % 7 != 0) {\n            throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");\n        }\n        assertEquals(\"\", end, cal, 0);\n    }\n    private static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {\n            throw new AssertionFailedError(\n                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());\n        }\n    }\n     * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked\n     * by DateUtils.round().\n     */\n    public void testRoundLang346() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        assertEquals(\"Minute Round Up Failed\", dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"), DateUtils.round(date, Calendar.MINUTE));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        assertEquals(\"Minute No Round Failed\", dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"), DateUtils.round(date, Calendar.MINUTE));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        assertEquals(\"Second Round Up with 600 Milli Seconds Failed\", dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"), DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\", dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"), DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Up with 200 Milli Seconds Failed\", dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"), DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\", dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"), DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Down Failed\", dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"), DateUtils.round(date, Calendar.HOUR));\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Up Failed\", dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"), DateUtils.round(date, Calendar.HOUR));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Operations to assist when working with a {@link Locale}.</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code> input.\n * Each method documents its behaviour in more detail.</p>\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\npublic class LocaleUtils {\n    private static final List cAvailableLocaleList;\n    private static Set cAvailableLocaleSet;\n    private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap());\n    private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap());\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str);\n    /**\n     * <p>Obtains the list of countries supported for a given language.</p>\n     * \n     * <p>This method takes a language code and searches to find the\n     * countries available for that language. Variant locales are removed.</p>\n     *\n     * @param languageCode  the 2 letter language code, null returns empty\n     * @return an unmodifiable List of Locale objects, never null\n     */\n    public static List countriesByLanguage(String languageCode);\n    /**\n     * <p>Obtains the list of languages supported for a given country.</p>\n     *\n     * <p>This method takes a country code and searches to find the\n     * languages available for that country. Variant locales are removed.</p>\n     *\n     * @param countryCode  the 2 letter country code, null returns empty\n     * @return an unmodifiable List of Locale objects, never null\n     */\n    public static List languagesByCountry(String countryCode);\n    /**\n     * <p>Obtains the list of locales to search through when performing\n     * a locale search.</p>\n     *\n     * <pre>\n     * localeLookupList(Locale(\"fr\", \"CA\", \"xxx\"), Locale(\"en\"))\n     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\"), Locale(\"en\"]\n     * </pre>\n     *\n     * <p>The result list begins with the most specific locale, then the\n     * next more general and so on, finishing with the default locale.\n     * The list will never contain the same locale twice.</p>\n     *\n     * @param locale  the locale to start from, null returns empty list\n     * @param defaultLocale  the default locale to use if no other is found\n     * @return the unmodifiable list of Locale objects, 0 being locale, never null\n     */\n    public static List localeLookupList(Locale locale, Locale defaultLocale);\n    /**\n     * <p>Obtains the list of locales to search through when performing\n     * a locale search.</p>\n     *\n     * <pre>\n     * localeLookupList(Locale(\"fr\",\"CA\",\"xxx\"))\n     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\")]\n     * </pre>\n     *\n     * @param locale  the locale to start from\n     * @return the unmodifiable list of Locale objects, 0 being locale, never null\n     */\n    public static List localeLookupList(Locale locale);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Operations to assist when working with a {@link Locale}.</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code> input.\n * Each method documents its behaviour in more detail.</p>\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\npublic class LocaleUtils {\n    private static final List cAvailableLocaleList;\n    private static Set cAvailableLocaleSet;\n    private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap());\n    private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap());\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str);\n    /**\n     * <p>Obtains the list of countries supported for a given language.</p>\n     * \n     * <p>This method takes a language code and searches to find the\n     * countries available for that language. Variant locales are removed.</p>\n     *\n     * @param languageCode  the 2 letter language code, null returns empty\n     * @return an unmodifiable List of Locale objects, never null\n     */\n    public static List countriesByLanguage(String languageCode);\n    /**\n     * <p>Obtains the list of languages supported for a given country.</p>\n     *\n     * <p>This method takes a country code and searches to find the\n     * languages available for that country. Variant locales are removed.</p>\n     *\n     * @param countryCode  the 2 letter country code, null returns empty\n     * @return an unmodifiable List of Locale objects, never null\n     */\n    public static List languagesByCountry(String countryCode);\n    /**\n     * <p>Obtains the list of locales to search through when performing\n     * a locale search.</p>\n     *\n     * <pre>\n     * localeLookupList(Locale(\"fr\", \"CA\", \"xxx\"), Locale(\"en\"))\n     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\"), Locale(\"en\"]\n     * </pre>\n     *\n     * <p>The result list begins with the most specific locale, then the\n     * next more general and so on, finishing with the default locale.\n     * The list will never contain the same locale twice.</p>\n     *\n     * @param locale  the locale to start from, null returns empty list\n     * @param defaultLocale  the default locale to use if no other is found\n     * @return the unmodifiable list of Locale objects, 0 being locale, never null\n     */\n    public static List localeLookupList(Locale locale, Locale defaultLocale);\n    /**\n     * <p>Obtains the list of locales to search through when performing\n     * a locale search.</p>\n     *\n     * <pre>\n     * localeLookupList(Locale(\"fr\",\"CA\",\"xxx\"))\n     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\")]\n     * </pre>\n     *\n     * @param locale  the locale to start from\n     * @return the unmodifiable list of Locale objects, 0 being locale, never null\n     */\n    public static List localeLookupList(Locale locale);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertValidToLocale(String language) {\n        Locale locale = LocaleUtils.toLocale(language);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        //country and variant are empty\n        assertTrue(locale.getCountry() == null || locale.getCountry().length() == 0);\n        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n    }\n    private void assertValidToLocale(String localeString, String language, String country) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        //variant is empty\n        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n    }\n    private void assertValidToLocale(\n            String localeString, String language, \n            String country, String variant) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        assertEquals(variant, locale.getVariant());\n        \n    }\n    private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {\n        List localeList = defaultLocale == null ?\n                LocaleUtils.localeLookupList(locale) :\n                LocaleUtils.localeLookupList(locale, defaultLocale);\n        \n        assertEquals(expected.length, localeList.size());\n        assertEquals(Arrays.asList(expected), localeList);\n        assertUnmodifiableCollection(localeList);\n    }\n    private void assertLanguageByCountry(String country, String[] languages) {\n        List list = LocaleUtils.languagesByCountry(country);\n        List list2 = LocaleUtils.languagesByCountry(country);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (int i = 0; i < languages.length; i++) {\n            Iterator iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = (Locale) iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().length() == 0);\n                assertEquals(country, locale.getCountry());\n                if (languages[i].equals(locale.getLanguage())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + languages[i]\n                        + \" for country: \" + country);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }\n    private void assertCountriesByLanguage(String language, String[] countries) {\n        List list = LocaleUtils.countriesByLanguage(language);\n        List list2 = LocaleUtils.countriesByLanguage(language);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (int i = 0; i < countries.length; i++) {\n            Iterator iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = (Locale) iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().length() == 0);\n                assertEquals(language, locale.getLanguage());\n                if (countries[i].equals(locale.getCountry())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + countries[i]\n                        + \" for country: \" + language);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }\n    private static void assertUnmodifiableCollection(Collection coll) {\n        try {\n            coll.add(\"Unmodifiable\");\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }\n    public void testLang328() {\n        assertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p><code>StopWatch</code> provides a convenient API for timings.</p>\n * \n * <p>To start the watch, call {@link #start()}. At this point you can:</p>\n * <ul>\n *  <li>{@link #split()} the watch to get the time whilst the watch continues in the\n *   background. {@link #unsplit()} will remove the effect of the split. At this point,\n *   these three options are available again.</li>\n *  <li>{@link #suspend()} the watch to pause it. {@link #resume()} allows the watch\n *   to continue. Any time between the suspend and resume will not be counted in\n *   the total. At this point, these three options are available again.</li>\n *  <li>{@link #stop()} the watch to complete the timing session.</li>\n * </ul>\n *\n * <p>It is intended that the output methods {@link #toString()} and {@link #getTime()}\n * should only be called after stop, split or suspend, however a suitable result will\n * be returned at other points.</p>\n *\n * <p>NOTE: As from v2.1, the methods protect against inappropriate calls.\n * Thus you cannot now call stop before start, resume before suspend or\n * unsplit before split.</p>\n *\n * <p>1. split(), suspend(), or stop() cannot be invoked twice<br />\n * 2. unsplit() may only be called if the watch has been split()<br />\n * 3. resume() may only be called if the watch has been suspend()<br />\n * 4. start() cannot be called twice without calling reset()</p>\n *\n * @author Stephen Colebourne\n * @since 2.0\n * @version $Id$\n */\npublic class StopWatch {\n    private static final int STATE_UNSTARTED = 0;\n    private static final int STATE_RUNNING   = 1;\n    private static final int STATE_STOPPED   = 2;\n    private static final int STATE_SUSPENDED = 3;\n    private static final int STATE_UNSPLIT = 10;\n    private static final int STATE_SPLIT   = 11;\n    private int runningState = STATE_UNSTARTED;\n    private int splitState   = STATE_UNSPLIT;\n    private long startTime = -1;\n    private long stopTime = -1;\n    /**\n     * <p>Start the stopwatch.</p>\n     * \n     * <p>This method starts a new timing session, clearing any previous values.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is already running.\n     */\n    public void start();\n    /**\n     * <p>Suspend the stopwatch for later resumption.</p>\n     * \n     * <p>This method suspends the watch until it is resumed. The watch will not include\n     * time between the suspend and resume calls in the total time.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not currently running.\n     */\n    public void suspend();\n    /**\n     * <p>Get the time on the stopwatch.</p>\n     * \n     * <p>This is either the time between the start and the moment this method \n     * is called, or the amount of time between start and stop.</p>\n     * \n     * @return the time in milliseconds\n     */\n    public long getTime();\n    /**\n     * <p>Stop the stopwatch.</p>\n     * \n     * <p>This method ends a new timing session, allowing the time to be retrieved.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not running.\n     */\n    public void stop();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p><code>StopWatch</code> provides a convenient API for timings.</p>\n * \n * <p>To start the watch, call {@link #start()}. At this point you can:</p>\n * <ul>\n *  <li>{@link #split()} the watch to get the time whilst the watch continues in the\n *   background. {@link #unsplit()} will remove the effect of the split. At this point,\n *   these three options are available again.</li>\n *  <li>{@link #suspend()} the watch to pause it. {@link #resume()} allows the watch\n *   to continue. Any time between the suspend and resume will not be counted in\n *   the total. At this point, these three options are available again.</li>\n *  <li>{@link #stop()} the watch to complete the timing session.</li>\n * </ul>\n *\n * <p>It is intended that the output methods {@link #toString()} and {@link #getTime()}\n * should only be called after stop, split or suspend, however a suitable result will\n * be returned at other points.</p>\n *\n * <p>NOTE: As from v2.1, the methods protect against inappropriate calls.\n * Thus you cannot now call stop before start, resume before suspend or\n * unsplit before split.</p>\n *\n * <p>1. split(), suspend(), or stop() cannot be invoked twice<br />\n * 2. unsplit() may only be called if the watch has been split()<br />\n * 3. resume() may only be called if the watch has been suspend()<br />\n * 4. start() cannot be called twice without calling reset()</p>\n *\n * @author Stephen Colebourne\n * @since 2.0\n * @version $Id$\n */\npublic class StopWatch {\n    private static final int STATE_UNSTARTED = 0;\n    private static final int STATE_RUNNING   = 1;\n    private static final int STATE_STOPPED   = 2;\n    private static final int STATE_SUSPENDED = 3;\n    private static final int STATE_UNSPLIT = 10;\n    private static final int STATE_SPLIT   = 11;\n    private int runningState = STATE_UNSTARTED;\n    private int splitState   = STATE_UNSPLIT;\n    private long startTime = -1;\n    private long stopTime = -1;\n    /**\n     * <p>Start the stopwatch.</p>\n     * \n     * <p>This method starts a new timing session, clearing any previous values.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is already running.\n     */\n    public void start();\n    /**\n     * <p>Suspend the stopwatch for later resumption.</p>\n     * \n     * <p>This method suspends the watch until it is resumed. The watch will not include\n     * time between the suspend and resume calls in the total time.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not currently running.\n     */\n    public void suspend();\n    /**\n     * <p>Get the time on the stopwatch.</p>\n     * \n     * <p>This is either the time between the start and the moment this method \n     * is called, or the amount of time between start and stop.</p>\n     * \n     * @return the time in milliseconds\n     */\n    public long getTime();\n    /**\n     * <p>Stop the stopwatch.</p>\n     * \n     * <p>This method ends a new timing session, allowing the time to be retrieved.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not running.\n     */\n    public void stop();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLang315() {\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(200);} catch (InterruptedException ex) {}\n        watch.suspend();\n        long suspendTime = watch.getTime();\n            try {Thread.sleep(200);} catch (InterruptedException ex) {}\n        watch.stop();\n        long totalTime = watch.getTime();\n        assertTrue( suspendTime == totalTime );\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n * \n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Stephen Colebourne\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\npublic class FastDateFormat extends Format {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    private static String cDefaultPattern;\n    private static Map cInstanceCache = new HashMap(7);\n    private static Map cDateInstanceCache = new HashMap(7);\n    private static Map cTimeInstanceCache = new HashMap(7);\n    private static Map cDateTimeInstanceCache = new HashMap(7);\n    private static Map cTimeZoneDisplayCache = new HashMap(7);\n    private final String mPattern;\n    private final TimeZone mTimeZone;\n    private final boolean mTimeZoneForced;\n    private final Locale mLocale;\n    private final boolean mLocaleForced;\n    private Rule[] mRules;\n    private int mMaxLengthEstimate;\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone);\n    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     */\n    public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale);\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, Locale locale);\n    /**\n     * <p>Gets a formatter instance using the default pattern in the\n     * default locale.</p>\n     * \n     * @return a date/time formatter\n     */\n    public static FastDateFormat getInstance();\n    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n * \n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Stephen Colebourne\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\npublic class FastDateFormat extends Format {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    private static String cDefaultPattern;\n    private static Map cInstanceCache = new HashMap(7);\n    private static Map cDateInstanceCache = new HashMap(7);\n    private static Map cTimeInstanceCache = new HashMap(7);\n    private static Map cDateTimeInstanceCache = new HashMap(7);\n    private static Map cTimeZoneDisplayCache = new HashMap(7);\n    private final String mPattern;\n    private final TimeZone mTimeZone;\n    private final boolean mTimeZoneForced;\n    private final Locale mLocale;\n    private final boolean mLocaleForced;\n    private Rule[] mRules;\n    private int mMaxLengthEstimate;\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone);\n    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     */\n    public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale);\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, Locale locale);\n    /**\n     * <p>Gets a formatter instance using the default pattern in the\n     * default locale.</p>\n     * \n     * @return a date/time formatter\n     */\n    public static FastDateFormat getInstance();\n    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLang303() {\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n        format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author Stephen Colebourne\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = new Long(0L);\n    public static final Long LONG_ONE = new Long(1L);\n    public static final Long LONG_MINUS_ONE = new Long(-1L);\n    public static final Integer INTEGER_ZERO = new Integer(0);\n    public static final Integer INTEGER_ONE = new Integer(1);\n    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n    public static final Short SHORT_ZERO = new Short((short) 0);\n    public static final Short SHORT_ONE = new Short((short) 1);\n    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n    public static final Byte BYTE_ZERO = new Byte((byte) 0);\n    public static final Byte BYTE_ONE = new Byte((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = new Byte((byte) -1);\n    public static final Double DOUBLE_ZERO = new Double(0.0d);\n    public static final Double DOUBLE_ONE = new Double(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n    public static final Float FLOAT_ZERO = new Float(0.0f);\n    public static final Float FLOAT_ONE = new Float(1.0f);\n    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author Stephen Colebourne\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\npublic class NumberUtils {\n    public static final Long LONG_ZERO = new Long(0L);\n    public static final Long LONG_ONE = new Long(1L);\n    public static final Long LONG_MINUS_ONE = new Long(-1L);\n    public static final Integer INTEGER_ZERO = new Integer(0);\n    public static final Integer INTEGER_ONE = new Integer(1);\n    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n    public static final Short SHORT_ZERO = new Short((short) 0);\n    public static final Short SHORT_ONE = new Short((short) 1);\n    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n    public static final Byte BYTE_ZERO = new Byte((byte) 0);\n    public static final Byte BYTE_ONE = new Byte((byte) 1);\n    public static final Byte BYTE_MINUS_ONE = new Byte((byte) -1);\n    public static final Double DOUBLE_ZERO = new Double(0.0d);\n    public static final Double DOUBLE_ONE = new Double(1.0d);\n    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n    public static final Float FLOAT_ZERO = new Float(0.0f);\n    public static final Float FLOAT_ONE = new Float(1.0f);\n    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n       }\n    }\n    public void testLang300() {\n        NumberUtils.createNumber(\"-1l\");\n        NumberUtils.createNumber(\"01l\");\n        NumberUtils.createNumber(\"1l\");\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\npublic class StrBuilder implements Cloneable {\n    private static final long serialVersionUID = 7628716375283629643L;\n    private String newLine;\n    private String nullText;\n    /**\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>String.valueOf</code> of the <code>int</code> value is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * \n     * @param value  the value to append\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadRight(int value, int width, char padChar);\n    /**\n     * Gets a String version of the string builder, creating a new instance\n     * each time the method is called.\n     * <p>\n     * Note that unlike StringBuffer, the string version returned is\n     * independent of the string builder.\n     *\n     * @return the builder as a String\n     */\n    public String toString();\n    /**\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * If the object is null, null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\npublic class StrBuilder implements Cloneable {\n    private static final long serialVersionUID = 7628716375283629643L;\n    private String newLine;\n    private String nullText;\n    /**\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>String.valueOf</code> of the <code>int</code> value is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * \n     * @param value  the value to append\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadRight(int value, int width, char padChar);\n    /**\n     * Gets a String version of the string builder, creating a new instance\n     * each time the method is called.\n     * <p>\n     * Note that unlike StringBuffer, the string version returned is\n     * independent of the string builder.\n     *\n     * @return the builder as a String\n     */\n    public String toString();\n    /**\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * If the object is null, null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLang299() {\n        StrBuilder sb = new StrBuilder(1);\n        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n        assertEquals(\"f\", sb.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * An API for translating text. \n * Its core use is to escape and unescape text. Because escaping and unescaping \n * is completely contextual, the API does not present two separate signatures.\n * \n * @since 3.0\n * @version $Id$\n */\npublic abstract class CharSequenceTranslator {\n    public abstract int translate(CharSequence input, int index, Writer out) throws IOException;\n    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * An API for translating text. \n * Its core use is to escape and unescape text. Because escaping and unescaping \n * is completely contextual, the API does not present two separate signatures.\n * \n * @since 3.0\n * @version $Id$\n */\npublic abstract class CharSequenceTranslator {\n    public abstract int translate(CharSequence input, int index, Writer out) throws IOException;\n    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void innerTestSplit(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.split(str, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.split(str2, sepStr);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, \"a\", res[0]);\n\n        res = StringUtils.split(str, sepStr, -1);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 0);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.split(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n    private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.splitPreserveAllTokens(str, sepStr);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.splitPreserveAllTokens(str2, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"\", res[0]);\n        assertEquals(msg, \"a\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n\n        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\n        String abcdefghijklmno = \"abcdefghijklmno\";\n        String message = \"abbreviate(String,int,int) failed\";\n        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n        if (offset >= 0 && offset < abcdefghijklmno.length()) {\n            assertTrue(message + \" -- should contain offset character\",\n                    actual.indexOf((char)('a'+offset)) != -1);\n        }\n        assertTrue(message + \" -- should not be greater than maxWidth\",\n                actual.length() <= maxWidth);\n        assertEquals(message, expected, actual);\n    }\n    public void testEscapeSurrogatePairs() throws Exception {\n        assertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n        // Examples from https://en.wikipedia.org/wiki/UTF-16\n        assertEquals(\"\\uD800\\uDC00\", StringEscapeUtils.escapeCsv(\"\\uD800\\uDC00\"));\n        assertEquals(\"\\uD834\\uDD1E\", StringEscapeUtils.escapeCsv(\"\\uD834\\uDD1E\"));\n        assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeCsv(\"\\uDBFF\\uDFFD\"));\n        \n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\npublic class StrBuilder implements Cloneable {\n    private static final long serialVersionUID = 7628716375283629643L;\n    private String newLine;\n    private String nullText;\n    /**\n     * Deletes the character wherever it occurs in the builder.\n     *\n     * @param ch  the character to delete\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(char ch);\n    /**\n     * Checks if the string builder contains a string matched using the\n     * specified matcher.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to search for the character\n     * 'a' followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return true if the matcher finds a match in the builder\n     */\n    public boolean contains(StrMatcher matcher);\n    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @return the first index of the character, or -1 if not found\n     */\n    public int indexOf(char ch);\n    /**\n     * Searches the string builder to find the first reference to the specified string.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str);\n    /**\n     * Extracts some characters from the middle of the string builder without\n     * throwing an exception.\n     * <p>\n     * This method extracts <code>length</code> characters from the builder\n     * at the specified index.\n     * If the index is negative it is treated as zero.\n     * If the index is greater than the builder size, it is treated as the builder size.\n     * If the length is negative, the empty string is returned.\n     * If insufficient characters are available in the builder, as much as possible is returned.\n     * Thus the returned string may be shorter than the length requested.\n     * \n     * @param index  the index to start at, negative means zero\n     * @param length  the number of characters to extract, negative returns empty string\n     * @return the new string\n     */\n    public String midString(int index, int length);\n    /**\n     * Searches the string builder using the matcher to find the first\n     * match searching from the given index.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher, int startIndex);\n    /**\n     * Deletes the first match within the builder using the specified matcher.\n     * <p>\n     * Matchers can be used to perform advanced deletion behaviour.\n     * For example you could write a matcher to delete\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(StrMatcher matcher);\n    /**\n     * Checks if the string builder contains the specified char.\n     *\n     * @param ch  the character to find\n     * @return true if the builder contains the character\n     */\n    public boolean contains(char ch);\n    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex);\n    /**\n     * Deletes the string wherever it occurs in the builder.\n     *\n     * @param str  the string to delete, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(String str);\n    /**\n     * Searches the string builder using the matcher to find the first match.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher);\n    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the character, or -1 if not found\n     */\n    public int indexOf(char ch, int startIndex);\n    /**\n     * Checks if the string builder contains the specified string.\n     *\n     * @param str  the string to find\n     * @return true if the builder contains the string\n     */\n    public boolean contains(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\npublic class StrBuilder implements Cloneable {\n    private static final long serialVersionUID = 7628716375283629643L;\n    private String newLine;\n    private String nullText;\n    /**\n     * Deletes the character wherever it occurs in the builder.\n     *\n     * @param ch  the character to delete\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(char ch);\n    /**\n     * Checks if the string builder contains a string matched using the\n     * specified matcher.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to search for the character\n     * 'a' followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return true if the matcher finds a match in the builder\n     */\n    public boolean contains(StrMatcher matcher);\n    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @return the first index of the character, or -1 if not found\n     */\n    public int indexOf(char ch);\n    /**\n     * Searches the string builder to find the first reference to the specified string.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str);\n    /**\n     * Extracts some characters from the middle of the string builder without\n     * throwing an exception.\n     * <p>\n     * This method extracts <code>length</code> characters from the builder\n     * at the specified index.\n     * If the index is negative it is treated as zero.\n     * If the index is greater than the builder size, it is treated as the builder size.\n     * If the length is negative, the empty string is returned.\n     * If insufficient characters are available in the builder, as much as possible is returned.\n     * Thus the returned string may be shorter than the length requested.\n     * \n     * @param index  the index to start at, negative means zero\n     * @param length  the number of characters to extract, negative returns empty string\n     * @return the new string\n     */\n    public String midString(int index, int length);\n    /**\n     * Searches the string builder using the matcher to find the first\n     * match searching from the given index.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher, int startIndex);\n    /**\n     * Deletes the first match within the builder using the specified matcher.\n     * <p>\n     * Matchers can be used to perform advanced deletion behaviour.\n     * For example you could write a matcher to delete\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(StrMatcher matcher);\n    /**\n     * Checks if the string builder contains the specified char.\n     *\n     * @param ch  the character to find\n     * @return true if the builder contains the character\n     */\n    public boolean contains(char ch);\n    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex);\n    /**\n     * Deletes the string wherever it occurs in the builder.\n     *\n     * @param str  the string to delete, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(String str);\n    /**\n     * Searches the string builder using the matcher to find the first match.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher);\n    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the character, or -1 if not found\n     */\n    public int indexOf(char ch, int startIndex);\n    /**\n     * Checks if the string builder contains the specified string.\n     *\n     * @param str  the string to find\n     * @return true if the builder contains the string\n     */\n    public boolean contains(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testLang295() {\n        StrBuilder sb = new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertFalse( \"The contains(char) method is looking beyond the end of the string\", sb.contains('h'));\n        assertEquals( \"The indexOf(char) method is looking beyond the end of the string\", -1, sb.indexOf('h'));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\npublic class StrBuilder implements Cloneable {\n    private static final long serialVersionUID = 7628716375283629643L;\n    private String newLine;\n    private String nullText;\n    /**\n     * Deletes the character wherever it occurs in the builder.\n     *\n     * @param ch  the character to delete\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(char ch);\n    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @return the first index of the character, or -1 if not found\n     */\n    public int indexOf(char ch);\n    /**\n     * Searches the string builder using the matcher to find the first\n     * match searching from the given index.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher, int startIndex);\n    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex);\n    /**\n     * Deletes the first match within the builder using the specified matcher.\n     * <p>\n     * Matchers can be used to perform advanced deletion behaviour.\n     * For example you could write a matcher to delete\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(StrMatcher matcher);\n    /**\n     * Searches the string builder using the matcher to find the first match.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher);\n    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the character, or -1 if not found\n     */\n    public int indexOf(char ch, int startIndex);\n    /**\n     * Searches the string builder to find the first reference to the specified string.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str);\n    /**\n     * Deletes the string wherever it occurs in the builder.\n     *\n     * @param str  the string to delete, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\npublic class StrBuilder implements Cloneable {\n    private static final long serialVersionUID = 7628716375283629643L;\n    private String newLine;\n    private String nullText;\n    /**\n     * Deletes the character wherever it occurs in the builder.\n     *\n     * @param ch  the character to delete\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(char ch);\n    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @return the first index of the character, or -1 if not found\n     */\n    public int indexOf(char ch);\n    /**\n     * Searches the string builder using the matcher to find the first\n     * match searching from the given index.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher, int startIndex);\n    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex);\n    /**\n     * Deletes the first match within the builder using the specified matcher.\n     * <p>\n     * Matchers can be used to perform advanced deletion behaviour.\n     * For example you could write a matcher to delete\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(StrMatcher matcher);\n    /**\n     * Searches the string builder using the matcher to find the first match.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher);\n    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the character, or -1 if not found\n     */\n    public int indexOf(char ch, int startIndex);\n    /**\n     * Searches the string builder to find the first reference to the specified string.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str);\n    /**\n     * Deletes the string wherever it occurs in the builder.\n     *\n     * @param str  the string to delete, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testIndexOfLang294() {\n        StrBuilder sb = new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertEquals(-1, sb.indexOf(\"three\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Provides HTML and XML entity utilities.</p>\n *\n * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n *\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @since 2.0\n * @version $Id$\n */\nclass Entities {\n    /**\n     * <p>Escapes the characters in the <code>String</code> passed and writes the result\n     * to the <code>Writer</code> passed. </p>\n     * \n     * @param writer The <code>Writer</code> to write the results of the escaping to.\n     *                            Assumed to be a non-null value.\n     * @param str The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException when <code>Writer</code> passed throws the exception from\n     *                                       calls to the {@link Writer#write(int)} methods.\n     *                                       \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException;\n    /**\n     * <p>Unescapes the entities in a <code>String</code>.</p>\n     *\n     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),\n     * unescape(&quot;&amp;foo;&quot;) will return &quot;\\u00A1&quot;</p>\n     *\n     * @param str The <code>String</code> to escape.\n     * @return A new escaped <code>String</code>.\n     */\n    public String unescape(String str);\n    /**\n     * <p>Unescapes the escaped entities in the <code>String</code> passed and\n     * writes the result to the <code>Writer</code> passed.</p>\n     * \n     * @param writer The <code>Writer</code> to write the results to; assumed to be non-null.\n     * @param string The <code>String</code> to write the results to; assumed to be non-null.\n     * @throws IOException when <code>Writer</code> passed throws the exception from\n     *                                       calls to the {@link Writer#write(int)} methods.\n     *                                       \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void unescape(Writer writer, String string) throws IOException;\n    /**\n     * <p>Escapes the characters in a <code>String</code>.</p>\n     *\n     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),\n     * escape(&quot;\\u00A1&quot;) will return &quot;&amp;foo;&quot;</p>\n     *\n     * @param str The <code>String</code> to escape.\n     * @return A new escaped <code>String</code>.\n     */\n    public String escape(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Provides HTML and XML entity utilities.</p>\n *\n * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n *\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @since 2.0\n * @version $Id$\n */\nclass Entities {\n    /**\n     * <p>Escapes the characters in the <code>String</code> passed and writes the result\n     * to the <code>Writer</code> passed. </p>\n     * \n     * @param writer The <code>Writer</code> to write the results of the escaping to.\n     *                            Assumed to be a non-null value.\n     * @param str The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException when <code>Writer</code> passed throws the exception from\n     *                                       calls to the {@link Writer#write(int)} methods.\n     *                                       \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException;\n    /**\n     * <p>Unescapes the entities in a <code>String</code>.</p>\n     *\n     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),\n     * unescape(&quot;&amp;foo;&quot;) will return &quot;\\u00A1&quot;</p>\n     *\n     * @param str The <code>String</code> to escape.\n     * @return A new escaped <code>String</code>.\n     */\n    public String unescape(String str);\n    /**\n     * <p>Unescapes the escaped entities in the <code>String</code> passed and\n     * writes the result to the <code>Writer</code> passed.</p>\n     * \n     * @param writer The <code>Writer</code> to write the results to; assumed to be non-null.\n     * @param string The <code>String</code> to write the results to; assumed to be non-null.\n     * @throws IOException when <code>Writer</code> passed throws the exception from\n     *                                       calls to the {@link Writer#write(int)} methods.\n     *                                       \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void unescape(Writer writer, String string) throws IOException;\n    /**\n     * <p>Escapes the characters in a <code>String</code>.</p>\n     *\n     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),\n     * escape(&quot;\\u00A1&quot;) will return &quot;&amp;foo;&quot;</p>\n     *\n     * @param str The <code>String</code> to escape.\n     * @return A new escaped <code>String</code>.\n     */\n    public String escape(String str);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>{\n    private void doTestEscapeNamedEntity(final String expected, final String entity) throws Exception\n    {\n        assertEquals(expected, entities.escape(entity));\n        StringWriter writer = new StringWriter();\n        entities.escape(writer, entity);\n        assertEquals(expected, writer.toString());\n    }\n    private void doTestUnescapeEntity(final String expected, final String entity) throws Exception\n    {\n        assertEquals(expected, entities.unescape(entity));\n        StringWriter writer = new StringWriter();\n        entities.unescape(writer, entity);\n        assertEquals(expected, writer.toString());\n    }\n    private void checkSomeEntityMap(Entities.EntityMap map) {\n        map.add(\"foo\", 1);\n        assertEquals(1, map.value(\"foo\"));\n        assertEquals(\"foo\", map.name(1));\n        map.add(\"bar\", 2);\n        map.add(\"baz\", 3);\n        assertEquals(3, map.value(\"baz\"));\n        assertEquals(\"baz\", map.name(3));\n    }\n    public void testNumberOverflow() throws Exception {\n        doTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");\n        doTestUnescapeEntity(\"x&#12345678;y\", \"x&#12345678;y\");\n        doTestUnescapeEntity(\"&#x12345678;\", \"&#x12345678;\");\n        doTestUnescapeEntity(\"x&#x12345678;y\", \"x&#x12345678;y\");\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Duration formatting utilities and constants. The following table describes the tokens \n * used in the pattern language for formatting. </p>\n * <table border=\"1\">\n *  <tr><th>character</th><th>duration element</th></tr>\n *  <tr><td>y</td><td>years</td></tr>\n *  <tr><td>M</td><td>months</td></tr>\n *  <tr><td>d</td><td>days</td></tr>\n *  <tr><td>H</td><td>hours</td></tr>\n *  <tr><td>m</td><td>minutes</td></tr>\n *  <tr><td>s</td><td>seconds</td></tr>\n *  <tr><td>S</td><td>milliseconds</td></tr>\n * </table>\n *\n * @author Apache Ant - DateUtils\n * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n * @author Stephen Colebourne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Henri Yandell\n * @since 2.1\n * @version $Id$\n */\npublic class DurationFormatUtils {\n    /**\n     * <p>Formats the time gap as a string, using the specified format.\n     * Padding the left hand side of numbers with zeroes is optional.\n     * \n     * @param startMillis  the start of the duration\n     * @param endMillis  the end of the duration\n     * @param format  the way in which to format the duration\n     * @return the time as a String\n     */\n    public static String formatPeriod(long startMillis, long endMillis, String format);\n    /**\n     * <p>The internal method to do the formatting.</p>\n     * \n     * @param tokens  the tokens\n     * @param years  the number of years\n     * @param months  the number of months\n     * @param days  the number of days\n     * @param hours  the number of hours\n     * @param minutes  the number of minutes\n     * @param seconds  the number of seconds\n     * @param milliseconds  the number of millis\n     * @param padWithZeros  whether to pad\n     * @return the formetted string\n     */\n    static String format(Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds,\n            int milliseconds, boolean padWithZeros);\n    /**\n     * <p>Formats the time gap as a string, using the specified format.\n     * Padding the left hand side of numbers with zeroes is optional and \n     * the timezone may be specified. \n     * \n     * @param startMillis  the start of the duration\n     * @param endMillis  the end of the duration\n     * @param format  the way in which to format the duration\n     * @param padWithZeros whether to pad the left hand side of numbers with 0's\n     * @param timezone the millis are defined in\n     * @return the time as a String\n     */\n    public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, \n            TimeZone timezone);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Duration formatting utilities and constants. The following table describes the tokens \n * used in the pattern language for formatting. </p>\n * <table border=\"1\">\n *  <tr><th>character</th><th>duration element</th></tr>\n *  <tr><td>y</td><td>years</td></tr>\n *  <tr><td>M</td><td>months</td></tr>\n *  <tr><td>d</td><td>days</td></tr>\n *  <tr><td>H</td><td>hours</td></tr>\n *  <tr><td>m</td><td>minutes</td></tr>\n *  <tr><td>s</td><td>seconds</td></tr>\n *  <tr><td>S</td><td>milliseconds</td></tr>\n * </table>\n *\n * @author Apache Ant - DateUtils\n * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n * @author Stephen Colebourne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Henri Yandell\n * @since 2.1\n * @version $Id$\n */\npublic class DurationFormatUtils {\n    /**\n     * <p>Formats the time gap as a string, using the specified format.\n     * Padding the left hand side of numbers with zeroes is optional.\n     * \n     * @param startMillis  the start of the duration\n     * @param endMillis  the end of the duration\n     * @param format  the way in which to format the duration\n     * @return the time as a String\n     */\n    public static String formatPeriod(long startMillis, long endMillis, String format);\n    /**\n     * <p>The internal method to do the formatting.</p>\n     * \n     * @param tokens  the tokens\n     * @param years  the number of years\n     * @param months  the number of months\n     * @param days  the number of days\n     * @param hours  the number of hours\n     * @param minutes  the number of minutes\n     * @param seconds  the number of seconds\n     * @param milliseconds  the number of millis\n     * @param padWithZeros  whether to pad\n     * @return the formetted string\n     */\n    static String format(Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds,\n            int milliseconds, boolean padWithZeros);\n    /**\n     * <p>Formats the time gap as a string, using the specified format.\n     * Padding the left hand side of numbers with zeroes is optional and \n     * the timezone may be specified. \n     * \n     * @param startMillis  the start of the duration\n     * @param endMillis  the end of the duration\n     * @param format  the way in which to format the duration\n     * @param padWithZeros whether to pad the left hand side of numbers with 0's\n     * @param timezone the millis are defined in\n     * @return the time as a String\n     */\n    public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, \n            TimeZone timezone);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertArrayEquals(DurationFormatUtils.Token[] obj1, DurationFormatUtils.Token[] obj2) {\n        assertEquals(\"Arrays are unequal length. \", obj1.length, obj2.length);\n        for (int i = 0; i < obj1.length; i++) {\n            assertTrue(\"Index \" + i + \" not equal, \" + obj1[i] + \" vs \" + obj2, obj1[i].equals(obj2[i]));\n        }\n    }\n    public void testJiraLang281() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(Calendar.MONTH, Calendar.DECEMBER);\n        cal.set(Calendar.DAY_OF_MONTH, 31);\n        cal.set(Calendar.YEAR, 2005);\n        cal.set(Calendar.HOUR_OF_DAY, 0);\n        cal.set(Calendar.MINUTE, 0);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n\n        Calendar cal2 = Calendar.getInstance();\n        cal2.set(Calendar.MONTH, Calendar.OCTOBER);\n        cal2.set(Calendar.DAY_OF_MONTH, 6);\n        cal2.set(Calendar.YEAR, 2006);\n        cal2.set(Calendar.HOUR_OF_DAY, 0);\n        cal2.set(Calendar.MINUTE, 0);\n        cal2.set(Calendar.SECOND, 0);\n        cal2.set(Calendar.MILLISECOND, 0);\n        String result = DurationFormatUtils.formatPeriod(cal.getTime().getTime(), cal2.getTime().getTime(), \"MM\");\n        assertEquals(\"09\", result);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>Abstract superclass for type-safe enums with integer values suitable\n * for use in <code>switch</code> statements.</p>\n *\n * <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing\n * <code>Enum</code> objects should always be done using the equals() method,\n * not <code>==</code>. The equals() method will try <code>==</code> first so\n * in most cases the effect is the same.</p>\n *\n * <p>To use this class, it must be subclassed. For example:</p>\n *\n * <pre>\n * public final class JavaVersionEnum extends ValuedEnum {\n *   //standard enums for version of JVM\n *   public static final int  JAVA1_0_VALUE  = 100;\n *   public static final int  JAVA1_1_VALUE  = 110;\n *   public static final int  JAVA1_2_VALUE  = 120;\n *   public static final int  JAVA1_3_VALUE  = 130;\n *   public static final JavaVersionEnum  JAVA1_0  = new JavaVersionEnum( \"Java 1.0\", JAVA1_0_VALUE );\n *   public static final JavaVersionEnum  JAVA1_1  = new JavaVersionEnum( \"Java 1.1\", JAVA1_1_VALUE );\n *   public static final JavaVersionEnum  JAVA1_2  = new JavaVersionEnum( \"Java 1.2\", JAVA1_2_VALUE );\n *   public static final JavaVersionEnum  JAVA1_3  = new JavaVersionEnum( \"Java 1.3\", JAVA1_3_VALUE );\n *\n *   private JavaVersionEnum(String name, int value) {\n *     super( name, value );\n *   }\n * \n *   public static JavaVersionEnum getEnum(String javaVersion) {\n *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n *   }\n * \n *   public static JavaVersionEnum getEnum(int javaVersion) {\n *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n *   }\n * \n *   public static Map getEnumMap() {\n *     return getEnumMap(JavaVersionEnum.class);\n *   }\n * \n *   public static List getEnumList() {\n *     return getEnumList(JavaVersionEnum.class);\n *   }\n * \n *   public static Iterator iterator() {\n *     return iterator(JavaVersionEnum.class);\n *   }\n * }\n * </pre>\n *\n * <p><em>NOTE:</em>These are declared <code>final</code>, so compilers may \n * inline the code. Ensure you recompile everything when using final. </p>\n *\n * <p>The above class could then be used as follows:</p>\n *\n * <pre>\n * public void doSomething(JavaVersion ver) {\n *   switch (ver.getValue()) {\n *     case JAVA1_0_VALUE:\n *       // ...\n *       break;\n *     case JAVA1_1_VALUE:\n *       // ...\n *       break;\n *     //...\n *   }\n * }\n * </pre>\n *\n * <p>As shown, each enum has a name and a value. These can be accessed using\n * <code>getName</code> and <code>getValue</code>.</p>\n *\n * <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.\n * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n * An alternative choice is to use the {@link EnumUtils} class.</p>\n *\n * @author Apache Avalon project\n * @author Stephen Colebourne\n * @since 2.1 (class existed in enum package from v1.0)\n * @version $Id$\n */\npublic abstract class ValuedEnum extends Enum {\n    private static final long serialVersionUID = -7129650521543789085L;\n    private final int iValue;\n    /**\n     * <p>Get value of enum item.</p>\n     *\n     * @return the enum item's value.\n     */\n    public final int getValue();\n    public int compareTo(Object other);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>Abstract superclass for type-safe enums with integer values suitable\n * for use in <code>switch</code> statements.</p>\n *\n * <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing\n * <code>Enum</code> objects should always be done using the equals() method,\n * not <code>==</code>. The equals() method will try <code>==</code> first so\n * in most cases the effect is the same.</p>\n *\n * <p>To use this class, it must be subclassed. For example:</p>\n *\n * <pre>\n * public final class JavaVersionEnum extends ValuedEnum {\n *   //standard enums for version of JVM\n *   public static final int  JAVA1_0_VALUE  = 100;\n *   public static final int  JAVA1_1_VALUE  = 110;\n *   public static final int  JAVA1_2_VALUE  = 120;\n *   public static final int  JAVA1_3_VALUE  = 130;\n *   public static final JavaVersionEnum  JAVA1_0  = new JavaVersionEnum( \"Java 1.0\", JAVA1_0_VALUE );\n *   public static final JavaVersionEnum  JAVA1_1  = new JavaVersionEnum( \"Java 1.1\", JAVA1_1_VALUE );\n *   public static final JavaVersionEnum  JAVA1_2  = new JavaVersionEnum( \"Java 1.2\", JAVA1_2_VALUE );\n *   public static final JavaVersionEnum  JAVA1_3  = new JavaVersionEnum( \"Java 1.3\", JAVA1_3_VALUE );\n *\n *   private JavaVersionEnum(String name, int value) {\n *     super( name, value );\n *   }\n * \n *   public static JavaVersionEnum getEnum(String javaVersion) {\n *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n *   }\n * \n *   public static JavaVersionEnum getEnum(int javaVersion) {\n *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n *   }\n * \n *   public static Map getEnumMap() {\n *     return getEnumMap(JavaVersionEnum.class);\n *   }\n * \n *   public static List getEnumList() {\n *     return getEnumList(JavaVersionEnum.class);\n *   }\n * \n *   public static Iterator iterator() {\n *     return iterator(JavaVersionEnum.class);\n *   }\n * }\n * </pre>\n *\n * <p><em>NOTE:</em>These are declared <code>final</code>, so compilers may \n * inline the code. Ensure you recompile everything when using final. </p>\n *\n * <p>The above class could then be used as follows:</p>\n *\n * <pre>\n * public void doSomething(JavaVersion ver) {\n *   switch (ver.getValue()) {\n *     case JAVA1_0_VALUE:\n *       // ...\n *       break;\n *     case JAVA1_1_VALUE:\n *       // ...\n *       break;\n *     //...\n *   }\n * }\n * </pre>\n *\n * <p>As shown, each enum has a name and a value. These can be accessed using\n * <code>getName</code> and <code>getValue</code>.</p>\n *\n * <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.\n * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n * An alternative choice is to use the {@link EnumUtils} class.</p>\n *\n * @author Apache Avalon project\n * @author Stephen Colebourne\n * @since 2.1 (class existed in enum package from v1.0)\n * @version $Id$\n */\npublic abstract class ValuedEnum extends Enum {\n    private static final long serialVersionUID = -7129650521543789085L;\n    private final int iValue;\n    /**\n     * <p>Get value of enum item.</p>\n     *\n     * @return the enum item's value.\n     */\n    public final int getValue();\n    public int compareTo(Object other);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n * @version $Id$\n */\npublic final class ValuedEnumTest extends TestCase {\n    public void testCompareTo_otherEnumType() {\n        try {\n            ValuedColorEnum.BLUE.compareTo(ValuedLanguageEnum.ENGLISH);\n            fail();\n        } catch (ClassCastException ex) {\n            // expected\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>A suite of utilities surrounding the use of the\n * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n *\n * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n * @author Stephen Colebourne\n * @author Janek Bogucki\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @since 2.0\n * @version $Id$\n */\npublic class DateUtils {\n    public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");\n    public static final long MILLIS_PER_SECOND = 1000;\n    public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;\n    public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;\n    public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;\n    public final static int SEMI_MONTH = 1001;\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with, either <code>Date</code>\n     *  or <code>Calendar</code>\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date\n     *  is <code>null</code>\n     * @throws ClassCastException if the object type is not a\n     *  <code>Date</code> or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Object date, int field);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date round(Date date, int field);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Calendar round(Calendar date, int field);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with, either Date or Calendar\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ClassCastException if the object type is not a <code>Date</code>\n     *  or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date round(Object date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Calendar truncate(Calendar date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Date date, int field);\n    /**\n     * Adds to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param calendarField  the calendar field to add to\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     */\n    public static Date add(Date date, int calendarField, int amount);\n    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>A suite of utilities surrounding the use of the\n * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n *\n * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n * @author Stephen Colebourne\n * @author Janek Bogucki\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @since 2.0\n * @version $Id$\n */\npublic class DateUtils {\n    public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");\n    public static final long MILLIS_PER_SECOND = 1000;\n    public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;\n    public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;\n    public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;\n    public final static int SEMI_MONTH = 1001;\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with, either <code>Date</code>\n     *  or <code>Calendar</code>\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date\n     *  is <code>null</code>\n     * @throws ClassCastException if the object type is not a\n     *  <code>Date</code> or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Object date, int field);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date round(Date date, int field);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Calendar round(Calendar date, int field);\n    /**\n     * <p>Round this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if this was passed with HOUR, it would return\n     * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n     * would return 1 April 2002 0:00:00.000.</p>\n     * \n     * <p>For a date in a timezone that handles the change to daylight\n     * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\n     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n     * date that crosses this time would produce the following values:\n     * <ul>\n     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n     * </ul>\n     * </p>\n     * \n     * @param date  the date to work with, either Date or Calendar\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ClassCastException if the object type is not a <code>Date</code>\n     *  or <code>Calendar</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date round(Object date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date (a different object)\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Calendar truncate(Calendar date, int field);\n    /**\n     * <p>Truncate this date, leaving the field specified as the most\n     * significant field.</p>\n     *\n     * <p>For example, if you had the datetime of 28 Mar 2002\n     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n     * return 1 Mar 2002 0:00:00.000.</p>\n     * \n     * @param date  the date to work with\n     * @param field  the field from <code>Calendar</code>\n     *  or <code>SEMI_MONTH</code>\n     * @return the rounded date\n     * @throws IllegalArgumentException if the date is <code>null</code>\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    public static Date truncate(Date date, int field);\n    /**\n     * Adds to a date returning a new object.\n     * The original date object is unchanged.\n     *\n     * @param date  the date, not null\n     * @param calendarField  the calendar field to add to\n     * @param amount  the amount to add, may be negative\n     * @return the new date object with the amount added\n     * @throws IllegalArgumentException if the date is null\n     */\n    public static Date add(Date date, int calendarField, int amount);\n    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTime(date);\n        assertEquals(year, cal.get(Calendar.YEAR));\n        assertEquals(month, cal.get(Calendar.MONTH));\n        assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));\n        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));\n        assertEquals(min, cal.get(Calendar.MINUTE));\n        assertEquals(sec, cal.get(Calendar.SECOND));\n        assertEquals(mil, cal.get(Calendar.MILLISECOND));\n    }\n    private static void assertWeekIterator(Iterator it, Calendar start) {\n        Calendar end = (Calendar) start.clone();\n        end.add(Calendar.DATE, 6);\n\n        assertWeekIterator(it, start, end);\n    }\n    private static void assertWeekIterator(Iterator it, Date start, Date end) {\n        Calendar calStart = Calendar.getInstance();\n        calStart.setTime(start);\n        Calendar calEnd = Calendar.getInstance();\n        calEnd.setTime(end);\n\n        assertWeekIterator(it, calStart, calEnd);\n    }\n    private static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {\n        Calendar cal = (Calendar) it.next();\n        assertEquals(\"\", start, cal, 0);\n        Calendar last = null;\n        int count = 1;\n        while (it.hasNext()) {\n            //Check this is just a date (no time component)\n            assertEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);\n\n            last = cal;\n            cal = (Calendar) it.next();\n            count++;\n\n            //Check that this is one day more than the last date\n            last.add(Calendar.DATE, 1);\n            assertEquals(\"\", last, cal, 0);\n        }\n        if (count % 7 != 0) {\n            throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");\n        }\n        assertEquals(\"\", end, cal, 0);\n    }\n    private static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {\n            throw new AssertionFailedError(\n                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());\n        }\n    }\n    public void testTruncateLang59() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));\n        assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));\n        assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));\n        assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));\n        assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);\n\n        // ---------- Test Truncate ----------\n        assertEquals(\"Truncate Calendar.MILLISECOND\", oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n        assertEquals(\"Truncate Calendar.SECOND\", oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n        assertEquals(\"Truncate Calendar.MINUTE\", oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n        assertEquals(\"Truncate Calendar.HOUR\", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n        assertEquals(\"Truncate Calendar.DATE\", oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));\n\n\n        // ---------- Test Round (down) ----------\n        assertEquals(\"Round Calendar.MILLISECOND\", oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n        assertEquals(\"Round Calendar.SECOND\", oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n        assertEquals(\"Round Calendar.MINUTE\", oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n        assertEquals(\"Round Calendar.HOUR_OF_DAY\", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n        assertEquals(\"Round Calendar.HOUR\", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n        assertEquals(\"Round Calendar.DATE\", oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>FastDatePrinter is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * {@code SimpleDateFormat} in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * {@code SimpleDateFormat} is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones and some year patterns - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern {@code 'ZZ'} has been made to represent\n * ISO8601 full format time zones (eg. {@code +08:00} or {@code -11:00}).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * <p>Javadoc cites for the year pattern: <i>For formatting, if the number of\n * pattern letters is 2, the year is truncated to 2 digits; otherwise it is\n * interpreted as a number.</i> Starting with Java 1.7 a pattern of 'Y' or\n * 'YYY' will be formatted as '2003', while it was '03' in former Java\n * versions. FastDatePrinter implements the behavior of Java 7.</p>\n *\n * @since 3.2\n */\npublic class FastDatePrinter implements DatePrinter, Serializable {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    private final String mPattern;\n    private final TimeZone mTimeZone;\n    private final Locale mLocale;\n    private transient Rule[] mRules;\n    private transient int mMaxLengthEstimate;\n    /**\n     * <p>Formats a {@code Date}, {@code Calendar} or\n     * {@code Long} (milliseconds) object.</p>\n     *\n     * @param obj  the object to format\n     * @param toAppendTo  the buffer to append to\n     * @param pos  the position - ignored\n     * @return the buffer passed in\n     */\n    @Override\n    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar)\n     */\n    @Override\n    public String format(Calendar calendar);\n    /**\n     * <p>Compares two objects for equality.</p>\n     *\n     * @param obj  the object to compare to\n     * @return {@code true} if equal\n     */\n    @Override\n    public boolean equals(Object obj);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(long)\n     */\n    @Override\n    public String format(long millis);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar, java.lang.StringBuffer)\n     */\n    @Override\n    public StringBuffer format(Calendar calendar, StringBuffer buf);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date)\n     */\n    @Override\n    public String format(Date date);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#getTimeZone()\n     */\n    @Override\n    public TimeZone getTimeZone();\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date, java.lang.StringBuffer)\n     */\n    @Override\n    public StringBuffer format(Date date, StringBuffer buf);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(long, java.lang.StringBuffer)\n     */\n    @Override\n    public StringBuffer format(long millis, StringBuffer buf);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>FastDatePrinter is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * {@code SimpleDateFormat} in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * {@code SimpleDateFormat} is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones and some year patterns - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern {@code 'ZZ'} has been made to represent\n * ISO8601 full format time zones (eg. {@code +08:00} or {@code -11:00}).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * <p>Javadoc cites for the year pattern: <i>For formatting, if the number of\n * pattern letters is 2, the year is truncated to 2 digits; otherwise it is\n * interpreted as a number.</i> Starting with Java 1.7 a pattern of 'Y' or\n * 'YYY' will be formatted as '2003', while it was '03' in former Java\n * versions. FastDatePrinter implements the behavior of Java 7.</p>\n *\n * @since 3.2\n */\npublic class FastDatePrinter implements DatePrinter, Serializable {\n    private static final long serialVersionUID = 1L;\n    public static final int FULL = DateFormat.FULL;\n    public static final int LONG = DateFormat.LONG;\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    public static final int SHORT = DateFormat.SHORT;\n    private final String mPattern;\n    private final TimeZone mTimeZone;\n    private final Locale mLocale;\n    private transient Rule[] mRules;\n    private transient int mMaxLengthEstimate;\n    /**\n     * <p>Formats a {@code Date}, {@code Calendar} or\n     * {@code Long} (milliseconds) object.</p>\n     *\n     * @param obj  the object to format\n     * @param toAppendTo  the buffer to append to\n     * @param pos  the position - ignored\n     * @return the buffer passed in\n     */\n    @Override\n    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar)\n     */\n    @Override\n    public String format(Calendar calendar);\n    /**\n     * <p>Compares two objects for equality.</p>\n     *\n     * @param obj  the object to compare to\n     * @return {@code true} if equal\n     */\n    @Override\n    public boolean equals(Object obj);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(long)\n     */\n    @Override\n    public String format(long millis);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar, java.lang.StringBuffer)\n     */\n    @Override\n    public StringBuffer format(Calendar calendar, StringBuffer buf);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date)\n     */\n    @Override\n    public String format(Date date);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#getTimeZone()\n     */\n    @Override\n    public TimeZone getTimeZone();\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date, java.lang.StringBuffer)\n     */\n    @Override\n    public StringBuffer format(Date date, StringBuffer buf);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DatePrinter#format(long, java.lang.StringBuffer)\n     */\n    @Override\n    public StringBuffer format(long millis, StringBuffer buf);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private DatePrinter getDateInstance(int dateStyle, Locale locale) {\n        return getInstance(FormatCache.getPatternForStyle(dateStyle, null, locale), TimeZone.getDefault(), Locale.getDefault());\n    }\n    private DatePrinter getInstance(String format, Locale locale) {\n        return getInstance(format, TimeZone.getDefault(), locale);\n    }\n    private DatePrinter getInstance(String format, TimeZone timeZone) {\n        return getInstance(format, timeZone, Locale.getDefault());\n    }\n    public void testCalendarTimezoneRespected() {\n        String[] availableZones = TimeZone.getAvailableIDs();\n        TimeZone currentZone = TimeZone.getDefault();\n        \n        TimeZone anotherZone = null;\n        for (String zone : availableZones) {\n            if (!zone.equals(currentZone.getID())) {\n                anotherZone = TimeZone.getTimeZone(zone);\n            }\n        }\n        \n        assertNotNull(\"Cannot find another timezone\", anotherZone);\n        \n        final String pattern = \"h:mma z\";\n        final Calendar cal = Calendar.getInstance(anotherZone);\n        \n        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n        sdf.setTimeZone(anotherZone);\n        String expectedValue = sdf.format(cal.getTime());\n        String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n        assertEquals(expectedValue, actualValue);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>FastDateParser is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement for\n * <code>SimpleDateFormat</code> in most parsing situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the\n * <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4228335\">bug</a>/RFE.\n * </p>\n *\n * <p>Only parsing is supported, but all patterns are compatible with\n * SimpleDateFormat.</p>\n *\n * <p>Timing tests indicate this class is as about as fast as SimpleDateFormat\n * in single thread applications and about 25% faster in multi-thread applications.</p>\n *\n * <p>Note that the code only handles Gregorian calendars. The following non-Gregorian\n * calendars use SimpleDateFormat internally, and so will be slower:\n * <ul>\n * <li>ja_JP_TH - Japanese Imperial</li>\n * <li>th_TH (any variant) - Thai Buddhist</li>\n * </ul>\n * </p>\n * @since 3.2\n */\npublic class FastDateParser implements DateParser, Serializable {\n    private static final long serialVersionUID = 1L;\n    private final String pattern;\n    private final TimeZone timeZone;\n    private final Locale locale;\n    private transient Pattern parsePattern;\n    private transient Strategy[] strategies;\n    private transient int thisYear;\n    private transient ConcurrentMap<Integer, KeyValue[]> nameValues;\n    private transient String currentFormatField;\n    private transient Strategy nextStrategy;\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#getTimeZone()\n     */\n    @Override\n    public TimeZone getTimeZone();\n    /**\n     * Initialize derived fields from defining fields.\n     * This is called from constructor and from readObject (de-serialization)\n     */\n    private void init();\n    /**\n     * <p>Compare another object for equality with this object.</p>\n     *\n     * @param obj  the object to compare to\n     * @return <code>true</code>if equal to this instance\n     */\n    @Override\n    public boolean equals(Object obj);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String)\n     */\n    @Override\n    public Date parse(String source) throws ParseException;\n    /**\n     * <p>Get a string version of this formatter.</p>\n     *\n     * @return a debugging string\n     */\n    @Override\n    public String toString();\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String, java.text.ParsePosition)\n     */\n    @Override\n    public Date parse(String source, ParsePosition pos);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>FastDateParser is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement for\n * <code>SimpleDateFormat</code> in most parsing situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the\n * <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4228335\">bug</a>/RFE.\n * </p>\n *\n * <p>Only parsing is supported, but all patterns are compatible with\n * SimpleDateFormat.</p>\n *\n * <p>Timing tests indicate this class is as about as fast as SimpleDateFormat\n * in single thread applications and about 25% faster in multi-thread applications.</p>\n *\n * <p>Note that the code only handles Gregorian calendars. The following non-Gregorian\n * calendars use SimpleDateFormat internally, and so will be slower:\n * <ul>\n * <li>ja_JP_TH - Japanese Imperial</li>\n * <li>th_TH (any variant) - Thai Buddhist</li>\n * </ul>\n * </p>\n * @since 3.2\n */\npublic class FastDateParser implements DateParser, Serializable {\n    private static final long serialVersionUID = 1L;\n    private final String pattern;\n    private final TimeZone timeZone;\n    private final Locale locale;\n    private transient Pattern parsePattern;\n    private transient Strategy[] strategies;\n    private transient int thisYear;\n    private transient ConcurrentMap<Integer, KeyValue[]> nameValues;\n    private transient String currentFormatField;\n    private transient Strategy nextStrategy;\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#getTimeZone()\n     */\n    @Override\n    public TimeZone getTimeZone();\n    /**\n     * Initialize derived fields from defining fields.\n     * This is called from constructor and from readObject (de-serialization)\n     */\n    private void init();\n    /**\n     * <p>Compare another object for equality with this object.</p>\n     *\n     * @param obj  the object to compare to\n     * @return <code>true</code>if equal to this instance\n     */\n    @Override\n    public boolean equals(Object obj);\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String)\n     */\n    @Override\n    public Date parse(String source) throws ParseException;\n    /**\n     * <p>Get a string version of this formatter.</p>\n     *\n     * @return a debugging string\n     */\n    @Override\n    public String toString();\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String, java.text.ParsePosition)\n     */\n    @Override\n    public Date parse(String source, ParsePosition pos);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private DateParser getDateInstance(int dateStyle, Locale locale) {\n        return getInstance(FormatCache.getPatternForStyle(Integer.valueOf(dateStyle), null, locale), TimeZone.getDefault(), Locale.getDefault());\n    }\n    private DateParser getInstance(String format, Locale locale) {\n        return getInstance(format, TimeZone.getDefault(), locale);\n    }\n    private DateParser getInstance(String format, TimeZone timeZone) {\n        return getInstance(format, timeZone, Locale.getDefault());\n    }\n    private void testLocales(String format, boolean eraBC) throws Exception {\n\n        Calendar cal= Calendar.getInstance(GMT);\n        cal.clear();\n        cal.set(2003, 1, 10);\n        if (eraBC) {\n            cal.set(Calendar.ERA, GregorianCalendar.BC);\n        }\n        for(Locale locale : Locale.getAvailableLocales()) {\n            // ja_JP_JP cannot handle dates before 1868 properly\n            if (eraBC && locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {\n                continue;\n            }\n            SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n            DateParser fdf = getInstance(format, locale);\n\n            try {\n                checkParse(locale, cal, sdf, fdf);\n            } catch(ParseException ex) {\n                Assert.fail(\"Locale \"+locale+ \" failed with \"+format+\" era \"+(eraBC?\"BC\":\"AD\")+\"\\n\" + trimMessage(ex.toString()));\n            }\n        }\n    }\n    private String trimMessage(String msg) {\n        if (msg.length() < 100) {\n            return msg;\n        }\n        int gmt = msg.indexOf(\"(GMT\");\n        if (gmt > 0) {\n            return msg.substring(0, gmt+4)+\"...)\";\n        }\n        return msg.substring(0, 100)+\"...\";\n    }\n    private void checkParse(Locale locale, Calendar cal, SimpleDateFormat sdf, DateParser fdf) throws ParseException {\n        String formattedDate= sdf.format(cal.getTime());\n        Date expectedTime = sdf.parse(formattedDate);\n        Date actualTime = fdf.parse(formattedDate);\n        assertEquals(locale.toString()+\" \"+formattedDate\n                +\"\\n\",expectedTime, actualTime);\n    }\n    private void testSdfAndFdp(String format, String date, boolean shouldFail)\n            throws Exception {\n        Date dfdp = null;\n        Date dsdf = null;\n        Throwable f = null;\n        Throwable s = null;\n\n        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.US);\n            sdf.setTimeZone(NEW_YORK);\n            dsdf = sdf.parse(date);\n            if (shouldFail) {\n                Assert.fail(\"Expected SDF failure, but got \" + dsdf + \" for [\"+format+\",\"+date+\"]\");\n            }\n        } catch (Exception e) {\n            s = e;\n            if (!shouldFail) {\n                throw e;\n            }\n//            System.out.println(\"sdf:\"+format+\"/\"+date+\"=>\"+e);\n        }\n\n        try {\n            DateParser fdp = getInstance(format, NEW_YORK, Locale.US);\n            dfdp = fdp.parse(date);\n            if (shouldFail) {\n                Assert.fail(\"Expected FDF failure, but got \" + dfdp + \" for [\"+format+\",\"+date+\"] using \"+((FastDateParser)fdp).getParsePattern());\n            }\n        } catch (Exception e) {\n            f = e;\n            if (!shouldFail) {\n                throw e;\n            }\n//            System.out.println(\"fdf:\"+format+\"/\"+date+\"=>\"+e);\n        }\n        // SDF and FDF should produce equivalent results\n        assertTrue(\"Should both or neither throw Exceptions\", (f==null)==(s==null));\n        assertEquals(\"Parsed dates should be equal\", dsdf, dfdp);\n    }\n    public void testLANG_832() throws Exception {\n        testSdfAndFdp(\"'d'd\" ,\"d3\", false); // OK\n        testSdfAndFdp(\"'d'd'\",\"d3\", true); // should fail (unterminated quote)\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a rational number without any overflow. This class is\n * immutable.\n *\n * @version $Id$\n * @since 2.0\n */\npublic class BigFraction\n    extends Number\n    implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable {\n    public static final BigFraction TWO = new BigFraction(2);\n    public static final BigFraction ONE = new BigFraction(1);\n    public static final BigFraction ZERO = new BigFraction(0);\n    public static final BigFraction MINUS_ONE = new BigFraction(-1);\n    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);\n    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);\n    public static final BigFraction ONE_HALF = new BigFraction(1, 2);\n    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);\n    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);\n    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);\n    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);\n    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);\n    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);\n    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);\n    private static final long serialVersionUID = -5630213147331578515L;\n    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);\n    private final BigInteger numerator;\n    private final BigInteger denominator;\n    /**\n     * <p>\n     * Access the denominator as a <tt>long</tt>.\n     * </p>\n     *\n     * @return the denominator as a <tt>long</tt>.\n     */\n    public long getDenominatorAsLong();\n    /**\n     * <p>\n     * Access the denominator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the denominator as a <tt>int</tt>.\n     */\n    public int getDenominatorAsInt();\n    /**\n     * <p>\n     * Access the numerator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>int</tt>.\n     */\n    public int getNumeratorAsInt();\n    /**\n     * <p>\n     * Creates a <code>BigFraction</code> instance with the 2 parts of a fraction\n     * Y/Z.\n     * </p>\n     *\n     * <p>\n     * Any negative signs are resolved to be on the numerator.\n     * </p>\n     *\n     * @param numerator\n     *            the numerator, for example the three in 'three sevenths'.\n     * @param denominator\n     *            the denominator, for example the seven in 'three sevenths'.\n     * @return a new fraction instance, with the numerator and denominator\n     *         reduced.\n     * @throws ArithmeticException\n     *             if the denominator is <code>zero</code>.\n     */\n    public static BigFraction getReducedFraction(final int numerator,\n                                                 final int denominator);\n    /**\n     * <p>\n     * Access the numerator as a <tt>long</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>long</tt>.\n     */\n    public long getNumeratorAsLong();\n}\n/**\n * Representation of a rational number.\n *\n * implements Serializable since 2.0\n *\n * @since 1.1\n * @version $Id$\n */\npublic class Fraction\n    extends Number\n    implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {\n    public static final Fraction TWO = new Fraction(2, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n    private static final long serialVersionUID = 3698073679419233275L;\n    private static final double DEFAULT_EPSILON = 1e-5;\n    private final int denominator;\n    private final int numerator;\n    /**\n     * Returns the absolute value of this fraction.\n     * @return the absolute value.\n     */\n    public Fraction abs();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a rational number without any overflow. This class is\n * immutable.\n *\n * @version $Id$\n * @since 2.0\n */\npublic class BigFraction\n    extends Number\n    implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable {\n    public static final BigFraction TWO = new BigFraction(2);\n    public static final BigFraction ONE = new BigFraction(1);\n    public static final BigFraction ZERO = new BigFraction(0);\n    public static final BigFraction MINUS_ONE = new BigFraction(-1);\n    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);\n    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);\n    public static final BigFraction ONE_HALF = new BigFraction(1, 2);\n    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);\n    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);\n    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);\n    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);\n    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);\n    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);\n    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);\n    private static final long serialVersionUID = -5630213147331578515L;\n    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);\n    private final BigInteger numerator;\n    private final BigInteger denominator;\n    /**\n     * <p>\n     * Access the denominator as a <tt>long</tt>.\n     * </p>\n     *\n     * @return the denominator as a <tt>long</tt>.\n     */\n    public long getDenominatorAsLong();\n    /**\n     * <p>\n     * Access the denominator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the denominator as a <tt>int</tt>.\n     */\n    public int getDenominatorAsInt();\n    /**\n     * <p>\n     * Access the numerator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>int</tt>.\n     */\n    public int getNumeratorAsInt();\n    /**\n     * <p>\n     * Creates a <code>BigFraction</code> instance with the 2 parts of a fraction\n     * Y/Z.\n     * </p>\n     *\n     * <p>\n     * Any negative signs are resolved to be on the numerator.\n     * </p>\n     *\n     * @param numerator\n     *            the numerator, for example the three in 'three sevenths'.\n     * @param denominator\n     *            the denominator, for example the seven in 'three sevenths'.\n     * @return a new fraction instance, with the numerator and denominator\n     *         reduced.\n     * @throws ArithmeticException\n     *             if the denominator is <code>zero</code>.\n     */\n    public static BigFraction getReducedFraction(final int numerator,\n                                                 final int denominator);\n    /**\n     * <p>\n     * Access the numerator as a <tt>long</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>long</tt>.\n     */\n    public long getNumeratorAsLong();\n}\n/**\n * Representation of a rational number.\n *\n * implements Serializable since 2.0\n *\n * @since 1.1\n * @version $Id$\n */\npublic class Fraction\n    extends Number\n    implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {\n    public static final Fraction TWO = new Fraction(2, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n    private static final long serialVersionUID = 3698073679419233275L;\n    private static final double DEFAULT_EPSILON = 1e-5;\n    private final int denominator;\n    private final int numerator;\n    /**\n     * Returns the absolute value of this fraction.\n     * @return the absolute value.\n     */\n    public Fraction abs();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertFraction(int expectedNumerator, int expectedDenominator, BigFraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumeratorAsInt());\n        Assert.assertEquals(expectedDenominator, actual.getDenominatorAsInt());\n    }\n    private void assertFraction(long expectedNumerator, long expectedDenominator, BigFraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumeratorAsLong());\n        Assert.assertEquals(expectedDenominator, actual.getDenominatorAsLong());\n    }\n    public void testDigitLimitConstructor() throws ConvergenceException {\n        assertFraction(2, 5, new BigFraction(0.4, 9));\n        assertFraction(2, 5, new BigFraction(0.4, 99));\n        assertFraction(2, 5, new BigFraction(0.4, 999));\n\n        assertFraction(3, 5, new BigFraction(0.6152, 9));\n        assertFraction(8, 13, new BigFraction(0.6152, 99));\n        assertFraction(510, 829, new BigFraction(0.6152, 999));\n        assertFraction(769, 1250, new BigFraction(0.6152, 9999));\n        \n        // MATH-996\n        assertFraction(1, 2, new BigFraction(0.5000000001, 10));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** Class holding \"compiled\" computation rules for derivative structures.\n * <p>This class implements the computation rules described in Dan Kalman's paper <a\n * href=\"http://www.math.american.edu/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. However, in order to avoid performances bottlenecks, the recursive\n * rules are \"compiled\" once in an unfold form. This class does this recursion unrolling\n * and stores the computation rules as simple loops with pre-computed indirection arrays.</p>\n * <p>\n * This class maps all derivative computation into single dimension arrays that hold the\n * value and partial derivatives. The class does not hold these arrays, which remains under\n * the responsibility of the caller. For each combination of number of free parameters and\n * derivation order, only one compiler is necessary, and this compiler will be used to\n * perform computations on all arrays provided to it, which can represent hundreds or\n * thousands of different parameters kept together with all theur partial derivatives.\n * </p>\n * <p>\n * The arrays on which compilers operate contain only the partial derivatives together\n * with the 0<sup>th</sup> derivative, i.e. the value. The partial derivatives are stored in\n * a compiler-specific order, which can be retrieved using methods {@link\n * #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} and {@link\n * #getPartialDerivativeOrders(int)}. The value is guaranteed to be stored as the first element\n * (i.e. the {@link #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} method returns\n * 0 when called with 0 for all derivation orders and {@link #getPartialDerivativeOrders(int)\n * getPartialDerivativeOrders} returns an array filled with 0 when called with 0 as the index).\n * </p>\n * <p>\n * Note that the ordering changes with number of parameters and derivation order. For example\n * given 2 parameters x and y, df/dy is stored at index 2 when derivation order is set to 1 (in\n * this case the array has three elements: f, df/dx and df/dy). If derivation order is set to\n * 2, then df/dy will be stored at index 3 (in this case the array has six elements: f, df/dx,\n * df/dxdx, df/dy, df/dxdy and df/dydy).\n * </p>\n * <p>\n * Given this structure, users can perform some simple operations like adding, subtracting\n * or multiplying constants and negating the elements by themselves, knowing if they want to\n * mutate their array or create a new array. These simple operations are not provided by\n * the compiler. The compiler provides only the more complex operations between several arrays.\n * </p>\n * <p>This class is mainly used as the engine for scalar variable {@link DerivativeStructure}.\n * It can also be used directly to hold several variables in arrays for more complex data\n * structures. User can for example store a vector of n variables depending on three x, y\n * and z free parameters in one array as follows:\n * <pre>\n *   // parameter 0 is x, parameter 1 is y, parameter 2 is z\n *   int parameters = 3;\n *   DSCompiler compiler = DSCompiler.getCompiler(parameters, order);\n *   int size = compiler.getSize();\n *\n *   // pack all elements in a single array\n *   double[] array = new double[n * size];\n *   for (int i = 0; i < n; ++i) {\n *\n *     // we know value is guaranteed to be the first element\n *     array[i * size] = v[i];\n *\n *     // we don't know where first derivatives are stored, so we ask the compiler\n *     array[i * size + compiler.getPartialDerivativeIndex(1, 0, 0) = dvOnDx[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 1, 0) = dvOnDy[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 0, 1) = dvOnDz[i][0];\n *\n *     // we let all higher order derivatives set to 0\n *\n *   }\n * </pre>\n * Then in another function, user can perform some operations on all elements stored\n * in the single array, such as a simple product of all variables:\n * <pre>\n *   // compute the product of all elements\n *   double[] product = new double[size];\n *   prod[0] = 1.0;\n *   for (int i = 0; i < n; ++i) {\n *     double[] tmp = product.clone();\n *     compiler.multiply(tmp, 0, array, i * size, product, 0);\n *   }\n *\n *   // value\n *   double p = product[0];\n *\n *   // first derivatives\n *   double dPdX = product[compiler.getPartialDerivativeIndex(1, 0, 0)];\n *   double dPdY = product[compiler.getPartialDerivativeIndex(0, 1, 0)];\n *   double dPdZ = product[compiler.getPartialDerivativeIndex(0, 0, 1)];\n *\n *   // cross derivatives (assuming order was at least 2)\n *   double dPdXdX = product[compiler.getPartialDerivativeIndex(2, 0, 0)];\n *   double dPdXdY = product[compiler.getPartialDerivativeIndex(1, 1, 0)];\n *   double dPdXdZ = product[compiler.getPartialDerivativeIndex(1, 0, 1)];\n *   double dPdYdY = product[compiler.getPartialDerivativeIndex(0, 2, 0)];\n *   double dPdYdZ = product[compiler.getPartialDerivativeIndex(0, 1, 1)];\n *   double dPdZdZ = product[compiler.getPartialDerivativeIndex(0, 0, 2)];\n * </p>\n * @see DerivativeStructure\n * @version $Id$\n * @since 3.1\n */\npublic class DSCompiler {\n    private final int parameters;\n    private final int order;\n    private final int[][] sizes;\n    private final int[][] derivativesIndirection;\n    private final int[] lowerIndirection;\n    private final int[][][] multIndirection;\n    private final int[][][] compIndirection;\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder();\n    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset);\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** Class holding \"compiled\" computation rules for derivative structures.\n * <p>This class implements the computation rules described in Dan Kalman's paper <a\n * href=\"http://www.math.american.edu/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. However, in order to avoid performances bottlenecks, the recursive\n * rules are \"compiled\" once in an unfold form. This class does this recursion unrolling\n * and stores the computation rules as simple loops with pre-computed indirection arrays.</p>\n * <p>\n * This class maps all derivative computation into single dimension arrays that hold the\n * value and partial derivatives. The class does not hold these arrays, which remains under\n * the responsibility of the caller. For each combination of number of free parameters and\n * derivation order, only one compiler is necessary, and this compiler will be used to\n * perform computations on all arrays provided to it, which can represent hundreds or\n * thousands of different parameters kept together with all theur partial derivatives.\n * </p>\n * <p>\n * The arrays on which compilers operate contain only the partial derivatives together\n * with the 0<sup>th</sup> derivative, i.e. the value. The partial derivatives are stored in\n * a compiler-specific order, which can be retrieved using methods {@link\n * #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} and {@link\n * #getPartialDerivativeOrders(int)}. The value is guaranteed to be stored as the first element\n * (i.e. the {@link #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} method returns\n * 0 when called with 0 for all derivation orders and {@link #getPartialDerivativeOrders(int)\n * getPartialDerivativeOrders} returns an array filled with 0 when called with 0 as the index).\n * </p>\n * <p>\n * Note that the ordering changes with number of parameters and derivation order. For example\n * given 2 parameters x and y, df/dy is stored at index 2 when derivation order is set to 1 (in\n * this case the array has three elements: f, df/dx and df/dy). If derivation order is set to\n * 2, then df/dy will be stored at index 3 (in this case the array has six elements: f, df/dx,\n * df/dxdx, df/dy, df/dxdy and df/dydy).\n * </p>\n * <p>\n * Given this structure, users can perform some simple operations like adding, subtracting\n * or multiplying constants and negating the elements by themselves, knowing if they want to\n * mutate their array or create a new array. These simple operations are not provided by\n * the compiler. The compiler provides only the more complex operations between several arrays.\n * </p>\n * <p>This class is mainly used as the engine for scalar variable {@link DerivativeStructure}.\n * It can also be used directly to hold several variables in arrays for more complex data\n * structures. User can for example store a vector of n variables depending on three x, y\n * and z free parameters in one array as follows:\n * <pre>\n *   // parameter 0 is x, parameter 1 is y, parameter 2 is z\n *   int parameters = 3;\n *   DSCompiler compiler = DSCompiler.getCompiler(parameters, order);\n *   int size = compiler.getSize();\n *\n *   // pack all elements in a single array\n *   double[] array = new double[n * size];\n *   for (int i = 0; i < n; ++i) {\n *\n *     // we know value is guaranteed to be the first element\n *     array[i * size] = v[i];\n *\n *     // we don't know where first derivatives are stored, so we ask the compiler\n *     array[i * size + compiler.getPartialDerivativeIndex(1, 0, 0) = dvOnDx[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 1, 0) = dvOnDy[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 0, 1) = dvOnDz[i][0];\n *\n *     // we let all higher order derivatives set to 0\n *\n *   }\n * </pre>\n * Then in another function, user can perform some operations on all elements stored\n * in the single array, such as a simple product of all variables:\n * <pre>\n *   // compute the product of all elements\n *   double[] product = new double[size];\n *   prod[0] = 1.0;\n *   for (int i = 0; i < n; ++i) {\n *     double[] tmp = product.clone();\n *     compiler.multiply(tmp, 0, array, i * size, product, 0);\n *   }\n *\n *   // value\n *   double p = product[0];\n *\n *   // first derivatives\n *   double dPdX = product[compiler.getPartialDerivativeIndex(1, 0, 0)];\n *   double dPdY = product[compiler.getPartialDerivativeIndex(0, 1, 0)];\n *   double dPdZ = product[compiler.getPartialDerivativeIndex(0, 0, 1)];\n *\n *   // cross derivatives (assuming order was at least 2)\n *   double dPdXdX = product[compiler.getPartialDerivativeIndex(2, 0, 0)];\n *   double dPdXdY = product[compiler.getPartialDerivativeIndex(1, 1, 0)];\n *   double dPdXdZ = product[compiler.getPartialDerivativeIndex(1, 0, 1)];\n *   double dPdYdY = product[compiler.getPartialDerivativeIndex(0, 2, 0)];\n *   double dPdYdZ = product[compiler.getPartialDerivativeIndex(0, 1, 1)];\n *   double dPdZdZ = product[compiler.getPartialDerivativeIndex(0, 0, 2)];\n * </p>\n * @see DerivativeStructure\n * @version $Id$\n * @since 3.1\n */\npublic class DSCompiler {\n    private final int parameters;\n    private final int order;\n    private final int[][] sizes;\n    private final int[][] derivativesIndirection;\n    private final int[] lowerIndirection;\n    private final int[][][] multIndirection;\n    private final int[][][] compIndirection;\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder();\n    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset);\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class DerivativeStructureTest {\n    private void checkF0F1(DerivativeStructure ds, double value, double...derivatives) {\n\n        // check dimension\n        Assert.assertEquals(derivatives.length, ds.getFreeParameters());\n\n        // check value, directly and also as 0th order derivative\n        Assert.assertEquals(value, ds.getValue(), 1.0e-15);\n        Assert.assertEquals(value, ds.getPartialDerivative(new int[ds.getFreeParameters()]), 1.0e-15);\n\n        // check first order derivatives\n        for (int i = 0; i < derivatives.length; ++i) {\n            int[] orders = new int[derivatives.length];\n            orders[i] = 1;\n            Assert.assertEquals(derivatives[i], ds.getPartialDerivative(orders), 1.0e-15);\n        }\n\n    }\n    private void checkEquals(DerivativeStructure ds1, DerivativeStructure ds2, double epsilon) {\n\n        // check dimension\n        Assert.assertEquals(ds1.getFreeParameters(), ds2.getFreeParameters());\n        Assert.assertEquals(ds1.getOrder(), ds2.getOrder());\n\n        int[] derivatives = new int[ds1.getFreeParameters()];\n        int sum = 0;\n        while (true) {\n\n            if (sum <= ds1.getOrder()) {\n                Assert.assertEquals(ds1.getPartialDerivative(derivatives),\n                                    ds2.getPartialDerivative(derivatives),\n                                    epsilon);\n            }\n\n            boolean increment = true;\n            sum = 0;\n            for (int i = derivatives.length - 1; i >= 0; --i) {\n                if (increment) {\n                    if (derivatives[i] == ds1.getOrder()) {\n                        derivatives[i] = 0;\n                    } else {\n                        derivatives[i]++;\n                        increment = false;\n                    }\n                }\n                sum += derivatives[i];\n            }\n            if (increment) {\n                return;\n            }\n\n        }\n\n    }\n    public void testAtan2SpecialCases() {\n\n        DerivativeStructure pp =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\n                                          new DerivativeStructure(2, 2, 1, +0.0));\n        Assert.assertEquals(0, pp.getValue(), 1.0e-15);\n        Assert.assertEquals(+1, FastMath.copySign(1, pp.getValue()), 1.0e-15);\n\n        DerivativeStructure pn =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\n                                          new DerivativeStructure(2, 2, 1, -0.0));\n        Assert.assertEquals(FastMath.PI, pn.getValue(), 1.0e-15);\n\n        DerivativeStructure np =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),\n                                          new DerivativeStructure(2, 2, 1, +0.0));\n        Assert.assertEquals(0, np.getValue(), 1.0e-15);\n        Assert.assertEquals(-1, FastMath.copySign(1, np.getValue()), 1.0e-15);\n\n        DerivativeStructure nn =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),\n                                          new DerivativeStructure(2, 2, 1, -0.0));\n        Assert.assertEquals(-FastMath.PI, nn.getValue(), 1.0e-15);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Base class for implementing estimators.\n * <p>This base class handles the boilerplates methods associated to thresholds\n * settings, jacobian and error estimation.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n *\n */\npublic abstract class AbstractEstimator implements Estimator {\n    /** \n     * Solve an estimation problem.\n     *\n     * <p>The method should set the parameters of the problem to several\n     * trial values until it reaches convergence. If this method returns\n     * normally (i.e. without throwing an exception), then the best\n     * estimate of the parameters can be retrieved from the problem\n     * itself, through the {@link EstimationProblem#getAllParameters\n     * EstimationProblem.getAllParameters} method.</p>\n     *\n     * @param problem estimation problem to solve\n     * @exception EstimationException if the problem cannot be solved\n     *\n     */\n    public abstract void estimate(EstimationProblem problem)\n    throws EstimationException;\n\n    /** Array of measurements. */\n    protected WeightedMeasurement[] measurements;\n\n    /** Array of parameters. */\n    protected EstimatedParameter[] parameters;\n\n    /** \n     * Jacobian matrix.\n     * <p>This matrix is in canonical form just after the calls to\n     * @link #updateJacobian()}, but may be modified by the solver;\n    /**\n     * Guess the errors in unbound estimated parameters.\n     * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>\n     * @param problem estimation problem\n     * @return errors in estimated parameters\n     * @exception EstimationException if the covariances matrix cannot be computed\n     * or the number of degrees of freedom is not positive (number of measurements\n     * lesser or equal to number of parameters)\n     */\n    public double[] guessParametersErrors(EstimationProblem problem)\n      throws EstimationException;\n    /** \n     * Get the Root Mean Square value.\n     * Get the Root Mean Square value, i.e. the root of the arithmetic\n     * mean of the square of all weighted residuals. This is related to the\n     * criterion that is minimized by the estimator as follows: if\n     * <em>c</em> if the criterion, and <em>n</em> is the number of\n     * measurements, then the RMS is <em>sqrt (c/n)</em>.\n     * \n     * @param problem estimation problem\n     * @return RMS value\n     */\n    public double getRMS(EstimationProblem problem);\n    /**\n     * Get the covariance matrix of unbound estimated parameters.\n     * @param problem estimation problem\n     * @return covariance matrix\n     * @exception EstimationException if the covariance matrix\n     * cannot be computed (singular problem)\n     */\n    public double[][] getCovariances(EstimationProblem problem)\n      throws EstimationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Base class for implementing estimators.\n * <p>This base class handles the boilerplates methods associated to thresholds\n * settings, jacobian and error estimation.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n *\n */\npublic abstract class AbstractEstimator implements Estimator {\n    /** \n     * Solve an estimation problem.\n     *\n     * <p>The method should set the parameters of the problem to several\n     * trial values until it reaches convergence. If this method returns\n     * normally (i.e. without throwing an exception), then the best\n     * estimate of the parameters can be retrieved from the problem\n     * itself, through the {@link EstimationProblem#getAllParameters\n     * EstimationProblem.getAllParameters} method.</p>\n     *\n     * @param problem estimation problem to solve\n     * @exception EstimationException if the problem cannot be solved\n     *\n     */\n    public abstract void estimate(EstimationProblem problem)\n    throws EstimationException;\n\n    /** Array of measurements. */\n    protected WeightedMeasurement[] measurements;\n\n    /** Array of parameters. */\n    protected EstimatedParameter[] parameters;\n\n    /** \n     * Jacobian matrix.\n     * <p>This matrix is in canonical form just after the calls to\n     * @link #updateJacobian()}, but may be modified by the solver;\n    /**\n     * Guess the errors in unbound estimated parameters.\n     * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>\n     * @param problem estimation problem\n     * @return errors in estimated parameters\n     * @exception EstimationException if the covariances matrix cannot be computed\n     * or the number of degrees of freedom is not positive (number of measurements\n     * lesser or equal to number of parameters)\n     */\n    public double[] guessParametersErrors(EstimationProblem problem)\n      throws EstimationException;\n    /** \n     * Get the Root Mean Square value.\n     * Get the Root Mean Square value, i.e. the root of the arithmetic\n     * mean of the square of all weighted residuals. This is related to the\n     * criterion that is minimized by the estimator as follows: if\n     * <em>c</em> if the criterion, and <em>n</em> is the number of\n     * measurements, then the RMS is <em>sqrt (c/n)</em>.\n     * \n     * @param problem estimation problem\n     * @return RMS value\n     */\n    public double getRMS(EstimationProblem problem);\n    /**\n     * Get the covariance matrix of unbound estimated parameters.\n     * @param problem estimation problem\n     * @return covariance matrix\n     * @exception EstimationException if the covariance matrix\n     * cannot be computed (singular problem)\n     */\n    public double[][] getCovariances(EstimationProblem problem)\n      throws EstimationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  extends TestCase {\n  public void testBoundParameters() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      assertTrue(estimator.getRMS(problem) < 1.0e-10);\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);\n      assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);\n      assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);\n      assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      assertEquals(0, errors[i0], 1.0e-10);\n      assertEquals(0, errors[i1], 1.0e-10);\n\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".  'i' can\n * be replaced with 'j', and the number format for both real and imaginary parts\n * can be configured.\n *\n * @author Apache Software Foundation\n * @version $Revision$ $Date$\n */\npublic class ComplexFormat extends Format implements Serializable {\n    private static final long serialVersionUID = -6337346779577272306L;\n    private static final String DEFAULT_IMAGINARY_CHARACTER = \"i\";\n    private String imaginaryCharacter;\n    private NumberFormat imaginaryFormat;\n    private NumberFormat realFormat;\n    /**\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Complex} object.\n     */\n    public Complex parse(String source, ParsePosition pos);\n    /**\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse\n     * @return the parsed {@link Complex} object.\n     * @exception ParseException if the beginning of the specified string\n     *            cannot be parsed.\n     */\n    public Complex parse(String source) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".  'i' can\n * be replaced with 'j', and the number format for both real and imaginary parts\n * can be configured.\n *\n * @author Apache Software Foundation\n * @version $Revision$ $Date$\n */\npublic class ComplexFormat extends Format implements Serializable {\n    private static final long serialVersionUID = -6337346779577272306L;\n    private static final String DEFAULT_IMAGINARY_CHARACTER = \"i\";\n    private String imaginaryCharacter;\n    private NumberFormat imaginaryFormat;\n    private NumberFormat realFormat;\n    /**\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Complex} object.\n     */\n    public Complex parse(String source, ParsePosition pos);\n    /**\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse\n     * @return the parsed {@link Complex} object.\n     * @exception ParseException if the beginning of the specified string\n     *            cannot be parsed.\n     */\n    public Complex parse(String source) throws ParseException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testForgottenImaginaryCharacter() {\n        ParsePosition pos = new ParsePosition(0);\n        assertNull(new ComplexFormat().parse(\"1 + 1\", pos));\n        assertEquals(5, pos.getErrorIndex());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implements Chi-Square test statistics defined in the\n * {@link UnknownDistributionChiSquareTest} interface.\n *\n * @version $Revision$ $Date$\n */\npublic class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n    private ChiSquaredDistribution distribution;\n    /**\n     * @param counts array representation of 2-way table\n     * @return p-value\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs computing the p-value\n     */\n    public double chiSquareTest(long[][] counts)\n    throws IllegalArgumentException, MathException;\n     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException;\n    /**\n     * @param counts array representation of 2-way table\n     * @param alpha significance level of the test\n     * @return true iff null hypothesis can be rejected with confidence\n     * 1 - alpha\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs performing the test\n     */\n    public boolean chiSquareTest(long[][] counts, double alpha)\n    throws IllegalArgumentException, MathException;\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of exptected frequency counts\n     * @return p-value\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs computing the p-value\n     */\n    public double chiSquareTest(double[] expected, long[] observed)\n        throws IllegalArgumentException, MathException;\n    /**\n     * @param counts array representation of 2-way table\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     */\n    public double chiSquare(long[][] counts) throws IllegalArgumentException;\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of exptected frequency counts\n     * @param alpha significance level of the test\n     * @return true iff null hypothesis can be rejected with confidence\n     * 1 - alpha\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs performing the test\n     */\n    public boolean chiSquareTest(double[] expected, long[] observed, \n            double alpha) throws IllegalArgumentException, MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implements Chi-Square test statistics defined in the\n * {@link UnknownDistributionChiSquareTest} interface.\n *\n * @version $Revision$ $Date$\n */\npublic class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n    private ChiSquaredDistribution distribution;\n    /**\n     * @param counts array representation of 2-way table\n     * @return p-value\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs computing the p-value\n     */\n    public double chiSquareTest(long[][] counts)\n    throws IllegalArgumentException, MathException;\n     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException;\n    /**\n     * @param counts array representation of 2-way table\n     * @param alpha significance level of the test\n     * @return true iff null hypothesis can be rejected with confidence\n     * 1 - alpha\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs performing the test\n     */\n    public boolean chiSquareTest(long[][] counts, double alpha)\n    throws IllegalArgumentException, MathException;\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of exptected frequency counts\n     * @return p-value\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs computing the p-value\n     */\n    public double chiSquareTest(double[] expected, long[] observed)\n        throws IllegalArgumentException, MathException;\n    /**\n     * @param counts array representation of 2-way table\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     */\n    public double chiSquare(long[][] counts) throws IllegalArgumentException;\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of exptected frequency counts\n     * @param alpha significance level of the test\n     * @return true iff null hypothesis can be rejected with confidence\n     * 1 - alpha\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs performing the test\n     */\n    public boolean chiSquareTest(double[] expected, long[] observed, \n            double alpha) throws IllegalArgumentException, MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Revision$ $Date$\n */\npublic class ChiSquareTestTest extends TestCase {\n    public void testChiSquareLargeTestStatistic() throws Exception {\n        double[] exp = new double[] {\n            3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n            232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n            2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n        assertEquals( \"chi-square test statistic\",  114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Default implementation of\n * {@link org.apache.commons.math.distribution.NormalDistribution}.\n *\n * @version $Revision$ $Date$\n */\npublic class NormalDistributionImpl extends AbstractContinuousDistribution \n        implements NormalDistribution, Serializable {\n    private static final long serialVersionUID = 8589540077390120676L;\n    private double mean = 0;\n    private double standardDeviation = 1;\n    /**\n     * Access the standard deviation.\n     * @return standard deviation for this distribution\n     */\n    public double getStandardDeviation();\n    /**\n     * Modify the mean.\n     * @param mean for this distribution\n     */\n    public void setMean(double mean);\n    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException;\n    /**\n     * Access the mean.\n     * @return mean for this distribution\n     */ \n    public double getMean();\n    /**\n     * Modify the standard deviation.\n     * @param sd standard deviation for this distribution\n     * @throws IllegalArgumentException if <code>sd</code> is not positive.\n     */\n    public void setStandardDeviation(double sd);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Default implementation of\n * {@link org.apache.commons.math.distribution.NormalDistribution}.\n *\n * @version $Revision$ $Date$\n */\npublic class NormalDistributionImpl extends AbstractContinuousDistribution \n        implements NormalDistribution, Serializable {\n    private static final long serialVersionUID = 8589540077390120676L;\n    private double mean = 0;\n    private double standardDeviation = 1;\n    /**\n     * Access the standard deviation.\n     * @return standard deviation for this distribution\n     */\n    public double getStandardDeviation();\n    /**\n     * Modify the mean.\n     * @param mean for this distribution\n     */\n    public void setMean(double mean);\n    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException;\n    /**\n     * Access the mean.\n     * @return mean for this distribution\n     */ \n    public double getMean();\n    /**\n     * Modify the standard deviation.\n     * @param sd standard deviation for this distribution\n     * @throws IllegalArgumentException if <code>sd</code> is not positive.\n     */\n    public void setStandardDeviation(double sd);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * ContinuousDistributionAbstractTest for details.\n * \n * @version $Revision$ $Date$\n */\npublic class NormalDistributionTest extends ContinuousDistributionAbstractTest  {\n    private void verifyQuantiles() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        double mu = distribution.getMean();\n        double sigma = distribution.getStandardDeviation();\n        setCumulativeTestPoints( new double[] {mu - 2 *sigma, mu - sigma, \n                mu, mu + sigma, mu +2 * sigma,  mu +3 * sigma, mu + 4 * sigma,\n                mu + 5 * sigma});\n        // Quantiles computed using R (same as Mathematica)\n        setCumulativeTestValues(new double[] {0.02275013, 0.1586553, 0.5, 0.8413447, \n                0.9772499, 0.9986501, 0.9999683,  0.9999997});\n        verifyCumulativeProbabilities();       \n    }\n    public void testExtremeValues() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                assertTrue(lowerTail > 0.0d);\n                assertTrue(upperTail < 1.0d);\n            }\n            else { // make sure top coding not reversed\n                assertTrue(lowerTail < 0.00001);\n                assertTrue(upperTail > 0.99999);\n            }\n        } \n   }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This is a utility class that provides computation methods related to the\n * Gamma family of functions.\n *\n * @version $Revision$ $Date$\n */\npublic class Gamma implements Serializable {\n    private static final long serialVersionUID = -6587513359895466954L;\n    private static final double DEFAULT_EPSILON = 10e-9;\n    /**\n     * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\">\n     * Regularized Gamma Function</a>, equation (1).</li>\n     * <li>\n     * <a href=\"    http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/\">\n     * Regularized incomplete gamma function: Continued fraction representations  (formula 06.08.10.0003)</a></li>\n     * </ul>\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @param epsilon When the absolute value of the nth item in the\n     *                series is less than epsilon the approximation ceases\n     *                to calculate further elements in the series.\n     * @param maxIterations Maximum number of \"iterations\" to complete. \n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularizedGammaQ(final double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException;\n    /**\n     * Returns the regularized gamma function P(a, x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\">\n     * Regularized Gamma Function</a>, equation (1).</li>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\">\n     * Incomplete Gamma Function</a>, equation (4).</li>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\">\n     * Confluent Hypergeometric Function of the First Kind</a>, equation (1).\n     * </li>\n     * </ul>\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @param epsilon When the absolute value of the nth item in the\n     *                series is less than epsilon the approximation ceases\n     *                to calculate further elements in the series.\n     * @param maxIterations Maximum number of \"iterations\" to complete. \n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularizedGammaP(double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException;\n    /**\n     * Returns the natural logarithm of the gamma function &#915;(x).\n     *\n     * The implementation of this method is based on:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/GammaFunction.html\">\n     * Gamma Function</a>, equation (28).</li>\n     * <li><a href=\"http://mathworld.wolfram.com/LanczosApproximation.html\">\n     * Lanczos Approximation</a>, equations (1) through (5).</li>\n     * <li><a href=\"http://my.fit.edu/~gabdo/gamma.txt\">Paul Godfrey, A note on\n     * the computation of the convergent Lanczos complex Gamma approximation\n     * </a></li>\n     * </ul>\n     * \n     * @param x the value.\n     * @return log(&#915;(x))\n     */\n    public static double logGamma(double x);\n    /**\n     * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @return the regularized gamma function Q(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularizedGammaQ(double a, double x)\n        throws MathException;\n    /**\n     * Returns the regularized gamma function P(a, x).\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularizedGammaP(double a, double x)\n        throws MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This is a utility class that provides computation methods related to the\n * Gamma family of functions.\n *\n * @version $Revision$ $Date$\n */\npublic class Gamma implements Serializable {\n    private static final long serialVersionUID = -6587513359895466954L;\n    private static final double DEFAULT_EPSILON = 10e-9;\n    /**\n     * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\">\n     * Regularized Gamma Function</a>, equation (1).</li>\n     * <li>\n     * <a href=\"    http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/\">\n     * Regularized incomplete gamma function: Continued fraction representations  (formula 06.08.10.0003)</a></li>\n     * </ul>\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @param epsilon When the absolute value of the nth item in the\n     *                series is less than epsilon the approximation ceases\n     *                to calculate further elements in the series.\n     * @param maxIterations Maximum number of \"iterations\" to complete. \n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularizedGammaQ(final double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException;\n    /**\n     * Returns the regularized gamma function P(a, x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\">\n     * Regularized Gamma Function</a>, equation (1).</li>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\">\n     * Incomplete Gamma Function</a>, equation (4).</li>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\">\n     * Confluent Hypergeometric Function of the First Kind</a>, equation (1).\n     * </li>\n     * </ul>\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @param epsilon When the absolute value of the nth item in the\n     *                series is less than epsilon the approximation ceases\n     *                to calculate further elements in the series.\n     * @param maxIterations Maximum number of \"iterations\" to complete. \n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularizedGammaP(double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException;\n    /**\n     * Returns the natural logarithm of the gamma function &#915;(x).\n     *\n     * The implementation of this method is based on:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/GammaFunction.html\">\n     * Gamma Function</a>, equation (28).</li>\n     * <li><a href=\"http://mathworld.wolfram.com/LanczosApproximation.html\">\n     * Lanczos Approximation</a>, equations (1) through (5).</li>\n     * <li><a href=\"http://my.fit.edu/~gabdo/gamma.txt\">Paul Godfrey, A note on\n     * the computation of the convergent Lanczos complex Gamma approximation\n     * </a></li>\n     * </ul>\n     * \n     * @param x the value.\n     * @return log(&#915;(x))\n     */\n    public static double logGamma(double x);\n    /**\n     * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @return the regularized gamma function Q(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularizedGammaQ(double a, double x)\n        throws MathException;\n    /**\n     * Returns the regularized gamma function P(a, x).\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     */\n    public static double regularizedGammaP(double a, double x)\n        throws MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void testRegularizedGamma(double expected, double a, double x) {\n        try {\n            double actualP = Gamma.regularizedGammaP(a, x);\n            double actualQ = Gamma.regularizedGammaQ(a, x);\n            TestUtils.assertEquals(expected, actualP, 10e-15);\n            TestUtils.assertEquals(actualP, 1.0 - actualQ, 10e-15);\n        } catch(MathException ex){\n            fail(ex.getMessage());\n        }\n    }\n    private void testLogGamma(double expected, double x) {\n        double actual = Gamma.logGamma(x);\n        TestUtils.assertEquals(expected, actual, 10e-15);\n    }\n    public void testRegularizedGammaPositivePositive() {\n        testRegularizedGamma(0.632120558828558, 1.0, 1.0);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Estimates an ordinary least squares regression model\n * with one independent variable.\n * <p>\n * <code> y = intercept + slope * x  </code>\n * <p>\n * Standard errors for <code>intercept</code> and <code>slope</code> are \n * available as well as ANOVA, r-square and Pearson's r statistics.\n * <p>\n * Observations (x,y pairs) can be added to the model one at a time or they \n * can be provided in a 2-dimensional array.  The observations are not stored\n * in memory, so there is no limit to the number of observations that can be\n * added to the model. \n * <p>\n * <strong>Usage Notes</strong>: <ul>\n * <li> When there are fewer than two observations in the model, or when\n * there is no variation in the x values (i.e. all x values are the same) \n * all statistics return <code>NaN</code>. At least two observations with\n * different x coordinates are requred to estimate a bivariate regression \n * model.\n * </li>\n * <li> getters for the statistics always compute values based on the current\n * set of observations -- i.e., you can get statistics, then add more data\n * and get updated statistics without using a new instance.  There is no \n * \"compute\" method that updates all statistics.  Each of the getters performs\n * the necessary computations to return the requested statistic.</li>\n * </ul>\n *\n * @version $Revision$ $Date$\n */\npublic class SimpleRegression implements Serializable {\n    private static final long serialVersionUID = -3004689053607543335L;\n    private double sumX = 0d;\n    private double sumXX = 0d;\n    private double sumY = 0d;\n    private double sumYY = 0d;\n    private double sumXY = 0d;\n    private long n = 0;\n    private double xbar = 0;\n    private double ybar = 0;\n    /**\n    * Returns the slope of the estimated regression line.  \n    * <p>\n    * The least squares estimate of the slope is computed using the \n    * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n    * The slope is sometimes denoted b1. \n    * <p>\n    * <strong>Preconditions</strong>: <ul>\n    * <li>At least two observations (with at least two different x values)\n    * must have been added before invoking this method. If this method is \n    * invoked before a model can be estimated, <code>Double.NaN</code> is\n    * returned.\n    * </li></ul>\n    *\n    * @return the slope of the regression line\n    */\n    public double getSlope();\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors();\n    /**\n     * Adds the observations represented by the elements in \n     * <code>data</code>.\n     * <p>\n     * <code>(data[0][0],data[0][1])</code> will be the first observation, then\n     * <code>(data[1][0],data[1][1])</code>, etc. \n     * <p> \n     * This method does not replace data that has already been added.  The\n     * observations represented by <code>data</code> are added to the existing\n     * dataset.\n     * <p> \n     * To replace all data, use <code>clear()</code> before adding the new \n     * data.\n     * \n     * @param data array of observations to be added\n     */\n    public void addData(double[][] data);\n    /**\n     * Adds the observation (x,y) to the regression data set.\n     * <p>\n     * Uses updating formulas for means and sums of squares defined in \n     * \"Algorithms for Computing the Sample Variance: Analysis and\n     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n     * 1983, American Statistician, vol. 37, pp. 242-247, referenced in\n     * Weisberg, S. \"Applied Linear Regression\". 2nd Ed. 1985\n     *\n     *\n     * @param x independent variable value\n     * @param y dependent variable value\n     */\n    public void addData(double x, double y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Estimates an ordinary least squares regression model\n * with one independent variable.\n * <p>\n * <code> y = intercept + slope * x  </code>\n * <p>\n * Standard errors for <code>intercept</code> and <code>slope</code> are \n * available as well as ANOVA, r-square and Pearson's r statistics.\n * <p>\n * Observations (x,y pairs) can be added to the model one at a time or they \n * can be provided in a 2-dimensional array.  The observations are not stored\n * in memory, so there is no limit to the number of observations that can be\n * added to the model. \n * <p>\n * <strong>Usage Notes</strong>: <ul>\n * <li> When there are fewer than two observations in the model, or when\n * there is no variation in the x values (i.e. all x values are the same) \n * all statistics return <code>NaN</code>. At least two observations with\n * different x coordinates are requred to estimate a bivariate regression \n * model.\n * </li>\n * <li> getters for the statistics always compute values based on the current\n * set of observations -- i.e., you can get statistics, then add more data\n * and get updated statistics without using a new instance.  There is no \n * \"compute\" method that updates all statistics.  Each of the getters performs\n * the necessary computations to return the requested statistic.</li>\n * </ul>\n *\n * @version $Revision$ $Date$\n */\npublic class SimpleRegression implements Serializable {\n    private static final long serialVersionUID = -3004689053607543335L;\n    private double sumX = 0d;\n    private double sumXX = 0d;\n    private double sumY = 0d;\n    private double sumYY = 0d;\n    private double sumXY = 0d;\n    private long n = 0;\n    private double xbar = 0;\n    private double ybar = 0;\n    /**\n    * Returns the slope of the estimated regression line.  \n    * <p>\n    * The least squares estimate of the slope is computed using the \n    * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n    * The slope is sometimes denoted b1. \n    * <p>\n    * <strong>Preconditions</strong>: <ul>\n    * <li>At least two observations (with at least two different x values)\n    * must have been added before invoking this method. If this method is \n    * invoked before a model can be estimated, <code>Double.NaN</code> is\n    * returned.\n    * </li></ul>\n    *\n    * @return the slope of the regression line\n    */\n    public double getSlope();\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors();\n    /**\n     * Adds the observations represented by the elements in \n     * <code>data</code>.\n     * <p>\n     * <code>(data[0][0],data[0][1])</code> will be the first observation, then\n     * <code>(data[1][0],data[1][1])</code>, etc. \n     * <p> \n     * This method does not replace data that has already been added.  The\n     * observations represented by <code>data</code> are added to the existing\n     * dataset.\n     * <p> \n     * To replace all data, use <code>clear()</code> before adding the new \n     * data.\n     * \n     * @param data array of observations to be added\n     */\n    public void addData(double[][] data);\n    /**\n     * Adds the observation (x,y) to the regression data set.\n     * <p>\n     * Uses updating formulas for means and sums of squares defined in \n     * \"Algorithms for Computing the Sample Variance: Analysis and\n     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n     * 1983, American Statistician, vol. 37, pp. 242-247, referenced in\n     * Weisberg, S. \"Applied Linear Regression\". 2nd Ed. 1985\n     *\n     *\n     * @param x independent variable value\n     * @param y dependent variable value\n     */\n    public void addData(double x, double y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Revision$ $Date$\n */\npublic final class SimpleRegressionTest extends TestCase {\n    public void testSSENonNegative() {\n        double[] y = { 8915.102, 8919.302, 8923.502 };\n        double[] x = { 1.107178495E2, 1.107264895E2, 1.107351295E2 };\n        SimpleRegression reg = new SimpleRegression();\n        for (int i = 0; i < x.length; i++) {\n            reg.addData(x[i], y[i]);\n        }\n        assertTrue(reg.getSumSquaredErrors() >= 0.0);\n    } \n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Formats a Fraction number in proper format.  The number format for each of\n * the whole number, numerator and, denominator can be configured.\n * <p>\n * Minus signs are only allowed in the whole number part - i.e.,\n * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n * will result in a <code>ParseException</code>.\n * \n * @since 1.1\n * @version $Revision$ $Date$\n */\npublic class ProperFractionFormat extends FractionFormat {\n    private static final long serialVersionUID = -6337346779577272307L;\n    private NumberFormat wholeFormat;\n    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Formats a Fraction number in proper format.  The number format for each of\n * the whole number, numerator and, denominator can be configured.\n * <p>\n * Minus signs are only allowed in the whole number part - i.e.,\n * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n * will result in a <code>ParseException</code>.\n * \n * @since 1.1\n * @version $Revision$ $Date$\n */\npublic class ProperFractionFormat extends FractionFormat {\n    private static final long serialVersionUID = -6337346779577272307L;\n    private NumberFormat wholeFormat;\n    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testParseProperInvalidMinus() {\n        String source = \"2 -2 / 3\";\n        try {\n            Fraction c = properFormat.parse(source);\n            fail(\"invalid minus in improper fraction.\");\n        } catch (ParseException ex) {\n            // expected\n        }\n        source = \"2 2 / -3\";\n        try {\n            Fraction c = properFormat.parse(source);\n            fail(\"invalid minus in improper fraction.\");\n        } catch (ParseException ex) {\n            // expected\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implementation of the multivariate normal (Gaussian) distribution.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/Multivariate_normal_distribution\">\n * Multivariate normal distribution (Wikipedia)</a>\n * @see <a href=\"http://mathworld.wolfram.com/MultivariateNormalDistribution.html\">\n * Multivariate normal distribution (MathWorld)</a>\n *\n * @version $Id$\n * @since 3.1\n */\npublic class MultivariateNormalDistribution\n    extends AbstractMultivariateRealDistribution {\n    private final double[] means;\n    private final RealMatrix covarianceMatrix;\n    private final RealMatrix covarianceMatrixInverse;\n    private final double covarianceMatrixDeterminant;\n    private final RealMatrix samplingMatrix;\n    /** {@inheritDoc} */\n    public double density(final double[] vals) throws DimensionMismatchException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implementation of the multivariate normal (Gaussian) distribution.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/Multivariate_normal_distribution\">\n * Multivariate normal distribution (Wikipedia)</a>\n * @see <a href=\"http://mathworld.wolfram.com/MultivariateNormalDistribution.html\">\n * Multivariate normal distribution (MathWorld)</a>\n *\n * @version $Id$\n * @since 3.1\n */\npublic class MultivariateNormalDistribution\n    extends AbstractMultivariateRealDistribution {\n    private final double[] means;\n    private final RealMatrix covarianceMatrix;\n    private final RealMatrix covarianceMatrixInverse;\n    private final double covarianceMatrixDeterminant;\n    private final RealMatrix samplingMatrix;\n    /** {@inheritDoc} */\n    public double density(final double[] vals) throws DimensionMismatchException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testUnivariateDistribution() {\n        final double[] mu = { -1.5 };\n        final double[][] sigma = { { 1 } };\n \n        final MultivariateNormalDistribution multi = new MultivariateNormalDistribution(mu, sigma);\n\n        final NormalDistribution uni = new NormalDistribution(mu[0], sigma[0][0]);\n        final Random rng = new Random();\n        final int numCases = 100;\n        final double tol = Math.ulp(1d);\n        for (int i = 0; i < numCases; i++) {\n            final double v = rng.nextDouble() * 10 - 5;\n            Assert.assertEquals(uni.density(v), multi.density(new double[] { v }), tol);\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** Base class for random number generators that generates bits streams.\n *\n * @version $Id$\n * @since 2.0\n */\npublic abstract class BitsStreamGenerator\n    implements RandomGenerator {\n    private double nextGaussian;\n    /** {@inheritDoc} */\n    public abstract void setSeed(int seed);\n\n    /** @inheritDoc} */;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** Base class for random number generators that generates bits streams.\n *\n * @version $Id$\n * @since 2.0\n */\npublic abstract class BitsStreamGenerator\n    implements RandomGenerator {\n    private double nextGaussian;\n    /** {@inheritDoc} */\n    public abstract void setSeed(int seed);\n\n    /** @inheritDoc} */;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * <p>\n * To create a concrete test class for a continuous distribution\n * implementation, first implement makeDistribution() to return a distribution\n * instance to use in tests. Then implement each of the test data generation\n * methods below.  In each case, the test points and test values arrays\n * returned represent parallel arrays of inputs and expected values for the\n * distribution returned by makeDistribution().  Default implementations\n * are provided for the makeInverseXxx methods that just invert the mapping\n * defined by the arrays returned by the makeCumulativeXxx methods.\n * <p>\n * makeCumulativeTestPoints() -- arguments used to test cumulative probabilities\n * makeCumulativeTestValues() -- expected cumulative probabilites\n * makeDensityTestValues() -- expected density values at cumulativeTestPoints\n * makeInverseCumulativeTestPoints() -- arguments used to test inverse cdf\n * makeInverseCumulativeTestValues() -- expected inverse cdf values\n * <p>\n * To implement additional test cases with different distribution instances and\n * test data, use the setXxx methods for the instance data in test cases and\n * call the verifyXxx methods to verify results.\n * <p>\n * Error tolerance can be overriden by implementing getTolerance().\n * <p>\n * Test data should be validated against reference tables or other packages\n * where possible, and the source of the reference data and/or validation\n * should be documented in the test cases.  A framework for validating\n * distribution data against R is included in the /src/test/R source tree.\n * <p>\n * See {@link NormalDistributionTest} and {@link ChiSquaredDistributionTest}\n * for examples.\n *\n * @version $Id$\n */\npublic abstract class RealDistributionAbstractTest {\n    private RealDistribution deepClone()\n        throws IOException,\n               ClassNotFoundException {\n        // Serialize to byte array.\n        final ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n        final ObjectOutputStream oOut = new ObjectOutputStream(bOut);\n        oOut.writeObject(distribution);\n        final byte[] data = bOut.toByteArray();\n\n        // Deserialize from byte array.\n        final ByteArrayInputStream bIn = new ByteArrayInputStream(data);\n        final ObjectInputStream oIn = new ObjectInputStream(bIn);\n        final Object clone = oIn.readObject();\n        oIn.close();\n\n        return (RealDistribution) clone;\n    }\n    public void testDistributionClone()\n        throws IOException,\n               ClassNotFoundException {\n        // Construct a distribution and initialize its internal random\n        // generator, using a fixed seed for deterministic results.\n        distribution.reseedRandomGenerator(123);\n        distribution.sample();\n\n        // Clone the distribution.\n        final RealDistribution cloned = deepClone();\n\n        // Make sure they still produce the same samples.\n        final double s1 = distribution.sample();\n        final double s2 = cloned.sample();\n        Assert.assertEquals(s1, s2, 0d);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Base class for implementing least squares optimizers.\n * It handles the boilerplate methods associated to thresholds settings,\n * Jacobian and error estimation.\n * <br/>\n * This class constructs the Jacobian matrix of the function argument in method\n * {@link BaseAbstractMultivariateVectorOptimizer#optimize(int,MultivariateVectorFunction,OptimizationData[])\n * optimize} and assumes that the rows of that matrix iterate on the model\n * functions while the columns iterate on the parameters; thus, the numbers\n * of rows is equal to the dimension of the\n * {@link org.apache.commons.math3.optimization.Target Target} while\n * the number of columns is equal to the dimension of the\n * {@link org.apache.commons.math3.optimization.InitialGuess InitialGuess}.\n *\n * @version $Id$\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 1.2\n */\npublic abstract class AbstractLeastSquaresOptimizer\n    extends BaseAbstractMultivariateVectorOptimizer<DifferentiableMultivariateVectorFunction>\n    implements DifferentiableMultivariateVectorOptimizer {\n    private static final double DEFAULT_SINGULARITY_THRESHOLD = 1e-14;\n    /**\n     * Computes the residuals.\n     * The residual is the difference between the observed (target)\n     * values and the model (objective function) value.\n     * There is one residual for each element of the vector-valued\n     * function.\n     *\n     * @param objectiveValue Value of the the objective function. This is\n     * the value returned from a call to\n     * {@link #computeObjectiveValue(double[]) computeObjectiveValue}\n     * (whose array argument contains the model parameters).\n     * @return the residuals.\n     * @throws DimensionMismatchException if {@code params} has a wrong\n     * length.\n     * @since 3.1\n     */\n    protected double[] computeResiduals(double[] objectiveValue);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Base class for implementing least squares optimizers.\n * It handles the boilerplate methods associated to thresholds settings,\n * Jacobian and error estimation.\n * <br/>\n * This class constructs the Jacobian matrix of the function argument in method\n * {@link BaseAbstractMultivariateVectorOptimizer#optimize(int,MultivariateVectorFunction,OptimizationData[])\n * optimize} and assumes that the rows of that matrix iterate on the model\n * functions while the columns iterate on the parameters; thus, the numbers\n * of rows is equal to the dimension of the\n * {@link org.apache.commons.math3.optimization.Target Target} while\n * the number of columns is equal to the dimension of the\n * {@link org.apache.commons.math3.optimization.InitialGuess InitialGuess}.\n *\n * @version $Id$\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 1.2\n */\npublic abstract class AbstractLeastSquaresOptimizer\n    extends BaseAbstractMultivariateVectorOptimizer<DifferentiableMultivariateVectorFunction>\n    implements DifferentiableMultivariateVectorOptimizer {\n    private static final double DEFAULT_SINGULARITY_THRESHOLD = 1e-14;\n    /**\n     * Computes the residuals.\n     * The residual is the difference between the observed (target)\n     * values and the model (objective function) value.\n     * There is one residual for each element of the vector-valued\n     * function.\n     *\n     * @param objectiveValue Value of the the objective function. This is\n     * the value returned from a call to\n     * {@link #computeObjectiveValue(double[]) computeObjectiveValue}\n     * (whose array argument contains the model parameters).\n     * @return the residuals.\n     * @throws DimensionMismatchException if {@code params} has a wrong\n     * length.\n     * @since 3.1\n     */\n    protected double[] computeResiduals(double[] objectiveValue);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * polynomial.\n */\npublic class PolynomialFitterTest {\n    private double[] doMath798(DifferentiableMultivariateVectorOptimizer optimizer,\n                               int maxEval,\n                               double[] init) {\n        final CurveFitter<Parametric> fitter = new CurveFitter<Parametric>(optimizer);\n\n        fitter.addObservedPoint(-0.2, -7.12442E-13);\n        fitter.addObservedPoint(-0.199, -4.33397E-13);\n        fitter.addObservedPoint(-0.198, -2.823E-13);\n        fitter.addObservedPoint(-0.197, -1.40405E-13);\n        fitter.addObservedPoint(-0.196, -7.80821E-15);\n        fitter.addObservedPoint(-0.195, 6.20484E-14);\n        fitter.addObservedPoint(-0.194, 7.24673E-14);\n        fitter.addObservedPoint(-0.193, 1.47152E-13);\n        fitter.addObservedPoint(-0.192, 1.9629E-13);\n        fitter.addObservedPoint(-0.191, 2.12038E-13);\n        fitter.addObservedPoint(-0.19, 2.46906E-13);\n        fitter.addObservedPoint(-0.189, 2.77495E-13);\n        fitter.addObservedPoint(-0.188, 2.51281E-13);\n        fitter.addObservedPoint(-0.187, 2.64001E-13);\n        fitter.addObservedPoint(-0.186, 2.8882E-13);\n        fitter.addObservedPoint(-0.185, 3.13604E-13);\n        fitter.addObservedPoint(-0.184, 3.14248E-13);\n        fitter.addObservedPoint(-0.183, 3.1172E-13);\n        fitter.addObservedPoint(-0.182, 3.12912E-13);\n        fitter.addObservedPoint(-0.181, 3.06761E-13);\n        fitter.addObservedPoint(-0.18, 2.8559E-13);\n        fitter.addObservedPoint(-0.179, 2.86806E-13);\n        fitter.addObservedPoint(-0.178, 2.985E-13);\n        fitter.addObservedPoint(-0.177, 2.67148E-13);\n        fitter.addObservedPoint(-0.176, 2.94173E-13);\n        fitter.addObservedPoint(-0.175, 3.27528E-13);\n        fitter.addObservedPoint(-0.174, 3.33858E-13);\n        fitter.addObservedPoint(-0.173, 2.97511E-13);\n        fitter.addObservedPoint(-0.172, 2.8615E-13);\n        fitter.addObservedPoint(-0.171, 2.84624E-13);\n\n        final double[] coeff = fitter.fit(maxEval,\n                                          new PolynomialFunction.Parametric(),\n                                          init);\n        return coeff;\n    }\n    private void checkUnsolvableProblem(DifferentiableMultivariateVectorOptimizer optimizer,\n                                        boolean solvable) {\n        Random randomizer = new Random(1248788532l);\n        for (int degree = 0; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(optimizer);\n\n            // reusing the same point over and over again does not bring\n            // information, the problem cannot be solved in this case for\n            // degrees greater than 1 (but one point is sufficient for\n            // degree 0)\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                fitter.addObservedPoint(1.0, 0.0, p.value(0.0));\n            }\n\n            try {\n                final double[] init = new double[degree + 1];\n                fitter.fit(init);\n                Assert.assertTrue(solvable || (degree == 0));\n            } catch(ConvergenceException e) {\n                Assert.assertTrue((! solvable) && (degree > 0));\n            }\n        }\n    }\n    private PolynomialFunction buildRandomPolynomial(int degree, Random randomizer) {\n        final double[] coefficients = new double[degree + 1];\n        for (int i = 0; i <= degree; ++i) {\n            coefficients[i] = randomizer.nextGaussian();\n        }\n        return new PolynomialFunction(coefficients);\n    }\n    public void testLargeSample() {\n        Random randomizer = new Random(0x5551480dca5b369bl);\n        double maxError = 0;\n        for (int degree = 0; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n            for (int i = 0; i < 40000; ++i) {\n                double x = -1.0 + i / 20000.0;\n                fitter.addObservedPoint(1.0, x,\n                                        p.value(x) + 0.1 * randomizer.nextGaussian());\n            }\n\n            final double[] init = new double[degree + 1];\n            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n                              (1.0 + FastMath.abs(p.value(x)));\n                maxError = FastMath.max(maxError, error);\n                Assert.assertTrue(FastMath.abs(error) < 0.01);\n            }\n        }\n        Assert.assertTrue(maxError > 0.001);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Base class for implementing least-squares optimizers.\n * It provides methods for error estimation.\n *\n * @version $Id$\n * @since 3.1\n */\npublic abstract class AbstractLeastSquaresOptimizer\n    extends JacobianMultivariateVectorOptimizer {\n    private RealMatrix weightMatrixSqrt;\n    private double cost;\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     * If the weight matrix is specified, the {@link #weightMatrixSqrt}\n     * field is recomputed.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Weight}</li>\n     * </ul>\n     */\n    private void parseOptimizationData(OptimizationData... optData);\n}\n/**\n * Weight matrix of the residuals between model and observations.\n * <br/>\n * Immutable class.\n *\n * @version $Id: Weight.java 1416643 2012-12-03 19:37:14Z tn $\n * @since 3.1\n */\npublic class Weight implements OptimizationData {\n    private final RealMatrix weightMatrix;\n    /**\n     * Gets the initial guess.\n     *\n     * @return the initial guess.\n     */\n    public RealMatrix getWeight();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Base class for implementing least-squares optimizers.\n * It provides methods for error estimation.\n *\n * @version $Id$\n * @since 3.1\n */\npublic abstract class AbstractLeastSquaresOptimizer\n    extends JacobianMultivariateVectorOptimizer {\n    private RealMatrix weightMatrixSqrt;\n    private double cost;\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     * If the weight matrix is specified, the {@link #weightMatrixSqrt}\n     * field is recomputed.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Weight}</li>\n     * </ul>\n     */\n    private void parseOptimizationData(OptimizationData... optData);\n}\n/**\n * Weight matrix of the residuals between model and observations.\n * <br/>\n * Immutable class.\n *\n * @version $Id: Weight.java 1416643 2012-12-03 19:37:14Z tn $\n * @since 3.1\n */\npublic class Weight implements OptimizationData {\n    private final RealMatrix weightMatrix;\n    /**\n     * Gets the initial guess.\n     *\n     * @return the initial guess.\n     */\n    public RealMatrix getWeight();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * polynomial.\n */\npublic class PolynomialFitterTest {\n    private double[] doMath798(MultivariateVectorOptimizer optimizer,\n                               int maxEval,\n                               double[] init) {\n        final CurveFitter<Parametric> fitter = new CurveFitter<Parametric>(optimizer);\n\n        fitter.addObservedPoint(-0.2, -7.12442E-13);\n        fitter.addObservedPoint(-0.199, -4.33397E-13);\n        fitter.addObservedPoint(-0.198, -2.823E-13);\n        fitter.addObservedPoint(-0.197, -1.40405E-13);\n        fitter.addObservedPoint(-0.196, -7.80821E-15);\n        fitter.addObservedPoint(-0.195, 6.20484E-14);\n        fitter.addObservedPoint(-0.194, 7.24673E-14);\n        fitter.addObservedPoint(-0.193, 1.47152E-13);\n        fitter.addObservedPoint(-0.192, 1.9629E-13);\n        fitter.addObservedPoint(-0.191, 2.12038E-13);\n        fitter.addObservedPoint(-0.19, 2.46906E-13);\n        fitter.addObservedPoint(-0.189, 2.77495E-13);\n        fitter.addObservedPoint(-0.188, 2.51281E-13);\n        fitter.addObservedPoint(-0.187, 2.64001E-13);\n        fitter.addObservedPoint(-0.186, 2.8882E-13);\n        fitter.addObservedPoint(-0.185, 3.13604E-13);\n        fitter.addObservedPoint(-0.184, 3.14248E-13);\n        fitter.addObservedPoint(-0.183, 3.1172E-13);\n        fitter.addObservedPoint(-0.182, 3.12912E-13);\n        fitter.addObservedPoint(-0.181, 3.06761E-13);\n        fitter.addObservedPoint(-0.18, 2.8559E-13);\n        fitter.addObservedPoint(-0.179, 2.86806E-13);\n        fitter.addObservedPoint(-0.178, 2.985E-13);\n        fitter.addObservedPoint(-0.177, 2.67148E-13);\n        fitter.addObservedPoint(-0.176, 2.94173E-13);\n        fitter.addObservedPoint(-0.175, 3.27528E-13);\n        fitter.addObservedPoint(-0.174, 3.33858E-13);\n        fitter.addObservedPoint(-0.173, 2.97511E-13);\n        fitter.addObservedPoint(-0.172, 2.8615E-13);\n        fitter.addObservedPoint(-0.171, 2.84624E-13);\n\n        final double[] coeff = fitter.fit(maxEval,\n                                          new PolynomialFunction.Parametric(),\n                                          init);\n        return coeff;\n    }\n    private void checkUnsolvableProblem(MultivariateVectorOptimizer optimizer,\n                                        boolean solvable) {\n        Random randomizer = new Random(1248788532l);\n        for (int degree = 0; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(optimizer);\n\n            // reusing the same point over and over again does not bring\n            // information, the problem cannot be solved in this case for\n            // degrees greater than 1 (but one point is sufficient for\n            // degree 0)\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                fitter.addObservedPoint(1.0, 0.0, p.value(0.0));\n            }\n\n            try {\n                final double[] init = new double[degree + 1];\n                fitter.fit(init);\n                Assert.assertTrue(solvable || (degree == 0));\n            } catch(ConvergenceException e) {\n                Assert.assertTrue((! solvable) && (degree > 0));\n            }\n        }\n    }\n    private PolynomialFunction buildRandomPolynomial(int degree, Random randomizer) {\n        final double[] coefficients = new double[degree + 1];\n        for (int i = 0; i <= degree; ++i) {\n            coefficients[i] = randomizer.nextGaussian();\n        }\n        return new PolynomialFunction(coefficients);\n    }\n    public void testLargeSample() {\n        Random randomizer = new Random(0x5551480dca5b369bl);\n        double maxError = 0;\n        for (int degree = 0; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n            for (int i = 0; i < 40000; ++i) {\n                double x = -1.0 + i / 20000.0;\n                fitter.addObservedPoint(1.0, x,\n                                        p.value(x) + 0.1 * randomizer.nextGaussian());\n            }\n\n            final double[] init = new double[degree + 1];\n            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n                              (1.0 + FastMath.abs(p.value(x)));\n                maxError = FastMath.max(maxError, error);\n                Assert.assertTrue(FastMath.abs(error) < 0.01);\n            }\n        }\n        Assert.assertTrue(maxError > 0.001);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Faster, more accurate, portable alternative to {@link Math} and\n * {@link StrictMath} for large scale computation.\n * <p>\n * FastMath is a drop-in replacement for both Math and StrictMath. This\n * means that for any method in Math (say {@code Math.sin(x)} or\n * {@code Math.cbrt(y)}), user can directly change the class and use the\n * methods as is (using {@code FastMath.sin(x)} or {@code FastMath.cbrt(y)}\n * in the previous example).\n * </p>\n * <p>\n * FastMath speed is achieved by relying heavily on optimizing compilers\n * to native code present in many JVMs today and use of large tables.\n * The larger tables are lazily initialised on first use, so that the setup\n * time does not penalise methods that don't need them.\n * </p>\n * <p>\n * Note that FastMath is\n * extensively used inside Apache Commons Math, so by calling some algorithms,\n * the overhead when the the tables need to be intialised will occur\n * regardless of the end-user calling FastMath methods directly or not.\n * Performance figures for a specific JVM and hardware can be evaluated by\n * running the FastMathTestPerformance tests in the test directory of the source\n * distribution.\n * </p>\n * <p>\n * FastMath accuracy should be mostly independent of the JVM as it relies only\n * on IEEE-754 basic operations and on embedded tables. Almost all operations\n * are accurate to about 0.5 ulp throughout the domain range. This statement,\n * of course is only a rough global observed behavior, it is <em>not</em> a\n * guarantee for <em>every</em> double numbers input (see William Kahan's <a\n * href=\"http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma\">Table\n * Maker's Dilemma</a>).\n * </p>\n * <p>\n * FastMath additionally implements the following methods not found in Math/StrictMath:\n * <ul>\n * <li>{@link #asinh(double)}</li>\n * <li>{@link #acosh(double)}</li>\n * <li>{@link #atanh(double)}</li>\n * </ul>\n * The following methods are found in Math/StrictMath since 1.6 only, they are provided\n * by FastMath even in 1.5 Java virtual machines\n * <ul>\n * <li>{@link #copySign(double, double)}</li>\n * <li>{@link #getExponent(double)}</li>\n * <li>{@link #nextAfter(double,double)}</li>\n * <li>{@link #nextUp(double)}</li>\n * <li>{@link #scalb(double, int)}</li>\n * <li>{@link #copySign(float, float)}</li>\n * <li>{@link #getExponent(float)}</li>\n * <li>{@link #nextAfter(float,double)}</li>\n * <li>{@link #nextUp(float)}</li>\n * <li>{@link #scalb(float, int)}</li>\n * </ul>\n * </p>\n * @version $Id$\n * @since 2.2\n */\npublic class FastMath {\n    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);\n    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;\n    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;\n    private static final double LN_2_A = 0.693147063255310059;\n    private static final double LN_2_B = 1.17304635250823482e-7;\n    /**\n     * Internal helper method for exponential function.\n     * @param x original argument of the exponential function\n     * @param extra extra bits of precision on input (To Be Confirmed)\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return exp(x)\n     */\n    private static double exp(double x, double extra, double[] hiPrec);\n    /**\n     * Raise a double to an int power.\n     *\n     * @param d Number to raise.\n     * @param e Exponent.\n     * @return d<sup>e</sup>\n     */\n    public static double pow(double d, int e);\n    /**\n     * Get the high order bits from the mantissa.\n     * Equivalent to adding and subtracting HEX_40000 but also works for very large numbers\n     *\n     * @param d the value to split\n     * @return the high order part of the mantissa\n     */\n    private static double doubleHighPart(double d);\n    /**\n     * Exponential function.\n     *\n     * Computes exp(x), function result is nearly rounded.   It will be correctly\n     * rounded to the theoretical value for 99.9% of input values, otherwise it will\n     * have a 1 UPL error.\n     *\n     * Method:\n     *    Lookup intVal = exp(int(x))\n     *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );\n     *    Compute z as the exponential of the remaining bits by a polynomial minus one\n     *    exp(x) = intVal * fracVal * (1 + z)\n     *\n     * Accuracy:\n     *    Calculation is done with 63 bits of precision, so result should be correctly\n     *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n     *\n     * @param x   a double\n     * @return double e<sup>x</sup>\n     */\n    public static double exp(double x);\n    /** Compute the hyperbolic sine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic sine of x\n     */\n    public static double sinh(double x);\n    /**\n     * Power function.  Compute x^y.\n     *\n     * @param x   a double\n     * @param y   a double\n     * @return double\n     */\n    public static double pow(double x, double y);\n    /** Compute the hyperbolic cosine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic cosine of x\n     */\n    public static double cosh(double x);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Faster, more accurate, portable alternative to {@link Math} and\n * {@link StrictMath} for large scale computation.\n * <p>\n * FastMath is a drop-in replacement for both Math and StrictMath. This\n * means that for any method in Math (say {@code Math.sin(x)} or\n * {@code Math.cbrt(y)}), user can directly change the class and use the\n * methods as is (using {@code FastMath.sin(x)} or {@code FastMath.cbrt(y)}\n * in the previous example).\n * </p>\n * <p>\n * FastMath speed is achieved by relying heavily on optimizing compilers\n * to native code present in many JVMs today and use of large tables.\n * The larger tables are lazily initialised on first use, so that the setup\n * time does not penalise methods that don't need them.\n * </p>\n * <p>\n * Note that FastMath is\n * extensively used inside Apache Commons Math, so by calling some algorithms,\n * the overhead when the the tables need to be intialised will occur\n * regardless of the end-user calling FastMath methods directly or not.\n * Performance figures for a specific JVM and hardware can be evaluated by\n * running the FastMathTestPerformance tests in the test directory of the source\n * distribution.\n * </p>\n * <p>\n * FastMath accuracy should be mostly independent of the JVM as it relies only\n * on IEEE-754 basic operations and on embedded tables. Almost all operations\n * are accurate to about 0.5 ulp throughout the domain range. This statement,\n * of course is only a rough global observed behavior, it is <em>not</em> a\n * guarantee for <em>every</em> double numbers input (see William Kahan's <a\n * href=\"http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma\">Table\n * Maker's Dilemma</a>).\n * </p>\n * <p>\n * FastMath additionally implements the following methods not found in Math/StrictMath:\n * <ul>\n * <li>{@link #asinh(double)}</li>\n * <li>{@link #acosh(double)}</li>\n * <li>{@link #atanh(double)}</li>\n * </ul>\n * The following methods are found in Math/StrictMath since 1.6 only, they are provided\n * by FastMath even in 1.5 Java virtual machines\n * <ul>\n * <li>{@link #copySign(double, double)}</li>\n * <li>{@link #getExponent(double)}</li>\n * <li>{@link #nextAfter(double,double)}</li>\n * <li>{@link #nextUp(double)}</li>\n * <li>{@link #scalb(double, int)}</li>\n * <li>{@link #copySign(float, float)}</li>\n * <li>{@link #getExponent(float)}</li>\n * <li>{@link #nextAfter(float,double)}</li>\n * <li>{@link #nextUp(float)}</li>\n * <li>{@link #scalb(float, int)}</li>\n * </ul>\n * </p>\n * @version $Id$\n * @since 2.2\n */\npublic class FastMath {\n    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);\n    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;\n    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;\n    private static final double LN_2_A = 0.693147063255310059;\n    private static final double LN_2_B = 1.17304635250823482e-7;\n    /**\n     * Internal helper method for exponential function.\n     * @param x original argument of the exponential function\n     * @param extra extra bits of precision on input (To Be Confirmed)\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return exp(x)\n     */\n    private static double exp(double x, double extra, double[] hiPrec);\n    /**\n     * Raise a double to an int power.\n     *\n     * @param d Number to raise.\n     * @param e Exponent.\n     * @return d<sup>e</sup>\n     */\n    public static double pow(double d, int e);\n    /**\n     * Get the high order bits from the mantissa.\n     * Equivalent to adding and subtracting HEX_40000 but also works for very large numbers\n     *\n     * @param d the value to split\n     * @return the high order part of the mantissa\n     */\n    private static double doubleHighPart(double d);\n    /**\n     * Exponential function.\n     *\n     * Computes exp(x), function result is nearly rounded.   It will be correctly\n     * rounded to the theoretical value for 99.9% of input values, otherwise it will\n     * have a 1 UPL error.\n     *\n     * Method:\n     *    Lookup intVal = exp(int(x))\n     *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );\n     *    Compute z as the exponential of the remaining bits by a polynomial minus one\n     *    exp(x) = intVal * fracVal * (1 + z)\n     *\n     * Accuracy:\n     *    Calculation is done with 63 bits of precision, so result should be correctly\n     *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n     *\n     * @param x   a double\n     * @return double e<sup>x</sup>\n     */\n    public static double exp(double x);\n    /** Compute the hyperbolic sine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic sine of x\n     */\n    public static double sinh(double x);\n    /**\n     * Power function.  Compute x^y.\n     *\n     * @param x   a double\n     * @param y   a double\n     * @return double\n     */\n    public static double pow(double x, double y);\n    /** Compute the hyperbolic cosine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic cosine of x\n     */\n    public static double cosh(double x);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private Dfp cosh(Dfp x) {\n      return DfpMath.exp(x).add(DfpMath.exp(x.negate())).divide(2);\n    }\n    private Dfp sinh(Dfp x) {\n      return DfpMath.exp(x).subtract(DfpMath.exp(x.negate())).divide(2);\n    }\n    private Dfp tanh(Dfp x) {\n      return sinh(x).divide(cosh(x));\n    }\n    private Dfp cbrt(Dfp x) {\n      boolean negative=false;\n\n      if (x.lessThan(field.getZero())) {\n          negative = true;\n          x = x.negate();\n      }\n\n      Dfp y = DfpMath.pow(x, field.getOne().divide(3));\n\n      if (negative) {\n          y = y.negate();\n      }\n\n      return y;\n    }\n    private boolean compareClassMethods(Class<?> class1, Class<?> class2){\n        boolean allfound = true;\n        for(Method method1 : class1.getDeclaredMethods()){\n            if (Modifier.isPublic(method1.getModifiers())){\n                Type []params = method1.getGenericParameterTypes();\n                try {\n                    class2.getDeclaredMethod(method1.getName(), (Class[]) params);\n                } catch (NoSuchMethodException e) {\n                    allfound = false;\n                    System.out.println(class2.getSimpleName()+\" does not implement: \"+method1);\n                }\n            }\n        }\n        return allfound;\n    }\n    public void testMath904() {\n        final double x = -1;\n        final double y = (5 + 1e-15) * 1e15;\n        Assert.assertEquals(Math.pow(x, y), FastMath.pow(x, y), 0);\n        Assert.assertEquals(Math.pow(x, -y), FastMath.pow(x, -y), 0);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Faster, more accurate, portable alternative to {@link Math} and\n * {@link StrictMath} for large scale computation.\n * <p>\n * FastMath is a drop-in replacement for both Math and StrictMath. This\n * means that for any method in Math (say {@code Math.sin(x)} or\n * {@code Math.cbrt(y)}), user can directly change the class and use the\n * methods as is (using {@code FastMath.sin(x)} or {@code FastMath.cbrt(y)}\n * in the previous example).\n * </p>\n * <p>\n * FastMath speed is achieved by relying heavily on optimizing compilers\n * to native code present in many JVMs today and use of large tables.\n * The larger tables are lazily initialised on first use, so that the setup\n * time does not penalise methods that don't need them.\n * </p>\n * <p>\n * Note that FastMath is\n * extensively used inside Apache Commons Math, so by calling some algorithms,\n * the overhead when the the tables need to be intialised will occur\n * regardless of the end-user calling FastMath methods directly or not.\n * Performance figures for a specific JVM and hardware can be evaluated by\n * running the FastMathTestPerformance tests in the test directory of the source\n * distribution.\n * </p>\n * <p>\n * FastMath accuracy should be mostly independent of the JVM as it relies only\n * on IEEE-754 basic operations and on embedded tables. Almost all operations\n * are accurate to about 0.5 ulp throughout the domain range. This statement,\n * of course is only a rough global observed behavior, it is <em>not</em> a\n * guarantee for <em>every</em> double numbers input (see William Kahan's <a\n * href=\"http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma\">Table\n * Maker's Dilemma</a>).\n * </p>\n * <p>\n * FastMath additionally implements the following methods not found in Math/StrictMath:\n * <ul>\n * <li>{@link #asinh(double)}</li>\n * <li>{@link #acosh(double)}</li>\n * <li>{@link #atanh(double)}</li>\n * </ul>\n * The following methods are found in Math/StrictMath since 1.6 only, they are provided\n * by FastMath even in 1.5 Java virtual machines\n * <ul>\n * <li>{@link #copySign(double, double)}</li>\n * <li>{@link #getExponent(double)}</li>\n * <li>{@link #nextAfter(double,double)}</li>\n * <li>{@link #nextUp(double)}</li>\n * <li>{@link #scalb(double, int)}</li>\n * <li>{@link #copySign(float, float)}</li>\n * <li>{@link #getExponent(float)}</li>\n * <li>{@link #nextAfter(float,double)}</li>\n * <li>{@link #nextUp(float)}</li>\n * <li>{@link #scalb(float, int)}</li>\n * </ul>\n * </p>\n * @version $Id$\n * @since 2.2\n */\npublic class FastMath {\n    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;\n    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;\n    private static final double LN_2_A = 0.693147063255310059;\n    private static final double LN_2_B = 1.17304635250823482e-7;\n    /**\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     */\n    public static long abs(final long x);\n    /**\n     * Get the high order bits from the mantissa.\n     * Equivalent to adding and subtracting HEX_40000 but also works for very large numbers\n     *\n     * @param d the value to split\n     * @return the high order part of the mantissa\n     */\n    private static double doubleHighPart(double d);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static int max(final int a, final int b);\n    /**\n     * Compute least significant bit (Unit in Last Position) for a number.\n     * @param x number from which ulp is requested\n     * @return ulp(x)\n     */\n    public static float ulp(float x);\n    /**\n     * Power function.  Compute x^y.\n     *\n     * @param x   a double\n     * @param y   a double\n     * @return double\n     */\n    public static double pow(double x, double y);\n    /**\n     * Internal helper method for natural logarithm function.\n     * @param x original argument of the natural logarithm function\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return log(x)\n     */\n    private static double log(final double x, final double[] hiPrec);\n    /**\n     * Internal helper method for exponential function.\n     * @param x original argument of the exponential function\n     * @param extra extra bits of precision on input (To Be Confirmed)\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return exp(x)\n     */\n    private static double exp(double x, double extra, double[] hiPrec);\n    /** Compute the square root of a number.\n     * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}\n     * @param a number on which evaluation is done\n     * @return square root of a\n     */\n    public static double sqrt(final double a);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static double max(final double a, final double b);\n    /**\n     * Natural logarithm.\n     *\n     * @param x   a double\n     * @return log(x)\n     */\n    public static double log(final double x);\n    /** Compute the hyperbolic cosine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic cosine of x\n     */\n    public static double cosh(double x);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static long max(final long a, final long b);\n    /**\n     * Computes the <a href=\"http://mathworld.wolfram.com/Logarithm.html\">\n     * logarithm</a> in a given base.\n     *\n     * Returns {@code NaN} if either argument is negative.\n     * If {@code base} is 0 and {@code x} is positive, 0 is returned.\n     * If {@code base} is positive and {@code x} is 0,\n     * {@code Double.NEGATIVE_INFINITY} is returned.\n     * If both arguments are 0, the result is {@code NaN}.\n     *\n     * @param base Base of the logarithm, must be greater than 0.\n     * @param x Argument, must be greater than 0.\n     * @return the value of the logarithm, i.e. the number {@code y} such that\n     * <code>base<sup>y</sup> = x</code>.\n     * @since 1.2 (previously in {@code MathUtils}, moved as of version 3.0)\n     */\n    public static double log(double base, double x);\n    /**\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     */\n    public static float abs(final float x);\n    /**\n     * Compute least significant bit (Unit in Last Position) for a number.\n     * @param x number from which ulp is requested\n     * @return ulp(x)\n     */\n    public static double ulp(double x);\n    /**\n     * Raise a double to an int power.\n     *\n     * @param d Number to raise.\n     * @param e Exponent.\n     * @return d<sup>e</sup>\n     */\n    public static double pow(double d, int e);\n    /** Compute the hyperbolic sine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic sine of x\n     */\n    public static double sinh(double x);\n    /**\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     */\n    public static int abs(final int x);\n    /**\n     * Exponential function.\n     *\n     * Computes exp(x), function result is nearly rounded.   It will be correctly\n     * rounded to the theoretical value for 99.9% of input values, otherwise it will\n     * have a 1 UPL error.\n     *\n     * Method:\n     *    Lookup intVal = exp(int(x))\n     *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );\n     *    Compute z as the exponential of the remaining bits by a polynomial minus one\n     *    exp(x) = intVal * fracVal * (1 + z)\n     *\n     * Accuracy:\n     *    Calculation is done with 63 bits of precision, so result should be correctly\n     *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n     *\n     * @param x   a double\n     * @return double e<sup>x</sup>\n     */\n    public static double exp(double x);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static float max(final float a, final float b);\n    /**\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     */\n    public static double abs(double x);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Faster, more accurate, portable alternative to {@link Math} and\n * {@link StrictMath} for large scale computation.\n * <p>\n * FastMath is a drop-in replacement for both Math and StrictMath. This\n * means that for any method in Math (say {@code Math.sin(x)} or\n * {@code Math.cbrt(y)}), user can directly change the class and use the\n * methods as is (using {@code FastMath.sin(x)} or {@code FastMath.cbrt(y)}\n * in the previous example).\n * </p>\n * <p>\n * FastMath speed is achieved by relying heavily on optimizing compilers\n * to native code present in many JVMs today and use of large tables.\n * The larger tables are lazily initialised on first use, so that the setup\n * time does not penalise methods that don't need them.\n * </p>\n * <p>\n * Note that FastMath is\n * extensively used inside Apache Commons Math, so by calling some algorithms,\n * the overhead when the the tables need to be intialised will occur\n * regardless of the end-user calling FastMath methods directly or not.\n * Performance figures for a specific JVM and hardware can be evaluated by\n * running the FastMathTestPerformance tests in the test directory of the source\n * distribution.\n * </p>\n * <p>\n * FastMath accuracy should be mostly independent of the JVM as it relies only\n * on IEEE-754 basic operations and on embedded tables. Almost all operations\n * are accurate to about 0.5 ulp throughout the domain range. This statement,\n * of course is only a rough global observed behavior, it is <em>not</em> a\n * guarantee for <em>every</em> double numbers input (see William Kahan's <a\n * href=\"http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma\">Table\n * Maker's Dilemma</a>).\n * </p>\n * <p>\n * FastMath additionally implements the following methods not found in Math/StrictMath:\n * <ul>\n * <li>{@link #asinh(double)}</li>\n * <li>{@link #acosh(double)}</li>\n * <li>{@link #atanh(double)}</li>\n * </ul>\n * The following methods are found in Math/StrictMath since 1.6 only, they are provided\n * by FastMath even in 1.5 Java virtual machines\n * <ul>\n * <li>{@link #copySign(double, double)}</li>\n * <li>{@link #getExponent(double)}</li>\n * <li>{@link #nextAfter(double,double)}</li>\n * <li>{@link #nextUp(double)}</li>\n * <li>{@link #scalb(double, int)}</li>\n * <li>{@link #copySign(float, float)}</li>\n * <li>{@link #getExponent(float)}</li>\n * <li>{@link #nextAfter(float,double)}</li>\n * <li>{@link #nextUp(float)}</li>\n * <li>{@link #scalb(float, int)}</li>\n * </ul>\n * </p>\n * @version $Id$\n * @since 2.2\n */\npublic class FastMath {\n    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;\n    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;\n    private static final double LN_2_A = 0.693147063255310059;\n    private static final double LN_2_B = 1.17304635250823482e-7;\n    /**\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     */\n    public static long abs(final long x);\n    /**\n     * Get the high order bits from the mantissa.\n     * Equivalent to adding and subtracting HEX_40000 but also works for very large numbers\n     *\n     * @param d the value to split\n     * @return the high order part of the mantissa\n     */\n    private static double doubleHighPart(double d);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static int max(final int a, final int b);\n    /**\n     * Compute least significant bit (Unit in Last Position) for a number.\n     * @param x number from which ulp is requested\n     * @return ulp(x)\n     */\n    public static float ulp(float x);\n    /**\n     * Power function.  Compute x^y.\n     *\n     * @param x   a double\n     * @param y   a double\n     * @return double\n     */\n    public static double pow(double x, double y);\n    /**\n     * Internal helper method for natural logarithm function.\n     * @param x original argument of the natural logarithm function\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return log(x)\n     */\n    private static double log(final double x, final double[] hiPrec);\n    /**\n     * Internal helper method for exponential function.\n     * @param x original argument of the exponential function\n     * @param extra extra bits of precision on input (To Be Confirmed)\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return exp(x)\n     */\n    private static double exp(double x, double extra, double[] hiPrec);\n    /** Compute the square root of a number.\n     * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}\n     * @param a number on which evaluation is done\n     * @return square root of a\n     */\n    public static double sqrt(final double a);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static double max(final double a, final double b);\n    /**\n     * Natural logarithm.\n     *\n     * @param x   a double\n     * @return log(x)\n     */\n    public static double log(final double x);\n    /** Compute the hyperbolic cosine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic cosine of x\n     */\n    public static double cosh(double x);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static long max(final long a, final long b);\n    /**\n     * Computes the <a href=\"http://mathworld.wolfram.com/Logarithm.html\">\n     * logarithm</a> in a given base.\n     *\n     * Returns {@code NaN} if either argument is negative.\n     * If {@code base} is 0 and {@code x} is positive, 0 is returned.\n     * If {@code base} is positive and {@code x} is 0,\n     * {@code Double.NEGATIVE_INFINITY} is returned.\n     * If both arguments are 0, the result is {@code NaN}.\n     *\n     * @param base Base of the logarithm, must be greater than 0.\n     * @param x Argument, must be greater than 0.\n     * @return the value of the logarithm, i.e. the number {@code y} such that\n     * <code>base<sup>y</sup> = x</code>.\n     * @since 1.2 (previously in {@code MathUtils}, moved as of version 3.0)\n     */\n    public static double log(double base, double x);\n    /**\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     */\n    public static float abs(final float x);\n    /**\n     * Compute least significant bit (Unit in Last Position) for a number.\n     * @param x number from which ulp is requested\n     * @return ulp(x)\n     */\n    public static double ulp(double x);\n    /**\n     * Raise a double to an int power.\n     *\n     * @param d Number to raise.\n     * @param e Exponent.\n     * @return d<sup>e</sup>\n     */\n    public static double pow(double d, int e);\n    /** Compute the hyperbolic sine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic sine of x\n     */\n    public static double sinh(double x);\n    /**\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     */\n    public static int abs(final int x);\n    /**\n     * Exponential function.\n     *\n     * Computes exp(x), function result is nearly rounded.   It will be correctly\n     * rounded to the theoretical value for 99.9% of input values, otherwise it will\n     * have a 1 UPL error.\n     *\n     * Method:\n     *    Lookup intVal = exp(int(x))\n     *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );\n     *    Compute z as the exponential of the remaining bits by a polynomial minus one\n     *    exp(x) = intVal * fracVal * (1 + z)\n     *\n     * Accuracy:\n     *    Calculation is done with 63 bits of precision, so result should be correctly\n     *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n     *\n     * @param x   a double\n     * @return double e<sup>x</sup>\n     */\n    public static double exp(double x);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static float max(final float a, final float b);\n    /**\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     */\n    public static double abs(double x);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private Dfp cosh(Dfp x) {\n      return DfpMath.exp(x).add(DfpMath.exp(x.negate())).divide(2);\n    }\n    private Dfp sinh(Dfp x) {\n      return DfpMath.exp(x).subtract(DfpMath.exp(x.negate())).divide(2);\n    }\n    private Dfp tanh(Dfp x) {\n      return sinh(x).divide(cosh(x));\n    }\n    private Dfp cbrt(Dfp x) {\n      boolean negative=false;\n\n      if (x.lessThan(field.getZero())) {\n          negative = true;\n          x = x.negate();\n      }\n\n      Dfp y = DfpMath.pow(x, field.getOne().divide(3));\n\n      if (negative) {\n          y = y.negate();\n      }\n\n      return y;\n    }\n    private boolean compareClassMethods(Class<?> class1, Class<?> class2){\n        boolean allfound = true;\n        for(Method method1 : class1.getDeclaredMethods()){\n            if (Modifier.isPublic(method1.getModifiers())){\n                Type []params = method1.getGenericParameterTypes();\n                try {\n                    class2.getDeclaredMethod(method1.getName(), (Class[]) params);\n                } catch (NoSuchMethodException e) {\n                    allfound = false;\n                    System.out.println(class2.getSimpleName()+\" does not implement: \"+method1);\n                }\n            }\n        }\n        return allfound;\n    }\n    public void testMath905LargePositive() {\n        final double start = StrictMath.log(Double.MAX_VALUE);\n        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);\n        final double end = 2 * StrictMath.log(endT);\n\n        double maxErr = 0;\n        for (double x = start; x < end; x += 1e-3) {\n            final double tst = FastMath.cosh(x);\n            final double ref = Math.cosh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n        }\n        Assert.assertEquals(0, maxErr, 3);\n\n        for (double x = start; x < end; x += 1e-3) {\n            final double tst = FastMath.sinh(x);\n            final double ref = Math.sinh(x);\n            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n        }\n        Assert.assertEquals(0, maxErr, 3);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @version $Id$\n * @since 2.2\n */\npublic class Dfp implements FieldElement<Dfp> {\n    public static final int RADIX = 10000;\n    public static final int MIN_EXP = -32767;\n    public static final int MAX_EXP =  32768;\n    public static final int ERR_SCALE = 32760;\n    public static final byte FINITE = 0;\n    public static final byte INFINITE = 1;\n    public static final byte SNAN = 2;\n    public static final byte QNAN = 3;\n    private static final String NAN_STRING = \"NaN\";\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n    private static final String ADD_TRAP = \"add\";\n    private static final String MULTIPLY_TRAP = \"multiply\";\n    private static final String DIVIDE_TRAP = \"divide\";\n    private static final String SQRT_TRAP = \"sqrt\";\n    private static final String ALIGN_TRAP = \"align\";\n    private static final String TRUNC_TRAP = \"trunc\";\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n    private final DfpField field;\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other);\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x);\n    /** Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField();\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x);\n    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x);\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x);\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final Dfp x);\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @version $Id$\n * @since 2.2\n */\npublic class Dfp implements FieldElement<Dfp> {\n    public static final int RADIX = 10000;\n    public static final int MIN_EXP = -32767;\n    public static final int MAX_EXP =  32768;\n    public static final int ERR_SCALE = 32760;\n    public static final byte FINITE = 0;\n    public static final byte INFINITE = 1;\n    public static final byte SNAN = 2;\n    public static final byte QNAN = 3;\n    private static final String NAN_STRING = \"NaN\";\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n    private static final String ADD_TRAP = \"add\";\n    private static final String MULTIPLY_TRAP = \"multiply\";\n    private static final String DIVIDE_TRAP = \"divide\";\n    private static final String SQRT_TRAP = \"sqrt\";\n    private static final String ALIGN_TRAP = \"align\";\n    private static final String TRUNC_TRAP = \"trunc\";\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n    private final DfpField field;\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other);\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x);\n    /** Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField();\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x);\n    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x);\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x);\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final Dfp x);\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void test(Dfp x, Dfp y, int flags, String desc)\n    {\n        boolean b = x.equals(y);\n\n        if (!x.equals(y) && !x.unequal(y))  // NaNs involved\n            b = (x.toString().equals(y.toString()));\n\n        if (x.equals(field.newDfp(\"0\")))  // distinguish +/- zero\n            b = (b && (x.toString().equals(y.toString())));\n\n        b = (b && x.getField().getIEEEFlags() == flags);\n\n        if (!b)\n            Assert.assertTrue(\"assersion failed \"+desc+\" x = \"+x.toString()+\" flags = \"+x.getField().getIEEEFlags(), b);\n\n        x.getField().clearIEEEFlags();\n    }\n    private void cmptst(Dfp a, Dfp b, String op, boolean result, double num)\n    {\n        if (op == \"equal\")\n            if (a.equals(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n\n        if (op == \"unequal\")\n            if (a.unequal(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n\n        if (op == \"lessThan\")\n            if (a.lessThan(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n\n        if (op == \"greaterThan\")\n            if (a.greaterThan(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n    }\n    public void testMultiply()\n    {\n        test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");\n\n        test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");\n\n        test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");\n\n        test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");\n\n        // basic tests with integers\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");\n\n        test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");\n\n        test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");\n\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");\n\n        //multiply by zero\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");\n\n        test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");\n\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");\n\n        test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");\n\n        test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");\n\n        test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");\n\n        test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");\n\n        test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");\n\n        test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");\n\n        test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");\n\n        test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");\n\n        test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");\n\n        test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");\n\n        test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");\n\n        test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");\n\n        test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");\n\n        test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");\n\n        test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");\n\n        test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");\n\n        test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");\n\n        test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");\n\n        test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");\n\n        test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");\n\n        test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");\n\n        test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");\n\n        test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");\n\n        test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");\n\n        test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");\n\n        test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");\n\n        test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.</p>\n *\n * <p>In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.</p>\n *\n * <p>The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.</p>\n *\n * <p>This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.</p>\n *\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * When simple constraints (boundaries) are used, care must be taken that the\n * difference between the upper and lower bounds does not overflow; should it\n * be the case, a {@link NumberIsTooLargeException} will be thrown by the\n * {@link BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,\n * MultivariateFunction,GoalType,double[],double[],double[]) optimize} method.\n *\n * @version $Id$\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    public static final int DEFAULT_CHECKFEASABLECOUNT = 0;\n    public static final double DEFAULT_STOPFITNESS = 0;\n    public static final boolean DEFAULT_ISACTIVECMA = true;\n    public static final int DEFAULT_MAXITERATIONS = 30000;\n    public static final int DEFAULT_DIAGONALONLY = 0;\n    public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();\n    private int lambda; // population size\n    private boolean isActiveCMA;\n    private int checkFeasableCount;\n    private double[][] boundaries;\n    private double[] inputSigma;\n    private int dimension;\n    private int diagonalOnly = 0;\n    private boolean isMinimize = true;\n    private boolean generateStatistics = false;\n    private int maxIterations;\n    private double stopFitness;\n    private double stopTolUpX;\n    private double stopTolX;\n    private double stopTolFun;\n    private double stopTolHistFun;\n    private int mu; //\n    private double logMu2;\n    private RealMatrix weights;\n    private double mueff; //\n    private double sigma;\n    private double cc;\n    private double cs;\n    private double damps;\n    private double ccov1;\n    private double ccovmu;\n    private double chiN;\n    private double ccov1Sep;\n    private double ccovmuSep;\n    private RealMatrix xmean;\n    private RealMatrix pc;\n    private RealMatrix ps;\n    private double normps;\n    private RealMatrix B;\n    private RealMatrix D;\n    private RealMatrix BD;\n    private RealMatrix diagD;\n    private RealMatrix C;\n    private RealMatrix diagC;\n    private int iterations;\n    private double[] fitnessHistory;\n    private int historySize;\n    private RandomGenerator random;\n    private List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    private List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.</p>\n *\n * <p>In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.</p>\n *\n * <p>The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.</p>\n *\n * <p>This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.</p>\n *\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * When simple constraints (boundaries) are used, care must be taken that the\n * difference between the upper and lower bounds does not overflow; should it\n * be the case, a {@link NumberIsTooLargeException} will be thrown by the\n * {@link BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,\n * MultivariateFunction,GoalType,double[],double[],double[]) optimize} method.\n *\n * @version $Id$\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    public static final int DEFAULT_CHECKFEASABLECOUNT = 0;\n    public static final double DEFAULT_STOPFITNESS = 0;\n    public static final boolean DEFAULT_ISACTIVECMA = true;\n    public static final int DEFAULT_MAXITERATIONS = 30000;\n    public static final int DEFAULT_DIAGONALONLY = 0;\n    public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();\n    private int lambda; // population size\n    private boolean isActiveCMA;\n    private int checkFeasableCount;\n    private double[][] boundaries;\n    private double[] inputSigma;\n    private int dimension;\n    private int diagonalOnly = 0;\n    private boolean isMinimize = true;\n    private boolean generateStatistics = false;\n    private int maxIterations;\n    private double stopFitness;\n    private double stopTolUpX;\n    private double stopTolX;\n    private double stopTolFun;\n    private double stopTolHistFun;\n    private int mu; //\n    private double logMu2;\n    private RealMatrix weights;\n    private double mueff; //\n    private double sigma;\n    private double cc;\n    private double cs;\n    private double damps;\n    private double ccov1;\n    private double ccovmu;\n    private double chiN;\n    private double ccov1Sep;\n    private double ccovmuSep;\n    private RealMatrix xmean;\n    private RealMatrix pc;\n    private RealMatrix ps;\n    private double normps;\n    private RealMatrix B;\n    private RealMatrix D;\n    private RealMatrix BD;\n    private RealMatrix diagD;\n    private RealMatrix C;\n    private RealMatrix diagC;\n    private int iterations;\n    private double[] fitnessHistory;\n    private int historySize;\n    private RandomGenerator random;\n    private List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    private List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void doTest(MultivariateFunction func,\n            double[] startPoint,\n            double[] inSigma,\n            double[][] boundaries,\n            GoalType goal,\n            int lambda,\n            boolean isActive,\n            int diagonalOnly, \n            double stopValue,\n            double fTol,\n            double pointTol,\n            int maxEvaluations,\n            PointValuePair expected) {\n        int dim = startPoint.length;\n        // test diagonalOnly = 0 - slow but normally fewer feval#\n        CMAESOptimizer optim = new CMAESOptimizer(lambda, inSigma, 30000,\n                                                  stopValue, isActive, diagonalOnly,\n                                                  0, new MersenneTwister(), false);\n        final double[] lB = boundaries == null ? null : boundaries[0];\n        final double[] uB = boundaries == null ? null : boundaries[1];\n        PointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);\n        // System.out.println(\"sol=\" + Arrays.toString(result.getPoint()));\n        Assert.assertEquals(expected.getValue(), result.getValue(), fTol);\n        for (int i = 0; i < dim; i++) {\n            Assert.assertEquals(expected.getPoint()[i], result.getPoint()[i], pointTol);\n        }\n    }\n    private static double[] point(int n, double value) {\n        double[] ds = new double[n];\n        Arrays.fill(ds, value);\n        return ds;\n    }\n    private static double[][] boundaries(int dim,\n            double lower, double upper) {\n        double[][] boundaries = new double[2][dim];\n        for (int i = 0; i < dim; i++)\n            boundaries[0][i] = lower;\n        for (int i = 0; i < dim; i++)\n            boundaries[1][i] = upper;\n        return boundaries;\n    }\n    public void testFitAccuracyDependsOnBoundary() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 1 };\n \n        // No bounds.\n        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start);\n        final double resNoBound = result.getPoint()[0];\n\n        // Optimum is near the lower bound.\n        final double[] lower = { -20 };\n        final double[] upper = { 5e16 };\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearLo = result.getPoint()[0];\n\n        // Optimum is near the upper bound.\n        lower[0] = -5e16;\n        upper[0] = 20;\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearHi = result.getPoint()[0];\n\n        // System.out.println(\"resNoBound=\" + resNoBound +\n        //                    \" resNearLo=\" + resNearLo +\n        //                    \" resNearHi=\" + resNearHi);\n\n        // The two values currently differ by a substantial amount, indicating that\n        // the bounds definition can prevent reaching the optimum.\n        Assert.assertEquals(resNoBound, resNearLo, 1e-3);\n        Assert.assertEquals(resNoBound, resNearHi, 1e-3);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.</p>\n *\n * <p>In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.</p>\n *\n * <p>The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.</p>\n *\n * <p>This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.</p>\n *\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * When simple constraints (boundaries) are used, care must be taken that the\n * difference between the upper and lower bounds does not overflow; should it\n * be the case, a {@link NumberIsTooLargeException} will be thrown by the\n * {@link BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,\n * MultivariateFunction,GoalType,double[],double[],double[]) optimize} method.\n *\n * @version $Id$\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    public static final int DEFAULT_CHECKFEASABLECOUNT = 0;\n    public static final double DEFAULT_STOPFITNESS = 0;\n    public static final boolean DEFAULT_ISACTIVECMA = true;\n    public static final int DEFAULT_MAXITERATIONS = 30000;\n    public static final int DEFAULT_DIAGONALONLY = 0;\n    public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();\n    private int lambda; // population size\n    private boolean isActiveCMA;\n    private int checkFeasableCount;\n    private double[][] boundaries;\n    private double[] inputSigma;\n    private int dimension;\n    private int diagonalOnly = 0;\n    private boolean isMinimize = true;\n    private boolean generateStatistics = false;\n    private int maxIterations;\n    private double stopFitness;\n    private double stopTolUpX;\n    private double stopTolX;\n    private double stopTolFun;\n    private double stopTolHistFun;\n    private int mu; //\n    private double logMu2;\n    private RealMatrix weights;\n    private double mueff; //\n    private double sigma;\n    private double cc;\n    private double cs;\n    private double damps;\n    private double ccov1;\n    private double ccovmu;\n    private double chiN;\n    private double ccov1Sep;\n    private double ccovmuSep;\n    private RealMatrix xmean;\n    private RealMatrix pc;\n    private RealMatrix ps;\n    private double normps;\n    private RealMatrix B;\n    private RealMatrix D;\n    private RealMatrix BD;\n    private RealMatrix diagD;\n    private RealMatrix C;\n    private RealMatrix diagC;\n    private int iterations;\n    private double[] fitnessHistory;\n    private int historySize;\n    private RandomGenerator random;\n    private List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    private List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.</p>\n *\n * <p>In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.</p>\n *\n * <p>The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.</p>\n *\n * <p>This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.</p>\n *\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * When simple constraints (boundaries) are used, care must be taken that the\n * difference between the upper and lower bounds does not overflow; should it\n * be the case, a {@link NumberIsTooLargeException} will be thrown by the\n * {@link BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,\n * MultivariateFunction,GoalType,double[],double[],double[]) optimize} method.\n *\n * @version $Id$\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    public static final int DEFAULT_CHECKFEASABLECOUNT = 0;\n    public static final double DEFAULT_STOPFITNESS = 0;\n    public static final boolean DEFAULT_ISACTIVECMA = true;\n    public static final int DEFAULT_MAXITERATIONS = 30000;\n    public static final int DEFAULT_DIAGONALONLY = 0;\n    public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();\n    private int lambda; // population size\n    private boolean isActiveCMA;\n    private int checkFeasableCount;\n    private double[][] boundaries;\n    private double[] inputSigma;\n    private int dimension;\n    private int diagonalOnly = 0;\n    private boolean isMinimize = true;\n    private boolean generateStatistics = false;\n    private int maxIterations;\n    private double stopFitness;\n    private double stopTolUpX;\n    private double stopTolX;\n    private double stopTolFun;\n    private double stopTolHistFun;\n    private int mu; //\n    private double logMu2;\n    private RealMatrix weights;\n    private double mueff; //\n    private double sigma;\n    private double cc;\n    private double cs;\n    private double damps;\n    private double ccov1;\n    private double ccovmu;\n    private double chiN;\n    private double ccov1Sep;\n    private double ccovmuSep;\n    private RealMatrix xmean;\n    private RealMatrix pc;\n    private RealMatrix ps;\n    private double normps;\n    private RealMatrix B;\n    private RealMatrix D;\n    private RealMatrix BD;\n    private RealMatrix diagD;\n    private RealMatrix C;\n    private RealMatrix diagC;\n    private int iterations;\n    private double[] fitnessHistory;\n    private int historySize;\n    private RandomGenerator random;\n    private List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    private List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void doTest(MultivariateFunction func,\n            double[] startPoint,\n            double[] inSigma,\n            double[][] boundaries,\n            GoalType goal,\n            int lambda,\n            boolean isActive,\n            int diagonalOnly, \n            double stopValue,\n            double fTol,\n            double pointTol,\n            int maxEvaluations,\n            PointValuePair expected) {\n        int dim = startPoint.length;\n        // test diagonalOnly = 0 - slow but normally fewer feval#\n        CMAESOptimizer optim = new CMAESOptimizer( lambda, inSigma, 30000,\n                                                   stopValue, isActive, diagonalOnly,\n                                                   0, new MersenneTwister(), false);\n        final double[] lB = boundaries == null ? null : boundaries[0];\n        final double[] uB = boundaries == null ? null : boundaries[1];\n        PointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);\n        Assert.assertEquals(expected.getValue(),\n                result.getValue(), fTol);\n        for (int i = 0; i < dim; i++) {\n            Assert.assertEquals(expected.getPoint()[i],\n                    result.getPoint()[i], pointTol);\n        }\n    }\n    private static double[] point(int n, double value) {\n        double[] ds = new double[n];\n        Arrays.fill(ds, value);\n        return ds;\n    }\n    private static double[][] boundaries(int dim,\n            double lower, double upper) {\n        double[][] boundaries = new double[2][dim];\n        for (int i = 0; i < dim; i++)\n            boundaries[0][i] = lower;\n        for (int i = 0; i < dim; i++)\n            boundaries[1][i] = upper;\n        return boundaries;\n    }\n    public void testBoundaryRangeTooLarge() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    if (Double.isNaN(parameters[0])) {\n                        throw new MathIllegalStateException();\n                    }\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 0 };\n\n        // The difference between upper and lower bounds is used to used\n        // normalize the variables: In case of overflow, NaN is produced.\n        final double max = Double.MAX_VALUE / 2;\n        final double tooLarge = FastMath.nextUp(max);\n        final double[] lower = { -tooLarge };\n        final double[] upper = { tooLarge };\n        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start, lower, upper).getPoint();\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implementation of the hypergeometric distribution.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/Hypergeometric_distribution\">Hypergeometric distribution (Wikipedia)</a>\n * @see <a href=\"http://mathworld.wolfram.com/HypergeometricDistribution.html\">Hypergeometric distribution (MathWorld)</a>\n * @version $Id$\n */\npublic class HypergeometricDistribution extends AbstractIntegerDistribution {\n    private static final long serialVersionUID = -436928820673516179L;\n    private final int numberOfSuccesses;\n    private final int populationSize;\n    private final int sampleSize;\n    private double numericalVariance = Double.NaN;\n    private boolean numericalVarianceIsCalculated = false;\n    /**\n     * For this distribution, {@code X}, this method returns {@code P(X >= x)}.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return the upper tail CDF for this distribution.\n     * @since 1.1\n     */\n    public double upperCumulativeProbability(int x);\n    /**\n     * For this distribution, {@code X}, this method returns\n     * {@code P(x0 <= X <= x1)}.\n     * This probability is computed by summing the point probabilities for the\n     * values {@code x0, x0 + 1, x0 + 2, ..., x1}, in the order directed by\n     * {@code dx}.\n     *\n     * @param x0 Inclusive lower bound.\n     * @param x1 Inclusive upper bound.\n     * @param dx Direction of summation (1 indicates summing from x0 to x1, and\n     * 0 indicates summing from x1 to x0).\n     * @return {@code P(x0 <= X <= x1)}.\n     */\n    private double innerCumulativeProbability(int x0, int x1, int dx);\n    /** {@inheritDoc} */\n    public double probability(int x);\n    /** {@inheritDoc} */\n    public double cumulativeProbability(int x);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implementation of the hypergeometric distribution.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/Hypergeometric_distribution\">Hypergeometric distribution (Wikipedia)</a>\n * @see <a href=\"http://mathworld.wolfram.com/HypergeometricDistribution.html\">Hypergeometric distribution (MathWorld)</a>\n * @version $Id$\n */\npublic class HypergeometricDistribution extends AbstractIntegerDistribution {\n    private static final long serialVersionUID = -436928820673516179L;\n    private final int numberOfSuccesses;\n    private final int populationSize;\n    private final int sampleSize;\n    private double numericalVariance = Double.NaN;\n    private boolean numericalVarianceIsCalculated = false;\n    /**\n     * For this distribution, {@code X}, this method returns {@code P(X >= x)}.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return the upper tail CDF for this distribution.\n     * @since 1.1\n     */\n    public double upperCumulativeProbability(int x);\n    /**\n     * For this distribution, {@code X}, this method returns\n     * {@code P(x0 <= X <= x1)}.\n     * This probability is computed by summing the point probabilities for the\n     * values {@code x0, x0 + 1, x0 + 2, ..., x1}, in the order directed by\n     * {@code dx}.\n     *\n     * @param x0 Inclusive lower bound.\n     * @param x1 Inclusive upper bound.\n     * @param dx Direction of summation (1 indicates summing from x0 to x1, and\n     * 0 indicates summing from x1 to x0).\n     * @return {@code P(x0 <= X <= x1)}.\n     */\n    private double innerCumulativeProbability(int x0, int x1, int dx);\n    /** {@inheritDoc} */\n    public double probability(int x);\n    /** {@inheritDoc} */\n    public double cumulativeProbability(int x);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * IntegerDistributionAbstractTest for details.\n *\n * @version $Id$\n */\npublic class HypergeometricDistributionTest extends IntegerDistributionAbstractTest {\n    private void testHypergeometricDistributionProbabilities(int populationSize, int sampleSize, int numberOfSucceses, double[][] data) {\n        HypergeometricDistribution dist = new HypergeometricDistribution(populationSize, numberOfSucceses, sampleSize);\n        for (int i = 0; i < data.length; ++i) {\n            int x = (int)data[i][0];\n            double pmf = data[i][1];\n            double actualPmf = dist.probability(x);\n            TestUtils.assertRelativelyEquals(\"Expected equals for <\"+x+\"> pmf\",pmf, actualPmf, 1.0e-9);\n\n            double cdf = data[i][2];\n            double actualCdf = dist.cumulativeProbability(x);\n            TestUtils.assertRelativelyEquals(\"Expected equals for <\"+x+\"> cdf\",cdf, actualCdf, 1.0e-9);\n\n            double cdf1 = data[i][3];\n            double actualCdf1 = dist.upperCumulativeProbability(x);\n            TestUtils.assertRelativelyEquals(\"Expected equals for <\"+x+\"> cdf1\",cdf1, actualCdf1, 1.0e-9);\n        }\n    }\n    public void testMath1021() {\n        final int N = 43130568;\n        final int m = 42976365;\n        final int n = 50;\n        final HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);\n\n        for (int i = 0; i < 100; i++) {\n            final int sample = dist.sample();\n            Assert.assertTrue(\"sample=\" + sample, 0 <= sample);\n            Assert.assertTrue(\"sample=\" + sample, sample <= n);\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.</p>\n *\n * <p>In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.</p>\n *\n * <p>The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.</p>\n *\n * <p>This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.</p>\n *\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @version $Id$\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    public static final int DEFAULT_CHECKFEASABLECOUNT = 0;\n    public static final double DEFAULT_STOPFITNESS = 0;\n    public static final boolean DEFAULT_ISACTIVECMA = true;\n    public static final int DEFAULT_MAXITERATIONS = 30000;\n    public static final int DEFAULT_DIAGONALONLY = 0;\n    public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();\n    private int lambda; // population size\n    private boolean isActiveCMA;\n    private int checkFeasableCount;\n    private double[][] boundaries;\n    private double[] inputSigma;\n    private int dimension;\n    private int diagonalOnly = 0;\n    private boolean isMinimize = true;\n    private boolean generateStatistics = false;\n    private int maxIterations;\n    private double stopFitness;\n    private double stopTolUpX;\n    private double stopTolX;\n    private double stopTolFun;\n    private double stopTolHistFun;\n    private int mu; //\n    private double logMu2;\n    private RealMatrix weights;\n    private double mueff; //\n    private double sigma;\n    private double cc;\n    private double cs;\n    private double damps;\n    private double ccov1;\n    private double ccovmu;\n    private double chiN;\n    private double ccov1Sep;\n    private double ccovmuSep;\n    private RealMatrix xmean;\n    private RealMatrix pc;\n    private RealMatrix ps;\n    private double normps;\n    private RealMatrix B;\n    private RealMatrix D;\n    private RealMatrix BD;\n    private RealMatrix diagD;\n    private RealMatrix C;\n    private RealMatrix diagC;\n    private int iterations;\n    private double[] fitnessHistory;\n    private int historySize;\n    private RandomGenerator random;\n    private List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    private List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.</p>\n *\n * <p>In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.</p>\n *\n * <p>The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.</p>\n *\n * <p>This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.</p>\n *\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @version $Id$\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    public static final int DEFAULT_CHECKFEASABLECOUNT = 0;\n    public static final double DEFAULT_STOPFITNESS = 0;\n    public static final boolean DEFAULT_ISACTIVECMA = true;\n    public static final int DEFAULT_MAXITERATIONS = 30000;\n    public static final int DEFAULT_DIAGONALONLY = 0;\n    public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();\n    private int lambda; // population size\n    private boolean isActiveCMA;\n    private int checkFeasableCount;\n    private double[][] boundaries;\n    private double[] inputSigma;\n    private int dimension;\n    private int diagonalOnly = 0;\n    private boolean isMinimize = true;\n    private boolean generateStatistics = false;\n    private int maxIterations;\n    private double stopFitness;\n    private double stopTolUpX;\n    private double stopTolX;\n    private double stopTolFun;\n    private double stopTolHistFun;\n    private int mu; //\n    private double logMu2;\n    private RealMatrix weights;\n    private double mueff; //\n    private double sigma;\n    private double cc;\n    private double cs;\n    private double damps;\n    private double ccov1;\n    private double ccovmu;\n    private double chiN;\n    private double ccov1Sep;\n    private double ccovmuSep;\n    private RealMatrix xmean;\n    private RealMatrix pc;\n    private RealMatrix ps;\n    private double normps;\n    private RealMatrix B;\n    private RealMatrix D;\n    private RealMatrix BD;\n    private RealMatrix diagD;\n    private RealMatrix C;\n    private RealMatrix diagC;\n    private int iterations;\n    private double[] fitnessHistory;\n    private int historySize;\n    private RandomGenerator random;\n    private List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    private List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void doTest(MultivariateFunction func,\n            double[] startPoint,\n            double[] inSigma,\n            double[][] boundaries,\n            GoalType goal,\n            int lambda,\n            boolean isActive,\n            int diagonalOnly, \n            double stopValue,\n            double fTol,\n            double pointTol,\n            int maxEvaluations,\n            PointValuePair expected) {\n        int dim = startPoint.length;\n        // test diagonalOnly = 0 - slow but normally fewer feval#\n        CMAESOptimizer optim = new CMAESOptimizer( lambda, inSigma, 30000,\n                                                   stopValue, isActive, diagonalOnly,\n                                                   0, new MersenneTwister(), false);\n        final double[] lB = boundaries == null ? null : boundaries[0];\n        final double[] uB = boundaries == null ? null : boundaries[1];\n        PointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);\n        Assert.assertEquals(expected.getValue(),\n                result.getValue(), fTol);\n        for (int i = 0; i < dim; i++) {\n            Assert.assertEquals(expected.getPoint()[i],\n                    result.getPoint()[i], pointTol);\n        }\n    }\n    private static double[] point(int n, double value) {\n        double[] ds = new double[n];\n        Arrays.fill(ds, value);\n        return ds;\n    }\n    private static double[][] boundaries(int dim,\n            double lower, double upper) {\n        double[][] boundaries = new double[2][dim];\n        for (int i = 0; i < dim; i++)\n            boundaries[0][i] = lower;\n        for (int i = 0; i < dim; i++)\n            boundaries[1][i] = upper;\n        return boundaries;\n    }\n    public void testMath864() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                @Override\n                public double value(double[] parameters) {\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 0 };\n        final double[] lower = { -1e6 };\n        final double[] upper = { 0.5 };\n        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start, lower, upper).getPoint();\n        Assert.assertTrue(\"Out of bounds (\" + result[0] + \" > \" + upper[0] + \")\", result[0] <= upper[0]);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Calculates the rectangular Cholesky decomposition of a matrix.\n * <p>The rectangular Cholesky decomposition of a real symmetric positive\n * semidefinite matrix A consists of a rectangular matrix B with the same\n * number of rows such that: A is almost equal to BB<sup>T</sup>, depending\n * on a user-defined tolerance. In a sense, this is the square root of A.</p>\n * <p>The difference with respect to the regular {@link CholeskyDecomposition}\n * is that rows/columns may be permuted (hence the rectangular shape instead\n * of the traditional triangular shape) and there is a threshold to ignore\n * small diagonal elements. This is used for example to generate {@link\n * org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated\n * random n-dimensions vectors} in a p-dimension subspace (p < n).\n * In other words, it allows generating random vectors from a covariance\n * matrix that is only positive semidefinite, and not positive definite.</p>\n * <p>Rectangular Cholesky decomposition is <em>not</em> suited for solving\n * linear systems, so it does not provide any {@link DecompositionSolver\n * decomposition solver}.</p>\n *\n * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n * @version $Id$\n * @since 2.0 (changed to concrete class in 3.0)\n */\npublic class RectangularCholeskyDecomposition {\n    private final RealMatrix root;\n    private int rank;\n    /** Get the root of the covariance matrix.\n     * The root is the rectangular matrix <code>B</code> such that\n     * the covariance matrix is equal to <code>B.B<sup>T</sup></code>\n     * @return root of the square matrix\n     * @see #getRank()\n     */\n    public RealMatrix getRootMatrix();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Calculates the rectangular Cholesky decomposition of a matrix.\n * <p>The rectangular Cholesky decomposition of a real symmetric positive\n * semidefinite matrix A consists of a rectangular matrix B with the same\n * number of rows such that: A is almost equal to BB<sup>T</sup>, depending\n * on a user-defined tolerance. In a sense, this is the square root of A.</p>\n * <p>The difference with respect to the regular {@link CholeskyDecomposition}\n * is that rows/columns may be permuted (hence the rectangular shape instead\n * of the traditional triangular shape) and there is a threshold to ignore\n * small diagonal elements. This is used for example to generate {@link\n * org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated\n * random n-dimensions vectors} in a p-dimension subspace (p < n).\n * In other words, it allows generating random vectors from a covariance\n * matrix that is only positive semidefinite, and not positive definite.</p>\n * <p>Rectangular Cholesky decomposition is <em>not</em> suited for solving\n * linear systems, so it does not provide any {@link DecompositionSolver\n * decomposition solver}.</p>\n *\n * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n * @version $Id$\n * @since 2.0 (changed to concrete class in 3.0)\n */\npublic class RectangularCholeskyDecomposition {\n    private final RealMatrix root;\n    private int rank;\n    /** Get the root of the covariance matrix.\n     * The root is the rectangular matrix <code>B</code> such that\n     * the covariance matrix is equal to <code>B.B<sup>T</sup></code>\n     * @return root of the square matrix\n     * @see #getRank()\n     */\n    public RealMatrix getRootMatrix();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testMath789() {\n\n        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n        Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);\n\n        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n        Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);\n\n        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n        });\n        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n        Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implementation of the uniform real distribution.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)\"\n * >Uniform distribution (continuous), at Wikipedia</a>\n *\n * @version $Id$\n * @since 3.0\n */\npublic class UniformRealDistribution extends AbstractRealDistribution {\n    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n    private static final long serialVersionUID = 20120109L;\n    private final double lower;\n    private final double upper;\n    private final double solverAbsoluteAccuracy;\n    /**\n     * {@inheritDoc}\n     *\n     * The lower bound of the support is equal to the lower bound parameter\n     * of the distribution.\n     *\n     * @return lower bound of the support\n     */\n    public double getSupportLowerBound();\n    /** {@inheritDoc} */\n    public double density(double x);\n    /** {@inheritDoc} */\n    public boolean isSupportLowerBoundInclusive();\n}\n/**\n * Implementation of the F-distribution.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/F-distribution\">F-distribution (Wikipedia)</a>\n * @see <a href=\"http://mathworld.wolfram.com/F-Distribution.html\">F-distribution (MathWorld)</a>\n * @version $Id$\n */\npublic class FDistribution extends AbstractRealDistribution {\n    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n    private static final long serialVersionUID = -8516354193418641566L;\n    private final double numeratorDegreesOfFreedom;\n    private final double denominatorDegreesOfFreedom;\n    private final double solverAbsoluteAccuracy;\n    private double numericalVariance = Double.NaN;\n    private boolean numericalVarianceIsCalculated = false;\n    /**\n     * {@inheritDoc}\n     *\n     * The upper bound of the support is always positive infinity\n     * no matter the parameters.\n     *\n     * @return upper bound of the support (always Double.POSITIVE_INFINITY)\n     */\n    public double getSupportUpperBound();\n    /**\n     * {@inheritDoc}\n     *\n     * The lower bound of the support is always 0 no matter the parameters.\n     *\n     * @return lower bound of the support (always 0)\n     */\n    public double getSupportLowerBound();\n    /** {@inheritDoc} */\n    public boolean isSupportLowerBoundInclusive();\n    /**\n     * {@inheritDoc}\n     *\n     * @since 2.1\n     */\n    public double density(double x);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implementation of the uniform real distribution.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)\"\n * >Uniform distribution (continuous), at Wikipedia</a>\n *\n * @version $Id$\n * @since 3.0\n */\npublic class UniformRealDistribution extends AbstractRealDistribution {\n    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n    private static final long serialVersionUID = 20120109L;\n    private final double lower;\n    private final double upper;\n    private final double solverAbsoluteAccuracy;\n    /**\n     * {@inheritDoc}\n     *\n     * The lower bound of the support is equal to the lower bound parameter\n     * of the distribution.\n     *\n     * @return lower bound of the support\n     */\n    public double getSupportLowerBound();\n    /** {@inheritDoc} */\n    public double density(double x);\n    /** {@inheritDoc} */\n    public boolean isSupportLowerBoundInclusive();\n}\n/**\n * Implementation of the F-distribution.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/F-distribution\">F-distribution (Wikipedia)</a>\n * @see <a href=\"http://mathworld.wolfram.com/F-Distribution.html\">F-distribution (MathWorld)</a>\n * @version $Id$\n */\npublic class FDistribution extends AbstractRealDistribution {\n    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n    private static final long serialVersionUID = -8516354193418641566L;\n    private final double numeratorDegreesOfFreedom;\n    private final double denominatorDegreesOfFreedom;\n    private final double solverAbsoluteAccuracy;\n    private double numericalVariance = Double.NaN;\n    private boolean numericalVarianceIsCalculated = false;\n    /**\n     * {@inheritDoc}\n     *\n     * The upper bound of the support is always positive infinity\n     * no matter the parameters.\n     *\n     * @return upper bound of the support (always Double.POSITIVE_INFINITY)\n     */\n    public double getSupportUpperBound();\n    /**\n     * {@inheritDoc}\n     *\n     * The lower bound of the support is always 0 no matter the parameters.\n     *\n     * @return lower bound of the support (always 0)\n     */\n    public double getSupportLowerBound();\n    /** {@inheritDoc} */\n    public boolean isSupportLowerBoundInclusive();\n    /**\n     * {@inheritDoc}\n     *\n     * @since 2.1\n     */\n    public double density(double x);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * <p>\n * To create a concrete test class for a continuous distribution\n * implementation, first implement makeDistribution() to return a distribution\n * instance to use in tests. Then implement each of the test data generation\n * methods below.  In each case, the test points and test values arrays\n * returned represent parallel arrays of inputs and expected values for the\n * distribution returned by makeDistribution().  Default implementations\n * are provided for the makeInverseXxx methods that just invert the mapping\n * defined by the arrays returned by the makeCumulativeXxx methods.\n * <p>\n * makeCumulativeTestPoints() -- arguments used to test cumulative probabilities\n * makeCumulativeTestValues() -- expected cumulative probabilites\n * makeDensityTestValues() -- expected density values at cumulativeTestPoints\n * makeInverseCumulativeTestPoints() -- arguments used to test inverse cdf\n * makeInverseCumulativeTestValues() -- expected inverse cdf values\n * <p>\n * To implement additional test cases with different distribution instances and\n * test data, use the setXxx methods for the instance data in test cases and\n * call the verifyXxx methods to verify results.\n * <p>\n * Error tolerance can be overriden by implementing getTolerance().\n * <p>\n * Test data should be validated against reference tables or other packages\n * where possible, and the source of the reference data and/or validation\n * should be documented in the test cases.  A framework for validating\n * distribution data against R is included in the /src/test/R source tree.\n * <p>\n * See {@link NormalDistributionTest} and {@link ChiSquaredDistributionTest}\n * for examples.\n *\n * @version $Id$\n */\npublic abstract class RealDistributionAbstractTest {\n    public void testIsSupportLowerBoundInclusive() {\n        final double lowerBound = distribution.getSupportLowerBound();\n        double result = Double.NaN;\n        result = distribution.density(lowerBound);\n        Assert.assertEquals( !Double.isInfinite(lowerBound) && !Double.isNaN(result) && !Double.isInfinite(result), distribution.isSupportLowerBoundInclusive());\n         \n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * For a function defined on some interval {@code (lo, hi)}, this class\n * finds an approximation {@code x} to the point at which the function\n * attains its minimum.\n * It implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions.\n * <br/>\n * This code is an adaptation, partly based on the Python code from SciPy\n * (module \"optimize.py\" v0.5); the original algorithm is also modified\n * <ul>\n *  <li>to use an initial guess provided by the user,</li>\n *  <li>to ensure that the best point encountered is the one returned.</li>\n * </ul>\n *\n * @version $Id$\n * @since 2.0\n */\npublic class BrentOptimizer extends BaseAbstractUnivariateOptimizer {\n    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));\n    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);\n    private final double relativeThreshold;\n    private final double absoluteThreshold;\n    /** {@inheritDoc} */\n    @Override\n    protected UnivariatePointValuePair doOptimize();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * For a function defined on some interval {@code (lo, hi)}, this class\n * finds an approximation {@code x} to the point at which the function\n * attains its minimum.\n * It implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions.\n * <br/>\n * This code is an adaptation, partly based on the Python code from SciPy\n * (module \"optimize.py\" v0.5); the original algorithm is also modified\n * <ul>\n *  <li>to use an initial guess provided by the user,</li>\n *  <li>to ensure that the best point encountered is the one returned.</li>\n * </ul>\n *\n * @version $Id$\n * @since 2.0\n */\npublic class BrentOptimizer extends BaseAbstractUnivariateOptimizer {\n    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));\n    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);\n    private final double relativeThreshold;\n    private final double absoluteThreshold;\n    /** {@inheritDoc} */\n    @Override\n    protected UnivariatePointValuePair doOptimize();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testKeepInitIfBest() {\n        final double minSin = 3 * Math.PI / 2;\n        final double offset = 1e-8;\n        final double delta = 1e-7;\n        final UnivariateFunction f1 = new Sin();\n        final UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 2 * offset},\n                                                       new double[] { 0, -1, 0 });\n        final UnivariateFunction f = FunctionUtils.add(f1, f2);\n        // A slightly less stringent tolerance would make the test pass\n        // even with the previous implementation.\n        final double relTol = 1e-8;\n        final UnivariateOptimizer optimizer = new BrentOptimizer(relTol, 1e-100);\n        final double init = minSin + 1.5 * offset;\n        final UnivariatePointValuePair result\n            = optimizer.optimize(200, f, GoalType.MINIMIZE,\n                                 minSin - 6.789 * delta,\n                                 minSin + 9.876 * delta,\n                                 init);\n        final int numEval = optimizer.getEvaluations();\n\n        final double sol = result.getPoint();\n        final double expected = init;\n\n//         System.out.println(\"numEval=\" + numEval);\n//         System.out.println(\"min=\" + init + \" f=\" + f.value(init));\n//         System.out.println(\"sol=\" + sol + \" f=\" + f.value(sol));\n//         System.out.println(\"exp=\" + expected + \" f=\" + f.value(expected));\n\n        Assert.assertTrue(\"Best point not reported\", f.value(sol) <= f.value(expected));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n * If the function is defined on some interval {@code (lo, hi)}, then\n * this method finds an approximation {@code x} to the point at which\n * the function attains its minimum.\n *\n * @version $Id$\n * @since 2.0\n */\npublic class BrentOptimizer extends BaseAbstractUnivariateOptimizer {\n    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));\n    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);\n    private final double relativeThreshold;\n    private final double absoluteThreshold;\n    /** {@inheritDoc} */\n    @Override\n    protected UnivariatePointValuePair doOptimize();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n * If the function is defined on some interval {@code (lo, hi)}, then\n * this method finds an approximation {@code x} to the point at which\n * the function attains its minimum.\n *\n * @version $Id$\n * @since 2.0\n */\npublic class BrentOptimizer extends BaseAbstractUnivariateOptimizer {\n    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));\n    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);\n    private final double relativeThreshold;\n    private final double absoluteThreshold;\n    /** {@inheritDoc} */\n    @Override\n    protected UnivariatePointValuePair doOptimize();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testMath855() {\n        final double minSin = 3 * Math.PI / 2;\n        final double offset = 1e-8;\n        final double delta = 1e-7;\n        final UnivariateFunction f1 = new Sin();\n        final UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 5 * offset },\n                                                       new double[] { 0, -1, 0 });\n        final UnivariateFunction f = FunctionUtils.add(f1, f2);\n        final UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-100);\n        final UnivariatePointValuePair result\n            = optimizer.optimize(200, f, GoalType.MINIMIZE, minSin - 6.789 * delta, minSin + 9.876 * delta);\n        final int numEval = optimizer.getEvaluations();\n\n        final double sol = result.getPoint();\n        final double expected = 4.712389027602411;\n\n        // System.out.println(\"min=\" + (minSin + offset) + \" f=\" + f.value(minSin + offset));\n        // System.out.println(\"sol=\" + sol + \" f=\" + f.value(sol));\n        // System.out.println(\"exp=\" + expected + \" f=\" + f.value(expected));\n\n        Assert.assertTrue(\"Best point not reported\", f.value(sol) <= f.value(expected));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a rational number.\n *\n * implements Serializable since 2.0\n *\n * @since 1.1\n * @version $Id$\n */\npublic class Fraction\n    extends Number\n    implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {\n    public static final Fraction TWO = new Fraction(2, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n    private static final long serialVersionUID = 3698073679419233275L;\n    private final int denominator;\n    private final int numerator;\n    /**\n     * Access the numerator.\n     * @return the numerator.\n     */\n    public int getNumerator();\n    /**\n     * Access the denominator.\n     * @return the denominator.\n     */\n    public int getDenominator();\n    /**\n     * Returns the absolute value of this fraction.\n     * @return the absolute value.\n     */\n    public Fraction abs();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a rational number.\n *\n * implements Serializable since 2.0\n *\n * @since 1.1\n * @version $Id$\n */\npublic class Fraction\n    extends Number\n    implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {\n    public static final Fraction TWO = new Fraction(2, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n    private static final long serialVersionUID = 3698073679419233275L;\n    private final int denominator;\n    private final int numerator;\n    /**\n     * Access the numerator.\n     * @return the numerator.\n     */\n    public int getNumerator();\n    /**\n     * Access the denominator.\n     * @return the denominator.\n     */\n    public int getDenominator();\n    /**\n     * Returns the absolute value of this fraction.\n     * @return the absolute value.\n     */\n    public Fraction abs();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumerator());\n        Assert.assertEquals(expectedDenominator, actual.getDenominator());\n    }\n    private void checkIntegerOverflow(double a) {\n        try {\n            new Fraction(a, 1.0e-12, 1000);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (ConvergenceException ce) {\n            // expected behavior\n        }\n    }\n    public void testIntegerOverflow() {\n        checkIntegerOverflow(0.75000000001455192);\n        checkIntegerOverflow(1.0e10);\n        checkIntegerOverflow(-1.0e10);\n        checkIntegerOverflow(-43979.60679604749);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a rational number.\n *\n * implements Serializable since 2.0\n *\n * @since 1.1\n * @version $Id$\n */\npublic class Fraction\n    extends Number\n    implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {\n    public static final Fraction TWO = new Fraction(2, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n    private static final long serialVersionUID = 3698073679419233275L;\n    private final int denominator;\n    private final int numerator;\n    /**\n     * Divide the fraction by an integer.\n     * @param i the <tt>integer</tt> to divide by.\n     * @return this * i\n     */\n    public Fraction divide(final int i);\n    /**\n     * Access the denominator.\n     * @return the denominator.\n     */\n    public int getDenominator();\n    /**\n     * Access the numerator.\n     * @return the numerator.\n     */\n    public int getNumerator();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a rational number.\n *\n * implements Serializable since 2.0\n *\n * @since 1.1\n * @version $Id$\n */\npublic class Fraction\n    extends Number\n    implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {\n    public static final Fraction TWO = new Fraction(2, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n    private static final long serialVersionUID = 3698073679419233275L;\n    private final int denominator;\n    private final int numerator;\n    /**\n     * Divide the fraction by an integer.\n     * @param i the <tt>integer</tt> to divide by.\n     * @return this * i\n     */\n    public Fraction divide(final int i);\n    /**\n     * Access the denominator.\n     * @return the denominator.\n     */\n    public int getDenominator();\n    /**\n     * Access the numerator.\n     * @return the numerator.\n     */\n    public int getNumerator();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumerator());\n        Assert.assertEquals(expectedDenominator, actual.getDenominator());\n    }\n    private void checkIntegerOverflow(double a) {\n        try {\n            new Fraction(a, 1.0e-12, 1000);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (ConvergenceException ce) {\n            // expected behavior\n        }\n    }\n    public void testMath835() {\n        final int numer = Integer.MAX_VALUE / 99;\n        final int denom = 1;\n        final double percentage = 100 * ((double) numer) / denom;\n        final Fraction frac = new Fraction(numer, denom);\n        // With the implementation that preceded the fix suggested in MATH-835,\n        // this test was failing, due to overflow. Assert.assertEquals(percentage, frac.percentageValue(), Math.ulp(percentage));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Solves a linear problem using the Two-Phase Simplex Method.\n * @version $Id$\n * @since 2.0\n */\npublic class SimplexSolver extends AbstractLinearOptimizer {\n    private static final double DEFAULT_EPSILON = 1.0e-6;\n    private static final int DEFAULT_ULPS = 10;\n    private final double epsilon;\n    private final int maxUlps;\n    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Solves a linear problem using the Two-Phase Simplex Method.\n * @version $Id$\n * @since 2.0\n */\npublic class SimplexSolver extends AbstractLinearOptimizer {\n    private static final double DEFAULT_EPSILON = 1.0e-6;\n    private static final int DEFAULT_ULPS = 10;\n    private final double epsilon;\n    private final int maxUlps;\n    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private LinearConstraint equationFromString(int numCoefficients, String s) {\n        Relationship relationship;\n        if (s.contains(\">=\")) {\n            relationship = Relationship.GEQ;\n        } else if (s.contains(\"<=\")) {\n            relationship = Relationship.LEQ;\n        } else if (s.contains(\"=\")) {\n            relationship = Relationship.EQ;\n        } else {\n            throw new IllegalArgumentException();\n        }\n\n        String[] equationParts = s.split(\"[>|<]?=\");\n        double rhs = Double.parseDouble(equationParts[1].trim());\n\n        double[] lhs = new double[numCoefficients];\n        String left = equationParts[0].replaceAll(\" ?x\", \"\");\n        String[] coefficients = left.split(\" \");\n        for (String coefficient : coefficients) {\n            double value = coefficient.charAt(0) == '-' ? -1 : 1;\n            int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n            lhs[index] = value;\n        }\n        return new LinearConstraint(lhs, relationship, rhs);\n    }\n    private static boolean validSolution(PointValuePair solution, List<LinearConstraint> constraints, double epsilon) {\n        double[] vals = solution.getPoint();\n        for (LinearConstraint c : constraints) {\n            double[] coeffs = c.getCoefficients().toArray();\n            double result = 0.0d;\n            for (int i = 0; i < vals.length; i++) {\n                result += vals[i] * coeffs[i];\n            }\n            \n            switch (c.getRelationship()) {\n            case EQ:\n                if (!Precision.equals(result, c.getValue(), epsilon)) {\n                    return false;\n                }\n                break;\n                \n            case GEQ:\n                if (Precision.compareTo(result, c.getValue(), epsilon) < 0) {\n                    return false;\n                }\n                break;\n                \n            case LEQ:\n                if (Precision.compareTo(result, c.getValue(), epsilon) > 0) {\n                    return false;\n                }\n                break;\n            }\n        }\n        \n        return true;\n    }\n    public void testMath828Cycle() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(\n                new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);\n        \n        ArrayList <LinearConstraint>constraints = new ArrayList<LinearConstraint>();\n\n        constraints.add(new LinearConstraint(new double[] {0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0,}, Relationship.GEQ, 91.0));\n        constraints.add(new LinearConstraint(new double[] {0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0,}, Relationship.GEQ, 54.0));\n        constraints.add(new LinearConstraint(new double[] {0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0,}, Relationship.GEQ, 62.0));\n        constraints.add(new LinearConstraint(new double[] {83.0, -76.0, -94.0, -19.0, -15.0, -70.0, -72.0, -57.0, -63.0, -65.0, -22.0, -94.0, -22.0, -88.0, -86.0, -89.0, -72.0, -16.0, -80.0, -49.0, -70.0, -93.0, -95.0, -17.0, -83.0, -97.0, -31.0, -47.0, -31.0, -13.0, -23.0,}, Relationship.GEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] {41.0, -96.0, -41.0, -48.0, -70.0, -43.0, -43.0, -43.0, -97.0, -37.0, -85.0, -70.0, -45.0, -67.0, -87.0, -69.0, -94.0, -54.0, -54.0, -92.0, -79.0, -10.0, -35.0, -20.0, -41.0, -41.0, -65.0, -25.0, -12.0, -8.0, -46.0,}, Relationship.GEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] {27.0, -42.0, -65.0, -49.0, -53.0, -42.0, -17.0, -2.0, -61.0, -31.0, -76.0, -47.0, -8.0, -93.0, -86.0, -62.0, -65.0, -63.0, -22.0, -43.0, -27.0, -23.0, -32.0, -74.0, -27.0, -63.0, -47.0, -78.0, -29.0, -95.0, -73.0,}, Relationship.GEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] {15.0, -46.0, -41.0, -83.0, -98.0, -99.0, -21.0, -35.0, -7.0, -14.0, -80.0, -63.0, -18.0, -42.0, -5.0, -34.0, -56.0, -70.0, -16.0, -18.0, -74.0, -61.0, -47.0, -41.0, -15.0, -79.0, -18.0, -47.0, -88.0, -68.0, -55.0,}, Relationship.GEQ, 0.0));\n        \n        double epsilon = 1e-6;\n        PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);\n        Assert.assertEquals(1.0d, solution.getValue(), epsilon);\n        Assert.assertTrue(validSolution(solution, constraints, epsilon));        \n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class implements the {@link RealVector} interface with a\n * {@link OpenIntToDoubleHashMap} backing store.\n * @version $Id$\n * @since 2.0\n*/\npublic class OpenMapRealVector extends SparseRealVector\n    implements Serializable {\n    public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;\n    private static final long serialVersionUID = 8772222695580707260L;\n    private final OpenIntToDoubleHashMap entries;\n    private final int virtualSize;\n    private final double epsilon;\n    /** {@inheritDoc} */\n    @Override\n    public RealVector add(RealVector v);\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector append(RealVector v);\n    /**\n     * Optimized method to add two OpenMapRealVectors.\n     * It copies the larger vector, then iterates over the smaller.\n     *\n     * @param v Vector to add.\n     * @return the sum of {@code this} and {@code v}.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if the dimensions do not match.\n     */\n    public OpenMapRealVector add(OpenMapRealVector v);\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector ebeMultiply(RealVector v);\n    /** {@inheritDoc} */\n    @Override\n    public RealVector subtract(RealVector v);\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector append(double d);\n    /** {@inheritDoc} */\n    @Override\n    public int getDimension();\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector ebeDivide(RealVector v);\n    /** {@inheritDoc} */\n    @Override\n    public double getEntry(int index);\n    /**\n     * Optimized method to append a OpenMapRealVector.\n     * @param v vector to append\n     * @return The result of appending {@code v} to self\n     */\n    public OpenMapRealVector append(OpenMapRealVector v);\n    /**\n     * Optimized method to subtract OpenMapRealVectors.\n     *\n     * @param v Vector to subtract from {@code this}.\n     * @return the difference of {@code this} and {@code v}.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if the dimensions do not match.\n     */\n    public OpenMapRealVector subtract(OpenMapRealVector v);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class implements the {@link RealVector} interface with a\n * {@link OpenIntToDoubleHashMap} backing store.\n * @version $Id$\n * @since 2.0\n*/\npublic class OpenMapRealVector extends SparseRealVector\n    implements Serializable {\n    public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;\n    private static final long serialVersionUID = 8772222695580707260L;\n    private final OpenIntToDoubleHashMap entries;\n    private final int virtualSize;\n    private final double epsilon;\n    /** {@inheritDoc} */\n    @Override\n    public RealVector add(RealVector v);\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector append(RealVector v);\n    /**\n     * Optimized method to add two OpenMapRealVectors.\n     * It copies the larger vector, then iterates over the smaller.\n     *\n     * @param v Vector to add.\n     * @return the sum of {@code this} and {@code v}.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if the dimensions do not match.\n     */\n    public OpenMapRealVector add(OpenMapRealVector v);\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector ebeMultiply(RealVector v);\n    /** {@inheritDoc} */\n    @Override\n    public RealVector subtract(RealVector v);\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector append(double d);\n    /** {@inheritDoc} */\n    @Override\n    public int getDimension();\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector ebeDivide(RealVector v);\n    /** {@inheritDoc} */\n    @Override\n    public double getEntry(int index);\n    /**\n     * Optimized method to append a OpenMapRealVector.\n     * @param v vector to append\n     * @return The result of appending {@code v} to self\n     */\n    public OpenMapRealVector append(OpenMapRealVector v);\n    /**\n     * Optimized method to subtract OpenMapRealVectors.\n     *\n     * @param v Vector to subtract from {@code this}.\n     * @return the difference of {@code this} and {@code v}.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if the dimensions do not match.\n     */\n    public OpenMapRealVector subtract(OpenMapRealVector v);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void doTestAppendVector(final String message, final RealVector v1,\n        final RealVector v2, final double delta) {\n\n        final int n1 = v1.getDimension();\n        final int n2 = v2.getDimension();\n        final RealVector v = v1.append(v2);\n        Assert.assertEquals(message, n1 + n2, v.getDimension());\n        for (int i = 0; i < n1; i++) {\n            final String msg = message + \", entry #\" + i;\n            Assert.assertEquals(msg, v1.getEntry(i), v.getEntry(i), delta);\n        }\n        for (int i = 0; i < n2; i++) {\n            final String msg = message + \", entry #\" + (n1 + i);\n            Assert.assertEquals(msg, v2.getEntry(i), v.getEntry(n1 + i), delta);\n        }\n    }\n    private void doTestAppendScalar(final String message, final RealVector v,\n        final double d, final double delta) {\n\n        final int n = v.getDimension();\n        final RealVector w = v.append(d);\n        Assert.assertEquals(message, n + 1, w.getDimension());\n        for (int i = 0; i < n; i++) {\n            final String msg = message + \", entry #\" + i;\n            Assert.assertEquals(msg, v.getEntry(i), w.getEntry(i), delta);\n        }\n        final String msg = message + \", entry #\" + n;\n        Assert.assertEquals(msg, d, w.getEntry(n), delta);\n    }\n    private void doTestEbeBinaryOperation(final BinaryOperation op, final boolean mixed) {\n        /*\n         * Make sure that x, y, z are three different values. Also, x is the\n         * preferred value (e.g. the value which is not stored in sparse\n         * implementations).\n         */\n        final double x = getPreferredEntryValue();\n        final double y = x + 1d;\n        final double z = y + 1d;\n\n        /*\n         * This is an attempt at covering most particular cases of combining\n         * two values.\n         *\n         * 1. Addition\n         *    --------\n         * The following cases should be covered\n         * (2 * x) + (-x)\n         * (-x) + 2 * x\n         * x + y\n         * y + x\n         * y + z\n         * y + (x - y)\n         * (y - x) + x\n         *\n         * The values to be considered are: x, y, z, 2 * x, -x, x - y, y - x.\n         *\n         * 2. Subtraction\n         *    -----------\n         * The following cases should be covered\n         * (2 * x) - x\n         * x - y\n         * y - x\n         * y - z\n         * y - (y - x)\n         * (y + x) - y\n         *\n         * The values to be considered are: x, y, z, x + y, y - x.\n         *\n         * 3. Multiplication\n         *    --------------\n         * (x * x) * (1 / x)\n         * (1 / x) * (x * x)\n         * x * y\n         * y * x\n         * y * z\n         *\n         * The values to be considered are: x, y, z, 1 / x, x * x.\n         *\n         * 4. Division\n         *    --------\n         * (x * x) / x\n         * x / y\n         * y / x\n         * y / z\n         *\n         * The values to be considered are: x, y, z, x * x.\n         *\n         * Also to be considered NaN, POSITIVE_INFINITY, NEGATIVE_INFINITY.\n         */\n        final double[] values = {x, y, z, 2 * x, -x, 1 / x, x * x, x + y, x - y, y - x};\n        final double[] data1 = new double[values.length * values.length];\n        final double[] data2 = new double[values.length * values.length];\n        int k = 0;\n        for (int i = 0; i < values.length; i++) {\n            for (int j = 0; j < values.length; j++) {\n                data1[k] = values[i];\n                data2[k] = values[j];\n                ++k;\n            }\n        }\n        final RealVector v1 = create(data1);\n        final RealVector v2 = mixed ? createAlien(data2) : create(data2);\n        final RealVector actual;\n        switch (op) {\n            case ADD:\n                actual = v1.add(v2);\n                break;\n            case SUB:\n                actual = v1.subtract(v2);\n                break;\n            case MUL:\n                actual = v1.ebeMultiply(v2);\n                break;\n            case DIV:\n                actual = v1.ebeDivide(v2);\n                break;\n            default:\n                throw new AssertionError(\"unexpected value\");\n        }\n        final double[] expected = new double[data1.length];\n        for (int i = 0; i < expected.length; i++) {\n            switch (op) {\n                case ADD:\n                    expected[i] = data1[i] + data2[i];\n                    break;\n                case SUB:\n                    expected[i] = data1[i] - data2[i];\n                    break;\n                case MUL:\n                    expected[i] = data1[i] * data2[i];\n                    break;\n                case DIV:\n                    expected[i] = data1[i] / data2[i];\n                    break;\n                default:\n                    throw new AssertionError(\"unexpected value\");\n            }\n        }\n        for (int i = 0; i < expected.length; i++) {\n            final String msg = \"entry #\"+i+\", left = \"+data1[i]+\", right = \" + data2[i];\n            Assert.assertEquals(msg, expected[i], actual.getEntry(i), 0.0);\n        }\n    }\n    private void doTestEbeBinaryOperationDimensionMismatch(final BinaryOperation op) {\n        final int n = 10;\n        switch (op) {\n            case ADD:\n                create(new double[n]).add(create(new double[n + 1]));\n                break;\n            case SUB:\n                create(new double[n]).subtract(create(new double[n + 1]));\n                break;\n            case MUL:\n                create(new double[n]).ebeMultiply(create(new double[n + 1]));\n                break;\n            case DIV:\n                create(new double[n]).ebeDivide(create(new double[n + 1]));\n                break;\n            default:\n                throw new AssertionError(\"unexpected value\");\n        }\n    }\n    public void testEbeDivideMixedTypes() {\n        doTestEbeBinaryOperation(BinaryOperation.DIV, true);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Arrays utilities.\n *\n * @since 3.0\n * @version $Id$\n */\npublic class MathArrays {\n    private static final int SPLIT_FACTOR = 0x8000001;\n    /**\n     * Compute a linear combination accurately.\n     * This method computes the sum of the products\n     * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.\n     * It does so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects.\n     * <br/>\n     * It is based on the 2005 paper\n     * <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,\n     * and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     *\n     * @param a Factors.\n     * @param b Factors.\n     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n     * @throws DimensionMismatchException if arrays dimensions don't match\n     */\n    public static double linearCombination(final double[] a, final double[] b)\n        throws DimensionMismatchException;\n    /**\n     * Compute a linear combination accurately.\n     * <p>\n     * This method computes a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>\n     * to high accuracy. It does so by using specific multiplication and\n     * addition algorithms to preserve accuracy and reduce cancellation effects.\n     * It is based on the 2005 paper <a\n     * href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita,\n     * Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     * </p>\n     * @param a1 first factor of the first term\n     * @param b1 second factor of the first term\n     * @param a2 first factor of the second term\n     * @param b2 second factor of the second term\n     * @param a3 first factor of the third term\n     * @param b3 second factor of the third term\n     * @return a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>\n     * @see #linearCombination(double, double, double, double)\n     * @see #linearCombination(double, double, double, double, double, double, double, double)\n     */\n    public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2,\n                                           final double a3, final double b3);\n    /**\n     * Compute a linear combination accurately.\n     * <p>\n     * This method computes a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub> to high accuracy. It does\n     * so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects. It is based\n     * on the 2005 paper <a\n     * href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita,\n     * Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     * </p>\n     * @param a1 first factor of the first term\n     * @param b1 second factor of the first term\n     * @param a2 first factor of the second term\n     * @param b2 second factor of the second term\n     * @return a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub>\n     * @see #linearCombination(double, double, double, double, double, double)\n     * @see #linearCombination(double, double, double, double, double, double, double, double)\n     */\n    public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2);\n    /**\n     * Compute a linear combination accurately.\n     * <p>\n     * This method computes a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +\n     * a<sub>4</sub>&times;b<sub>4</sub>\n     * to high accuracy. It does so by using specific multiplication and\n     * addition algorithms to preserve accuracy and reduce cancellation effects.\n     * It is based on the 2005 paper <a\n     * href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita,\n     * Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     * </p>\n     * @param a1 first factor of the first term\n     * @param b1 second factor of the first term\n     * @param a2 first factor of the second term\n     * @param b2 second factor of the second term\n     * @param a3 first factor of the third term\n     * @param b3 second factor of the third term\n     * @param a4 first factor of the third term\n     * @param b4 second factor of the third term\n     * @return a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +\n     * a<sub>4</sub>&times;b<sub>4</sub>\n     * @see #linearCombination(double, double, double, double)\n     * @see #linearCombination(double, double, double, double, double, double)\n     */\n    public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2,\n                                           final double a3, final double b3,\n                                           final double a4, final double b4);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Arrays utilities.\n *\n * @since 3.0\n * @version $Id$\n */\npublic class MathArrays {\n    private static final int SPLIT_FACTOR = 0x8000001;\n    /**\n     * Compute a linear combination accurately.\n     * This method computes the sum of the products\n     * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.\n     * It does so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects.\n     * <br/>\n     * It is based on the 2005 paper\n     * <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,\n     * and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     *\n     * @param a Factors.\n     * @param b Factors.\n     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n     * @throws DimensionMismatchException if arrays dimensions don't match\n     */\n    public static double linearCombination(final double[] a, final double[] b)\n        throws DimensionMismatchException;\n    /**\n     * Compute a linear combination accurately.\n     * <p>\n     * This method computes a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>\n     * to high accuracy. It does so by using specific multiplication and\n     * addition algorithms to preserve accuracy and reduce cancellation effects.\n     * It is based on the 2005 paper <a\n     * href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita,\n     * Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     * </p>\n     * @param a1 first factor of the first term\n     * @param b1 second factor of the first term\n     * @param a2 first factor of the second term\n     * @param b2 second factor of the second term\n     * @param a3 first factor of the third term\n     * @param b3 second factor of the third term\n     * @return a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>\n     * @see #linearCombination(double, double, double, double)\n     * @see #linearCombination(double, double, double, double, double, double, double, double)\n     */\n    public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2,\n                                           final double a3, final double b3);\n    /**\n     * Compute a linear combination accurately.\n     * <p>\n     * This method computes a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub> to high accuracy. It does\n     * so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects. It is based\n     * on the 2005 paper <a\n     * href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita,\n     * Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     * </p>\n     * @param a1 first factor of the first term\n     * @param b1 second factor of the first term\n     * @param a2 first factor of the second term\n     * @param b2 second factor of the second term\n     * @return a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub>\n     * @see #linearCombination(double, double, double, double, double, double)\n     * @see #linearCombination(double, double, double, double, double, double, double, double)\n     */\n    public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2);\n    /**\n     * Compute a linear combination accurately.\n     * <p>\n     * This method computes a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +\n     * a<sub>4</sub>&times;b<sub>4</sub>\n     * to high accuracy. It does so by using specific multiplication and\n     * addition algorithms to preserve accuracy and reduce cancellation effects.\n     * It is based on the 2005 paper <a\n     * href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita,\n     * Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     * </p>\n     * @param a1 first factor of the first term\n     * @param b1 second factor of the first term\n     * @param a2 first factor of the second term\n     * @param b2 second factor of the second term\n     * @param a3 first factor of the third term\n     * @param b3 second factor of the third term\n     * @param a4 first factor of the third term\n     * @param b4 second factor of the third term\n     * @return a<sub>1</sub>&times;b<sub>1</sub> +\n     * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +\n     * a<sub>4</sub>&times;b<sub>4</sub>\n     * @see #linearCombination(double, double, double, double)\n     * @see #linearCombination(double, double, double, double, double, double)\n     */\n    public static double linearCombination(final double a1, final double b1,\n                                           final double a2, final double b2,\n                                           final double a3, final double b3,\n                                           final double a4, final double b4);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Id$\n */\npublic class MathArraysTest {\n    public void testLinearCombinationWithSingleElementArray() {\n        final double[] a = { 1.23456789 };\n        final double[] b = { 98765432.1 };\n\n        Assert.assertEquals(a[0] * b[0], MathArrays.linearCombination(a, b), 0d);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum test).\n *\n * @version $Id$\n */\npublic class MannWhitneyUTest {\n    private NaturalRanking naturalRanking;\n    /**\n     * Returns the asymptotic <i>observed significance level</i>, or <a href=\n     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n     * p-value</a>, associated with a <a\n     * href=\"http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U\"> Mann-Whitney\n     * U statistic</a> comparing mean for two independent samples.\n     * <p>\n     * Let X<sub>i</sub> denote the i'th individual of the first sample and\n     * Y<sub>j</sub> the j'th individual in the second sample. Note that the\n     * samples would often have different length.\n     * </p>\n     * <p>\n     * <strong>Preconditions</strong>:\n     * <ul>\n     * <li>All observations in the two samples are independent.</li>\n     * <li>The observations are at least ordinal (continuous are also ordinal).</li>\n     * </ul>\n     * </p><p>\n     * Ties give rise to biased variance at the moment. See e.g. <a\n     * href=\"http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf\"\n     * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>\n     *\n     * @param x the first sample\n     * @param y the second sample\n     * @return asymptotic p-value\n     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n     * @throws ConvergenceException if the p-value can not be computed due to a\n     * convergence error\n     * @throws MaxCountExceededException if the maximum number of iterations\n     * is exceeded\n     */\n    public double mannWhitneyUTest(final double[] x, final double[] y)\n        throws NullArgumentException, NoDataException,\n        ConvergenceException, MaxCountExceededException;\n    /**\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum test).\n *\n * @version $Id$\n */\npublic class MannWhitneyUTest {\n    private NaturalRanking naturalRanking;\n    /**\n     * Returns the asymptotic <i>observed significance level</i>, or <a href=\n     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n     * p-value</a>, associated with a <a\n     * href=\"http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U\"> Mann-Whitney\n     * U statistic</a> comparing mean for two independent samples.\n     * <p>\n     * Let X<sub>i</sub> denote the i'th individual of the first sample and\n     * Y<sub>j</sub> the j'th individual in the second sample. Note that the\n     * samples would often have different length.\n     * </p>\n     * <p>\n     * <strong>Preconditions</strong>:\n     * <ul>\n     * <li>All observations in the two samples are independent.</li>\n     * <li>The observations are at least ordinal (continuous are also ordinal).</li>\n     * </ul>\n     * </p><p>\n     * Ties give rise to biased variance at the moment. See e.g. <a\n     * href=\"http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf\"\n     * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>\n     *\n     * @param x the first sample\n     * @param y the second sample\n     * @return asymptotic p-value\n     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n     * @throws ConvergenceException if the p-value can not be computed due to a\n     * convergence error\n     * @throws MaxCountExceededException if the maximum number of iterations\n     * is exceeded\n     */\n    public double mannWhitneyUTest(final double[] x, final double[] y)\n        throws NullArgumentException, NoDataException,\n        ConvergenceException, MaxCountExceededException;\n    /**\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Id$\n */\npublic class MannWhitneyUTestTest {\n    public void testBigDataSet() throws Exception {\n        double[] d1 = new double[1500];\n        double[] d2 = new double[1500];\n        for (int i = 0; i < 1500; i++) {\n            d1[i] = 2 * i;\n            d2[i] = 2 * i + 1;\n        }\n        double result = testStatistic.mannWhitneyUTest(d1, d2);\n        Assert.assertTrue(result > 0.1);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Provides a generic means to evaluate continued fractions.  Subclasses simply\n * provided the a and b coefficients to evaluate the continued fraction.\n *\n * <p>\n * References:\n * <ul>\n * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n * Continued Fraction</a></li>\n * </ul>\n * </p>\n *\n * @version $Id$\n */\npublic abstract class ContinuedFraction {\n    private static final double DEFAULT_EPSILON = 10e-9;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Provides a generic means to evaluate continued fractions.  Subclasses simply\n * provided the a and b coefficients to evaluate the continued fraction.\n *\n * <p>\n * References:\n * <ul>\n * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n * Continued Fraction</a></li>\n * </ul>\n * </p>\n *\n * @version $Id$\n */\npublic abstract class ContinuedFraction {\n    private static final double DEFAULT_EPSILON = 10e-9;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Id$\n *          2009) $\n */\npublic class BinomialDistributionTest extends IntegerDistributionAbstractTest {\n    public void testMath718() {\n        // for large trials the evaluation of ContinuedFraction was inaccurate\n        // do a sweep over several large trials to test if the current implementation is\n        // numerically stable.\n\n        for (int trials = 500000; trials < 20000000; trials += 100000) {\n            BinomialDistribution dist = new BinomialDistribution(trials, 0.5);\n            int p = dist.inverseCumulativeProbability(0.5);\n            Assert.assertEquals(trials / 2, p);\n        }\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** This class represents a 2D region: a set of polygons.\n * @version $Id$\n * @since 3.0\n */\npublic class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {\n    private Vector2D[][] vertices;\n    /** {@inheritDoc} */\n    @Override\n    protected void computeGeometricalProperties();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** This class represents a 2D region: a set of polygons.\n * @version $Id$\n * @since 3.0\n */\npublic class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {\n    private Vector2D[][] vertices;\n    /** {@inheritDoc} */\n    @Override\n    protected void computeGeometricalProperties();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>            private void checkFacet(SubPlane facet) {\n                Plane plane = (Plane) facet.getHyperplane();\n                Vector2D[][] vertices =\n                    ((PolygonsSet) facet.getRemainingRegion()).getVertices();\n                Assert.assertEquals(1, vertices.length);\n                for (int i = 0; i < vertices[0].length; ++i) {\n                    Vector3D v = plane.toSpace(vertices[0][i]);\n                    double d = Double.POSITIVE_INFINITY;\n                    for (int k = 0; k < expectedV.length; ++k) {\n                        d = FastMath.min(d, v.subtract(expectedV[k]).getNorm());\n                    }\n                    Assert.assertEquals(0, d, 1.0e-10);\n                }\n            }\n    private void checkPoints(Region.Location expected, PolyhedronsSet tree, Vector3D[] points) {\n        for (int i = 0; i < points.length; ++i) {\n            Assert.assertEquals(expected, tree.checkPoint(points[i]));\n        }\n    }\n    public void testIssue780() {\n        float[] coords = {\n            1.000000f, -1.000000f, -1.000000f, \n            1.000000f, -1.000000f, 1.000000f, \n            -1.000000f, -1.000000f, 1.000000f, \n            -1.000000f, -1.000000f, -1.000000f, \n            1.000000f, 1.000000f, -1f, \n            0.999999f, 1.000000f, 1.000000f,   // 1.000000f, 1.000000f, 1.000000f, \n            -1.000000f, 1.000000f, 1.000000f, \n            -1.000000f, 1.000000f, -1.000000f};\n        int[] indices = {\n            0, 1, 2, 0, 2, 3, \n            4, 7, 6, 4, 6, 5, \n            0, 4, 5, 0, 5, 1, \n            1, 5, 6, 1, 6, 2, \n            2, 6, 7, 2, 7, 3, \n            4, 0, 3, 4, 3, 7};\n        ArrayList<SubHyperplane<Euclidean3D>> subHyperplaneList = new ArrayList<SubHyperplane<Euclidean3D>>();\n        for (int idx = 0; idx < indices.length; idx += 3) {\n            int idxA = indices[idx] * 3;\n            int idxB = indices[idx + 1] * 3;\n            int idxC = indices[idx + 2] * 3;\n            Vector3D v_1 = new Vector3D(coords[idxA], coords[idxA + 1], coords[idxA + 2]);\n            Vector3D v_2 = new Vector3D(coords[idxB], coords[idxB + 1], coords[idxB + 2]);\n            Vector3D v_3 = new Vector3D(coords[idxC], coords[idxC + 1], coords[idxC + 2]);\n            Vector3D[] vertices = {v_1, v_2, v_3};\n            Plane polyPlane = new Plane(v_1, v_2, v_3);\n            ArrayList<SubHyperplane<Euclidean2D>> lines = new ArrayList<SubHyperplane<Euclidean2D>>();\n\n            Vector2D[] projPts = new Vector2D[vertices.length];\n            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {\n                projPts[ptIdx] = polyPlane.toSubSpace(vertices[ptIdx]);\n            }\n\n            SubLine lineInPlane = null;\n            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {\n                lineInPlane = new SubLine(projPts[ptIdx], projPts[(ptIdx + 1) % projPts.length]);\n                lines.add(lineInPlane);\n            }\n            Region<Euclidean2D> polyRegion = new PolygonsSet(lines);\n            SubPlane polygon = new SubPlane(polyPlane, polyRegion);\n            subHyperplaneList.add(polygon);\n        }\n        PolyhedronsSet polyhedronsSet = new PolyhedronsSet(subHyperplaneList);\n        Assert.assertEquals( 8.0, polyhedronsSet.getSize(), 3.0e-6);\n        Assert.assertEquals(24.0, polyhedronsSet.getBoundarySize(), 5.0e-6);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A tableau for use in the Simplex method.\n *\n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Id$\n * @since 2.0\n */\nclass SimplexTableau implements Serializable {\n    private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\";\n    private static final int DEFAULT_ULPS = 10;\n    private static final long serialVersionUID = -1369660067587938365L;\n    private final LinearObjectiveFunction f;\n    private final List<LinearConstraint> constraints;\n    private final boolean restrictToNonNegative;\n    private final List<String> columnLabels = new ArrayList<String>();\n    private transient RealMatrix tableau;\n    private final int numDecisionVariables;\n    private final int numSlackVariables;\n    private int numArtificialVariables;\n    private final double epsilon;\n    private final int maxUlps;\n    /**\n     * Removes the phase 1 objective function, positive cost non-artificial variables,\n     * and the non-basic artificial variables from this tableau.\n     */\n    protected void dropPhase1Objective();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A tableau for use in the Simplex method.\n *\n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Id$\n * @since 2.0\n */\nclass SimplexTableau implements Serializable {\n    private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\";\n    private static final int DEFAULT_ULPS = 10;\n    private static final long serialVersionUID = -1369660067587938365L;\n    private final LinearObjectiveFunction f;\n    private final List<LinearConstraint> constraints;\n    private final boolean restrictToNonNegative;\n    private final List<String> columnLabels = new ArrayList<String>();\n    private transient RealMatrix tableau;\n    private final int numDecisionVariables;\n    private final int numSlackVariables;\n    private int numArtificialVariables;\n    private final double epsilon;\n    private final int maxUlps;\n    /**\n     * Removes the phase 1 objective function, positive cost non-artificial variables,\n     * and the non-basic artificial variables from this tableau.\n     */\n    protected void dropPhase1Objective();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private LinearConstraint equationFromString(int numCoefficients, String s) {\n        Relationship relationship;\n        if (s.contains(\">=\")) {\n            relationship = Relationship.GEQ;\n        } else if (s.contains(\"<=\")) {\n            relationship = Relationship.LEQ;\n        } else if (s.contains(\"=\")) {\n            relationship = Relationship.EQ;\n        } else {\n            throw new IllegalArgumentException();\n        }\n\n        String[] equationParts = s.split(\"[>|<]?=\");\n        double rhs = Double.parseDouble(equationParts[1].trim());\n\n        double[] lhs = new double[numCoefficients];\n        String left = equationParts[0].replaceAll(\" ?x\", \"\");\n        String[] coefficients = left.split(\" \");\n        for (String coefficient : coefficients) {\n            double value = coefficient.charAt(0) == '-' ? -1 : 1;\n            int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n            lhs[index] = value;\n        }\n        return new LinearConstraint(lhs, relationship, rhs);\n    }\n    public void testMath781() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);\n\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));\n        constraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));\n        constraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[2], 0.0d, epsilon) < 0);\n        Assert.assertEquals(2.0d, solution.getValue(), epsilon);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a rational number without any overflow. This class is\n * immutable.\n *\n * @version $Id$\n * @since 2.0\n */\npublic class BigFraction\n    extends Number\n    implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable {\n    public static final BigFraction TWO = new BigFraction(2);\n    public static final BigFraction ONE = new BigFraction(1);\n    public static final BigFraction ZERO = new BigFraction(0);\n    public static final BigFraction MINUS_ONE = new BigFraction(-1);\n    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);\n    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);\n    public static final BigFraction ONE_HALF = new BigFraction(1, 2);\n    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);\n    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);\n    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);\n    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);\n    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);\n    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);\n    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);\n    private static final long serialVersionUID = -5630213147331578515L;\n    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);\n    private final BigInteger numerator;\n    private final BigInteger denominator;\n    /**\n     * <p>\n     * Multiplies the value of this fraction by the passed\n     * <code>BigInteger</code>, returning the result in reduced form.\n     * </p>\n     *\n     * @param bg the {@code BigInteger} to multiply by.\n     * @return a {@code BigFraction} instance with the resulting values.\n     * @throws NullArgumentException if {@code bg} is {@code null}.\n     */\n    public BigFraction multiply(final BigInteger bg);\n    /**\n     * <p>\n     * Access the denominator as a <tt>long</tt>.\n     * </p>\n     *\n     * @return the denominator as a <tt>long</tt>.\n     */\n    public long getDenominatorAsLong();\n    /**\n     * <p>\n     * Adds the value of this fraction to the passed {@link BigInteger},\n     * returning the result in reduced form.\n     * </p>\n     *\n     * @param bg\n     *            the {@link BigInteger} to add, must'nt be <code>null</code>.\n     * @return a <code>BigFraction</code> instance with the resulting values.\n     * @throws NullArgumentException\n     *             if the {@link BigInteger} is <code>null</code>.\n     */\n    public BigFraction add(final BigInteger bg) throws NullArgumentException;\n    /**\n     * <p>\n     * Multiply the value of this fraction by the passed <tt>int</tt>, returning\n     * the result in reduced form.\n     * </p>\n     *\n     * @param i\n     *            the <tt>int</tt> to multiply by.\n     * @return a {@link BigFraction} instance with the resulting values.\n     */\n    public BigFraction multiply(final int i);\n    /**\n     * <p>\n     * Adds the value of this fraction to another, returning the result in\n     * reduced form.\n     * </p>\n     *\n     * @param fraction\n     *            the {@link BigFraction} to add, must not be <code>null</code>.\n     * @return a {@link BigFraction} instance with the resulting values.\n     * @throws NullArgumentException if the {@link BigFraction} is {@code null}.\n     */\n    public BigFraction add(final BigFraction fraction);\n    /**\n     * <p>\n     * Access the numerator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>int</tt>.\n     */\n    public int getNumeratorAsInt();\n    /**\n     * <p>\n     * Adds the value of this fraction to the passed <tt>integer</tt>, returning\n     * the result in reduced form.\n     * </p>\n     *\n     * @param i\n     *            the <tt>integer</tt> to add.\n     * @return a <code>BigFraction</code> instance with the resulting values.\n     */\n    public BigFraction add(final int i);\n    /**\n     * <p>\n     * Multiplies the value of this fraction by another, returning the result in\n     * reduced form.\n     * </p>\n     *\n     * @param fraction Fraction to multiply by, must not be {@code null}.\n     * @return a {@link BigFraction} instance with the resulting values.\n     * @throws NullArgumentException if {@code fraction} is {@code null}.\n     */\n    public BigFraction multiply(final BigFraction fraction);\n    /**\n     * <p>\n     * Returns a <code>BigFraction</code> whose value is\n     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n     * </p>\n     *\n     * @param exponent\n     *            exponent to which this <code>BigFraction</code> is to be raised.\n     * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.\n     */\n    public BigFraction pow(final long exponent);\n    /**\n     * <p>\n     * Test for the equality of two fractions. If the lowest term numerator and\n     * denominators are the same for both fractions, the two fractions are\n     * considered to be equal.\n     * </p>\n     *\n     * @param other\n     *            fraction to test for equality to this fraction, can be\n     *            <code>null</code>.\n     * @return true if two fractions are equal, false if object is\n     *         <code>null</code>, not an instance of {@link BigFraction}, or not\n     *         equal to this fraction instance.\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(final Object other);\n    /**\n     * <p>\n     * Returns a <code>BigFraction</code> whose value is\n     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n     * </p>\n     *\n     * @param exponent\n     *            exponent to which this <code>BigFraction</code> is to be raised.\n     * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.\n     */\n    public BigFraction pow(final BigInteger exponent);\n    /**\n     * <p>\n     * Access the numerator as a <tt>long</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>long</tt>.\n     */\n    public long getNumeratorAsLong();\n    /**\n     * <p>\n     * Multiply the value of this fraction by the passed <tt>long</tt>,\n     * returning the result in reduced form.\n     * </p>\n     *\n     * @param l\n     *            the <tt>long</tt> to multiply by.\n     * @return a {@link BigFraction} instance with the resulting values.\n     */\n    public BigFraction multiply(final long l);\n    /**\n     * <p>\n     * Returns a {@code BigFraction} whose value is\n     * {@code (this<sup>exponent</sup>)}, returning the result in reduced form.\n     * </p>\n     *\n     * @param exponent\n     *            exponent to which this {@code BigFraction} is to be\n     *            raised.\n     * @return <tt>this<sup>exponent</sup></tt>.\n     */\n    public BigFraction pow(final int exponent);\n    /**\n     * <p>\n     * Adds the value of this fraction to the passed <tt>long</tt>, returning\n     * the result in reduced form.\n     * </p>\n     *\n     * @param l\n     *            the <tt>long</tt> to add.\n     * @return a <code>BigFraction</code> instance with the resulting values.\n     */\n    public BigFraction add(final long l);\n    /**\n     * <p>\n     * Access the denominator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the denominator as a <tt>int</tt>.\n     */\n    public int getDenominatorAsInt();\n    /**\n     * <p>\n     * Divide the value of this fraction by another, returning the result in\n     * reduced form.\n     * </p>\n     *\n     * @param fraction Fraction to divide by, must not be {@code null}.\n     * @return a {@link BigFraction} instance with the resulting values.\n     * @throws NullArgumentException if the {@code fraction} is {@code null}.\n     * @throws ZeroException if the fraction to divide by is zero.\n     */\n    public BigFraction divide(final BigFraction fraction);\n    /**\n     * <p>\n     * Returns a <code>double</code> whose value is\n     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n     * </p>\n     *\n     * @param exponent\n     *            exponent to which this <code>BigFraction</code> is to be raised.\n     * @return <tt>this<sup>exponent</sup></tt>.\n     */\n    public double pow(final double exponent);\n    /**\n     * <p>\n     * Gets the fraction as a <tt>float</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>float</tt>.\n     * @see java.lang.Number#floatValue()\n     */\n    @Override\n    public float floatValue();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a rational number without any overflow. This class is\n * immutable.\n *\n * @version $Id$\n * @since 2.0\n */\npublic class BigFraction\n    extends Number\n    implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable {\n    public static final BigFraction TWO = new BigFraction(2);\n    public static final BigFraction ONE = new BigFraction(1);\n    public static final BigFraction ZERO = new BigFraction(0);\n    public static final BigFraction MINUS_ONE = new BigFraction(-1);\n    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);\n    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);\n    public static final BigFraction ONE_HALF = new BigFraction(1, 2);\n    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);\n    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);\n    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);\n    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);\n    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);\n    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);\n    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);\n    private static final long serialVersionUID = -5630213147331578515L;\n    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);\n    private final BigInteger numerator;\n    private final BigInteger denominator;\n    /**\n     * <p>\n     * Multiplies the value of this fraction by the passed\n     * <code>BigInteger</code>, returning the result in reduced form.\n     * </p>\n     *\n     * @param bg the {@code BigInteger} to multiply by.\n     * @return a {@code BigFraction} instance with the resulting values.\n     * @throws NullArgumentException if {@code bg} is {@code null}.\n     */\n    public BigFraction multiply(final BigInteger bg);\n    /**\n     * <p>\n     * Access the denominator as a <tt>long</tt>.\n     * </p>\n     *\n     * @return the denominator as a <tt>long</tt>.\n     */\n    public long getDenominatorAsLong();\n    /**\n     * <p>\n     * Adds the value of this fraction to the passed {@link BigInteger},\n     * returning the result in reduced form.\n     * </p>\n     *\n     * @param bg\n     *            the {@link BigInteger} to add, must'nt be <code>null</code>.\n     * @return a <code>BigFraction</code> instance with the resulting values.\n     * @throws NullArgumentException\n     *             if the {@link BigInteger} is <code>null</code>.\n     */\n    public BigFraction add(final BigInteger bg) throws NullArgumentException;\n    /**\n     * <p>\n     * Multiply the value of this fraction by the passed <tt>int</tt>, returning\n     * the result in reduced form.\n     * </p>\n     *\n     * @param i\n     *            the <tt>int</tt> to multiply by.\n     * @return a {@link BigFraction} instance with the resulting values.\n     */\n    public BigFraction multiply(final int i);\n    /**\n     * <p>\n     * Adds the value of this fraction to another, returning the result in\n     * reduced form.\n     * </p>\n     *\n     * @param fraction\n     *            the {@link BigFraction} to add, must not be <code>null</code>.\n     * @return a {@link BigFraction} instance with the resulting values.\n     * @throws NullArgumentException if the {@link BigFraction} is {@code null}.\n     */\n    public BigFraction add(final BigFraction fraction);\n    /**\n     * <p>\n     * Access the numerator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>int</tt>.\n     */\n    public int getNumeratorAsInt();\n    /**\n     * <p>\n     * Adds the value of this fraction to the passed <tt>integer</tt>, returning\n     * the result in reduced form.\n     * </p>\n     *\n     * @param i\n     *            the <tt>integer</tt> to add.\n     * @return a <code>BigFraction</code> instance with the resulting values.\n     */\n    public BigFraction add(final int i);\n    /**\n     * <p>\n     * Multiplies the value of this fraction by another, returning the result in\n     * reduced form.\n     * </p>\n     *\n     * @param fraction Fraction to multiply by, must not be {@code null}.\n     * @return a {@link BigFraction} instance with the resulting values.\n     * @throws NullArgumentException if {@code fraction} is {@code null}.\n     */\n    public BigFraction multiply(final BigFraction fraction);\n    /**\n     * <p>\n     * Returns a <code>BigFraction</code> whose value is\n     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n     * </p>\n     *\n     * @param exponent\n     *            exponent to which this <code>BigFraction</code> is to be raised.\n     * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.\n     */\n    public BigFraction pow(final long exponent);\n    /**\n     * <p>\n     * Test for the equality of two fractions. If the lowest term numerator and\n     * denominators are the same for both fractions, the two fractions are\n     * considered to be equal.\n     * </p>\n     *\n     * @param other\n     *            fraction to test for equality to this fraction, can be\n     *            <code>null</code>.\n     * @return true if two fractions are equal, false if object is\n     *         <code>null</code>, not an instance of {@link BigFraction}, or not\n     *         equal to this fraction instance.\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(final Object other);\n    /**\n     * <p>\n     * Returns a <code>BigFraction</code> whose value is\n     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n     * </p>\n     *\n     * @param exponent\n     *            exponent to which this <code>BigFraction</code> is to be raised.\n     * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.\n     */\n    public BigFraction pow(final BigInteger exponent);\n    /**\n     * <p>\n     * Access the numerator as a <tt>long</tt>.\n     * </p>\n     *\n     * @return the numerator as a <tt>long</tt>.\n     */\n    public long getNumeratorAsLong();\n    /**\n     * <p>\n     * Multiply the value of this fraction by the passed <tt>long</tt>,\n     * returning the result in reduced form.\n     * </p>\n     *\n     * @param l\n     *            the <tt>long</tt> to multiply by.\n     * @return a {@link BigFraction} instance with the resulting values.\n     */\n    public BigFraction multiply(final long l);\n    /**\n     * <p>\n     * Returns a {@code BigFraction} whose value is\n     * {@code (this<sup>exponent</sup>)}, returning the result in reduced form.\n     * </p>\n     *\n     * @param exponent\n     *            exponent to which this {@code BigFraction} is to be\n     *            raised.\n     * @return <tt>this<sup>exponent</sup></tt>.\n     */\n    public BigFraction pow(final int exponent);\n    /**\n     * <p>\n     * Adds the value of this fraction to the passed <tt>long</tt>, returning\n     * the result in reduced form.\n     * </p>\n     *\n     * @param l\n     *            the <tt>long</tt> to add.\n     * @return a <code>BigFraction</code> instance with the resulting values.\n     */\n    public BigFraction add(final long l);\n    /**\n     * <p>\n     * Access the denominator as a <tt>int</tt>.\n     * </p>\n     *\n     * @return the denominator as a <tt>int</tt>.\n     */\n    public int getDenominatorAsInt();\n    /**\n     * <p>\n     * Divide the value of this fraction by another, returning the result in\n     * reduced form.\n     * </p>\n     *\n     * @param fraction Fraction to divide by, must not be {@code null}.\n     * @return a {@link BigFraction} instance with the resulting values.\n     * @throws NullArgumentException if the {@code fraction} is {@code null}.\n     * @throws ZeroException if the fraction to divide by is zero.\n     */\n    public BigFraction divide(final BigFraction fraction);\n    /**\n     * <p>\n     * Returns a <code>double</code> whose value is\n     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n     * </p>\n     *\n     * @param exponent\n     *            exponent to which this <code>BigFraction</code> is to be raised.\n     * @return <tt>this<sup>exponent</sup></tt>.\n     */\n    public double pow(final double exponent);\n    /**\n     * <p>\n     * Gets the fraction as a <tt>float</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>float</tt>.\n     * @see java.lang.Number#floatValue()\n     */\n    @Override\n    public float floatValue();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertFraction(int expectedNumerator, int expectedDenominator, BigFraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumeratorAsInt());\n        Assert.assertEquals(expectedDenominator, actual.getDenominatorAsInt());\n    }\n    private void assertFraction(long expectedNumerator, long expectedDenominator, BigFraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumeratorAsLong());\n        Assert.assertEquals(expectedDenominator, actual.getDenominatorAsLong());\n    }\n    public void testFloatValueForLargeNumeratorAndDenominator() {\n        final BigInteger pow400 = BigInteger.TEN.pow(400);\n        final BigInteger pow401 = BigInteger.TEN.pow(401);\n        final BigInteger two = new BigInteger(\"2\");\n        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n                                                  pow400.multiply(two));\n\n        Assert.assertEquals(5, large.floatValue(), 1e-15);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link org.apache.commons.math.util.Precision#equals(double,double,int)\n * equals for primitive double} in {@link org.apache.commons.math.util.Precision}\n * conforms with IEEE-754 while this class conforms with the standard behavior\n * for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private static final long serialVersionUID = -6195664516687396620L;\n    private final double imaginary;\n    private final double real;\n    private final transient boolean isNaN;\n    private final transient boolean isInfinite;\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/Tangent.html\" TARGET=\"_top\">\n     * tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and\n     * {@link FastMath#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite (or critical) values in real or imaginary parts of the input may\n     * result in infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tan(a &plusmn; INFINITY i) = 0 &plusmn; i\n     *   tan(&plusmn;INFINITY + bi) = NaN + NaN i\n     *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the tangent of {@code this}.\n     * @since 1.2\n     */\n    public Complex tan();\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/HyperbolicTangent.html\" TARGET=\"_top\">\n     * hyperbolic tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and\n     * {@link FastMath#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tanh(a &plusmn; INFINITY i) = NaN + NaN i\n     *   tanh(&plusmn;INFINITY + bi) = &plusmn;1 + 0 i\n     *   tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tanh(0 + (&pi;/2)i) = NaN + INFINITY i\n     *  </code>\n     * </pre>\n     *\n     * @return the hyperbolic tangent of {@code this}.\n     * @since 1.2\n     */\n    public Complex tanh();\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/SquareRoot.html\" TARGET=\"_top\">\n     * square root</a> of <code>1 - this<sup>2</sup></code> for this complex\n     * number.\n     * Computes the result directly as\n     * {@code sqrt(ONE.subtract(z.multiply(z)))}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     *\n     * @return the square root of <code>1 - this<sup>2</sup></code>.\n     * @since 1.2\n     */\n    public Complex sqrt1z();\n    /**\n     * Create a complex number given only the real part.\n     *\n     * @param realPart Real part.\n     * @return a Complex instance.\n     */\n    public static Complex valueOf(double realPart);\n    /**\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param realPart Real part.\n     * @param imaginaryPart Imaginary part.\n     * @return a Complex instance.\n     */\n    public static Complex valueOf(double realPart,\n                                  double imaginaryPart);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link org.apache.commons.math.util.Precision#equals(double,double,int)\n * equals for primitive double} in {@link org.apache.commons.math.util.Precision}\n * conforms with IEEE-754 while this class conforms with the standard behavior\n * for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private static final long serialVersionUID = -6195664516687396620L;\n    private final double imaginary;\n    private final double real;\n    private final transient boolean isNaN;\n    private final transient boolean isInfinite;\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/Tangent.html\" TARGET=\"_top\">\n     * tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and\n     * {@link FastMath#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite (or critical) values in real or imaginary parts of the input may\n     * result in infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tan(a &plusmn; INFINITY i) = 0 &plusmn; i\n     *   tan(&plusmn;INFINITY + bi) = NaN + NaN i\n     *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the tangent of {@code this}.\n     * @since 1.2\n     */\n    public Complex tan();\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/HyperbolicTangent.html\" TARGET=\"_top\">\n     * hyperbolic tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and\n     * {@link FastMath#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tanh(a &plusmn; INFINITY i) = NaN + NaN i\n     *   tanh(&plusmn;INFINITY + bi) = &plusmn;1 + 0 i\n     *   tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tanh(0 + (&pi;/2)i) = NaN + INFINITY i\n     *  </code>\n     * </pre>\n     *\n     * @return the hyperbolic tangent of {@code this}.\n     * @since 1.2\n     */\n    public Complex tanh();\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/SquareRoot.html\" TARGET=\"_top\">\n     * square root</a> of <code>1 - this<sup>2</sup></code> for this complex\n     * number.\n     * Computes the result directly as\n     * {@code sqrt(ONE.subtract(z.multiply(z)))}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     *\n     * @return the square root of <code>1 - this<sup>2</sup></code>.\n     * @since 1.2\n     */\n    public Complex sqrt1z();\n    /**\n     * Create a complex number given only the real part.\n     *\n     * @param realPart Real part.\n     * @return a Complex instance.\n     */\n    public static Complex valueOf(double realPart);\n    /**\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param realPart Real part.\n     * @param imaginaryPart Imaginary part.\n     * @return a Complex instance.\n     */\n    public static Complex valueOf(double realPart,\n                                  double imaginaryPart);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testTanhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.tanh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());\n        TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());\n        TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());\n        TestUtils.assertSame(Complex.NaN, infInf.tanh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Powell's BOBYQA algorithm. This implementation is translated and\n * adapted from the Fortran version available\n * <a href=\"http://plato.asu.edu/ftp/other_software/bobyqa.zip\">here</a>.\n * See <a href=\"http://www.optimization-online.org/DB_HTML/2010/05/2616.html\">\n * this paper</a> for an introduction.\n * <br/>\n * BOBYQA is particularly well suited for high dimensional problems\n * where derivatives are not available. In most cases it outperforms the\n * {@link PowellOptimizer} significantly. Stochastic algorithms like\n * {@link CMAESOptimizer} succeed more often than BOBYQA, but are more\n * expensive. BOBYQA could also be considered as a replacement of any\n * derivative-based optimizer when the derivatives are approximated by\n * finite differences.\n *\n * @version $Id$\n * @since 3.0\n */\npublic class BOBYQAOptimizer\n    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    public static final int MINIMUM_PROBLEM_DIMENSION = 2;\n    public static final double DEFAULT_INITIAL_RADIUS = 10.0;\n    public static final double DEFAULT_STOPPING_RADIUS = 1E-8;\n    private static final double ZERO = 0d;\n    private static final double ONE = 1d;\n    private static final double TWO = 2d;\n    private static final double TEN = 10d;\n    private static final double SIXTEEN = 16d;\n    private static final double TWO_HUNDRED_FIFTY = 250d;\n    private static final double MINUS_ONE = -ONE;\n    private static final double HALF = ONE / 2;\n    private static final double ONE_OVER_FOUR = ONE / 4;\n    private static final double ONE_OVER_EIGHT = ONE / 8;\n    private static final double ONE_OVER_TEN = ONE / 10;\n    private static final double ONE_OVER_A_THOUSAND = ONE / 1000;\n    private final int numberOfInterpolationPoints;\n    private double initialTrustRegionRadius;\n    private final double stoppingTrustRegionRadius;\n    private boolean isMinimize;\n    private ArrayRealVector currentBest;\n    private double[] boundDifference;\n    private int trustRegionCenterInterpolationPointIndex;\n    private Array2DRowRealMatrix bMatrix;\n    private Array2DRowRealMatrix zMatrix;\n    private Array2DRowRealMatrix interpolationPoints;\n    private ArrayRealVector originShift;\n    private ArrayRealVector fAtInterpolationPoints;\n    private ArrayRealVector trustRegionCenterOffset;\n    private ArrayRealVector gradientAtTrustRegionCenter;\n    private ArrayRealVector lowerDifference;\n    private ArrayRealVector upperDifference;\n    private ArrayRealVector modelSecondDerivativesParameters;\n    /**\n     *     SUBROUTINE PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,\n     *     BMAT and ZMAT for the first iteration, and it maintains the values of\n     *     NF and KOPT. The vector X is also changed by PRELIM.\n     *\n     *     The arguments N, NPT, X, XL, XU, RHOBEG, IPRINT and MAXFUN are the\n     *       same as the corresponding arguments in SUBROUTINE BOBYQA.\n     *     The arguments XBASE, XPT, FVAL, HQ, PQ, BMAT, ZMAT, NDIM, SL and SU\n     *       are the same as the corresponding arguments in BOBYQB, the elements\n     *       of SL and SU being set in BOBYQA.\n     *     GOPT is usually the gradient of the quadratic model at XOPT+XBASE, but\n     *       it is set by PRELIM to the gradient of the quadratic model at XBASE.\n     *       If XOPT is nonzero, BOBYQB will change it to its usual value later.\n     *     NF is maintaned as the number of calls of CALFUN so far.\n     *     KOPT will be such that the least calculated value of F so far is at\n     *       the point XPT(KOPT,.)+XBASE in the space of the variables.\n     *\n     * @param lowerBound Lower bounds.\n     * @param upperBound Upper bounds.\n     */\n    private void prelim(double[] lowerBound,\n                        double[] upperBound);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Powell's BOBYQA algorithm. This implementation is translated and\n * adapted from the Fortran version available\n * <a href=\"http://plato.asu.edu/ftp/other_software/bobyqa.zip\">here</a>.\n * See <a href=\"http://www.optimization-online.org/DB_HTML/2010/05/2616.html\">\n * this paper</a> for an introduction.\n * <br/>\n * BOBYQA is particularly well suited for high dimensional problems\n * where derivatives are not available. In most cases it outperforms the\n * {@link PowellOptimizer} significantly. Stochastic algorithms like\n * {@link CMAESOptimizer} succeed more often than BOBYQA, but are more\n * expensive. BOBYQA could also be considered as a replacement of any\n * derivative-based optimizer when the derivatives are approximated by\n * finite differences.\n *\n * @version $Id$\n * @since 3.0\n */\npublic class BOBYQAOptimizer\n    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    public static final int MINIMUM_PROBLEM_DIMENSION = 2;\n    public static final double DEFAULT_INITIAL_RADIUS = 10.0;\n    public static final double DEFAULT_STOPPING_RADIUS = 1E-8;\n    private static final double ZERO = 0d;\n    private static final double ONE = 1d;\n    private static final double TWO = 2d;\n    private static final double TEN = 10d;\n    private static final double SIXTEEN = 16d;\n    private static final double TWO_HUNDRED_FIFTY = 250d;\n    private static final double MINUS_ONE = -ONE;\n    private static final double HALF = ONE / 2;\n    private static final double ONE_OVER_FOUR = ONE / 4;\n    private static final double ONE_OVER_EIGHT = ONE / 8;\n    private static final double ONE_OVER_TEN = ONE / 10;\n    private static final double ONE_OVER_A_THOUSAND = ONE / 1000;\n    private final int numberOfInterpolationPoints;\n    private double initialTrustRegionRadius;\n    private final double stoppingTrustRegionRadius;\n    private boolean isMinimize;\n    private ArrayRealVector currentBest;\n    private double[] boundDifference;\n    private int trustRegionCenterInterpolationPointIndex;\n    private Array2DRowRealMatrix bMatrix;\n    private Array2DRowRealMatrix zMatrix;\n    private Array2DRowRealMatrix interpolationPoints;\n    private ArrayRealVector originShift;\n    private ArrayRealVector fAtInterpolationPoints;\n    private ArrayRealVector trustRegionCenterOffset;\n    private ArrayRealVector gradientAtTrustRegionCenter;\n    private ArrayRealVector lowerDifference;\n    private ArrayRealVector upperDifference;\n    private ArrayRealVector modelSecondDerivativesParameters;\n    /**\n     *     SUBROUTINE PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,\n     *     BMAT and ZMAT for the first iteration, and it maintains the values of\n     *     NF and KOPT. The vector X is also changed by PRELIM.\n     *\n     *     The arguments N, NPT, X, XL, XU, RHOBEG, IPRINT and MAXFUN are the\n     *       same as the corresponding arguments in SUBROUTINE BOBYQA.\n     *     The arguments XBASE, XPT, FVAL, HQ, PQ, BMAT, ZMAT, NDIM, SL and SU\n     *       are the same as the corresponding arguments in BOBYQB, the elements\n     *       of SL and SU being set in BOBYQA.\n     *     GOPT is usually the gradient of the quadratic model at XOPT+XBASE, but\n     *       it is set by PRELIM to the gradient of the quadratic model at XBASE.\n     *       If XOPT is nonzero, BOBYQB will change it to its usual value later.\n     *     NF is maintaned as the number of calls of CALFUN so far.\n     *     KOPT will be such that the least calculated value of F so far is at\n     *       the point XPT(KOPT,.)+XBASE in the space of the variables.\n     *\n     * @param lowerBound Lower bounds.\n     * @param upperBound Upper bounds.\n     */\n    private void prelim(double[] lowerBound,\n                        double[] upperBound);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void doTest(MultivariateFunction func,\n                        double[] startPoint,\n                        double[][] boundaries,\n                        GoalType goal,\n                        double fTol,\n                        double pointTol,\n                        int maxEvaluations,\n                        RealPointValuePair expected) {\n        doTest(func,\n               startPoint,\n               boundaries,\n               goal,\n               fTol,\n               pointTol,\n               maxEvaluations,\n               0,\n               expected,\n               \"\");\n    }\n    private void doTest(MultivariateFunction func,\n                        double[] startPoint,\n                        double[][] boundaries,\n                        GoalType goal,\n                        double fTol,\n                        double pointTol,\n                        int maxEvaluations,\n                        int additionalInterpolationPoints,\n                        RealPointValuePair expected,\n                        String assertMsg) {\n\n        System.out.println(func.getClass().getName() + \" BEGIN\"); // XXX\n\n        int dim = startPoint.length;\n//        MultivariateOptimizer optim =\n//            new PowellOptimizer(1e-13, Math.ulp(1d));\n//        RealPointValuePair result = optim.optimize(100000, func, goal, startPoint);\n        final double[] lB = boundaries == null ? null : boundaries[0];\n        final double[] uB = boundaries == null ? null : boundaries[1];\n        final int numIterpolationPoints = 2 * dim + 1 + additionalInterpolationPoints;\n        BOBYQAOptimizer optim = new BOBYQAOptimizer(numIterpolationPoints);\n        RealPointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);\n//        System.out.println(func.getClass().getName() + \" = \" \n//              + optim.getEvaluations() + \" f(\");\n//        for (double x: result.getPoint())  System.out.print(x + \" \");\n//        System.out.println(\") = \" +  result.getValue());\n        Assert.assertEquals(assertMsg, expected.getValue(), result.getValue(), fTol);\n        for (int i = 0; i < dim; i++) {\n            Assert.assertEquals(expected.getPoint()[i],\n                                result.getPoint()[i], pointTol);\n        }\n\n        System.out.println(func.getClass().getName() + \" END\"); // XXX\n    }\n    private static double[] point(int n, double value) {\n        double[] ds = new double[n];\n        Arrays.fill(ds, value);\n        return ds;\n    }\n    private static double[][] boundaries(int dim,\n            double lower, double upper) {\n        double[][] boundaries = new double[2][dim];\n        for (int i = 0; i < dim; i++)\n            boundaries[0][i] = lower;\n        for (int i = 0; i < dim; i++)\n            boundaries[1][i] = upper;\n        return boundaries;\n    }\n    public void testConstrainedRosenWithMoreInterpolationPoints() {\n        final double[] startPoint = point(DIM, 0.1);\n        final double[][] boundaries = boundaries(DIM, -1, 2);\n        final RealPointValuePair expected = new RealPointValuePair(point(DIM, 1.0), 0.0);\n\n        // This should have been 78 because in the code the hard limit is\n        // said to be\n        //   ((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)\n        // i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64, // 65, 66, ... final int maxAdditionalPoints = 47;\n\n        for (int num = 1; num <= maxAdditionalPoints; num++) {\n            doTest(new Rosen(), startPoint, boundaries,\n                   GoalType.MINIMIZE,\n                   1e-12, 1e-6, 2000,\n                   num,\n                   expected,\n                   \"num=\" + num);\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class implements the common part of all embedded Runge-Kutta\n * integrators for Ordinary Differential Equations.\n *\n * <p>These methods are embedded explicit Runge-Kutta methods with two\n * sets of coefficients allowing to estimate the error, their Butcher\n * arrays are as follows :\n * <pre>\n *    0  |\n *   c2  | a21\n *   c3  | a31  a32\n *   ... |        ...\n *   cs  | as1  as2  ...  ass-1\n *       |--------------------------\n *       |  b1   b2  ...   bs-1  bs\n *       |  b'1  b'2 ...   b's-1 b's\n * </pre>\n * </p>\n *\n * <p>In fact, we rather use the array defined by ej = bj - b'j to\n * compute directly the error rather than computing two estimates and\n * then comparing them.</p>\n *\n * <p>Some methods are qualified as <i>fsal</i> (first same as last)\n * methods. This means the last evaluation of the derivatives in one\n * step is the same as the first in the next step. Then, this\n * evaluation can be reused from one step to the next one and the cost\n * of such a method is really s-1 evaluations despite the method still\n * has s stages. This behaviour is true only for successful steps, if\n * the step is rejected after the error estimation phase, no\n * evaluation is saved. For an <i>fsal</i> method, we have cs = 1 and\n * asi = bi for all i.</p>\n *\n * @version $Id$\n * @since 1.2\n */\npublic abstract class EmbeddedRungeKuttaIntegrator\n  extends AdaptiveStepsizeIntegrator {\n    private final boolean fsal;\n    private final double[] c;\n    private final double[][] a;\n    private final double[] b;\n    private final RungeKuttaStepInterpolator prototype;\n    private final double exp;\n    private double safety;\n    private double minReduction;\n    private double maxGrowth;\n  /** {@inheritDoc} */\n  @Override\n  public void integrate(final ExpandableStatefulODE equations, final double t)\n      throws MathIllegalStateException, MathIllegalArgumentException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class implements the common part of all embedded Runge-Kutta\n * integrators for Ordinary Differential Equations.\n *\n * <p>These methods are embedded explicit Runge-Kutta methods with two\n * sets of coefficients allowing to estimate the error, their Butcher\n * arrays are as follows :\n * <pre>\n *    0  |\n *   c2  | a21\n *   c3  | a31  a32\n *   ... |        ...\n *   cs  | as1  as2  ...  ass-1\n *       |--------------------------\n *       |  b1   b2  ...   bs-1  bs\n *       |  b'1  b'2 ...   b's-1 b's\n * </pre>\n * </p>\n *\n * <p>In fact, we rather use the array defined by ej = bj - b'j to\n * compute directly the error rather than computing two estimates and\n * then comparing them.</p>\n *\n * <p>Some methods are qualified as <i>fsal</i> (first same as last)\n * methods. This means the last evaluation of the derivatives in one\n * step is the same as the first in the next step. Then, this\n * evaluation can be reused from one step to the next one and the cost\n * of such a method is really s-1 evaluations despite the method still\n * has s stages. This behaviour is true only for successful steps, if\n * the step is rejected after the error estimation phase, no\n * evaluation is saved. For an <i>fsal</i> method, we have cs = 1 and\n * asi = bi for all i.</p>\n *\n * @version $Id$\n * @since 1.2\n */\npublic abstract class EmbeddedRungeKuttaIntegrator\n  extends AdaptiveStepsizeIntegrator {\n    private final boolean fsal;\n    private final double[] c;\n    private final double[][] a;\n    private final double[] b;\n    private final RungeKuttaStepInterpolator prototype;\n    private final double exp;\n    private double safety;\n    private double minReduction;\n    private double maxGrowth;\n  /** {@inheritDoc} */\n  @Override\n  public void integrate(final ExpandableStatefulODE equations, final double t)\n      throws MathIllegalStateException, MathIllegalArgumentException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testTooLargeFirstStep() {\n\n      AdaptiveStepsizeIntegrator integ =\n              new DormandPrince853Integrator(0, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN);\n      final double start = 0.0;\n      final double end   = 0.001;\n      FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return 1;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              Assert.assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY));\n              Assert.assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));\n              yDot[0] = -100.0 * y[0];\n          }\n\n      };\n\n      integ.setStepSizeControl(0, 1.0, 1.0e-6, 1.0e-8);\n      integ.integrate(equations, start, new double[] { 1.0 }, end, new double[1]);\n\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** This class represents a sub-hyperplane for {@link Line}.\n * @version $Id$\n * @since 3.0\n */\npublic class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {\n    /** Get the intersection of the instance and another sub-line.\n     * <p>\n     * This method is related to the {@link Line#intersection(Line)\n     * intersection} method in the {@link Line Line} class, but in addition\n     * to compute the point along infinite lines, it also checks the point\n     * lies on both sub-line ranges.\n     * </p>\n     * @param subLine other sub-line which may intersect instance\n     * @param includeEndPoints if true, endpoints are considered to belong to\n     * instance (i.e. they are closed sets) and may be returned, otherwise endpoints\n     * are considered to not belong to instance (i.e. they are open sets) and intersection\n     * occurring on endpoints lead to null being returned\n     * @return the intersection point if there is one, null if the sub-lines don't intersect\n     */\n    public Vector2D intersection(final SubLine subLine, final boolean includeEndPoints);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** This class represents a sub-hyperplane for {@link Line}.\n * @version $Id$\n * @since 3.0\n */\npublic class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {\n    /** Get the intersection of the instance and another sub-line.\n     * <p>\n     * This method is related to the {@link Line#intersection(Line)\n     * intersection} method in the {@link Line Line} class, but in addition\n     * to compute the point along infinite lines, it also checks the point\n     * lies on both sub-line ranges.\n     * </p>\n     * @param subLine other sub-line which may intersect instance\n     * @param includeEndPoints if true, endpoints are considered to belong to\n     * instance (i.e. they are closed sets) and may be returned, otherwise endpoints\n     * are considered to not belong to instance (i.e. they are open sets) and intersection\n     * occurring on endpoints lead to null being returned\n     * @return the intersection point if there is one, null if the sub-lines don't intersect\n     */\n    public Vector2D intersection(final SubLine subLine, final boolean includeEndPoints);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testIntersectionNotIntersecting() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class implements a modification of the <a\n * href=\"http://mathworld.wolfram.com/BrentsMethod.html\"> Brent algorithm</a>.\n * <p>\n * The changes with respect to the original Brent algorithm are:\n * <ul>\n *   <li>the returned value is chosen in the current interval according\n *   to user specified {@link AllowedSolution},</li>\n *   <li>the maximal order for the invert polynomial root search is\n *   user-specified instead of being invert quadratic only</li>\n * </ul>\n * </p>\n * The given interval must bracket the root.\n *\n * @version $Id$\n */\npublic class BracketingNthOrderBrentSolver\n    extends AbstractUnivariateRealSolver\n    implements BracketedUnivariateRealSolver<UnivariateFunction> {\n    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n    private static final int DEFAULT_MAXIMAL_ORDER = 5;\n    private static final int MAXIMAL_AGING = 2;\n    private static final double REDUCTION_FACTOR = 1.0 / 16.0;\n    private final int maximalOrder;\n    private AllowedSolution allowed;\n    /** {@inheritDoc} */\n    public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, double startValue,\n                        AllowedSolution allowedSolution);\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected double doSolve();\n    /** {@inheritDoc} */\n    public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, AllowedSolution allowedSolution);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class implements a modification of the <a\n * href=\"http://mathworld.wolfram.com/BrentsMethod.html\"> Brent algorithm</a>.\n * <p>\n * The changes with respect to the original Brent algorithm are:\n * <ul>\n *   <li>the returned value is chosen in the current interval according\n *   to user specified {@link AllowedSolution},</li>\n *   <li>the maximal order for the invert polynomial root search is\n *   user-specified instead of being invert quadratic only</li>\n * </ul>\n * </p>\n * The given interval must bracket the root.\n *\n * @version $Id$\n */\npublic class BracketingNthOrderBrentSolver\n    extends AbstractUnivariateRealSolver\n    implements BracketedUnivariateRealSolver<UnivariateFunction> {\n    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n    private static final int DEFAULT_MAXIMAL_ORDER = 5;\n    private static final int MAXIMAL_AGING = 2;\n    private static final double REDUCTION_FACTOR = 1.0 / 16.0;\n    private final int maximalOrder;\n    private AllowedSolution allowed;\n    /** {@inheritDoc} */\n    public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, double startValue,\n                        AllowedSolution allowedSolution);\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected double doSolve();\n    /** {@inheritDoc} */\n    public double solve(int maxEval, UnivariateFunction f, double min,\n                        double max, AllowedSolution allowedSolution);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void compare(TestFunction f) {\n        compare(f, f.getRoot(), f.getMin(), f.getMax());\n    }\n    private void compare(DifferentiableUnivariateFunction f,\n                         double root, double min, double max) {\n        NewtonSolver newton = new NewtonSolver(1.0e-12);\n        BracketingNthOrderBrentSolver bracketing =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-12, 1.0e-18, 5);\n        double resultN;\n        try {\n            resultN = newton.solve(100, f, min, max);\n        } catch (TooManyEvaluationsException tmee) {\n            resultN = Double.NaN;\n        }\n        double resultB;\n        try {\n            resultB = bracketing.solve(100, f, min, max);\n        } catch (TooManyEvaluationsException tmee) {\n            resultB = Double.NaN;\n        }\n        Assert.assertEquals(root, resultN, newton.getAbsoluteAccuracy());\n        Assert.assertEquals(root, resultB, bracketing.getAbsoluteAccuracy());\n        Assert.assertTrue(bracketing.getEvaluations() < newton.getEvaluations());\n    }\n    public void testIssue716() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());\n        Assert.assertTrue(sharpTurn.value(result) >= 0);\n        Assert.assertEquals(-0.5, result, 1.0e-10);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Computes the variance of the available values.  By default, the unbiased\n * \"sample variance\" definitional formula is used:\n * <p>\n * variance = sum((x_i - mean)^2) / (n - 1) </p>\n * <p>\n * where mean is the {@link Mean} and <code>n</code> is the number\n * of sample observations.</p>\n * <p>\n * The definitional formula does not have good numerical properties, so\n * this implementation does not compute the statistic using the definitional\n * formula. <ul>\n * <li> The <code>getResult</code> method computes the variance using\n * updating formulas based on West's algorithm, as described in\n * <a href=\"http://doi.acm.org/10.1145/359146.359152\"> Chan, T. F. and\n * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n * vol. 22 no. 9, pp. 526-531.</a></li>\n * <li> The <code>evaluate</code> methods leverage the fact that they have the\n * full array of values in memory to execute a two-pass algorithm.\n * Specifically, these methods use the \"corrected two-pass algorithm\" from\n * Chan, Golub, Levesque, <i>Algorithms for Computing the Sample Variance</i>,\n * American Statistician, vol. 37, no. 3 (1983) pp. 242-247.</li></ul>\n * Note that adding values using <code>increment</code> or\n * <code>incrementAll</code> and then executing <code>getResult</code> will\n * sometimes give a different, less accurate, result than executing\n * <code>evaluate</code> with the full array of values. The former approach\n * should only be used when the full array of values is not available.</p>\n * <p>\n * The \"population variance\"  ( sum((x_i - mean)^2) / n ) can also\n * be computed using this statistic.  The <code>isBiasCorrected</code>\n * property determines whether the \"population\" or \"sample\" value is\n * returned by the <code>evaluate</code> and <code>getResult</code> methods.\n * To compute population variances, set this property to <code>false.</code>\n * </p>\n * <p>\n * <strong>Note that this implementation is not synchronized.</strong> If\n * multiple threads access an instance of this class concurrently, and at least\n * one of the threads invokes the <code>increment()</code> or\n * <code>clear()</code> method, it must be synchronized externally.</p>\n *\n * @version $Id$\n */\npublic class Variance extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation {\n    private static final long serialVersionUID = -9111962718267217978L;\n    private boolean isBiasCorrected = true;\n    /**\n     * Returns the variance of the entries in the input array, using the\n     * precomputed mean value.  Returns <code>Double.NaN</code> if the array\n     * is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * If <code>isBiasCorrected</code> is <code>true</code> the formula used\n     * assumes that the supplied mean value is the arithmetic mean of the\n     * sample data, not a known population parameter.  If the mean is a known\n     * population parameter, or if the \"population\" version of the variance is\n     * desired, set <code>isBiasCorrected</code> to <code>false</code> before\n     * invoking this method.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param mean the precomputed mean value\n     * @return the variance of the values or Double.NaN if the array is empty\n     * @throws IllegalArgumentException if the array is null\n     */\n    public double evaluate(final double[] values, final double mean);\n    /**\n     * <p>\n     * Returns the weighted variance of the entries in the the input array.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre>\n     * where weightedMean is the weighted mean</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if either array is null.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @return the weighted variance of the values\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights);\n    /**\n     * Returns the variance of the entries in the specified portion of\n     * the input array, or <code>Double.NaN</code> if the designated subarray\n     * is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     *\n     * @param values the input array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the array is null or the array index\n     *  parameters are not valid\n     */\n    @Override\n    public double evaluate(final double[] values, final int begin, final int length);\n    /**\n     * Returns the variance of the entries in the specified portion of\n     * the input array, using the precomputed mean value.  Returns\n     * <code>Double.NaN</code> if the designated subarray is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the arithmetic\n     * mean of the sample data, not a known population parameter.  This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param mean the precomputed mean value\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the array is null or the array index\n     *  parameters are not valid\n     */\n    public double evaluate(final double[] values, final double mean,\n            final int begin, final int length);\n    /**\n     * Returns the weighted variance of the entries in the specified portion of\n     * the input array, using the precomputed weighted mean value.  Returns\n     * <code>Double.NaN</code> if the designated subarray is empty.\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre></p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the weighted arithmetic\n     * mean of the sample data, not a known population parameter. This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param mean the precomputed weighted mean value\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights,\n                           final double mean, final int begin, final int length);\n    /**\n     * <p>Returns the weighted variance of the entries in the specified portion of\n     * the input array, or <code>Double.NaN</code> if the designated subarray\n     * is empty.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre>\n     * where weightedMean is the weighted mean</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if either array is null.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the weighted variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights,\n                           final int begin, final int length);\n    /**\n     * Returns the variance of the entries in the input array, or\n     * <code>Double.NaN</code> if the array is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the array is null\n     */\n    @Override\n    public double evaluate(final double[] values);\n    /**\n     * <p>Returns the weighted variance of the values in the input array, using\n     * the precomputed weighted mean value.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre></p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the weighted arithmetic\n     * mean of the sample data, not a known population parameter. This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param mean the precomputed weighted mean value\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights, final double mean);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Computes the variance of the available values.  By default, the unbiased\n * \"sample variance\" definitional formula is used:\n * <p>\n * variance = sum((x_i - mean)^2) / (n - 1) </p>\n * <p>\n * where mean is the {@link Mean} and <code>n</code> is the number\n * of sample observations.</p>\n * <p>\n * The definitional formula does not have good numerical properties, so\n * this implementation does not compute the statistic using the definitional\n * formula. <ul>\n * <li> The <code>getResult</code> method computes the variance using\n * updating formulas based on West's algorithm, as described in\n * <a href=\"http://doi.acm.org/10.1145/359146.359152\"> Chan, T. F. and\n * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n * vol. 22 no. 9, pp. 526-531.</a></li>\n * <li> The <code>evaluate</code> methods leverage the fact that they have the\n * full array of values in memory to execute a two-pass algorithm.\n * Specifically, these methods use the \"corrected two-pass algorithm\" from\n * Chan, Golub, Levesque, <i>Algorithms for Computing the Sample Variance</i>,\n * American Statistician, vol. 37, no. 3 (1983) pp. 242-247.</li></ul>\n * Note that adding values using <code>increment</code> or\n * <code>incrementAll</code> and then executing <code>getResult</code> will\n * sometimes give a different, less accurate, result than executing\n * <code>evaluate</code> with the full array of values. The former approach\n * should only be used when the full array of values is not available.</p>\n * <p>\n * The \"population variance\"  ( sum((x_i - mean)^2) / n ) can also\n * be computed using this statistic.  The <code>isBiasCorrected</code>\n * property determines whether the \"population\" or \"sample\" value is\n * returned by the <code>evaluate</code> and <code>getResult</code> methods.\n * To compute population variances, set this property to <code>false.</code>\n * </p>\n * <p>\n * <strong>Note that this implementation is not synchronized.</strong> If\n * multiple threads access an instance of this class concurrently, and at least\n * one of the threads invokes the <code>increment()</code> or\n * <code>clear()</code> method, it must be synchronized externally.</p>\n *\n * @version $Id$\n */\npublic class Variance extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation {\n    private static final long serialVersionUID = -9111962718267217978L;\n    private boolean isBiasCorrected = true;\n    /**\n     * Returns the variance of the entries in the input array, using the\n     * precomputed mean value.  Returns <code>Double.NaN</code> if the array\n     * is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * If <code>isBiasCorrected</code> is <code>true</code> the formula used\n     * assumes that the supplied mean value is the arithmetic mean of the\n     * sample data, not a known population parameter.  If the mean is a known\n     * population parameter, or if the \"population\" version of the variance is\n     * desired, set <code>isBiasCorrected</code> to <code>false</code> before\n     * invoking this method.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param mean the precomputed mean value\n     * @return the variance of the values or Double.NaN if the array is empty\n     * @throws IllegalArgumentException if the array is null\n     */\n    public double evaluate(final double[] values, final double mean);\n    /**\n     * <p>\n     * Returns the weighted variance of the entries in the the input array.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre>\n     * where weightedMean is the weighted mean</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if either array is null.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @return the weighted variance of the values\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights);\n    /**\n     * Returns the variance of the entries in the specified portion of\n     * the input array, or <code>Double.NaN</code> if the designated subarray\n     * is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     *\n     * @param values the input array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the array is null or the array index\n     *  parameters are not valid\n     */\n    @Override\n    public double evaluate(final double[] values, final int begin, final int length);\n    /**\n     * Returns the variance of the entries in the specified portion of\n     * the input array, using the precomputed mean value.  Returns\n     * <code>Double.NaN</code> if the designated subarray is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the arithmetic\n     * mean of the sample data, not a known population parameter.  This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param mean the precomputed mean value\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the array is null or the array index\n     *  parameters are not valid\n     */\n    public double evaluate(final double[] values, final double mean,\n            final int begin, final int length);\n    /**\n     * Returns the weighted variance of the entries in the specified portion of\n     * the input array, using the precomputed weighted mean value.  Returns\n     * <code>Double.NaN</code> if the designated subarray is empty.\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre></p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the weighted arithmetic\n     * mean of the sample data, not a known population parameter. This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param mean the precomputed weighted mean value\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights,\n                           final double mean, final int begin, final int length);\n    /**\n     * <p>Returns the weighted variance of the entries in the specified portion of\n     * the input array, or <code>Double.NaN</code> if the designated subarray\n     * is empty.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre>\n     * where weightedMean is the weighted mean</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if either array is null.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the weighted variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights,\n                           final int begin, final int length);\n    /**\n     * Returns the variance of the entries in the input array, or\n     * <code>Double.NaN</code> if the array is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the array is null\n     */\n    @Override\n    public double evaluate(final double[] values);\n    /**\n     * <p>Returns the weighted variance of the values in the input array, using\n     * the precomputed weighted mean value.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre></p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the weighted arithmetic\n     * mean of the sample data, not a known population parameter. This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param mean the precomputed weighted mean value\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights, final double mean);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * @version $Id$\n */\npublic abstract class UnivariateStatisticAbstractTest {\n    public void testEvaluateArraySegmentWeighted() {\n        // See if this statistic computes weighted statistics\n        // If not, skip this test\n        UnivariateStatistic statistic = getUnivariateStatistic();\n        if (!(statistic instanceof WeightedEvaluation)) {\n            return;\n        }\n        final WeightedEvaluation stat = (WeightedEvaluation) getUnivariateStatistic();\n        final double[] arrayZero = new double[5];\n        final double[] weightZero = new double[5];\n        System.arraycopy(testArray, 0, arrayZero, 0, 5);\n        System.arraycopy(testWeightsArray, 0, weightZero, 0, 5);\n        Assert.assertEquals(stat.evaluate(arrayZero, weightZero), stat.evaluate(testArray, testWeightsArray, 0, 5), 0);\n        final double[] arrayOne = new double[5];\n        final double[] weightOne = new double[5];\n        System.arraycopy(testArray, 5, arrayOne, 0, 5);\n        System.arraycopy(testWeightsArray, 5, weightOne, 0, 5);\n        Assert.assertEquals(stat.evaluate(arrayOne, weightOne), stat.evaluate(testArray, testWeightsArray, 5, 5), 0);\n        final double[] arrayEnd = new double[5];\n        final double[] weightEnd = new double[5];\n        System.arraycopy(testArray, testArray.length - 5, arrayEnd, 0, 5);\n        System.arraycopy(testWeightsArray, testArray.length - 5, weightEnd, 0, 5);\n        Assert.assertEquals(stat.evaluate(arrayEnd, weightEnd), stat.evaluate(testArray, testWeightsArray, testArray.length - 5, 5), 0);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A tableau for use in the Simplex method.\n *\n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Id$\n * @since 2.0\n */\nclass SimplexTableau implements Serializable {\n    private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\";\n    private static final int DEFAULT_ULPS = 10;\n    private static final long serialVersionUID = -1369660067587938365L;\n    private final LinearObjectiveFunction f;\n    private final List<LinearConstraint> constraints;\n    private final boolean restrictToNonNegative;\n    private final List<String> columnLabels = new ArrayList<String>();\n    private transient RealMatrix tableau;\n    private final int numDecisionVariables;\n    private final int numSlackVariables;\n    private int numArtificialVariables;\n    private final double epsilon;\n    private final int maxUlps;\n    /**\n     * Get the current solution.\n     *\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A tableau for use in the Simplex method.\n *\n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Id$\n * @since 2.0\n */\nclass SimplexTableau implements Serializable {\n    private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\";\n    private static final int DEFAULT_ULPS = 10;\n    private static final long serialVersionUID = -1369660067587938365L;\n    private final LinearObjectiveFunction f;\n    private final List<LinearConstraint> constraints;\n    private final boolean restrictToNonNegative;\n    private final List<String> columnLabels = new ArrayList<String>();\n    private transient RealMatrix tableau;\n    private final int numDecisionVariables;\n    private final int numSlackVariables;\n    private int numArtificialVariables;\n    private final double epsilon;\n    private final int maxUlps;\n    /**\n     * Get the current solution.\n     *\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private LinearConstraint equationFromString(int numCoefficients, String s) {\n        Relationship relationship;\n        if (s.contains(\">=\")) {\n            relationship = Relationship.GEQ;\n        } else if (s.contains(\"<=\")) {\n            relationship = Relationship.LEQ;\n        } else if (s.contains(\"=\")) {\n            relationship = Relationship.EQ;\n        } else {\n            throw new IllegalArgumentException();\n        }\n\n        String[] equationParts = s.split(\"[>|<]?=\");\n        double rhs = Double.parseDouble(equationParts[1].trim());\n\n        double[] lhs = new double[numCoefficients];\n        String left = equationParts[0].replaceAll(\" ?x\", \"\");\n        String[] coefficients = left.split(\" \");\n        for (String coefficient : coefficients) {\n            double value = coefficient.charAt(0) == '-' ? -1 : 1;\n            int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n            lhs[index] = value;\n        }\n        return new LinearConstraint(lhs, relationship, rhs);\n    }\n    public void testMath713NegativeVariable() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>\n * Computes summary statistics for a stream of data values added using the\n * {@link #addValue(double) addValue} method. The data values are not stored in\n * memory, so this class can be used to compute statistics for very large data\n * streams.\n * </p>\n * <p>\n * The {@link StorelessUnivariateStatistic} instances used to maintain summary\n * state and compute statistics are configurable via setters. For example, the\n * default implementation for the variance can be overridden by calling\n * {@link #setVarianceImpl(StorelessUnivariateStatistic)}. Actual parameters to\n * these methods must implement the {@link StorelessUnivariateStatistic}\n * interface and configuration must be completed before <code>addValue</code>\n * is called. No configuration is necessary to use the default, commons-math\n * provided implementations.\n * </p>\n * <p>\n * Note: This class is not thread-safe. Use\n * {@link SynchronizedSummaryStatistics} if concurrent access from multiple\n * threads is required.\n * </p>\n * @version $Id$\n */\npublic class SummaryStatistics implements StatisticalSummary, Serializable {\n    private static final long serialVersionUID = -2021321786743555871L;\n    private StorelessUnivariateStatistic sumImpl = sum;\n    private StorelessUnivariateStatistic sumsqImpl = sumsq;\n    private StorelessUnivariateStatistic minImpl = min;\n    private StorelessUnivariateStatistic maxImpl = max;\n    private StorelessUnivariateStatistic sumLogImpl = sumLog;\n    private StorelessUnivariateStatistic geoMeanImpl = geoMean;\n    private StorelessUnivariateStatistic meanImpl = mean;\n    private StorelessUnivariateStatistic varianceImpl = variance;\n    /**\n     * Returns the mean of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the mean\n     */\n    public double getMean();\n    /**\n     * Returns the number of available values\n     * @return The number of available values\n     */\n    public long getN();\n    /**\n     * Returns the standard deviation of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the standard deviation\n     */\n    public double getStandardDeviation();\n    /**\n     * Returns the maximum of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the maximum\n     */\n    public double getMax();\n    /**\n     * Returns the minimum of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the minimum\n     */\n    public double getMin();\n    /**\n     * <p>\n     * Sets the implementation for the mean.\n     * </p>\n     * <p>\n     * This method must be activated before any data has been added - i.e.,\n     * before {@link #addValue(double) addValue} has been used to add data;\n     * otherwise an IllegalStateException will be thrown.\n     * </p>\n     * @param meanImpl the StorelessUnivariateStatistic instance to use for\n     *        computing the mean\n     * @throws IllegalStateException if data has already been added (i.e if n >\n     *         0)\n     * @since 1.2\n     */\n    public void setMeanImpl(StorelessUnivariateStatistic meanImpl);\n    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value);\n    /**\n     * Returns the sum of the values that have been added\n     * @return The sum or <code>Double.NaN</code> if no values have been added\n     */\n    public double getSum();\n    /**\n     * Returns the (sample) variance of the available values.\n     *\n     * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in\n     * the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected\n     * population variance.</p>\n     *\n     * <p>Double.NaN is returned if no values have been added.</p>\n     *\n     * @return the variance\n     */\n    public double getVariance();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>\n * Computes summary statistics for a stream of data values added using the\n * {@link #addValue(double) addValue} method. The data values are not stored in\n * memory, so this class can be used to compute statistics for very large data\n * streams.\n * </p>\n * <p>\n * The {@link StorelessUnivariateStatistic} instances used to maintain summary\n * state and compute statistics are configurable via setters. For example, the\n * default implementation for the variance can be overridden by calling\n * {@link #setVarianceImpl(StorelessUnivariateStatistic)}. Actual parameters to\n * these methods must implement the {@link StorelessUnivariateStatistic}\n * interface and configuration must be completed before <code>addValue</code>\n * is called. No configuration is necessary to use the default, commons-math\n * provided implementations.\n * </p>\n * <p>\n * Note: This class is not thread-safe. Use\n * {@link SynchronizedSummaryStatistics} if concurrent access from multiple\n * threads is required.\n * </p>\n * @version $Id$\n */\npublic class SummaryStatistics implements StatisticalSummary, Serializable {\n    private static final long serialVersionUID = -2021321786743555871L;\n    private StorelessUnivariateStatistic sumImpl = sum;\n    private StorelessUnivariateStatistic sumsqImpl = sumsq;\n    private StorelessUnivariateStatistic minImpl = min;\n    private StorelessUnivariateStatistic maxImpl = max;\n    private StorelessUnivariateStatistic sumLogImpl = sumLog;\n    private StorelessUnivariateStatistic geoMeanImpl = geoMean;\n    private StorelessUnivariateStatistic meanImpl = mean;\n    private StorelessUnivariateStatistic varianceImpl = variance;\n    /**\n     * Returns the mean of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the mean\n     */\n    public double getMean();\n    /**\n     * Returns the number of available values\n     * @return The number of available values\n     */\n    public long getN();\n    /**\n     * Returns the standard deviation of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the standard deviation\n     */\n    public double getStandardDeviation();\n    /**\n     * Returns the maximum of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the maximum\n     */\n    public double getMax();\n    /**\n     * Returns the minimum of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the minimum\n     */\n    public double getMin();\n    /**\n     * <p>\n     * Sets the implementation for the mean.\n     * </p>\n     * <p>\n     * This method must be activated before any data has been added - i.e.,\n     * before {@link #addValue(double) addValue} has been used to add data;\n     * otherwise an IllegalStateException will be thrown.\n     * </p>\n     * @param meanImpl the StorelessUnivariateStatistic instance to use for\n     *        computing the mean\n     * @throws IllegalStateException if data has already been added (i.e if n >\n     *         0)\n     * @since 1.2\n     */\n    public void setMeanImpl(StorelessUnivariateStatistic meanImpl);\n    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value);\n    /**\n     * Returns the sum of the values that have been added\n     * @return The sum or <code>Double.NaN</code> if no values have been added\n     */\n    public double getSum();\n    /**\n     * Returns the (sample) variance of the available values.\n     *\n     * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in\n     * the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected\n     * population variance.</p>\n     *\n     * <p>Double.NaN is returned if no values have been added.</p>\n     *\n     * @return the variance\n     */\n    public double getVariance();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Id$\n */\npublic class SummaryStatisticsTest {\n    private void verifySummary(SummaryStatistics u, StatisticalSummary s) {\n        Assert.assertEquals(\"N\",s.getN(),u.getN());\n        TestUtils.assertEquals(\"sum\",s.getSum(),u.getSum(),tolerance);\n        TestUtils.assertEquals(\"var\",s.getVariance(),u.getVariance(),tolerance);\n        TestUtils.assertEquals(\"std\",s.getStandardDeviation(),u.getStandardDeviation(),tolerance);\n        TestUtils.assertEquals(\"mean\",s.getMean(),u.getMean(),tolerance);\n        TestUtils.assertEquals(\"min\",s.getMin(),u.getMin(),tolerance);\n        TestUtils.assertEquals(\"max\",s.getMax(),u.getMax(),tolerance);\n    }\n    public void testOverrideMeanWithMathClass() throws Exception {\n        double[] scores = {1, 2, 3, 4};\n        SummaryStatistics stats = new SummaryStatistics();\n        stats.setMeanImpl(new Mean()); \n        for(double i : scores) {\n          stats.addValue(i);\n        }\n        Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0); \n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Base class managing common boilerplate for all integrators.\n * @version $Id$\n * @since 2.0\n */\npublic abstract class AbstractIntegrator implements FirstOrderIntegrator {\n    private Collection<EventState> eventsStates;\n    private boolean statesInitialized;\n    private final String name;\n    private Incrementor evaluations;\n    private transient ExpandableStatefulODE expandable;\n    public abstract void integrate(ExpandableStatefulODE equations, double t)\n        throws MathIllegalStateException, MathIllegalArgumentException;\n\n    /** Compute the derivatives and check the number of evaluations.\n     * @param t current value of the independent <I>time</I> variable\n     * @param y array containing the current value of the state vector\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n     */\n    public void computeDerivatives(final double t, final double[] y, final double[] yDot)\n        throws MaxCountExceededException;\n    /** {@inheritDoc} */\n    public void addEventHandler(final EventHandler handler,\n                                final double maxCheckInterval,\n                                final double convergence,\n                                final int maxIterationCount,\n                                final UnivariateRealSolver solver);\n    /** {@inheritDoc} */\n    public double integrate(final FirstOrderDifferentialEquations equations,\n                            final double t0, final double[] y0, final double t, final double[] y)\n        throws MathIllegalStateException, MathIllegalArgumentException;\n    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MathIllegalStateException;\n    /** {@inheritDoc} */\n    public void addEventHandler(final EventHandler handler,\n                                final double maxCheckInterval,\n                                final double convergence,\n                                final int maxIterationCount);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Base class managing common boilerplate for all integrators.\n * @version $Id$\n * @since 2.0\n */\npublic abstract class AbstractIntegrator implements FirstOrderIntegrator {\n    private Collection<EventState> eventsStates;\n    private boolean statesInitialized;\n    private final String name;\n    private Incrementor evaluations;\n    private transient ExpandableStatefulODE expandable;\n    public abstract void integrate(ExpandableStatefulODE equations, double t)\n        throws MathIllegalStateException, MathIllegalArgumentException;\n\n    /** Compute the derivatives and check the number of evaluations.\n     * @param t current value of the independent <I>time</I> variable\n     * @param y array containing the current value of the state vector\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n     */\n    public void computeDerivatives(final double t, final double[] y, final double[] yDot)\n        throws MaxCountExceededException;\n    /** {@inheritDoc} */\n    public void addEventHandler(final EventHandler handler,\n                                final double maxCheckInterval,\n                                final double convergence,\n                                final int maxIterationCount,\n                                final UnivariateRealSolver solver);\n    /** {@inheritDoc} */\n    public double integrate(final FirstOrderDifferentialEquations equations,\n                            final double t0, final double[] y0, final double t, final double[] y)\n        throws MathIllegalStateException, MathIllegalArgumentException;\n    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MathIllegalStateException;\n    /** {@inheritDoc} */\n    public void addEventHandler(final EventHandler handler,\n                                final double maxCheckInterval,\n                                final double convergence,\n                                final int maxIterationCount);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testIssue695() {\n\n        FirstOrderDifferentialEquations equation = new FirstOrderDifferentialEquations() {\n            \n            public int getDimension() {\n                return 1;\n            }\n            \n            public void computeDerivatives(double t, double[] y, double[] yDot) {\n                yDot[0] = 1.0;\n            }\n        };\n\n        DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.001, 1000, 1.0e-14, 1.0e-14);\n        integrator.addEventHandler(new ResettingEvent(10.99), 0.1, 1.0e-9, 1000);\n        integrator.addEventHandler(new ResettingEvent(11.01), 0.1, 1.0e-9, 1000);\n        integrator.setInitialStepSize(3.0);\n\n        double target = 30.0;\n        double[] y = new double[1];\n        double tEnd = integrator.integrate(equation, 0.0, y, target, y);\n        Assert.assertEquals(target, tEnd, 1.0e-10);\n        Assert.assertEquals(32.0, y[0], 1.0e-10);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private static final long serialVersionUID = -6195664516687396620L;\n    private final double imaginary;\n    private final double real;\n    private final transient boolean isNaN;\n    private final transient boolean isInfinite;\n    private final transient boolean isZero;\n    /**\n     * Returns a {@code Complex} whose value is {@code (this / divisor)},\n     * with {@code divisor} interpreted as a real number.\n     *\n     * @param  divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @see #divide(Complex)\n     */\n    public Complex divide(double divisor);\n    /**\n     * Checks whether either or both parts of this complex number is\n     * {@code NaN}.\n     *\n     * @return true if either or both parts of this complex number is\n     * {@code NaN}; false otherwise.\n     */\n    public boolean isNaN();\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this / divisor)}.\n     * Implements the definitional formula\n     * <pre>\n     *  <code>\n     *    a + bi          ac + bd + (bc - ad)i\n     *    ----------- = -------------------------\n     *    c + di         c<sup>2</sup> + d<sup>2</sup>\n     *  </code>\n     * </pre>\n     * but uses\n     * <a href=\"http://doi.acm.org/10.1145/1039813.1039814\">\n     * prescaling of operands</a> to limit the effects of overflows and\n     * underflows in the computation.\n     * <br/>\n     * {@code Infinite} and {@code NaN} values are handled according to the\n     * following rules, applied in the order presented:\n     * <ul>\n     *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value\n     *   in either part, {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both infinite,\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} is finite (i.e., has no {@code Infinite} or\n     *   {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n     *   infinite), {@link #ZERO} is returned.\n     *  </li>\n     *  <li>If {@code this} is infinite and {@code divisor} is finite,\n     *   {@code NaN} values are returned in the parts of the result if the\n     *   {@link java.lang.Double} rules applied to the definitional formula\n     *   force {@code NaN} results.\n     *  </li>\n     * </ul>\n     *\n     * @param divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @throws NullArgumentException if {@code divisor} is {@code null}.\n     */\n    public Complex divide(Complex divisor)\n        throws NullArgumentException;\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/InverseTangent.html\" TARGET=\"_top\">\n     * inverse tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   atan(z) = (i/2) log((i + z)/(i - z))\n     *  </code>\n     * </pre>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite.\n     *\n     * @return the inverse tangent of this complex number\n     * @since 1.2\n     */\n    public Complex atan();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private static final long serialVersionUID = -6195664516687396620L;\n    private final double imaginary;\n    private final double real;\n    private final transient boolean isNaN;\n    private final transient boolean isInfinite;\n    private final transient boolean isZero;\n    /**\n     * Returns a {@code Complex} whose value is {@code (this / divisor)},\n     * with {@code divisor} interpreted as a real number.\n     *\n     * @param  divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @see #divide(Complex)\n     */\n    public Complex divide(double divisor);\n    /**\n     * Checks whether either or both parts of this complex number is\n     * {@code NaN}.\n     *\n     * @return true if either or both parts of this complex number is\n     * {@code NaN}; false otherwise.\n     */\n    public boolean isNaN();\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this / divisor)}.\n     * Implements the definitional formula\n     * <pre>\n     *  <code>\n     *    a + bi          ac + bd + (bc - ad)i\n     *    ----------- = -------------------------\n     *    c + di         c<sup>2</sup> + d<sup>2</sup>\n     *  </code>\n     * </pre>\n     * but uses\n     * <a href=\"http://doi.acm.org/10.1145/1039813.1039814\">\n     * prescaling of operands</a> to limit the effects of overflows and\n     * underflows in the computation.\n     * <br/>\n     * {@code Infinite} and {@code NaN} values are handled according to the\n     * following rules, applied in the order presented:\n     * <ul>\n     *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value\n     *   in either part, {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both infinite,\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} is finite (i.e., has no {@code Infinite} or\n     *   {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n     *   infinite), {@link #ZERO} is returned.\n     *  </li>\n     *  <li>If {@code this} is infinite and {@code divisor} is finite,\n     *   {@code NaN} values are returned in the parts of the result if the\n     *   {@link java.lang.Double} rules applied to the definitional formula\n     *   force {@code NaN} results.\n     *  </li>\n     * </ul>\n     *\n     * @param divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @throws NullArgumentException if {@code divisor} is {@code null}.\n     */\n    public Complex divide(Complex divisor)\n        throws NullArgumentException;\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/InverseTangent.html\" TARGET=\"_top\">\n     * inverse tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   atan(z) = (i/2) log((i + z)/(i - z))\n     *  </code>\n     * </pre>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite.\n     *\n     * @return the inverse tangent of this complex number\n     * @since 1.2\n     */\n    public Complex atan();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testAtanI() {\n        Assert.assertTrue(Complex.I.atan().isNaN());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private static final long serialVersionUID = -6195664516687396620L;\n    private final double imaginary;\n    private final double real;\n    private final transient boolean isNaN;\n    private final transient boolean isInfinite;\n    /**\n     * Returns a {@code Complex} whose value is {@code (this / divisor)},\n     * with {@code divisor} interpreted as a real number.\n     *\n     * @param  divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @see #divide(Complex)\n     */\n    public Complex divide(double divisor);\n    /**\n     * Checks whether either the real or imaginary part of this complex number\n     * takes an infinite value (either {@code Double.POSITIVE_INFINITY} or\n     * {@code Double.NEGATIVE_INFINITY}) and neither part\n     * is {@code NaN}.\n     *\n     * @return true if one or both parts of this complex number are infinite\n     * and neither part is {@code NaN}.\n     */\n    public boolean isInfinite();\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/InverseTangent.html\" TARGET=\"_top\">\n     * inverse tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   atan(z) = (i/2) log((i + z)/(i - z))\n     *  </code>\n     * </pre>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite.\n     *\n     * @return the inverse tangent of this complex number\n     * @since 1.2\n     */\n    public Complex atan();\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this / divisor)}.\n     * Implements the definitional formula\n     * <pre>\n     *  <code>\n     *    a + bi          ac + bd + (bc - ad)i\n     *    ----------- = -------------------------\n     *    c + di         c<sup>2</sup> + d<sup>2</sup>\n     *  </code>\n     * </pre>\n     * but uses\n     * <a href=\"http://doi.acm.org/10.1145/1039813.1039814\">\n     * prescaling of operands</a> to limit the effects of overflows and\n     * underflows in the computation.\n     * <br/>\n     * {@code Infinite} and {@code NaN} values are handled according to the\n     * following rules, applied in the order presented:\n     * <ul>\n     *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value\n     *   in either part, {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both infinite,\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} is finite (i.e., has no {@code Infinite} or\n     *   {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n     *   infinite), {@link #ZERO} is returned.\n     *  </li>\n     *  <li>If {@code this} is infinite and {@code divisor} is finite,\n     *   {@code NaN} values are returned in the parts of the result if the\n     *   {@link java.lang.Double} rules applied to the definitional formula\n     *   force {@code NaN} results.\n     *  </li>\n     * </ul>\n     *\n     * @param divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @throws NullArgumentException if {@code divisor} is {@code null}.\n     */\n    public Complex divide(Complex divisor)\n        throws NullArgumentException;\n    /**\n     * Return the absolute value of this complex number.\n     * Returns {@code NaN} if either real or imaginary part is {@code NaN}\n     * and {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},\n     * but at least one part is infinite.\n     *\n     * @return the absolute value.\n     */\n    public double abs();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private static final long serialVersionUID = -6195664516687396620L;\n    private final double imaginary;\n    private final double real;\n    private final transient boolean isNaN;\n    private final transient boolean isInfinite;\n    /**\n     * Returns a {@code Complex} whose value is {@code (this / divisor)},\n     * with {@code divisor} interpreted as a real number.\n     *\n     * @param  divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @see #divide(Complex)\n     */\n    public Complex divide(double divisor);\n    /**\n     * Checks whether either the real or imaginary part of this complex number\n     * takes an infinite value (either {@code Double.POSITIVE_INFINITY} or\n     * {@code Double.NEGATIVE_INFINITY}) and neither part\n     * is {@code NaN}.\n     *\n     * @return true if one or both parts of this complex number are infinite\n     * and neither part is {@code NaN}.\n     */\n    public boolean isInfinite();\n    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/InverseTangent.html\" TARGET=\"_top\">\n     * inverse tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   atan(z) = (i/2) log((i + z)/(i - z))\n     *  </code>\n     * </pre>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite.\n     *\n     * @return the inverse tangent of this complex number\n     * @since 1.2\n     */\n    public Complex atan();\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this / divisor)}.\n     * Implements the definitional formula\n     * <pre>\n     *  <code>\n     *    a + bi          ac + bd + (bc - ad)i\n     *    ----------- = -------------------------\n     *    c + di         c<sup>2</sup> + d<sup>2</sup>\n     *  </code>\n     * </pre>\n     * but uses\n     * <a href=\"http://doi.acm.org/10.1145/1039813.1039814\">\n     * prescaling of operands</a> to limit the effects of overflows and\n     * underflows in the computation.\n     * <br/>\n     * {@code Infinite} and {@code NaN} values are handled according to the\n     * following rules, applied in the order presented:\n     * <ul>\n     *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value\n     *   in either part, {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both infinite,\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} is finite (i.e., has no {@code Infinite} or\n     *   {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n     *   infinite), {@link #ZERO} is returned.\n     *  </li>\n     *  <li>If {@code this} is infinite and {@code divisor} is finite,\n     *   {@code NaN} values are returned in the parts of the result if the\n     *   {@link java.lang.Double} rules applied to the definitional formula\n     *   force {@code NaN} results.\n     *  </li>\n     * </ul>\n     *\n     * @param divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @throws NullArgumentException if {@code divisor} is {@code null}.\n     */\n    public Complex divide(Complex divisor)\n        throws NullArgumentException;\n    /**\n     * Return the absolute value of this complex number.\n     * Returns {@code NaN} if either real or imaginary part is {@code NaN}\n     * and {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},\n     * but at least one part is infinite.\n     *\n     * @return the absolute value.\n     */\n    public double abs();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testAtanI() {\n        for (int i = -10; i < 10; i++) {\n            System.out.println(new Complex(0, 1 - 0.1 * i).atan());\n        }\n        Assert.assertTrue(Complex.I.atan().isInfinite());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Base class for all bracketing <em>Secant</em>-based methods for root-finding\n * (approximating a zero of a univariate real function).\n *\n * <p>Implementation of the {@link RegulaFalsiSolver <em>Regula Falsi</em>} and\n * {@link IllinoisSolver <em>Illinois</em>} methods is based on the\n * following article: M. Dowell and P. Jarratt,\n * <em>A modified regula falsi method for computing the root of an\n * equation</em>, BIT Numerical Mathematics, volume 11, number 2,\n * pages 168-174, Springer, 1971.</p>\n *\n * <p>Implementation of the {@link PegasusSolver <em>Pegasus</em>} method is\n * based on the following article: M. Dowell and P. Jarratt,\n * <em>The \"Pegasus\" method for computing the root of an equation</em>,\n * BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,\n * 1972.</p>\n *\n * <p>The {@link SecantSolver <em>Secant</em>} method is <em>not</em> a\n * bracketing method, so it is not implemented here. It has a separate\n * implementation.</p>\n *\n * @since 3.0\n * @version $Id$\n */\npublic abstract class BaseSecantSolver\n    extends AbstractUnivariateRealSolver\n    implements BracketedUnivariateRealSolver<UnivariateRealFunction> {\n    private AllowedSolution allowed;\n    private final Method method;\n    /** {@inheritDoc} */\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max,\n                        final AllowedSolution allowedSolution);\n    /** {@inheritDoc} */\n    @Override\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue);\n    /** {@inheritDoc} */\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue,\n                        final AllowedSolution allowedSolution);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Base class for all bracketing <em>Secant</em>-based methods for root-finding\n * (approximating a zero of a univariate real function).\n *\n * <p>Implementation of the {@link RegulaFalsiSolver <em>Regula Falsi</em>} and\n * {@link IllinoisSolver <em>Illinois</em>} methods is based on the\n * following article: M. Dowell and P. Jarratt,\n * <em>A modified regula falsi method for computing the root of an\n * equation</em>, BIT Numerical Mathematics, volume 11, number 2,\n * pages 168-174, Springer, 1971.</p>\n *\n * <p>Implementation of the {@link PegasusSolver <em>Pegasus</em>} method is\n * based on the following article: M. Dowell and P. Jarratt,\n * <em>The \"Pegasus\" method for computing the root of an equation</em>,\n * BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,\n * 1972.</p>\n *\n * <p>The {@link SecantSolver <em>Secant</em>} method is <em>not</em> a\n * bracketing method, so it is not implemented here. It has a separate\n * implementation.</p>\n *\n * @since 3.0\n * @version $Id$\n */\npublic abstract class BaseSecantSolver\n    extends AbstractUnivariateRealSolver\n    implements BracketedUnivariateRealSolver<UnivariateRealFunction> {\n    private AllowedSolution allowed;\n    private final Method method;\n    /** {@inheritDoc} */\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max,\n                        final AllowedSolution allowedSolution);\n    /** {@inheritDoc} */\n    @Override\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue);\n    /** {@inheritDoc} */\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue,\n                        final AllowedSolution allowedSolution);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testIssue631() {\n        final UnivariateRealFunction f = new UnivariateRealFunction() {\n                /** {@inheritDoc} */\n                public double value(double x) {\n                    return Math.exp(x) - Math.pow(Math.PI, 3.0);\n                }\n            };\n\n        final UnivariateRealSolver solver = new RegulaFalsiSolver();\n        final double root = solver.solve(3624, f, 1, 10);\n        Assert.assertEquals(3.4341896575482003, root, 1e-15);\n\t}\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class implements the {@link RealVector} interface with a\n * {@link OpenIntToDoubleHashMap} backing store.\n * @version $Id$\n * @since 2.0\n*/\npublic class OpenMapRealVector extends AbstractRealVector\n    implements SparseRealVector, Serializable {\n    public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;\n    private static final long serialVersionUID = 8772222695580707260L;\n    private final OpenIntToDoubleHashMap entries;\n    private final int virtualSize;\n    private final double epsilon;\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector ebeDivide(double[] v);\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeDivide(RealVector v);\n    /** {@inheritDoc} */\n    public void setEntry(int index, double value);\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector ebeMultiply(double[] v);\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeMultiply(RealVector v);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class implements the {@link RealVector} interface with a\n * {@link OpenIntToDoubleHashMap} backing store.\n * @version $Id$\n * @since 2.0\n*/\npublic class OpenMapRealVector extends AbstractRealVector\n    implements SparseRealVector, Serializable {\n    public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;\n    private static final long serialVersionUID = 8772222695580707260L;\n    private final OpenIntToDoubleHashMap entries;\n    private final int virtualSize;\n    private final double epsilon;\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector ebeDivide(double[] v);\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeDivide(RealVector v);\n    /** {@inheritDoc} */\n    public void setEntry(int index, double value);\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealVector ebeMultiply(double[] v);\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeMultiply(RealVector v);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Id$\n */\npublic class SparseRealVectorTest {\n        private UnsupportedOperationException unsupported() {\n            return new UnsupportedOperationException(\"Not supported, unneeded for test purposes\");\n        }\n    public void testConcurrentModification() {\n        final RealVector u = new OpenMapRealVector(3, 1e-6);\n        u.setEntry(0, 1);\n        u.setEntry(1, 0);\n        u.setEntry(2, 2);\n\n        final RealVector v1 = new OpenMapRealVector(3, 1e-6);\n        final double[] v2 = new double[3];\n        v1.setEntry(0, 0);\n        v2[0] = 0;\n        v1.setEntry(1, 3);\n        v2[1] = 3;\n        v1.setEntry(2, 0);\n        v2[2] = 0;\n\n        RealVector w;\n\n        w = u.ebeMultiply(v1);\n        w = u.ebeMultiply(v2);\n\n        w = u.ebeDivide(v1);\n        w = u.ebeDivide(v2);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link org.apache.commons.math3.util.Precision#equals(double,double,int)\n * equals for primitive double} in {@link org.apache.commons.math3.util.Precision}\n * conforms with IEEE-754 while this class conforms with the standard behavior\n * for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private static final long serialVersionUID = -6195664516687396620L;\n    private final double imaginary;\n    private final double real;\n    private final transient boolean isNaN;\n    private final transient boolean isInfinite;\n    /** {@inheritDoc} */\n    public Complex reciprocal();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link org.apache.commons.math3.util.Precision#equals(double,double,int)\n * equals for primitive double} in {@link org.apache.commons.math3.util.Precision}\n * conforms with IEEE-754 while this class conforms with the standard behavior\n * for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private static final long serialVersionUID = -6195664516687396620L;\n    private final double imaginary;\n    private final double real;\n    private final transient boolean isNaN;\n    private final transient boolean isInfinite;\n    /** {@inheritDoc} */\n    public Complex reciprocal();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testReciprocalZero() {\n        Assert.assertEquals(Complex.ZERO.reciprocal(), Complex.INF);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Base class for all bracketing <em>Secant</em>-based methods for root-finding\n * (approximating a zero of a univariate real function).\n *\n * <p>Implementation of the {@link RegulaFalsiSolver <em>Regula Falsi</em>} and\n * {@link IllinoisSolver <em>Illinois</em>} methods is based on the\n * following article: M. Dowell and P. Jarratt,\n * <em>A modified regula falsi method for computing the root of an\n * equation</em>, BIT Numerical Mathematics, volume 11, number 2,\n * pages 168-174, Springer, 1971.</p>\n *\n * <p>Implementation of the {@link PegasusSolver <em>Pegasus</em>} method is\n * based on the following article: M. Dowell and P. Jarratt,\n * <em>The \"Pegasus\" method for computing the root of an equation</em>,\n * BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,\n * 1972.</p>\n *\n * <p>The {@link SecantSolver <em>Secant</em>} method is <em>not</em> a\n * bracketing method, so it is not implemented here. It has a separate\n * implementation.</p>\n *\n * @since 3.0\n * @version $Id$\n */\npublic abstract class BaseSecantSolver\n    extends AbstractUnivariateRealSolver\n    implements BracketedUnivariateRealSolver<UnivariateRealFunction> {\n    private AllowedSolution allowed;\n    private final Method method;\n    /** {@inheritDoc} */\n    @Override\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue);\n    /** {@inheritDoc} */\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max,\n                        final AllowedSolution allowedSolution);\n    /** {@inheritDoc} */\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue,\n                        final AllowedSolution allowedSolution);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Base class for all bracketing <em>Secant</em>-based methods for root-finding\n * (approximating a zero of a univariate real function).\n *\n * <p>Implementation of the {@link RegulaFalsiSolver <em>Regula Falsi</em>} and\n * {@link IllinoisSolver <em>Illinois</em>} methods is based on the\n * following article: M. Dowell and P. Jarratt,\n * <em>A modified regula falsi method for computing the root of an\n * equation</em>, BIT Numerical Mathematics, volume 11, number 2,\n * pages 168-174, Springer, 1971.</p>\n *\n * <p>Implementation of the {@link PegasusSolver <em>Pegasus</em>} method is\n * based on the following article: M. Dowell and P. Jarratt,\n * <em>The \"Pegasus\" method for computing the root of an equation</em>,\n * BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,\n * 1972.</p>\n *\n * <p>The {@link SecantSolver <em>Secant</em>} method is <em>not</em> a\n * bracketing method, so it is not implemented here. It has a separate\n * implementation.</p>\n *\n * @since 3.0\n * @version $Id$\n */\npublic abstract class BaseSecantSolver\n    extends AbstractUnivariateRealSolver\n    implements BracketedUnivariateRealSolver<UnivariateRealFunction> {\n    private AllowedSolution allowed;\n    private final Method method;\n    /** {@inheritDoc} */\n    @Override\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue);\n    /** {@inheritDoc} */\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max,\n                        final AllowedSolution allowedSolution);\n    /** {@inheritDoc} */\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue,\n                        final AllowedSolution allowedSolution);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testIssue631() {\n        final UnivariateRealFunction f = new UnivariateRealFunction() {\n                @Override\n                public double value(double x) {\n                    return Math.exp(x) - Math.pow(Math.PI, 3.0);\n                }\n            };\n\n        final UnivariateRealSolver solver = new RegulaFalsiSolver();\n        final double root = solver.solve(3624, f, 1, 10);\n        Assert.assertEquals(3.4341896575482003, root, 1e-15);\n\t}\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class implements rotations in a three-dimensional space.\n *\n * <p>Rotations can be represented by several different mathematical\n * entities (matrices, axe and angle, Cardan or Euler angles,\n * quaternions). This class presents an higher level abstraction, more\n * user-oriented and hiding this implementation details. Well, for the\n * curious, we use quaternions for the internal representation. The\n * user can build a rotation from any of these representations, and\n * any of these representations can be retrieved from a\n * <code>Rotation</code> instance (see the various constructors and\n * getters). In addition, a rotation can also be built implicitly\n * from a set of vectors and their image.</p>\n * <p>This implies that this class can be used to convert from one\n * representation to another one. For example, converting a rotation\n * matrix into a set of Cardan angles from can be done using the\n * following single line of code:</p>\n * <pre>\n * double[] angles = new Rotation(matrix, 1.0e-10).getAngles(RotationOrder.XYZ);\n * </pre>\n * <p>Focus is oriented on what a rotation <em>do</em> rather than on its\n * underlying representation. Once it has been built, and regardless of its\n * internal representation, a rotation is an <em>operator</em> which basically\n * transforms three dimensional {@link Vector3D vectors} into other three\n * dimensional {@link Vector3D vectors}. Depending on the application, the\n * meaning of these vectors may vary and the semantics of the rotation also.</p>\n * <p>For example in an spacecraft attitude simulation tool, users will often\n * consider the vectors are fixed (say the Earth direction for example) and the\n * frames change. The rotation transforms the coordinates of the vector in inertial\n * frame into the coordinates of the same vector in satellite frame. In this\n * case, the rotation implicitly defines the relation between the two frames.</p>\n * <p>Another example could be a telescope control application, where the rotation\n * would transform the sighting direction at rest into the desired observing\n * direction when the telescope is pointed towards an object of interest. In this\n * case the rotation transforms the direction at rest in a topocentric frame\n * into the sighting direction in the same topocentric frame. This implies in this\n * case the frame is fixed and the vector moves.</p>\n * <p>In many case, both approaches will be combined. In our telescope example,\n * we will probably also need to transform the observing direction in the topocentric\n * frame into the observing direction in inertial frame taking into account the observatory\n * location and the Earth rotation, which would essentially be an application of the\n * first approach.</p>\n *\n * <p>These examples show that a rotation is what the user wants it to be. This\n * class does not push the user towards one specific definition and hence does not\n * provide methods like <code>projectVectorIntoDestinationFrame</code> or\n * <code>computeTransformedDirection</code>. It provides simpler and more generic\n * methods: {@link #applyTo(Vector3D) applyTo(Vector3D)} and {@link\n * #applyInverseTo(Vector3D) applyInverseTo(Vector3D)}.</p>\n *\n * <p>Since a rotation is basically a vectorial operator, several rotations can be\n * composed together and the composite operation <code>r = r<sub>1</sub> o\n * r<sub>2</sub></code> (which means that for each vector <code>u</code>,\n * <code>r(u) = r<sub>1</sub>(r<sub>2</sub>(u))</code>) is also a rotation. Hence\n * we can consider that in addition to vectors, a rotation can be applied to other\n * rotations as well (or to itself). With our previous notations, we would say we\n * can apply <code>r<sub>1</sub></code> to <code>r<sub>2</sub></code> and the result\n * we get is <code>r = r<sub>1</sub> o r<sub>2</sub></code>. For this purpose, the\n * class provides the methods: {@link #applyTo(Rotation) applyTo(Rotation)} and\n * {@link #applyInverseTo(Rotation) applyInverseTo(Rotation)}.</p>\n *\n * <p>Rotations are guaranteed to be immutable objects.</p>\n *\n * @version $Id$\n * @see Vector3D\n * @see RotationOrder\n * @since 1.2\n */\npublic class Rotation implements Serializable {\n  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);\n  private static final long serialVersionUID = -2153622329907944313L;\n  private final double q0;\n  private final double q1;\n  private final double q2;\n  private final double q3;\n  /** Get the first coordinate of the vectorial part of the quaternion.\n   * @return first coordinate of the vectorial part of the quaternion\n   */\n  public double getQ1();\n  /** Get the third coordinate of the vectorial part of the quaternion.\n   * @return third coordinate of the vectorial part of the quaternion\n   */\n  public double getQ3();\n  /** Compute the <i>distance</i> between two rotations.\n   * <p>The <i>distance</i> is intended here as a way to check if two\n   * rotations are almost similar (i.e. they transform vectors the same way)\n   * or very different. It is mathematically defined as the angle of\n   * the rotation r that prepended to one of the rotations gives the other\n   * one:</p>\n   * <pre>\n   *        r<sub>1</sub>(r) = r<sub>2</sub>\n   * </pre>\n   * <p>This distance is an angle between 0 and &pi;. Its value is the smallest\n   * possible upper bound of the angle in radians between r<sub>1</sub>(v)\n   * and r<sub>2</sub>(v) for all possible vectors v. This upper bound is\n   * reached for some v. The distance is equal to 0 if and only if the two\n   * rotations are identical.</p>\n   * <p>Comparing two rotations should always be done using this value rather\n   * than for example comparing the components of the quaternions. It is much\n   * more stable, and has a geometric meaning. Also comparing quaternions\n   * components is error prone since for example quaternions (0.36, 0.48, -0.48, -0.64)\n   * and (-0.36, -0.48, 0.48, 0.64) represent exactly the same rotation despite\n   * their components are different (they are exact opposites).</p>\n   * @param r1 first rotation\n   * @param r2 second rotation\n   * @return <i>distance</i> between r1 and r2\n   */\n  public static double distance(Rotation r1, Rotation r2);\n  /** Get the scalar coordinate of the quaternion.\n   * @return scalar coordinate of the quaternion\n   */\n  public double getQ0();\n  /** Get the second coordinate of the vectorial part of the quaternion.\n   * @return second coordinate of the vectorial part of the quaternion\n   */\n  public double getQ2();\n  /** Revert a rotation.\n   * Build a rotation which reverse the effect of another\n   * rotation. This means that if r(u) = v, then r.revert(v) = u. The\n   * instance is not changed.\n   * @return a new rotation whose effect is the reverse of the effect\n   * of the instance\n   */\n  public Rotation revert();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class implements rotations in a three-dimensional space.\n *\n * <p>Rotations can be represented by several different mathematical\n * entities (matrices, axe and angle, Cardan or Euler angles,\n * quaternions). This class presents an higher level abstraction, more\n * user-oriented and hiding this implementation details. Well, for the\n * curious, we use quaternions for the internal representation. The\n * user can build a rotation from any of these representations, and\n * any of these representations can be retrieved from a\n * <code>Rotation</code> instance (see the various constructors and\n * getters). In addition, a rotation can also be built implicitly\n * from a set of vectors and their image.</p>\n * <p>This implies that this class can be used to convert from one\n * representation to another one. For example, converting a rotation\n * matrix into a set of Cardan angles from can be done using the\n * following single line of code:</p>\n * <pre>\n * double[] angles = new Rotation(matrix, 1.0e-10).getAngles(RotationOrder.XYZ);\n * </pre>\n * <p>Focus is oriented on what a rotation <em>do</em> rather than on its\n * underlying representation. Once it has been built, and regardless of its\n * internal representation, a rotation is an <em>operator</em> which basically\n * transforms three dimensional {@link Vector3D vectors} into other three\n * dimensional {@link Vector3D vectors}. Depending on the application, the\n * meaning of these vectors may vary and the semantics of the rotation also.</p>\n * <p>For example in an spacecraft attitude simulation tool, users will often\n * consider the vectors are fixed (say the Earth direction for example) and the\n * frames change. The rotation transforms the coordinates of the vector in inertial\n * frame into the coordinates of the same vector in satellite frame. In this\n * case, the rotation implicitly defines the relation between the two frames.</p>\n * <p>Another example could be a telescope control application, where the rotation\n * would transform the sighting direction at rest into the desired observing\n * direction when the telescope is pointed towards an object of interest. In this\n * case the rotation transforms the direction at rest in a topocentric frame\n * into the sighting direction in the same topocentric frame. This implies in this\n * case the frame is fixed and the vector moves.</p>\n * <p>In many case, both approaches will be combined. In our telescope example,\n * we will probably also need to transform the observing direction in the topocentric\n * frame into the observing direction in inertial frame taking into account the observatory\n * location and the Earth rotation, which would essentially be an application of the\n * first approach.</p>\n *\n * <p>These examples show that a rotation is what the user wants it to be. This\n * class does not push the user towards one specific definition and hence does not\n * provide methods like <code>projectVectorIntoDestinationFrame</code> or\n * <code>computeTransformedDirection</code>. It provides simpler and more generic\n * methods: {@link #applyTo(Vector3D) applyTo(Vector3D)} and {@link\n * #applyInverseTo(Vector3D) applyInverseTo(Vector3D)}.</p>\n *\n * <p>Since a rotation is basically a vectorial operator, several rotations can be\n * composed together and the composite operation <code>r = r<sub>1</sub> o\n * r<sub>2</sub></code> (which means that for each vector <code>u</code>,\n * <code>r(u) = r<sub>1</sub>(r<sub>2</sub>(u))</code>) is also a rotation. Hence\n * we can consider that in addition to vectors, a rotation can be applied to other\n * rotations as well (or to itself). With our previous notations, we would say we\n * can apply <code>r<sub>1</sub></code> to <code>r<sub>2</sub></code> and the result\n * we get is <code>r = r<sub>1</sub> o r<sub>2</sub></code>. For this purpose, the\n * class provides the methods: {@link #applyTo(Rotation) applyTo(Rotation)} and\n * {@link #applyInverseTo(Rotation) applyInverseTo(Rotation)}.</p>\n *\n * <p>Rotations are guaranteed to be immutable objects.</p>\n *\n * @version $Id$\n * @see Vector3D\n * @see RotationOrder\n * @since 1.2\n */\npublic class Rotation implements Serializable {\n  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);\n  private static final long serialVersionUID = -2153622329907944313L;\n  private final double q0;\n  private final double q1;\n  private final double q2;\n  private final double q3;\n  /** Get the first coordinate of the vectorial part of the quaternion.\n   * @return first coordinate of the vectorial part of the quaternion\n   */\n  public double getQ1();\n  /** Get the third coordinate of the vectorial part of the quaternion.\n   * @return third coordinate of the vectorial part of the quaternion\n   */\n  public double getQ3();\n  /** Compute the <i>distance</i> between two rotations.\n   * <p>The <i>distance</i> is intended here as a way to check if two\n   * rotations are almost similar (i.e. they transform vectors the same way)\n   * or very different. It is mathematically defined as the angle of\n   * the rotation r that prepended to one of the rotations gives the other\n   * one:</p>\n   * <pre>\n   *        r<sub>1</sub>(r) = r<sub>2</sub>\n   * </pre>\n   * <p>This distance is an angle between 0 and &pi;. Its value is the smallest\n   * possible upper bound of the angle in radians between r<sub>1</sub>(v)\n   * and r<sub>2</sub>(v) for all possible vectors v. This upper bound is\n   * reached for some v. The distance is equal to 0 if and only if the two\n   * rotations are identical.</p>\n   * <p>Comparing two rotations should always be done using this value rather\n   * than for example comparing the components of the quaternions. It is much\n   * more stable, and has a geometric meaning. Also comparing quaternions\n   * components is error prone since for example quaternions (0.36, 0.48, -0.48, -0.64)\n   * and (-0.36, -0.48, 0.48, 0.64) represent exactly the same rotation despite\n   * their components are different (they are exact opposites).</p>\n   * @param r1 first rotation\n   * @param r2 second rotation\n   * @return <i>distance</i> between r1 and r2\n   */\n  public static double distance(Rotation r1, Rotation r2);\n  /** Get the scalar coordinate of the quaternion.\n   * @return scalar coordinate of the quaternion\n   */\n  public double getQ0();\n  /** Get the second coordinate of the vectorial part of the quaternion.\n   * @return second coordinate of the vectorial part of the quaternion\n   */\n  public double getQ2();\n  /** Revert a rotation.\n   * Build a rotation which reverse the effect of another\n   * rotation. This means that if r(u) = v, then r.revert(v) = u. The\n   * instance is not changed.\n   * @return a new rotation whose effect is the reverse of the effect\n   * of the instance\n   */\n  public Rotation revert();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  private void checkVector(Vector3D v1, Vector3D v2) {\n    Assert.assertTrue(v1.subtract(v2).getNorm() < 1.0e-10);\n  }\n  private void checkAngle(double a1, double a2) {\n    Assert.assertEquals(a1, MathUtils.normalizeAngle(a2, a1), 1.0e-10);\n  }\n  private void checkRotation(Rotation r, double q0, double q1, double q2, double q3) {\n    Assert.assertEquals(0, Rotation.distance(r, new Rotation(q0, q1, q2, q3, false)), 1.0e-12);\n  }\n  public void testIssue639(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);\n      Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);\n      Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);\n      Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a Complex number - a number which has both a\n * real and imaginary part.\n * <p>\n * Implementations of arithmetic operations handle <code>NaN</code> and\n * infinite values according to the rules for {@link java.lang.Double}\n * arithmetic, applying definitional formulas and returning <code>NaN</code> or\n * infinite values in real or imaginary parts as these arise in computation.\n * See individual method javadocs for details.</p>\n * <p>\n * {@link #equals} identifies all values with <code>NaN</code> in either real\n * or imaginary part - e.g., <pre>\n * <code>1 + NaNi  == NaN + i == NaN + NaNi.</code></pre></p>\n *\n * implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private static final long serialVersionUID = -6195664516687396620L;\n    private final double imaginary;\n    private final double real;\n    private final transient boolean isNaN;\n    private final transient boolean isInfinite;\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException;\n    /**\n     * Access the real part.\n     *\n     * @return the real part\n     */\n    public double getReal();\n    /**\n     * Access the imaginary part.\n     *\n     * @return the imaginary part\n     */\n    public double getImaginary();\n    /**\n     * Returns true if either or both parts of this complex number is NaN;\n     * false otherwise\n     *\n     * @return  true if either or both parts of this complex number is NaN;\n     * false otherwise\n     */\n    public boolean isNaN();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a Complex number - a number which has both a\n * real and imaginary part.\n * <p>\n * Implementations of arithmetic operations handle <code>NaN</code> and\n * infinite values according to the rules for {@link java.lang.Double}\n * arithmetic, applying definitional formulas and returning <code>NaN</code> or\n * infinite values in real or imaginary parts as these arise in computation.\n * See individual method javadocs for details.</p>\n * <p>\n * {@link #equals} identifies all values with <code>NaN</code> in either real\n * or imaginary part - e.g., <pre>\n * <code>1 + NaNi  == NaN + i == NaN + NaNi.</code></pre></p>\n *\n * implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private static final long serialVersionUID = -6195664516687396620L;\n    private final double imaginary;\n    private final double real;\n    private final transient boolean isNaN;\n    private final transient boolean isInfinite;\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException;\n    /**\n     * Access the real part.\n     *\n     * @return the real part\n     */\n    public double getReal();\n    /**\n     * Access the imaginary part.\n     *\n     * @return the imaginary part\n     */\n    public double getImaginary();\n    /**\n     * Returns true if either or both parts of this complex number is NaN;\n     * false otherwise\n     *\n     * @return  true if either or both parts of this complex number is NaN;\n     * false otherwise\n     */\n    public boolean isNaN();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testAddNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.add(Complex.NaN);\n        Assert.assertTrue(z.isNaN());\n        z = new Complex(1, nan);\n        Complex w = x.add(z);\n        Assert.assertTrue(Double.isNaN(w.getReal()));\n        Assert.assertTrue(Double.isNaN(w.getImaginary()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be keep as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by add an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @version $Revision$ $Date$\n * @since 2.2\n */\npublic class Dfp implements FieldElement<Dfp> {\n    public static final int RADIX = 10000;\n    public static final int MIN_EXP = -32767;\n    public static final int MAX_EXP =  32768;\n    public static final int ERR_SCALE = 32760;\n    public static final byte FINITE = 0;\n    public static final byte INFINITE = 1;\n    public static final byte SNAN = 2;\n    public static final byte QNAN = 3;\n    private static final String NAN_STRING = \"NaN\";\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n    private static final String ADD_TRAP = \"add\";\n    private static final String MULTIPLY_TRAP = \"multiply\";\n    private static final String DIVIDE_TRAP = \"divide\";\n    private static final String SQRT_TRAP = \"sqrt\";\n    private static final String ALIGN_TRAP = \"align\";\n    private static final String TRUNC_TRAP = \"trunc\";\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n    private final DfpField field;\n    /** Get the constant 0.\n     * @return a Dfp with value zero\n     */\n    public Dfp getZero();\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x);\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other);\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString();\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x);\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x);\n    /** Create an instance with a value of 0.\n     * Use this internally in preference to constructors to facilitate subclasses\n     * @return a new instance with a value of 0\n     */\n    public Dfp newInstance();\n    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n    public double toDouble();\n    /** Get the {@link org.apache.commons.math.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be keep as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by add an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @version $Revision$ $Date$\n * @since 2.2\n */\npublic class Dfp implements FieldElement<Dfp> {\n    public static final int RADIX = 10000;\n    public static final int MIN_EXP = -32767;\n    public static final int MAX_EXP =  32768;\n    public static final int ERR_SCALE = 32760;\n    public static final byte FINITE = 0;\n    public static final byte INFINITE = 1;\n    public static final byte SNAN = 2;\n    public static final byte QNAN = 3;\n    private static final String NAN_STRING = \"NaN\";\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n    private static final String ADD_TRAP = \"add\";\n    private static final String MULTIPLY_TRAP = \"multiply\";\n    private static final String DIVIDE_TRAP = \"divide\";\n    private static final String SQRT_TRAP = \"sqrt\";\n    private static final String ALIGN_TRAP = \"align\";\n    private static final String TRUNC_TRAP = \"trunc\";\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n    private final DfpField field;\n    /** Get the constant 0.\n     * @return a Dfp with value zero\n     */\n    public Dfp getZero();\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x);\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other);\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString();\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x);\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x);\n    /** Create an instance with a value of 0.\n     * Use this internally in preference to constructors to facilitate subclasses\n     * @return a new instance with a value of 0\n     */\n    public Dfp newInstance();\n    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n    public double toDouble();\n    /** Get the {@link org.apache.commons.math.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void test(Dfp x, Dfp y, int flags, String desc)\n    {\n        boolean b = x.equals(y);\n\n        if (!x.equals(y) && !x.unequal(y))  // NaNs involved \n            b = (x.toString().equals(y.toString()));\n\n        if (x.equals(field.newDfp(\"0\")))  // distinguish +/- zero\n            b = (b && (x.toString().equals(y.toString())));\n\n        b = (b && x.getField().getIEEEFlags() == flags);\n\n        if (!b)\n            Assert.assertTrue(\"assersion failed \"+desc+\" x = \"+x.toString()+\" flags = \"+x.getField().getIEEEFlags(), b);\n\n        x.getField().clearIEEEFlags();\n    }\n    private void cmptst(Dfp a, Dfp b, String op, boolean result, double num)\n    {\n        if (op == \"equal\")\n            if (a.equals(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n\n        if (op == \"unequal\")\n            if (a.unequal(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n\n        if (op == \"lessThan\")\n            if (a.lessThan(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n\n        if (op == \"greaterThan\")\n            if (a.greaterThan(b) != result)\n                Assert.fail(\"assersion failed.  \"+op+\" compare #\"+num);\n    }\n    public void testIssue567() {\n        DfpField field = new DfpField(100);\n        Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);\n        Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);\n        Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);\n        Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class implements vectors in a three-dimensional space.\n * <p>Instance of this class are guaranteed to be immutable.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n */\npublic class Vector3D implements Serializable {\n  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);\n  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);\n  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);\n  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);\n  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);\n  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);\n  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);\n  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);\n  private static final long serialVersionUID = 5133268763396045979L;\n  private final double x;\n  private final double y;\n  private final double z;\n  /** Get the height of the vector.\n   * @return height of the vector\n   * @see #Vector3D(double, double, double)\n   */\n  public double getZ();\n  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2);\n  /** Get the ordinate of the vector.\n   * @return ordinate of the vector\n   * @see #Vector3D(double, double, double)\n   */\n  public double getY();\n  /** Compute the dot-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the dot product v1.v2\n   */\n  public static double dotProduct(Vector3D v1, Vector3D v2);\n  /** Get the abscissa of the vector.\n   * @return abscissa of the vector\n   * @see #Vector3D(double, double, double)\n   */\n  public double getX();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class implements vectors in a three-dimensional space.\n * <p>Instance of this class are guaranteed to be immutable.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n */\npublic class Vector3D implements Serializable {\n  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);\n  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);\n  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);\n  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);\n  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);\n  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);\n  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);\n  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);\n  private static final long serialVersionUID = 5133268763396045979L;\n  private final double x;\n  private final double y;\n  private final double z;\n  /** Get the height of the vector.\n   * @return height of the vector\n   * @see #Vector3D(double, double, double)\n   */\n  public double getZ();\n  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2);\n  /** Get the ordinate of the vector.\n   * @return ordinate of the vector\n   * @see #Vector3D(double, double, double)\n   */\n  public double getY();\n  /** Compute the dot-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the dot product v1.v2\n   */\n  public static double dotProduct(Vector3D v1, Vector3D v2);\n  /** Get the abscissa of the vector.\n   * @return abscissa of the vector\n   * @see #Vector3D(double, double, double)\n   */\n  public double getX();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void checkVector(Vector3D v, double x, double y, double z) {\n        Assert.assertEquals(x, v.getX(), 1.0e-12);\n        Assert.assertEquals(y, v.getY(), 1.0e-12);\n        Assert.assertEquals(z, v.getZ(), 1.0e-12);\n    }\n    public void testCrossProductCancellation() {\n        Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);\n        Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);\n        checkVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);\n\n        double scale    = FastMath.scalb(1.0, 100);\n        Vector3D big1   = new Vector3D(scale, v1);\n        Vector3D small2 = new Vector3D(1 / scale, v2);\n        checkVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Converter between unidimensional storage structure and multidimensional\n * conceptual structure.\n * This utility will convert from indices in a multidimensional structure\n * to the corresponding index in a one-dimensional array. For example,\n * assuming that the ranges (in 3 dimensions) of indices are 2, 4 and 3,\n * the following correspondences, between 3-tuples indices and unidimensional\n * indices, will hold:\n * <ul>\n *  <li>(0, 0, 0) corresponds to 0</li>\n *  <li>(0, 0, 1) corresponds to 1</li>\n *  <li>(0, 0, 2) corresponds to 2</li>\n *  <li>(0, 1, 0) corresponds to 3</li>\n *  <li>...</li>\n *  <li>(1, 0, 0) corresponds to 12</li>\n *  <li>...</li>\n *  <li>(1, 3, 2) corresponds to 23</li>\n * </ul>\n * @version $Revision$ $Date$\n * @since 2.2\n */\npublic class MultidimensionalCounter implements Iterable<Integer> {\n    private final int dimension;\n    private final int[] uniCounterOffset;\n    private final int[] size;\n    private final int totalSize;\n    private final int last;\n    /**\n     * Get the number of dimensions of the multidimensional counter.\n     *\n     * @return the number of dimensions.\n     */\n    public int getDimension();\n    /**\n     * Convert to unidimensional counter.\n     *\n     * @param c Indices in multidimensional counter.\n     * @return the index within the unidimensionl counter.\n     * @throws DimensionMismatchException if the size of {@code c}\n     * does not match the size of the array given in the constructor.\n     * @throws OutOfRangeException if a value of {@code c} is not in\n     * the range of the corresponding dimension, as defined in the\n     * {@link MultidimensionalCounter#MultidimensionalCounter(int...) constructor}.\n     */\n    public int getCount(int ... c) throws OutOfRangeException;\n    /**\n     * Get the total number of elements.\n     *\n     * @return the total size of the unidimensional counter.\n     */\n    public int getSize();\n    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index);\n    /**\n     * Create an iterator over this counter.\n     *\n     * @return the iterator.\n     */\n    public Iterator iterator();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Converter between unidimensional storage structure and multidimensional\n * conceptual structure.\n * This utility will convert from indices in a multidimensional structure\n * to the corresponding index in a one-dimensional array. For example,\n * assuming that the ranges (in 3 dimensions) of indices are 2, 4 and 3,\n * the following correspondences, between 3-tuples indices and unidimensional\n * indices, will hold:\n * <ul>\n *  <li>(0, 0, 0) corresponds to 0</li>\n *  <li>(0, 0, 1) corresponds to 1</li>\n *  <li>(0, 0, 2) corresponds to 2</li>\n *  <li>(0, 1, 0) corresponds to 3</li>\n *  <li>...</li>\n *  <li>(1, 0, 0) corresponds to 12</li>\n *  <li>...</li>\n *  <li>(1, 3, 2) corresponds to 23</li>\n * </ul>\n * @version $Revision$ $Date$\n * @since 2.2\n */\npublic class MultidimensionalCounter implements Iterable<Integer> {\n    private final int dimension;\n    private final int[] uniCounterOffset;\n    private final int[] size;\n    private final int totalSize;\n    private final int last;\n    /**\n     * Get the number of dimensions of the multidimensional counter.\n     *\n     * @return the number of dimensions.\n     */\n    public int getDimension();\n    /**\n     * Convert to unidimensional counter.\n     *\n     * @param c Indices in multidimensional counter.\n     * @return the index within the unidimensionl counter.\n     * @throws DimensionMismatchException if the size of {@code c}\n     * does not match the size of the array given in the constructor.\n     * @throws OutOfRangeException if a value of {@code c} is not in\n     * the range of the corresponding dimension, as defined in the\n     * {@link MultidimensionalCounter#MultidimensionalCounter(int...) constructor}.\n     */\n    public int getCount(int ... c) throws OutOfRangeException;\n    /**\n     * Get the total number of elements.\n     *\n     * @return the total size of the unidimensional counter.\n     */\n    public int getSize();\n    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index);\n    /**\n     * Create an iterator over this counter.\n     *\n     * @return the iterator.\n     */\n    public Iterator iterator();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testIterationConsistency() {\n        final MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 4);\n        final int[][] expected = new int[][] {\n            { 0, 0, 0 },\n            { 0, 0, 1 },\n            { 0, 0, 2 },\n            { 0, 0, 3 },\n            { 0, 1, 0 },\n            { 0, 1, 1 },\n            { 0, 1, 2 },\n            { 0, 1, 3 },\n            { 0, 2, 0 },\n            { 0, 2, 1 },\n            { 0, 2, 2 },\n            { 0, 2, 3 },\n            { 1, 0, 0 },\n            { 1, 0, 1 },\n            { 1, 0, 2 },\n            { 1, 0, 3 },\n            { 1, 1, 0 },\n            { 1, 1, 1 },\n            { 1, 1, 2 },\n            { 1, 1, 3 },\n            { 1, 2, 0 },\n            { 1, 2, 1 },\n            { 1, 2, 2 },\n            { 1, 2, 3 }\n        };\n\n        final int totalSize = c.getSize();\n        final int nDim = c.getDimension();\n        final MultidimensionalCounter.Iterator iter = c.iterator();\n        for (int i = 0; i < totalSize; i++) {\n            if (!iter.hasNext()) {\n                Assert.fail(\"Too short\");\n            }\n            final int uniDimIndex = iter.next();\n            Assert.assertEquals(\"Wrong iteration at \" + i, i, uniDimIndex);\n\n            for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {\n                Assert.assertEquals(\"Wrong multidimensional index for [\" + i + \"][\" + dimIndex + \"]\", expected[i][dimIndex], iter.getCount(dimIndex));\n            }\n\n            Assert.assertEquals(\"Wrong unidimensional index for [\" + i + \"]\", c.getCount(expected[i]), uniDimIndex);\n\n            final int[] indices = c.getCounts(uniDimIndex);\n            for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {\n                Assert.assertEquals(\"Wrong multidimensional index for [\" + i + \"][\" + dimIndex + \"]\", expected[i][dimIndex], indices[dimIndex]);\n            }\n        }\n\n        if (iter.hasNext()) {\n            Assert.fail(\"Too long\");\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.\n * @param <T> type of the points to cluster\n * @see <a href=\"http://en.wikipedia.org/wiki/K-means%2B%2B\">K-means++ (wikipedia)</a>\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n    /**\n     * Runs the K-means++ clustering algorithm.\n     *\n     * @param points the points to cluster\n     * @param k the number of clusters to split the data into\n     * @param maxIterations the maximum number of iterations to run the algorithm\n     *     for.  If negative, no maximum will be used\n     * @return a list of clusters containing the points\n     */\n    public List<Cluster<T>> cluster(final Collection<T> points,\n                                    final int k, final int maxIterations);\n    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.\n * @param <T> type of the points to cluster\n * @see <a href=\"http://en.wikipedia.org/wiki/K-means%2B%2B\">K-means++ (wikipedia)</a>\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n    /**\n     * Runs the K-means++ clustering algorithm.\n     *\n     * @param points the points to cluster\n     * @param k the number of clusters to split the data into\n     * @param maxIterations the maximum number of iterations to run the algorithm\n     *     for.  If negative, no maximum will be used\n     * @return a list of clusters containing the points\n     */\n    public List<Cluster<T>> cluster(final Collection<T> points,\n                                    final int k, final int maxIterations);\n    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testSmallDistances() {\n        // Create a bunch of CloseIntegerPoints. Most are identical, but one is different by a\n        // small distance.\n        int[] repeatedArray = { 0 };\n        int[] uniqueArray = { 1 };\n        CloseIntegerPoint repeatedPoint =\n            new CloseIntegerPoint(new EuclideanIntegerPoint(repeatedArray));\n        CloseIntegerPoint uniquePoint =\n            new CloseIntegerPoint(new EuclideanIntegerPoint(uniqueArray));\n\n        Collection<CloseIntegerPoint> points = new ArrayList<CloseIntegerPoint>();\n        final int NUM_REPEATED_POINTS = 10 * 1000;\n        for (int i = 0; i < NUM_REPEATED_POINTS; ++i) {\n            points.add(repeatedPoint);\n        }\n        points.add(uniquePoint);\n\n        // Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial\n        // cluster centers).\n        final long RANDOM_SEED = 0;\n        final int NUM_CLUSTERS = 2;\n        final int NUM_ITERATIONS = 0;\n        KMeansPlusPlusClusterer<CloseIntegerPoint> clusterer =\n            new KMeansPlusPlusClusterer<CloseIntegerPoint>(new Random(RANDOM_SEED));\n        List<Cluster<CloseIntegerPoint>> clusters =\n            clusterer.cluster(points, NUM_CLUSTERS, NUM_ITERATIONS);\n\n        // Check that one of the chosen centers is the unique point.\n        boolean uniquePointIsCenter = false;\n        for (Cluster<CloseIntegerPoint> cluster : clusters) {\n            if (cluster.getCenter().equals(uniquePoint)) {\n                uniquePointIsCenter = true;\n            }\n        }\n        assertTrue(uniquePointIsCenter);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Fits points to a {@link\n * org.apache.commons.math.analysis.function.Gaussian.Parametric Gaussian} function.\n * <p>\n * Usage example:\n * <pre>\n *   GaussianFitter fitter = new GaussianFitter(\n *     new LevenbergMarquardtOptimizer());\n *   fitter.addObservedPoint(4.0254623,  531026.0);\n *   fitter.addObservedPoint(4.03128248, 984167.0);\n *   fitter.addObservedPoint(4.03839603, 1887233.0);\n *   fitter.addObservedPoint(4.04421621, 2687152.0);\n *   fitter.addObservedPoint(4.05132976, 3461228.0);\n *   fitter.addObservedPoint(4.05326982, 3580526.0);\n *   fitter.addObservedPoint(4.05779662, 3439750.0);\n *   fitter.addObservedPoint(4.0636168,  2877648.0);\n *   fitter.addObservedPoint(4.06943698, 2175960.0);\n *   fitter.addObservedPoint(4.07525716, 1447024.0);\n *   fitter.addObservedPoint(4.08237071, 717104.0);\n *   fitter.addObservedPoint(4.08366408, 620014.0);\n *   double[] parameters = fitter.fit();\n * </pre>\n *\n * @since 2.2\n * @version $Revision$ $Date$\n */\npublic class GaussianFitter extends CurveFitter {\n    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit();\n    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @param initialGuess First guess values in the following order:\n     * <ul>\n     *  <li>Norm</li>\n     *  <li>Mean</li>\n     *  <li>Sigma</li>\n     * </ul>\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit(double[] initialGuess);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Fits points to a {@link\n * org.apache.commons.math.analysis.function.Gaussian.Parametric Gaussian} function.\n * <p>\n * Usage example:\n * <pre>\n *   GaussianFitter fitter = new GaussianFitter(\n *     new LevenbergMarquardtOptimizer());\n *   fitter.addObservedPoint(4.0254623,  531026.0);\n *   fitter.addObservedPoint(4.03128248, 984167.0);\n *   fitter.addObservedPoint(4.03839603, 1887233.0);\n *   fitter.addObservedPoint(4.04421621, 2687152.0);\n *   fitter.addObservedPoint(4.05132976, 3461228.0);\n *   fitter.addObservedPoint(4.05326982, 3580526.0);\n *   fitter.addObservedPoint(4.05779662, 3439750.0);\n *   fitter.addObservedPoint(4.0636168,  2877648.0);\n *   fitter.addObservedPoint(4.06943698, 2175960.0);\n *   fitter.addObservedPoint(4.07525716, 1447024.0);\n *   fitter.addObservedPoint(4.08237071, 717104.0);\n *   fitter.addObservedPoint(4.08366408, 620014.0);\n *   double[] parameters = fitter.fit();\n * </pre>\n *\n * @since 2.2\n * @version $Revision$ $Date$\n */\npublic class GaussianFitter extends CurveFitter {\n    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit();\n    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @param initialGuess First guess values in the following order:\n     * <ul>\n     *  <li>Norm</li>\n     *  <li>Mean</li>\n     *  <li>Sigma</li>\n     * </ul>\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit(double[] initialGuess);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testMath519() {\n        // The optimizer will try negative sigma values but \"GaussianFitter\"\n        // will catch the raised exceptions and return NaN values instead.\n\n        final double[] data = { \n            1.1143831578403364E-29,\n            4.95281403484594E-28,\n            1.1171347211930288E-26,\n            1.7044813962636277E-25,\n            1.9784716574832164E-24,\n            1.8630236407866774E-23,\n            1.4820532905097742E-22,\n            1.0241963854632831E-21,\n            6.275077366673128E-21,\n            3.461808994532493E-20,\n            1.7407124684715706E-19,\n            8.056687953553974E-19,\n            3.460193945992071E-18,\n            1.3883326374011525E-17,\n            5.233894983671116E-17,\n            1.8630791465263745E-16,\n            6.288759227922111E-16,\n            2.0204433920597856E-15,\n            6.198768938576155E-15,\n            1.821419346860626E-14,\n            5.139176445538471E-14,\n            1.3956427429045787E-13,\n            3.655705706448139E-13,\n            9.253753324779779E-13,\n            2.267636001476696E-12,\n            5.3880460095836855E-12,\n            1.2431632654852931E-11\n        };\n\n        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n        for (int i = 0; i < data.length; i++) {\n            fitter.addObservedPoint(i, data[i]);\n        }\n        final double[] p = fitter.fit();\n\n        Assert.assertEquals(53.1572792, p[1], 1e-7);\n        Assert.assertEquals(5.75214622, p[2], 1e-8);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Faster, more accurate, portable alternative to StrictMath.\n * @version $Revision$ $Date$\n * @since 2.2\n */\npublic class FastMath {\n    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;\n    private static final double EXP_INT_TABLE_A[] = new double[1500];\n    private static final double EXP_INT_TABLE_B[] = new double[1500];\n    private static final double EXP_FRAC_TABLE_A[] = new double[1025];\n    private static final double EXP_FRAC_TABLE_B[] = new double[1025];\n    private static final double FACT[] = new double[20];\n    private static final double LN_MANT[][] = new double[1024][];\n    private static final double LN_2_A = 0.693147063255310059;\n    private static final double LN_2_B = 1.17304635250823482e-7;\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static float max(final float a, final float b);\n    /**\n     * Power function.  Compute x^y.\n     *\n     * @param x   a double\n     * @param y   a double\n     * @return double\n     */\n    public static double pow(double x, double y);\n    /**\n     * Exponential function.\n     *\n     * Computes exp(x), function result is nearly rounded.   It will be correctly\n     * rounded to the theoretical value for 99.9% of input values, otherwise it will\n     * have a 1 UPL error.\n     *\n     * Method:\n     *    Lookup intVal = exp(int(x))\n     *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );\n     *    Compute z as the exponential of the remaining bits by a polynomial minus one\n     *    exp(x) = intVal * fracVal * (1 + z)\n     *\n     * Accuracy:\n     *    Calculation is done with 63 bits of precision, so result should be correctly\n     *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n     *\n     * @param x   a double\n     * @return double e<sup>x</sup>\n     */\n    public static double exp(double x);\n    /** Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     */\n    public static long min(final long a, final long b);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static int max(final int a, final int b);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static double max(final double a, final double b);\n    /** Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     */\n    public static int min(final int a, final int b);\n    /** Compute the hyperbolic cosine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic cosine of x\n     */\n    public static double cosh(double x);\n    /** Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     */\n    public static float min(final float a, final float b);\n    /**\n     * Internal helper method for exponential function.\n     * @param x original argument of the exponential function\n     * @param extra extra bits of precision on input (To Be Confirmed)\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return exp(x)\n     */\n    private static double exp(double x, double extra, double[] hiPrec);\n    /** Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     */\n    public static double min(final double a, final double b);\n    /** Compute the hyperbolic sine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic sine of x\n     */\n    public static double sinh(double x);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static long max(final long a, final long b);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Faster, more accurate, portable alternative to StrictMath.\n * @version $Revision$ $Date$\n * @since 2.2\n */\npublic class FastMath {\n    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;\n    private static final double EXP_INT_TABLE_A[] = new double[1500];\n    private static final double EXP_INT_TABLE_B[] = new double[1500];\n    private static final double EXP_FRAC_TABLE_A[] = new double[1025];\n    private static final double EXP_FRAC_TABLE_B[] = new double[1025];\n    private static final double FACT[] = new double[20];\n    private static final double LN_MANT[][] = new double[1024][];\n    private static final double LN_2_A = 0.693147063255310059;\n    private static final double LN_2_B = 1.17304635250823482e-7;\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static float max(final float a, final float b);\n    /**\n     * Power function.  Compute x^y.\n     *\n     * @param x   a double\n     * @param y   a double\n     * @return double\n     */\n    public static double pow(double x, double y);\n    /**\n     * Exponential function.\n     *\n     * Computes exp(x), function result is nearly rounded.   It will be correctly\n     * rounded to the theoretical value for 99.9% of input values, otherwise it will\n     * have a 1 UPL error.\n     *\n     * Method:\n     *    Lookup intVal = exp(int(x))\n     *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );\n     *    Compute z as the exponential of the remaining bits by a polynomial minus one\n     *    exp(x) = intVal * fracVal * (1 + z)\n     *\n     * Accuracy:\n     *    Calculation is done with 63 bits of precision, so result should be correctly\n     *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n     *\n     * @param x   a double\n     * @return double e<sup>x</sup>\n     */\n    public static double exp(double x);\n    /** Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     */\n    public static long min(final long a, final long b);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static int max(final int a, final int b);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static double max(final double a, final double b);\n    /** Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     */\n    public static int min(final int a, final int b);\n    /** Compute the hyperbolic cosine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic cosine of x\n     */\n    public static double cosh(double x);\n    /** Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     */\n    public static float min(final float a, final float b);\n    /**\n     * Internal helper method for exponential function.\n     * @param x original argument of the exponential function\n     * @param extra extra bits of precision on input (To Be Confirmed)\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return exp(x)\n     */\n    private static double exp(double x, double extra, double[] hiPrec);\n    /** Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     */\n    public static double min(final double a, final double b);\n    /** Compute the hyperbolic sine of a number.\n     * @param x number on which evaluation is done\n     * @return hyperbolic sine of x\n     */\n    public static double sinh(double x);\n    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static long max(final long a, final long b);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private Dfp cosh(Dfp x) {\n      return DfpMath.exp(x).add(DfpMath.exp(x.negate())).divide(2);\n    }\n    private Dfp sinh(Dfp x) {\n      return DfpMath.exp(x).subtract(DfpMath.exp(x.negate())).divide(2);\n    }\n    private Dfp tanh(Dfp x) {\n      return sinh(x).divide(cosh(x));\n    }\n    private Dfp cbrt(Dfp x) {\n      boolean negative=false;\n\n      if (x.lessThan(field.getZero())) {\n          negative = true;\n          x = x.negate();\n      }\n\n      Dfp y = DfpMath.pow(x, field.getOne().divide(3));\n\n      if (negative) {\n          y = y.negate();\n      }\n\n      return y;\n    }\n    public void testMinMaxFloat() {\n        float[][] pairs = {\n            { -50.0f, 50.0f },\n            {  Float.POSITIVE_INFINITY, 1.0f },\n            {  Float.NEGATIVE_INFINITY, 1.0f },\n            {  Float.NaN, 1.0f },\n            {  Float.POSITIVE_INFINITY, 0.0f },\n            {  Float.NEGATIVE_INFINITY, 0.0f },\n            {  Float.NaN, 0.0f },\n            {  Float.NaN, Float.NEGATIVE_INFINITY },\n            {  Float.NaN, Float.POSITIVE_INFINITY }\n        };\n        for (float[] pair : pairs) {\n            Assert.assertEquals(\"min(\" + pair[0] + \", \" + pair[1] + \")\", Math.min(pair[0], pair[1]), FastMath.min(pair[0], pair[1]), MathUtils.EPSILON);\n            Assert.assertEquals(\"min(\" + pair[1] + \", \" + pair[0] + \")\", Math.min(pair[1], pair[0]), FastMath.min(pair[1], pair[0]), MathUtils.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[0] + \", \" + pair[1] + \")\", Math.max(pair[0], pair[1]), FastMath.max(pair[0], pair[1]), MathUtils.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[1] + \", \" + pair[0] + \")\", Math.max(pair[1], pair[0]), FastMath.max(pair[1], pair[0]), MathUtils.EPSILON);\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * <p>An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.</p>\n *\n * <p>In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.</p>\n *\n * <p>The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.</p>\n *\n * <p>This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.</p>\n *\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @version $Id$\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends MultivariateOptimizer {\n    private int lambda; // population size\n    private final boolean isActiveCMA;\n    private final int checkFeasableCount;\n    private double[] inputSigma;\n    private int dimension;\n    private int diagonalOnly;\n    private boolean isMinimize = true;\n    private final boolean generateStatistics;\n    private final int maxIterations;\n    private final double stopFitness;\n    private double stopTolUpX;\n    private double stopTolX;\n    private double stopTolFun;\n    private double stopTolHistFun;\n    private int mu; //\n    private double logMu2;\n    private RealMatrix weights;\n    private double mueff; //\n    private double sigma;\n    private double cc;\n    private double cs;\n    private double damps;\n    private double ccov1;\n    private double ccovmu;\n    private double chiN;\n    private double ccov1Sep;\n    private double ccovmuSep;\n    private RealMatrix xmean;\n    private RealMatrix pc;\n    private RealMatrix ps;\n    private double normps;\n    private RealMatrix B;\n    private RealMatrix D;\n    private RealMatrix BD;\n    private RealMatrix diagD;\n    private RealMatrix C;\n    private RealMatrix diagC;\n    private int iterations;\n    private double[] fitnessHistory;\n    private int historySize;\n    private final RandomGenerator random;\n    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException;\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize();\n}\n/**\n * This class implements simplex-based direct search optimization.\n *\n * <p>\n *  Direct search methods only use objective function values, they do\n *  not need derivatives and don't either try to compute approximation\n *  of the derivatives. According to a 1996 paper by Margaret H. Wright\n *  (<a href=\"http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz\">Direct\n *  Search Methods: Once Scorned, Now Respectable</a>), they are used\n *  when either the computation of the derivative is impossible (noisy\n *  functions, unpredictable discontinuities) or difficult (complexity,\n *  computation cost). In the first cases, rather than an optimum, a\n *  <em>not too bad</em> point is desired. In the latter cases, an\n *  optimum is desired but cannot be reasonably found. In all cases\n *  direct search methods can be useful.\n * </p>\n * <p>\n *  Simplex-based direct search methods are based on comparison of\n *  the objective function values at the vertices of a simplex (which is a\n *  set of n+1 points in dimension n) that is updated by the algorithms\n *  steps.\n * <p>\n * <p>\n *  The simplex update procedure ({@link NelderMeadSimplex} or\n * {@link MultiDirectionalSimplex})  must be passed to the\n * {@code optimize} method.\n * </p>\n * <p>\n *  Each call to {@code optimize} will re-use the start configuration of\n *  the current simplex and move it such that its first vertex is at the\n *  provided start point of the optimization.\n *  If the {@code optimize} method is called to solve a different problem\n *  and the number of parameters change, the simplex must be re-initialized\n *  to one with the appropriate dimensions.\n * </p>\n * <p>\n *  Convergence is checked by providing the <em>worst</em> points of\n *  previous and current simplex to the convergence checker, not the best\n *  ones.\n * </p>\n * <p>\n *  This simplex optimizer implementation does not directly support constrained\n *  optimization with simple bounds; so, for such optimizations, either a more\n *  dedicated algorithm must be used like\n *  {@link CMAESOptimizer} or {@link BOBYQAOptimizer}, or the objective\n *  function must be wrapped in an adapter like\n *  {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter\n *  MultivariateFunctionMappingAdapter} or\n *  {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter\n *  MultivariateFunctionPenaltyAdapter}.\n *  <br/>\n *  The call to {@link #optimize(OptimizationData[]) optimize} will throw\n *  {@link MathUnsupportedOperationException} if bounds are passed to it.\n * </p>\n *\n * @version $Id$\n * @since 3.0\n */\npublic class SimplexOptimizer extends MultivariateOptimizer {\n    private AbstractSimplex simplex;\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize();\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link AbstractSimplex}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData);\n}\n/**\n * Base class for implementing optimizers.\n * It contains the boiler-plate code for counting the number of evaluations\n * of the objective function and the number of iterations of the algorithm,\n * and storing the convergence checker.\n * <em>It is not a \"user\" class.</em>\n *\n * @param <PAIR> Type of the point/value pair returned by the optimization\n * algorithm.\n *\n * @version $Id$\n * @since 3.1\n */\npublic abstract class BaseOptimizer<PAIR> {\n    private ConvergenceChecker<PAIR> checker;\n    /**\n     * Gets the number of iterations performed by the algorithm.\n     * The number iterations corresponds to the last call to the\n     * {@code optimize} method. It is 0 if the method has not been\n     * called yet.\n     *\n     * @return the number of evaluations of the objective function.\n     */\n    public int getIterations();\n    /**\n     * Gets the maximal number of function evaluations.\n     *\n     * @return the maximal number of function evaluations.\n     */\n    public int getMaxEvaluations();\n    /**\n     * Stores data and performs the optimization.\n     * <br/>\n     * The list of parameters is open-ended so that sub-classes can extend it\n     * with arguments specific to their concrete implementations.\n     * <br/>\n     * When the method is called multiple times, instance data is overwritten\n     * only when actually present in the list of arguments: when not specified,\n     * data set in a previous call is retained (and thus is optional in\n     * subsequent calls).\n     * <br/>\n     * Important note: Subclasses <em>must</em> override\n     * {@link #parseOptimizationData(OptimizationData[])} if they need to register\n     * their own options; but then, they <em>must</em> also call\n     * {@code super.parseOptimizationData(optData)} within that method.\n     *\n     * @param optData Optimization data.\n     * This method will register the following data:\n     * <ul>\n     *  <li>{@link MaxEval}</li>\n     *  <li>{@link MaxIter}</li>\n     * </ul>\n     * @return a point/value pair that satifies the convergence criteria.\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws TooManyIterationsException if the maximal number of\n     * iterations is exceeded.\n     */\n    public PAIR optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               TooManyIterationsException;\n}\n/**\n * Non-linear conjugate gradient optimizer.\n * <br/>\n * This class supports both the Fletcher-Reeves and the Polak-Ribi\u00e8re\n * update formulas for the conjugate search directions.\n * It also supports optional preconditioning.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * @version $Id$\n * @since 2.0\n */\npublic class NonLinearConjugateGradientOptimizer\n    extends GradientMultivariateOptimizer {\n    private final Formula updateFormula;\n    private final Preconditioner preconditioner;\n    private final UnivariateSolver solver;\n    private double initialStep = 1;\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize();\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link GradientMultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * GradientMultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link BracketingStep}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations (of the objective function) is exceeded.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException;\n}\n/**\n * This class solves a least-squares problem using the Levenberg-Marquardt\n * algorithm.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n *\n * @version $Id$\n * @since 2.0\n */\npublic class LevenbergMarquardtOptimizer\n    extends AbstractLeastSquaresOptimizer {\n    private int solvedCols;\n    private double[] diagR;\n    private double[] jacNorm;\n    private double[] beta;\n    private int[] permutation;\n    private int rank;\n    private double lmPar;\n    private double[] lmDir;\n    private final double initialStepBoundFactor;\n    private final double costRelativeTolerance;\n    private final double parRelativeTolerance;\n    private final double orthoTolerance;\n    private final double qrRankingThreshold;\n    private double[] weightedResidual;\n    private double[][] weightedJacobian;\n    /** {@inheritDoc} */\n    @Override\n    protected PointVectorValuePair doOptimize();\n}\n/**\n * Powell's algorithm.\n * This code is translated and adapted from the Python version of this\n * algorithm (as implemented in module {@code optimize.py} v0.5 of\n * <em>SciPy</em>).\n * <br/>\n * The default stopping criterion is based on the differences of the\n * function value between two successive iterations. It is however possible\n * to define a custom convergence checker that might terminate the algorithm\n * earlier.\n * <br/>\n * The internal line search optimizer is a {@link BrentOptimizer} with a\n * convergence checker set to {@link SimpleUnivariateValueChecker}.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n * In order to impose simple constraints, the objective function must be\n * wrapped in an adapter like\n * {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter\n * MultivariateFunctionMappingAdapter} or\n * {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter\n * MultivariateFunctionPenaltyAdapter}.\n *\n * @version $Id$\n * @since 2.2\n */\npublic class PowellOptimizer\n    extends MultivariateOptimizer {\n    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);\n    private final double relativeThreshold;\n    private final double absoluteThreshold;\n    private final LineSearch line;\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize();\n}\n/**\n * Gauss-Newton least-squares solver.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * <p>\n * This class solve a least-square problem by solving the normal equations\n * of the linearized problem at each iteration. Either LU decomposition or\n * QR decomposition can be used to solve the normal equations. LU decomposition\n * is faster but QR decomposition is more robust for difficult problems.\n * </p>\n *\n * @version $Id$\n * @since 2.0\n *\n */\npublic class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer {\n    private final boolean useLU;\n    /** {@inheritDoc} */\n    @Override\n    public PointVectorValuePair doOptimize();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * <p>An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.</p>\n *\n * <p>In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.</p>\n *\n * <p>The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.</p>\n *\n * <p>This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.</p>\n *\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @version $Id$\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends MultivariateOptimizer {\n    private int lambda; // population size\n    private final boolean isActiveCMA;\n    private final int checkFeasableCount;\n    private double[] inputSigma;\n    private int dimension;\n    private int diagonalOnly;\n    private boolean isMinimize = true;\n    private final boolean generateStatistics;\n    private final int maxIterations;\n    private final double stopFitness;\n    private double stopTolUpX;\n    private double stopTolX;\n    private double stopTolFun;\n    private double stopTolHistFun;\n    private int mu; //\n    private double logMu2;\n    private RealMatrix weights;\n    private double mueff; //\n    private double sigma;\n    private double cc;\n    private double cs;\n    private double damps;\n    private double ccov1;\n    private double ccovmu;\n    private double chiN;\n    private double ccov1Sep;\n    private double ccovmuSep;\n    private RealMatrix xmean;\n    private RealMatrix pc;\n    private RealMatrix ps;\n    private double normps;\n    private RealMatrix B;\n    private RealMatrix D;\n    private RealMatrix BD;\n    private RealMatrix diagD;\n    private RealMatrix C;\n    private RealMatrix diagC;\n    private int iterations;\n    private double[] fitnessHistory;\n    private int historySize;\n    private final RandomGenerator random;\n    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException;\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize();\n}\n/**\n * This class implements simplex-based direct search optimization.\n *\n * <p>\n *  Direct search methods only use objective function values, they do\n *  not need derivatives and don't either try to compute approximation\n *  of the derivatives. According to a 1996 paper by Margaret H. Wright\n *  (<a href=\"http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz\">Direct\n *  Search Methods: Once Scorned, Now Respectable</a>), they are used\n *  when either the computation of the derivative is impossible (noisy\n *  functions, unpredictable discontinuities) or difficult (complexity,\n *  computation cost). In the first cases, rather than an optimum, a\n *  <em>not too bad</em> point is desired. In the latter cases, an\n *  optimum is desired but cannot be reasonably found. In all cases\n *  direct search methods can be useful.\n * </p>\n * <p>\n *  Simplex-based direct search methods are based on comparison of\n *  the objective function values at the vertices of a simplex (which is a\n *  set of n+1 points in dimension n) that is updated by the algorithms\n *  steps.\n * <p>\n * <p>\n *  The simplex update procedure ({@link NelderMeadSimplex} or\n * {@link MultiDirectionalSimplex})  must be passed to the\n * {@code optimize} method.\n * </p>\n * <p>\n *  Each call to {@code optimize} will re-use the start configuration of\n *  the current simplex and move it such that its first vertex is at the\n *  provided start point of the optimization.\n *  If the {@code optimize} method is called to solve a different problem\n *  and the number of parameters change, the simplex must be re-initialized\n *  to one with the appropriate dimensions.\n * </p>\n * <p>\n *  Convergence is checked by providing the <em>worst</em> points of\n *  previous and current simplex to the convergence checker, not the best\n *  ones.\n * </p>\n * <p>\n *  This simplex optimizer implementation does not directly support constrained\n *  optimization with simple bounds; so, for such optimizations, either a more\n *  dedicated algorithm must be used like\n *  {@link CMAESOptimizer} or {@link BOBYQAOptimizer}, or the objective\n *  function must be wrapped in an adapter like\n *  {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter\n *  MultivariateFunctionMappingAdapter} or\n *  {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter\n *  MultivariateFunctionPenaltyAdapter}.\n *  <br/>\n *  The call to {@link #optimize(OptimizationData[]) optimize} will throw\n *  {@link MathUnsupportedOperationException} if bounds are passed to it.\n * </p>\n *\n * @version $Id$\n * @since 3.0\n */\npublic class SimplexOptimizer extends MultivariateOptimizer {\n    private AbstractSimplex simplex;\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize();\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link AbstractSimplex}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData);\n}\n/**\n * Base class for implementing optimizers.\n * It contains the boiler-plate code for counting the number of evaluations\n * of the objective function and the number of iterations of the algorithm,\n * and storing the convergence checker.\n * <em>It is not a \"user\" class.</em>\n *\n * @param <PAIR> Type of the point/value pair returned by the optimization\n * algorithm.\n *\n * @version $Id$\n * @since 3.1\n */\npublic abstract class BaseOptimizer<PAIR> {\n    private ConvergenceChecker<PAIR> checker;\n    /**\n     * Gets the number of iterations performed by the algorithm.\n     * The number iterations corresponds to the last call to the\n     * {@code optimize} method. It is 0 if the method has not been\n     * called yet.\n     *\n     * @return the number of evaluations of the objective function.\n     */\n    public int getIterations();\n    /**\n     * Gets the maximal number of function evaluations.\n     *\n     * @return the maximal number of function evaluations.\n     */\n    public int getMaxEvaluations();\n    /**\n     * Stores data and performs the optimization.\n     * <br/>\n     * The list of parameters is open-ended so that sub-classes can extend it\n     * with arguments specific to their concrete implementations.\n     * <br/>\n     * When the method is called multiple times, instance data is overwritten\n     * only when actually present in the list of arguments: when not specified,\n     * data set in a previous call is retained (and thus is optional in\n     * subsequent calls).\n     * <br/>\n     * Important note: Subclasses <em>must</em> override\n     * {@link #parseOptimizationData(OptimizationData[])} if they need to register\n     * their own options; but then, they <em>must</em> also call\n     * {@code super.parseOptimizationData(optData)} within that method.\n     *\n     * @param optData Optimization data.\n     * This method will register the following data:\n     * <ul>\n     *  <li>{@link MaxEval}</li>\n     *  <li>{@link MaxIter}</li>\n     * </ul>\n     * @return a point/value pair that satifies the convergence criteria.\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws TooManyIterationsException if the maximal number of\n     * iterations is exceeded.\n     */\n    public PAIR optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               TooManyIterationsException;\n}\n/**\n * Non-linear conjugate gradient optimizer.\n * <br/>\n * This class supports both the Fletcher-Reeves and the Polak-Ribi\u00e8re\n * update formulas for the conjugate search directions.\n * It also supports optional preconditioning.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * @version $Id$\n * @since 2.0\n */\npublic class NonLinearConjugateGradientOptimizer\n    extends GradientMultivariateOptimizer {\n    private final Formula updateFormula;\n    private final Preconditioner preconditioner;\n    private final UnivariateSolver solver;\n    private double initialStep = 1;\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize();\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link GradientMultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * GradientMultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link BracketingStep}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations (of the objective function) is exceeded.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException;\n}\n/**\n * This class solves a least-squares problem using the Levenberg-Marquardt\n * algorithm.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n *\n * @version $Id$\n * @since 2.0\n */\npublic class LevenbergMarquardtOptimizer\n    extends AbstractLeastSquaresOptimizer {\n    private int solvedCols;\n    private double[] diagR;\n    private double[] jacNorm;\n    private double[] beta;\n    private int[] permutation;\n    private int rank;\n    private double lmPar;\n    private double[] lmDir;\n    private final double initialStepBoundFactor;\n    private final double costRelativeTolerance;\n    private final double parRelativeTolerance;\n    private final double orthoTolerance;\n    private final double qrRankingThreshold;\n    private double[] weightedResidual;\n    private double[][] weightedJacobian;\n    /** {@inheritDoc} */\n    @Override\n    protected PointVectorValuePair doOptimize();\n}\n/**\n * Powell's algorithm.\n * This code is translated and adapted from the Python version of this\n * algorithm (as implemented in module {@code optimize.py} v0.5 of\n * <em>SciPy</em>).\n * <br/>\n * The default stopping criterion is based on the differences of the\n * function value between two successive iterations. It is however possible\n * to define a custom convergence checker that might terminate the algorithm\n * earlier.\n * <br/>\n * The internal line search optimizer is a {@link BrentOptimizer} with a\n * convergence checker set to {@link SimpleUnivariateValueChecker}.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n * In order to impose simple constraints, the objective function must be\n * wrapped in an adapter like\n * {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter\n * MultivariateFunctionMappingAdapter} or\n * {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter\n * MultivariateFunctionPenaltyAdapter}.\n *\n * @version $Id$\n * @since 2.2\n */\npublic class PowellOptimizer\n    extends MultivariateOptimizer {\n    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);\n    private final double relativeThreshold;\n    private final double absoluteThreshold;\n    private final LineSearch line;\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize();\n}\n/**\n * Gauss-Newton least-squares solver.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * <p>\n * This class solve a least-square problem by solving the normal equations\n * of the linearized problem at each iteration. Either LU decomposition or\n * QR decomposition can be used to solve the normal equations. LU decomposition\n * is faster but QR decomposition is more robust for difficult problems.\n * </p>\n *\n * @version $Id$\n * @since 2.0\n *\n */\npublic class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer {\n    private final boolean useLU;\n    /** {@inheritDoc} */\n    @Override\n    public PointVectorValuePair doOptimize();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testTrivial() {\n        LinearProblem problem\n            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\n        NonLinearConjugateGradientOptimizer optimizer\n            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n                                                      new SimpleValueChecker(1e-6, 1e-6));\n        PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 problem.getObjectiveFunction(),\n                                 problem.getObjectiveFunctionGradient(),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 0 }));\n        Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);\n        Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Default implementation of\n * {@link org.apache.commons.math.distribution.NormalDistribution}.\n *\n * @version $Revision$ $Date$\n */\npublic class NormalDistributionImpl extends AbstractContinuousDistribution\n        implements NormalDistribution, Serializable {\n    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n    private static final long serialVersionUID = 8589540077390120676L;\n    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);\n    private final double mean;\n    private final double standardDeviation;\n    private final double solverAbsoluteAccuracy;\n    /**\n     * {@inheritDoc}\n     */\n    public double getStandardDeviation();\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public double density(double x);\n    /**\n     * {@inheritDoc}\n     */\n    public double getMean();\n    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Default implementation of\n * {@link org.apache.commons.math.distribution.NormalDistribution}.\n *\n * @version $Revision$ $Date$\n */\npublic class NormalDistributionImpl extends AbstractContinuousDistribution\n        implements NormalDistribution, Serializable {\n    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n    private static final long serialVersionUID = 8589540077390120676L;\n    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);\n    private final double mean;\n    private final double standardDeviation;\n    private final double solverAbsoluteAccuracy;\n    /**\n     * {@inheritDoc}\n     */\n    public double getStandardDeviation();\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public double density(double x);\n    /**\n     * {@inheritDoc}\n     */\n    public double getMean();\n    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * ContinuousDistributionAbstractTest for details.\n *\n * @version $Revision$ $Date$\n */\npublic class NormalDistributionTest extends ContinuousDistributionAbstractTest  {\n    private void verifyQuantiles() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        double mu = distribution.getMean();\n        double sigma = distribution.getStandardDeviation();\n        setCumulativeTestPoints( new double[] {mu - 2 *sigma, mu - sigma,\n                mu, mu + sigma, mu + 2 * sigma,  mu + 3 * sigma, mu + 4 * sigma,\n                mu + 5 * sigma});\n        // Quantiles computed using R (same as Mathematica)\n        setCumulativeTestValues(new double[] {0.02275013194817921, 0.158655253931457, 0.5, 0.841344746068543,\n                0.977249868051821, 0.99865010196837, 0.999968328758167,  0.999999713348428});\n        verifyCumulativeProbabilities();\n    }\n    private void checkDensity(double mean, double sd, double[] x, double[] expected) {\n        NormalDistribution d = new NormalDistributionImpl(mean, sd);\n        for (int i = 0; i < x.length; i++) {\n            assertEquals(expected[i], d.density(x[i]), 1e-9);\n        }\n    }\n    public void testExtremeValues() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                assertTrue(lowerTail > 0.0d);\n                assertTrue(upperTail < 1.0d);\n            }\n            else { // make sure top coding not reversed\n                assertTrue(lowerTail < 0.00001);\n                assertTrue(upperTail > 0.99999);\n            }\n        }\n        \n        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\n        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);\n        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);\n        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);\n        \n   }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implementation for the {@link PoissonDistribution}.\n *\n * @version $Revision$ $Date$\n */\npublic class PoissonDistributionImpl extends AbstractIntegerDistribution\n        implements PoissonDistribution, Serializable {\n    public static final int DEFAULT_MAX_ITERATIONS = 10000000;\n    public static final double DEFAULT_EPSILON = 1E-12;\n    private static final long serialVersionUID = -3349935121172596109L;\n    private NormalDistribution normal;\n    private double mean;\n    private int maxIterations = DEFAULT_MAX_ITERATIONS;\n    private double epsilon = DEFAULT_EPSILON;\n    /**\n     * Get the Poisson mean for the distribution.\n     *\n     * @return the Poisson mean for the distribution.\n     */\n    public double getMean();\n    /**\n     * The probability distribution function P(X <= x) for a Poisson\n     * distribution.\n     *\n     * @param x the value at which the PDF is evaluated.\n     * @return Poisson distribution function evaluated at x\n     * @throws MathException if the cumulative probability can not be computed\n     *             due to convergence or other numerical errors.\n     */\n    @Override\n    public double cumulativeProbability(int x) throws MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implementation for the {@link PoissonDistribution}.\n *\n * @version $Revision$ $Date$\n */\npublic class PoissonDistributionImpl extends AbstractIntegerDistribution\n        implements PoissonDistribution, Serializable {\n    public static final int DEFAULT_MAX_ITERATIONS = 10000000;\n    public static final double DEFAULT_EPSILON = 1E-12;\n    private static final long serialVersionUID = -3349935121172596109L;\n    private NormalDistribution normal;\n    private double mean;\n    private int maxIterations = DEFAULT_MAX_ITERATIONS;\n    private double epsilon = DEFAULT_EPSILON;\n    /**\n     * Get the Poisson mean for the distribution.\n     *\n     * @return the Poisson mean for the distribution.\n     */\n    public double getMean();\n    /**\n     * The probability distribution function P(X <= x) for a Poisson\n     * distribution.\n     *\n     * @param x the value at which the PDF is evaluated.\n     * @return Poisson distribution function evaluated at x\n     * @throws MathException if the cumulative probability can not be computed\n     *             due to convergence or other numerical errors.\n     */\n    @Override\n    public double cumulativeProbability(int x) throws MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void checkProbability(PoissonDistribution dist, double x) throws Exception {\n        double p = dist.cumulativeProbability(x);\n        assertFalse(\"NaN cumulative probability returned for mean = \" +\n                dist.getMean() + \" x = \" + x, Double.isNaN(p));\n        assertTrue(\"Zero cum probability returned for mean = \" +\n                dist.getMean() + \" x = \" + x, p > 0);\n    }\n    public void testMean() {\n        PoissonDistribution dist;\n        try {\n            dist = new PoissonDistributionImpl(-1);\n            fail(\"negative mean: NotStrictlyPositiveException expected\");\n        } catch(NotStrictlyPositiveException ex) {\n            // Expected.\n        }\n\n        dist = new PoissonDistributionImpl(10.0);\n        assertEquals(10.0, dist.getMean(), 0.0);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Special implementation of the {@link UnivariateRealOptimizer} interface\n * adding multi-start features to an existing optimizer.\n *\n * This class wraps a classical optimizer to use it several times in\n * turn with different starting points in order to avoid being trapped\n * into a local extremum when looking for a global one.\n *\n * @param <FUNC> Type of the objective function to be optimized.\n *\n * @version $Revision$ $Date$\n * @since 3.0\n */\npublic class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFunction>\n    implements BaseUnivariateRealOptimizer<FUNC> {\n    private final BaseUnivariateRealOptimizer<FUNC> optimizer;\n    private int maxEvaluations;\n    private int totalEvaluations;\n    private int starts;\n    private RandomGenerator generator;\n    private UnivariateRealPointValuePair[] optima;\n    /** {@inheritDoc} */\n    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\n                                                 final double min, final double max,\n                                                 final double startValue)\n        throws FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public void setMaxEvaluations(int maxEvaluations);\n    /** {@inheritDoc} */\n    public int getEvaluations();\n    /**\n     * Get all the optima found during the last call to {@link\n     * #optimize(FUNC,GoalType,double,double) optimize}.\n     * The optimizer stores all the optima found during a set of\n     * restarts. The {@link #optimize(FUNC,GoalType,double,double) optimize}\n     * method returns the best point only. This method returns all the points\n     * found at the end of each starts, including the best one already\n     * returned by the {@link #optimize(FUNC,GoalType,double,double) optimize}\n     * method.\n     * <br/>\n     * The returned array as one element for each start as specified\n     * in the constructor. It is ordered with the results from the\n     * runs that did converge first, sorted from best to worst\n     * objective value (i.e in ascending order if minimizing and in\n     * descending order if maximizing), followed by {@code null} elements\n     * corresponding to the runs that did not converge. This means all\n     * elements will be {@code null} if the {@link\n     * #optimize(FUNC,GoalType,double,double) optimize} method did throw a\n     * {@link ConvergenceException}). This also means that if the first\n     * element is not {@code null}, it is the best point found across all\n     * starts.\n     *\n     * @return an array containing the optima.\n     * @throws MathIllegalStateException if {@link\n     * #optimize(FUNC,GoalType,double,double) optimize} has not been called.\n     */\n    public UnivariateRealPointValuePair[] getOptima();\n    /** {@inheritDoc} */\n    public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                 final GoalType goal,\n                                                 final double min, final double max)\n        throws FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Special implementation of the {@link UnivariateRealOptimizer} interface\n * adding multi-start features to an existing optimizer.\n *\n * This class wraps a classical optimizer to use it several times in\n * turn with different starting points in order to avoid being trapped\n * into a local extremum when looking for a global one.\n *\n * @param <FUNC> Type of the objective function to be optimized.\n *\n * @version $Revision$ $Date$\n * @since 3.0\n */\npublic class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFunction>\n    implements BaseUnivariateRealOptimizer<FUNC> {\n    private final BaseUnivariateRealOptimizer<FUNC> optimizer;\n    private int maxEvaluations;\n    private int totalEvaluations;\n    private int starts;\n    private RandomGenerator generator;\n    private UnivariateRealPointValuePair[] optima;\n    /** {@inheritDoc} */\n    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\n                                                 final double min, final double max,\n                                                 final double startValue)\n        throws FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public void setMaxEvaluations(int maxEvaluations);\n    /** {@inheritDoc} */\n    public int getEvaluations();\n    /**\n     * Get all the optima found during the last call to {@link\n     * #optimize(FUNC,GoalType,double,double) optimize}.\n     * The optimizer stores all the optima found during a set of\n     * restarts. The {@link #optimize(FUNC,GoalType,double,double) optimize}\n     * method returns the best point only. This method returns all the points\n     * found at the end of each starts, including the best one already\n     * returned by the {@link #optimize(FUNC,GoalType,double,double) optimize}\n     * method.\n     * <br/>\n     * The returned array as one element for each start as specified\n     * in the constructor. It is ordered with the results from the\n     * runs that did converge first, sorted from best to worst\n     * objective value (i.e in ascending order if minimizing and in\n     * descending order if maximizing), followed by {@code null} elements\n     * corresponding to the runs that did not converge. This means all\n     * elements will be {@code null} if the {@link\n     * #optimize(FUNC,GoalType,double,double) optimize} method did throw a\n     * {@link ConvergenceException}). This also means that if the first\n     * element is not {@code null}, it is the best point found across all\n     * starts.\n     *\n     * @return an array containing the optima.\n     * @throws MathIllegalStateException if {@link\n     * #optimize(FUNC,GoalType,double,double) optimize} has not been called.\n     */\n    public UnivariateRealPointValuePair[] getOptima();\n    /** {@inheritDoc} */\n    public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                 final GoalType goal,\n                                                 final double min, final double max)\n        throws FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testQuinticMin() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);\n        assertEquals(-0.0443342695, optimum.getValue(), 1e-9);\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);\n        }\n        assertTrue(optimizer.getEvaluations() >= 50);\n        assertTrue(optimizer.getEvaluations() <= 100);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    public static final double TWO_PI = 2 * FastMath.PI;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final int NAN_GAP = 4 * 1024 * 1024;\n    private static final long SGN_MASK = 0x8000000000000000L;\n    /**\n     * Add two long integers, checking for overflow.\n     *\n     * @param a an addend\n     * @param b an addend\n     * @param pattern the pattern to use for any thrown exception.\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    private static long addAndCheck(long a, long b, Localizable pattern);\n    /**\n     * Multiply two long integers, checking for overflow.\n     *\n     * @param a first value\n     * @param b second value\n     * @return the product <code>a * b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b);\n    /**\n     * Returns true if both arguments are equal or within the range of allowed\n     * error (inclusive).\n     * Two float numbers are considered equal if there are {@code (maxUlps - 1)}\n     * (or less) floating point numbers between them (i.e. two adjacent floating\n     * point numbers are considered equal.\n     * Adapted from <a\n     * href=\"http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm\">\n     * Bruce Dawson</a>\n     *\n     * @param x first value\n     * @param y second value\n     * @param maxUlps {@code (maxUlps - 1)} is the number of floating point\n     * values between {@code x} and {@code y}.\n     * @return {@code true} if there are less than {@code maxUlps} floating\n     * point values between {@code x} and {@code y}.\n     */\n    public static boolean equals(double x, double y, int maxUlps);\n    /**\n     * Returns true iff they are equal as defined by\n     * {@link #equals(double,double,int) equals(x, y, 1)}.\n     *\n     * @param x first value\n     * @param y second value\n     * @return {@code true} if the values are equal.\n     */\n    public static boolean equals(double x, double y);\n    /**\n     * Returns the <a href=\"http://mathworld.wolfram.com/HyperbolicCosine.html\">\n     * hyperbolic cosine</a> of x.\n     *\n     * @param x double value for which to find the hyperbolic cosine\n     * @return hyperbolic cosine of x\n     */\n    public static double cosh(double x);\n    /**\n     * Multiply two integers, checking for overflow.\n     *\n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int mulAndCheck(int x, int y);\n    /**\n     * Add two long integers, checking for overflow.\n     *\n     * @param a an addend\n     * @param b an addend\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long addAndCheck(long a, long b);\n    /**\n     * Returns true iff both arguments are null or have same dimensions and all\n     * their elements are equal as defined by\n     * {@link #equals(double,double) this method}.\n     *\n     * @param x first array\n     * @param y second array\n     * @return true if the values are both null or have same dimension\n     * and equal elements.\n     */\n    public static boolean equals(double[] x, double[] y);\n    /**\n     * Returns true if both arguments are equal or within the range of allowed\n     * error (inclusive).\n     *\n     * @param x first value\n     * @param y second value\n     * @param eps the amount of absolute error to allow.\n     * @return {@code true} if the values are equal or within range of each other.\n     */\n    public static boolean equals(double x, double y, double eps);\n    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is\n     * thrown.</li>\n     * </ul></p>\n     *\n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n    public static long binomialCoefficient(final int n, final int k);\n    /**\n     * Subtract two integers, checking for overflow.\n     *\n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int subAndCheck(int x, int y);\n    /**\n     * Subtract two long integers, checking for overflow.\n     *\n     * @param a first value\n     * @param b second value\n     * @return the difference <code>a-b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long subAndCheck(long a, long b);\n    /**\n     * Add two integers, checking for overflow.\n     *\n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int addAndCheck(int x, int y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    public static final double TWO_PI = 2 * FastMath.PI;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final int NAN_GAP = 4 * 1024 * 1024;\n    private static final long SGN_MASK = 0x8000000000000000L;\n    /**\n     * Add two long integers, checking for overflow.\n     *\n     * @param a an addend\n     * @param b an addend\n     * @param pattern the pattern to use for any thrown exception.\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    private static long addAndCheck(long a, long b, Localizable pattern);\n    /**\n     * Multiply two long integers, checking for overflow.\n     *\n     * @param a first value\n     * @param b second value\n     * @return the product <code>a * b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b);\n    /**\n     * Returns true if both arguments are equal or within the range of allowed\n     * error (inclusive).\n     * Two float numbers are considered equal if there are {@code (maxUlps - 1)}\n     * (or less) floating point numbers between them (i.e. two adjacent floating\n     * point numbers are considered equal.\n     * Adapted from <a\n     * href=\"http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm\">\n     * Bruce Dawson</a>\n     *\n     * @param x first value\n     * @param y second value\n     * @param maxUlps {@code (maxUlps - 1)} is the number of floating point\n     * values between {@code x} and {@code y}.\n     * @return {@code true} if there are less than {@code maxUlps} floating\n     * point values between {@code x} and {@code y}.\n     */\n    public static boolean equals(double x, double y, int maxUlps);\n    /**\n     * Returns true iff they are equal as defined by\n     * {@link #equals(double,double,int) equals(x, y, 1)}.\n     *\n     * @param x first value\n     * @param y second value\n     * @return {@code true} if the values are equal.\n     */\n    public static boolean equals(double x, double y);\n    /**\n     * Returns the <a href=\"http://mathworld.wolfram.com/HyperbolicCosine.html\">\n     * hyperbolic cosine</a> of x.\n     *\n     * @param x double value for which to find the hyperbolic cosine\n     * @return hyperbolic cosine of x\n     */\n    public static double cosh(double x);\n    /**\n     * Multiply two integers, checking for overflow.\n     *\n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int mulAndCheck(int x, int y);\n    /**\n     * Add two long integers, checking for overflow.\n     *\n     * @param a an addend\n     * @param b an addend\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long addAndCheck(long a, long b);\n    /**\n     * Returns true iff both arguments are null or have same dimensions and all\n     * their elements are equal as defined by\n     * {@link #equals(double,double) this method}.\n     *\n     * @param x first array\n     * @param y second array\n     * @return true if the values are both null or have same dimension\n     * and equal elements.\n     */\n    public static boolean equals(double[] x, double[] y);\n    /**\n     * Returns true if both arguments are equal or within the range of allowed\n     * error (inclusive).\n     *\n     * @param x first value\n     * @param y second value\n     * @param eps the amount of absolute error to allow.\n     * @return {@code true} if the values are equal or within range of each other.\n     */\n    public static boolean equals(double x, double y, double eps);\n    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is\n     * thrown.</li>\n     * </ul></p>\n     *\n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n    public static long binomialCoefficient(final int n, final int k);\n    /**\n     * Subtract two integers, checking for overflow.\n     *\n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int subAndCheck(int x, int y);\n    /**\n     * Subtract two long integers, checking for overflow.\n     *\n     * @param a first value\n     * @param b second value\n     * @return the difference <code>a-b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long subAndCheck(long a, long b);\n    /**\n     * Add two integers, checking for overflow.\n     *\n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int addAndCheck(int x, int y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n *          2007) $\n */\npublic final class MathUtilsTest extends TestCase {\n    private long binomialCoefficient(int n, int k) throws ArithmeticException {\n        if (binomialCache.size() > n) {\n            Long cachedResult = binomialCache.get(n).get(Integer.valueOf(k));\n            if (cachedResult != null) {\n                return cachedResult.longValue();\n            }\n        }\n        long result = -1;\n        if ((n == k) || (k == 0)) {\n            result = 1;\n        } else if ((k == 1) || (k == n - 1)) {\n            result = n;\n        } else {\n            // Reduce stack depth for larger values of n\n            if (k < n - 100) {\n                binomialCoefficient(n - 100, k);\n            }\n            if (k > 100) {\n                binomialCoefficient(n - 100, k - 100);\n            }\n            result = MathUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),\n                binomialCoefficient(n - 1, k));\n        }\n        if (result == -1) {\n            throw new ArithmeticException(\n                \"error computing binomial coefficient\");\n        }\n        for (int i = binomialCache.size(); i < n + 1; i++) {\n            binomialCache.add(new HashMap<Integer, Long>());\n        }\n        binomialCache.get(n).put(Integer.valueOf(k), Long.valueOf(result));\n        return result;\n    }\n    private long factorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    private void testAddAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.addAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n    private void testMulAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.mulAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n    private void testSubAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.subAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n    }\n    public void testArrayEquals() {\n        assertFalse(MathUtils.equals(new double[] { 1d }, null));\n        assertFalse(MathUtils.equals(null, new double[] { 1d }));\n        assertTrue(MathUtils.equals((double[]) null, (double[]) null));\n\n        assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));\n        assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));\n        assertTrue(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 1d, 0d }, new double[] { Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 1d, 0d }));\n        assertFalse(MathUtils.equals(new double[] { Double.NaN }, new double[] { Double.NaN }));\n        assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY }, new double[] { Double.NEGATIVE_INFINITY }));\n        assertFalse(MathUtils.equals(new double[] { 1d }, new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n *\n */\npublic class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n    private int solvedCols;\n    private double[] diagR;\n    private double[] jacNorm;\n    private double[] beta;\n    private int[] permutation;\n    private int rank;\n    private double lmPar;\n    private double[] lmDir;\n    private double initialStepBoundFactor;\n    private double costRelativeTolerance;\n    private double parRelativeTolerance;\n    private double orthoTolerance;\n    private double qrRankingThreshold;\n    /**\n     * Set the desired relative error in the sum of squares.\n     * <p>This setting is used only if the {@link #setConvergenceChecker vectorial\n     * convergence checker} is set to null.</p>\n     * @param costRelativeTolerance desired relative error in the sum of squares\n     */\n    public void setCostRelativeTolerance(double costRelativeTolerance);\n    /**\n     * Set the desired relative error in the approximate solution parameters.\n     * <p>This setting is used only if the {@link #setConvergenceChecker vectorial\n     * convergence checker} is set to null.</p>\n     * @param parRelativeTolerance desired relative error\n     * in the approximate solution parameters\n     */\n    public void setParRelativeTolerance(double parRelativeTolerance);\n    /** {@inheritDoc} */\n    @Override\n    protected VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;\n    /**\n     * Set the desired max cosine on the orthogonality.\n     * <p>This setting is always used, regardless of the {@link #setConvergenceChecker\n     * vectorial convergence checker} being null or non-null.</p>\n     * @param orthoTolerance desired max cosine on the orthogonality\n     * between the function vector and the columns of the jacobian\n     */\n    public void setOrthoTolerance(double orthoTolerance);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n *\n */\npublic class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n    private int solvedCols;\n    private double[] diagR;\n    private double[] jacNorm;\n    private double[] beta;\n    private int[] permutation;\n    private int rank;\n    private double lmPar;\n    private double[] lmDir;\n    private double initialStepBoundFactor;\n    private double costRelativeTolerance;\n    private double parRelativeTolerance;\n    private double orthoTolerance;\n    private double qrRankingThreshold;\n    /**\n     * Set the desired relative error in the sum of squares.\n     * <p>This setting is used only if the {@link #setConvergenceChecker vectorial\n     * convergence checker} is set to null.</p>\n     * @param costRelativeTolerance desired relative error in the sum of squares\n     */\n    public void setCostRelativeTolerance(double costRelativeTolerance);\n    /**\n     * Set the desired relative error in the approximate solution parameters.\n     * <p>This setting is used only if the {@link #setConvergenceChecker vectorial\n     * convergence checker} is set to null.</p>\n     * @param parRelativeTolerance desired relative error\n     * in the approximate solution parameters\n     */\n    public void setParRelativeTolerance(double parRelativeTolerance);\n    /** {@inheritDoc} */\n    @Override\n    protected VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;\n    /**\n     * Set the desired max cosine on the orthogonality.\n     * <p>This setting is always used, regardless of the {@link #setConvergenceChecker\n     * vectorial convergence checker} being null or non-null.</p>\n     * @param orthoTolerance desired max cosine on the orthogonality\n     * between the function vector and the columns of the jacobian\n     */\n    public void setOrthoTolerance(double orthoTolerance);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  private void minpackTest(MinpackFunction function, boolean exceptionExpected) {\n      LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n      optimizer.setMaxIterations(100 * (function.getN() + 1));\n      optimizer.setCostRelativeTolerance(Math.sqrt(2.22044604926e-16));\n      optimizer.setParRelativeTolerance(Math.sqrt(2.22044604926e-16));\n      optimizer.setOrthoTolerance(2.22044604926e-16);\n//      assertTrue(function.checkTheoreticalStartCost(optimizer.getRMS()));\n      try {\n          VectorialPointValuePair optimum =\n              optimizer.optimize(function,\n                                 function.getTarget(), function.getWeight(),\n                                 function.getStartPoint());\n          assertFalse(exceptionExpected);\n          function.checkTheoreticalMinCost(optimizer.getRMS());\n          function.checkTheoreticalMinParams(optimum);\n      } catch (OptimizationException lsse) {\n          assertTrue(exceptionExpected);\n      } catch (FunctionEvaluationException fe) {\n          assertTrue(exceptionExpected);\n      }\n  }\n    private static double[] buildChebyquadArray(int n, double factor) {\n      double[] array = new double[n];\n      double inv = factor / (n + 1);\n      for (int i = 0; i < n; ++i) {\n        array[i] = (i + 1) * inv;\n      }\n      return array;\n    }\n  public void testMinpackJennrichSampson() {\n    minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },\n                                            64.5856498144943, 11.1517793413499,\n                                            new double[] {\n //                                            0.2578330049, 0.257829976764542\n                                               0.2578199266368004, 0.25782997676455244\n                                            }), false);\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Base class for implementing least squares optimizers.\n * <p>This base class handles the boilerplate methods associated to thresholds\n * settings, jacobian and error estimation.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n *\n */\npublic abstract class AbstractLeastSquaresOptimizer implements DifferentiableMultivariateVectorialOptimizer {\n    public static final int DEFAULT_MAX_ITERATIONS = 100;\n    /** {@inheritDoc} */\n    public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,\n                                            final double[] target, final double[] weights,\n                                            final double[] startPoint)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;\n    /**\n     * Get a Chi-Square-like value assuming the N residuals follow N\n     * distinct normal distributions centered on 0 and whose variances are\n     * the reciprocal of the weights.\n     * @return chi-square value\n     */\n    public double getChiSquare();\n    /**\n     * Get the covariance matrix of optimized parameters.\n     * @return covariance matrix\n     * @exception FunctionEvaluationException if the function jacobian cannot\n     * be evaluated\n     * @exception OptimizationException if the covariance matrix\n     * cannot be computed (singular problem)\n     */\n    public double[][] getCovariances()\n        throws FunctionEvaluationException, OptimizationException;\n    /**\n     * Guess the errors in optimized parameters.\n     * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>\n     * @return errors in optimized parameters\n     * @exception FunctionEvaluationException if the function jacobian cannot b evaluated\n     * @exception OptimizationException if the covariances matrix cannot be computed\n     * or the number of degrees of freedom is not positive (number of measurements\n     * lesser or equal to number of parameters)\n     */\n    public double[] guessParametersErrors()\n        throws FunctionEvaluationException, OptimizationException;\n    /** {@inheritDoc} */\n    public void setMaxIterations(int maxIterations);\n    /**\n     * Update the residuals array and cost function value.\n     * @exception FunctionEvaluationException if the function cannot be evaluated\n     * or its dimension doesn't match problem dimension or maximal number of\n     * of evaluations is exceeded\n     */\n    protected void updateResidualsAndCost()\n        throws FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public int getJacobianEvaluations();\n    /**\n     * Get the Root Mean Square value.\n     * Get the Root Mean Square value, i.e. the root of the arithmetic\n     * mean of the square of all weighted residuals. This is related to the\n     * criterion that is minimized by the optimizer as follows: if\n     * <em>c</em> if the criterion, and <em>n</em> is the number of\n     * measurements, then the RMS is <em>sqrt (c/n)</em>.\n     *\n     * @return RMS value\n     */\n    public double getRMS();\n    /** {@inheritDoc} */\n    public int getEvaluations();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Base class for implementing least squares optimizers.\n * <p>This base class handles the boilerplate methods associated to thresholds\n * settings, jacobian and error estimation.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n *\n */\npublic abstract class AbstractLeastSquaresOptimizer implements DifferentiableMultivariateVectorialOptimizer {\n    public static final int DEFAULT_MAX_ITERATIONS = 100;\n    /** {@inheritDoc} */\n    public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,\n                                            final double[] target, final double[] weights,\n                                            final double[] startPoint)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;\n    /**\n     * Get a Chi-Square-like value assuming the N residuals follow N\n     * distinct normal distributions centered on 0 and whose variances are\n     * the reciprocal of the weights.\n     * @return chi-square value\n     */\n    public double getChiSquare();\n    /**\n     * Get the covariance matrix of optimized parameters.\n     * @return covariance matrix\n     * @exception FunctionEvaluationException if the function jacobian cannot\n     * be evaluated\n     * @exception OptimizationException if the covariance matrix\n     * cannot be computed (singular problem)\n     */\n    public double[][] getCovariances()\n        throws FunctionEvaluationException, OptimizationException;\n    /**\n     * Guess the errors in optimized parameters.\n     * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>\n     * @return errors in optimized parameters\n     * @exception FunctionEvaluationException if the function jacobian cannot b evaluated\n     * @exception OptimizationException if the covariances matrix cannot be computed\n     * or the number of degrees of freedom is not positive (number of measurements\n     * lesser or equal to number of parameters)\n     */\n    public double[] guessParametersErrors()\n        throws FunctionEvaluationException, OptimizationException;\n    /** {@inheritDoc} */\n    public void setMaxIterations(int maxIterations);\n    /**\n     * Update the residuals array and cost function value.\n     * @exception FunctionEvaluationException if the function cannot be evaluated\n     * or its dimension doesn't match problem dimension or maximal number of\n     * of evaluations is exceeded\n     */\n    protected void updateResidualsAndCost()\n        throws FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public int getJacobianEvaluations();\n    /**\n     * Get the Root Mean Square value.\n     * Get the Root Mean Square value, i.e. the root of the arithmetic\n     * mean of the square of all weighted residuals. This is related to the\n     * criterion that is minimized by the optimizer as follows: if\n     * <em>c</em> if the criterion, and <em>n</em> is the number of\n     * measurements, then the RMS is <em>sqrt (c/n)</em>.\n     *\n     * @return RMS value\n     */\n    public double getRMS();\n    /** {@inheritDoc} */\n    public int getEvaluations();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  extends TestCase {\n    private void checkEstimate(DifferentiableMultivariateVectorialFunction problem,\n                               double initialStepBoundFactor, int maxCostEval,\n                               double costRelativeTolerance, double parRelativeTolerance,\n                               double orthoTolerance, boolean shouldFail) {\n        try {\n            LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n            optimizer.setInitialStepBoundFactor(initialStepBoundFactor);\n            optimizer.setMaxIterations(maxCostEval);\n            optimizer.setCostRelativeTolerance(costRelativeTolerance);\n            optimizer.setParRelativeTolerance(parRelativeTolerance);\n            optimizer.setOrthoTolerance(orthoTolerance);\n            optimizer.optimize(problem, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\n                               new double[] { 98.680, 47.345 });\n            assertTrue(! shouldFail);\n        } catch (OptimizationException ee) {\n            assertTrue(shouldFail);\n        } catch (FunctionEvaluationException ee) {\n            assertTrue(shouldFail);\n        } catch (Exception e) {\n            fail(\"wrong exception type caught\");\n        }\n    }\n        private double[][] jacobian(double[] point) {\n\n            int n = points.size();\n            Point2D.Double center = new Point2D.Double(point[0], point[1]);\n\n            // gradient of the optimal radius\n            double dRdX = 0;\n            double dRdY = 0;\n            for (Point2D.Double pk : points) {\n                double dk = pk.distance(center);\n                dRdX += (center.x - pk.x) / dk;\n                dRdY += (center.y - pk.y) / dk;\n            }\n            dRdX /= n;\n            dRdY /= n;\n\n            // jacobian of the radius residuals\n            double[][] jacobian = new double[n][2];\n            for (int i = 0; i < n; ++i) {\n                Point2D.Double pi = points.get(i);\n                double di   = pi.distance(center);\n                jacobian[i][0] = (center.x - pi.x) / di - dRdX;\n                jacobian[i][1] = (center.y - pi.y) / di - dRdY;\n            }\n\n            return jacobian;\n\n        }\n        private double[][] jacobian(double[] variables) {\n            double[][] jacobian = new double[x.size()][3];\n            for (int i = 0; i < jacobian.length; ++i) {\n                jacobian[i][0] = x.get(i) * x.get(i);\n                jacobian[i][1] = x.get(i);\n                jacobian[i][2] = 1.0;\n            }\n            return jacobian;\n        }\n    public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {\n        Circle circle = new Circle();\n        circle.addPoint( 30.0,  68.0);\n        circle.addPoint( 50.0,  -6.0);\n        circle.addPoint(110.0, -20.0);\n        circle.addPoint( 35.0,  15.0);\n        circle.addPoint( 45.0,  97.0);\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\n                               new double[] { 98.680, 47.345 });\n        assertTrue(optimizer.getEvaluations() < 10);\n        assertTrue(optimizer.getJacobianEvaluations() < 10);\n        double rms = optimizer.getRMS();\n        assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);\n        Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);\n        assertEquals(96.07590211815305, center.x,      1.0e-10);\n        assertEquals(48.13516790438953, center.y,      1.0e-10);\n        double[][] cov = optimizer.getCovariances();\n        assertEquals(1.839, cov[0][0], 0.001);\n        assertEquals(0.731, cov[0][1], 0.001);\n        assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        assertEquals(0.786, cov[1][1], 0.001);\n        double[] errors = optimizer.guessParametersErrors();\n        assertEquals(1.384, errors[0], 0.001);\n        assertEquals(0.905, errors[1], 0.001);\n\n        // add perfect measurements and check errors are reduced\n        double  r = circle.getRadius(center);\n        for (double d= 0; d < 2 * Math.PI; d += 0.01) {\n            circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));\n        }\n        double[] target = new double[circle.getN()];\n        Arrays.fill(target, 0.0);\n        double[] weights = new double[circle.getN()];\n        Arrays.fill(weights, 2.0);\n        optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });\n        cov = optimizer.getCovariances();\n        assertEquals(0.0016, cov[0][0], 0.001);\n        assertEquals(3.2e-7, cov[0][1], 1.0e-9);\n        assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        assertEquals(0.0016, cov[1][1], 0.001);\n        errors = optimizer.guessParametersErrors();\n        assertEquals(0.004, errors[0], 0.001);\n        assertEquals(0.004, errors[1], 0.001);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class BrentOptimizer extends AbstractUnivariateRealOptimizer {\n    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException;\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException;\n    /**\n     * Perform the optimization.\n     *\n     * @return the optimum.\n     */\n    protected double doOptimize()\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class BrentOptimizer extends AbstractUnivariateRealOptimizer {\n    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException;\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException;\n    /**\n     * Perform the optimization.\n     *\n     * @return the optimum.\n     */\n    protected double doOptimize()\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testQuinticMin() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            fail(\"an exception should have been thrown\");\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n        try {\n            minimizer.getOptimaValues();\n            fail(\"an exception should have been thrown\");\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561270319131, result, 1.0e-13);\n        assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);\n        assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n        }\n        assertTrue(minimizer.getEvaluations()    >= 120);\n        assertTrue(minimizer.getEvaluations()    <= 170);\n        assertTrue(minimizer.getIterationCount() >= 120);\n        assertTrue(minimizer.getIterationCount() <= 170);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Special implementation of the {@link UnivariateRealOptimizer} interface adding\n * multi-start features to an existing optimizer.\n * <p>\n * This class wraps a classical optimizer to use it several times in\n * turn with different starting points in order to avoid being trapped\n * into a local extremum when looking for a global one.\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class MultiStartUnivariateRealOptimizer implements UnivariateRealOptimizer {\n    private static final long serialVersionUID = 5983375963110961019L;\n    private final UnivariateRealOptimizer optimizer;\n    private int maxIterations;\n    private int maxEvaluations;\n    private int totalIterations;\n    private int totalEvaluations;\n    private int starts;\n    private RandomGenerator generator;\n    private double[] optima;\n    private double[] optimaValues;\n    /** {@inheritDoc} */\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n                           final double min, final double max, final double startValue)\n            throws ConvergenceException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public double getRelativeAccuracy();\n    /** {@inheritDoc} */\n    public double getFunctionValue();\n    /** {@inheritDoc} */\n    public double getResult();\n    /** {@inheritDoc} */\n    public double getAbsoluteAccuracy();\n    /** {@inheritDoc} */\n    public void setAbsoluteAccuracy(double accuracy);\n    /** {@inheritDoc} */\n    public void setRelativeAccuracy(double accuracy);\n    /** Get all the optima found during the last call to {@link\n     * #optimize(UnivariateRealFunction, GoalType, double, double) optimize}.\n     * <p>The optimizer stores all the optima found during a set of\n     * restarts. The {@link #optimize(UnivariateRealFunction, GoalType,\n     * double, double) optimize} method returns the best point only. This\n     * method returns all the points found at the end of each starts,\n     * including the best one already returned by the {@link\n     * #optimize(UnivariateRealFunction, GoalType, double, double) optimize}\n     * method.\n     * </p>\n     * <p>\n     * The returned array as one element for each start as specified\n     * in the constructor. It is ordered with the results from the\n     * runs that did converge first, sorted from best to worst\n     * objective value (i.e in ascending order if minimizing and in\n     * descending order if maximizing), followed by Double.NaN elements\n     * corresponding to the runs that did not converge. This means all\n     * elements will be NaN if the {@link #optimize(UnivariateRealFunction,\n     * GoalType, double, double) optimize} method did throw a {@link\n     * ConvergenceException ConvergenceException}). This also means that\n     * if the first element is not NaN, it is the best point found across\n     * all starts.</p>\n     * @return array containing the optima\n     * @exception IllegalStateException if {@link #optimize(UnivariateRealFunction,\n     * GoalType, double, double) optimize} has not been called\n     * @see #getOptimaValues()\n     */\n    public double[] getOptima() throws IllegalStateException;\n    /** {@inheritDoc} */\n    public int getIterationCount();\n    /** {@inheritDoc} */\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n                           final double min, final double max)\n        throws ConvergenceException,\n            FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public int getEvaluations();\n    /** Get all the function values at optima found during the last call to {@link\n     * #optimize(UnivariateRealFunction, GoalType, double, double) optimize}.\n     * <p>\n     * The returned array as one element for each start as specified\n     * in the constructor. It is ordered with the results from the\n     * runs that did converge first, sorted from best to worst\n     * objective value (i.e in ascending order if minimizing and in\n     * descending order if maximizing), followed by Double.NaN elements\n     * corresponding to the runs that did not converge. This means all\n     * elements will be NaN if the {@link #optimize(UnivariateRealFunction,\n     * GoalType, double, double) optimize} method did throw a {@link\n     * ConvergenceException ConvergenceException}). This also means that\n     * if the first element is not NaN, it is the best point found across\n     * all starts.</p>\n     * @return array containing the optima\n     * @exception IllegalStateException if {@link #optimize(UnivariateRealFunction,\n     * GoalType, double, double) optimize} has not been called\n     * @see #getOptima()\n     */\n    public double[] getOptimaValues() throws IllegalStateException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Special implementation of the {@link UnivariateRealOptimizer} interface adding\n * multi-start features to an existing optimizer.\n * <p>\n * This class wraps a classical optimizer to use it several times in\n * turn with different starting points in order to avoid being trapped\n * into a local extremum when looking for a global one.\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class MultiStartUnivariateRealOptimizer implements UnivariateRealOptimizer {\n    private static final long serialVersionUID = 5983375963110961019L;\n    private final UnivariateRealOptimizer optimizer;\n    private int maxIterations;\n    private int maxEvaluations;\n    private int totalIterations;\n    private int totalEvaluations;\n    private int starts;\n    private RandomGenerator generator;\n    private double[] optima;\n    private double[] optimaValues;\n    /** {@inheritDoc} */\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n                           final double min, final double max, final double startValue)\n            throws ConvergenceException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public double getRelativeAccuracy();\n    /** {@inheritDoc} */\n    public double getFunctionValue();\n    /** {@inheritDoc} */\n    public double getResult();\n    /** {@inheritDoc} */\n    public double getAbsoluteAccuracy();\n    /** {@inheritDoc} */\n    public void setAbsoluteAccuracy(double accuracy);\n    /** {@inheritDoc} */\n    public void setRelativeAccuracy(double accuracy);\n    /** Get all the optima found during the last call to {@link\n     * #optimize(UnivariateRealFunction, GoalType, double, double) optimize}.\n     * <p>The optimizer stores all the optima found during a set of\n     * restarts. The {@link #optimize(UnivariateRealFunction, GoalType,\n     * double, double) optimize} method returns the best point only. This\n     * method returns all the points found at the end of each starts,\n     * including the best one already returned by the {@link\n     * #optimize(UnivariateRealFunction, GoalType, double, double) optimize}\n     * method.\n     * </p>\n     * <p>\n     * The returned array as one element for each start as specified\n     * in the constructor. It is ordered with the results from the\n     * runs that did converge first, sorted from best to worst\n     * objective value (i.e in ascending order if minimizing and in\n     * descending order if maximizing), followed by Double.NaN elements\n     * corresponding to the runs that did not converge. This means all\n     * elements will be NaN if the {@link #optimize(UnivariateRealFunction,\n     * GoalType, double, double) optimize} method did throw a {@link\n     * ConvergenceException ConvergenceException}). This also means that\n     * if the first element is not NaN, it is the best point found across\n     * all starts.</p>\n     * @return array containing the optima\n     * @exception IllegalStateException if {@link #optimize(UnivariateRealFunction,\n     * GoalType, double, double) optimize} has not been called\n     * @see #getOptimaValues()\n     */\n    public double[] getOptima() throws IllegalStateException;\n    /** {@inheritDoc} */\n    public int getIterationCount();\n    /** {@inheritDoc} */\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n                           final double min, final double max)\n        throws ConvergenceException,\n            FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public int getEvaluations();\n    /** Get all the function values at optima found during the last call to {@link\n     * #optimize(UnivariateRealFunction, GoalType, double, double) optimize}.\n     * <p>\n     * The returned array as one element for each start as specified\n     * in the constructor. It is ordered with the results from the\n     * runs that did converge first, sorted from best to worst\n     * objective value (i.e in ascending order if minimizing and in\n     * descending order if maximizing), followed by Double.NaN elements\n     * corresponding to the runs that did not converge. This means all\n     * elements will be NaN if the {@link #optimize(UnivariateRealFunction,\n     * GoalType, double, double) optimize} method did throw a {@link\n     * ConvergenceException ConvergenceException}). This also means that\n     * if the first element is not NaN, it is the best point found across\n     * all starts.</p>\n     * @return array containing the optima\n     * @exception IllegalStateException if {@link #optimize(UnivariateRealFunction,\n     * GoalType, double, double) optimize} has not been called\n     * @see #getOptima()\n     */\n    public double[] getOptimaValues() throws IllegalStateException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testQuinticMin() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            fail(\"an exception should have been thrown\");\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n        try {\n            minimizer.getOptimaValues();\n            fail(\"an exception should have been thrown\");\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);\n        assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);\n        assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n        }\n\n        assertTrue(minimizer.getEvaluations()    >= 510);\n        assertTrue(minimizer.getEvaluations()    <= 530);\n        assertTrue(minimizer.getIterationCount() >= 150);\n        assertTrue(minimizer.getIterationCount() <= 170);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n *\n */\npublic class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n    private int solvedCols;\n    private double[] diagR;\n    private double[] jacNorm;\n    private double[] beta;\n    private int[] permutation;\n    private int rank;\n    private double lmPar;\n    private double[] lmDir;\n    private double initialStepBoundFactor;\n    private double costRelativeTolerance;\n    private double parRelativeTolerance;\n    private double orthoTolerance;\n    /** {@inheritDoc} */\n    @Override\n    protected VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;\n    /**\n     * Set the positive input variable used in determining the initial step bound.\n     * This bound is set to the product of initialStepBoundFactor and the euclidean\n     * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most\n     * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally\n     * recommended value.\n     *\n     * @param initialStepBoundFactor initial step bound factor\n     */\n    public void setInitialStepBoundFactor(double initialStepBoundFactor);\n    /**\n     * Set the desired relative error in the sum of squares.\n     * <p>This setting is used only if the {@link #setConvergenceChecker vectorial\n     * convergence checker} is set to null.</p>\n     * @param costRelativeTolerance desired relative error in the sum of squares\n     */\n    public void setCostRelativeTolerance(double costRelativeTolerance);\n    /**\n     * Set the desired relative error in the approximate solution parameters.\n     * <p>This setting is used only if the {@link #setConvergenceChecker vectorial\n     * convergence checker} is set to null.</p>\n     * @param parRelativeTolerance desired relative error\n     * in the approximate solution parameters\n     */\n    public void setParRelativeTolerance(double parRelativeTolerance);\n    /**\n     * Set the desired max cosine on the orthogonality.\n     * <p>This setting is always used, regardless of the {@link #setConvergenceChecker\n     * vectorial convergence checker} being null or non-null.</p>\n     * @param orthoTolerance desired max cosine on the orthogonality\n     * between the function vector and the columns of the jacobian\n     */\n    public void setOrthoTolerance(double orthoTolerance);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n *\n */\npublic class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n    private int solvedCols;\n    private double[] diagR;\n    private double[] jacNorm;\n    private double[] beta;\n    private int[] permutation;\n    private int rank;\n    private double lmPar;\n    private double[] lmDir;\n    private double initialStepBoundFactor;\n    private double costRelativeTolerance;\n    private double parRelativeTolerance;\n    private double orthoTolerance;\n    /** {@inheritDoc} */\n    @Override\n    protected VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;\n    /**\n     * Set the positive input variable used in determining the initial step bound.\n     * This bound is set to the product of initialStepBoundFactor and the euclidean\n     * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most\n     * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally\n     * recommended value.\n     *\n     * @param initialStepBoundFactor initial step bound factor\n     */\n    public void setInitialStepBoundFactor(double initialStepBoundFactor);\n    /**\n     * Set the desired relative error in the sum of squares.\n     * <p>This setting is used only if the {@link #setConvergenceChecker vectorial\n     * convergence checker} is set to null.</p>\n     * @param costRelativeTolerance desired relative error in the sum of squares\n     */\n    public void setCostRelativeTolerance(double costRelativeTolerance);\n    /**\n     * Set the desired relative error in the approximate solution parameters.\n     * <p>This setting is used only if the {@link #setConvergenceChecker vectorial\n     * convergence checker} is set to null.</p>\n     * @param parRelativeTolerance desired relative error\n     * in the approximate solution parameters\n     */\n    public void setParRelativeTolerance(double parRelativeTolerance);\n    /**\n     * Set the desired max cosine on the orthogonality.\n     * <p>This setting is always used, regardless of the {@link #setConvergenceChecker\n     * vectorial convergence checker} being null or non-null.</p>\n     * @param orthoTolerance desired max cosine on the orthogonality\n     * between the function vector and the columns of the jacobian\n     */\n    public void setOrthoTolerance(double orthoTolerance);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  private void minpackTest(MinpackFunction function, boolean exceptionExpected) {\n      LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n      optimizer.setMaxIterations(100 * (function.getN() + 1));\n      optimizer.setCostRelativeTolerance(Math.sqrt(2.22044604926e-16));\n      optimizer.setParRelativeTolerance(Math.sqrt(2.22044604926e-16));\n      optimizer.setOrthoTolerance(2.22044604926e-16);\n//      assertTrue(function.checkTheoreticalStartCost(optimizer.getRMS()));\n      try {\n          VectorialPointValuePair optimum =\n              optimizer.optimize(function,\n                                 function.getTarget(), function.getWeight(),\n                                 function.getStartPoint());\n          assertFalse(exceptionExpected);\n          function.checkTheoreticalMinCost(optimizer.getRMS());\n          function.checkTheoreticalMinParams(optimum);\n      } catch (OptimizationException lsse) {\n          assertTrue(exceptionExpected);\n      } catch (FunctionEvaluationException fe) {\n          assertTrue(exceptionExpected);\n      }\n  }\n    private static double[] buildChebyquadArray(int n, double factor) {\n      double[] array = new double[n];\n      double inv = factor / (n + 1);\n      for (int i = 0; i < n; ++i) {\n        array[i] = (i + 1) * inv;\n      }\n      return array;\n    }\n  public void testMinpackJennrichSampson() {\n    minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },\n                                            64.5856498144943, 11.1517793413499,\n                                            new double[] {\n                                             0.2578330049, 0.257829976764542\n                                            }), false);\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Computes Pearson's product-moment correlation coefficients for pairs of arrays\n * or columns of a matrix.\n *\n * <p>The constructors that take <code>RealMatrix</code> or\n * <code>double[][]</code> arguments generate correlation matrices.  The\n * columns of the input matrices are assumed to represent variable values.\n * Correlations are given by the formula</p>\n * <code>cor(X, Y) = &Sigma;[(x<sub>i</sub> - E(X))(y<sub>i</sub> - E(Y))] / [(n - 1)s(X)s(Y)]</code>\n * where <code>E(X)</code> is the mean of <code>X</code>, <code>E(Y)</code>\n * is the mean of the <code>Y</code> values and s(X), s(Y) are standard deviations.\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class PearsonsCorrelation {\n    private final RealMatrix correlationMatrix;\n    private final int nObs;\n    /**\n     * Returns a matrix of p-values associated with the (two-sided) null\n     * hypothesis that the corresponding correlation coefficient is zero.\n     * <p><code>getCorrelationPValues().getEntry(i,j)</code> is the probability\n     * that a random variable distributed as <code>t<sub>n-2</sub></code> takes\n     * a value with absolute value greater than or equal to <br>\n     * <code>|r|((n - 2) / (1 - r<sup>2</sup>))<sup>1/2</sup></code></p>\n     * <p>The values in the matrix are sometimes referred to as the\n     * <i>significance</i> of the corresponding correlation coefficients.</p>\n     *\n     * @return matrix of p-values\n     * @throws MathException if an error occurs estimating probabilities\n     */\n    public RealMatrix getCorrelationPValues() throws MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Computes Pearson's product-moment correlation coefficients for pairs of arrays\n * or columns of a matrix.\n *\n * <p>The constructors that take <code>RealMatrix</code> or\n * <code>double[][]</code> arguments generate correlation matrices.  The\n * columns of the input matrices are assumed to represent variable values.\n * Correlations are given by the formula</p>\n * <code>cor(X, Y) = &Sigma;[(x<sub>i</sub> - E(X))(y<sub>i</sub> - E(Y))] / [(n - 1)s(X)s(Y)]</code>\n * where <code>E(X)</code> is the mean of <code>X</code>, <code>E(Y)</code>\n * is the mean of the <code>Y</code> values and s(X), s(Y) are standard deviations.\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class PearsonsCorrelation {\n    private final RealMatrix correlationMatrix;\n    private final int nObs;\n    /**\n     * Returns a matrix of p-values associated with the (two-sided) null\n     * hypothesis that the corresponding correlation coefficient is zero.\n     * <p><code>getCorrelationPValues().getEntry(i,j)</code> is the probability\n     * that a random variable distributed as <code>t<sub>n-2</sub></code> takes\n     * a value with absolute value greater than or equal to <br>\n     * <code>|r|((n - 2) / (1 - r<sup>2</sup>))<sup>1/2</sup></code></p>\n     * <p>The values in the matrix are sometimes referred to as the\n     * <i>significance</i> of the corresponding correlation coefficients.</p>\n     *\n     * @return matrix of p-values\n     * @throws MathException if an error occurs estimating probabilities\n     */\n    public RealMatrix getCorrelationPValues() throws MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testPValueNearZero() throws Exception {\n        /*\n         * Create a dataset that has r -> 1, p -> 0 as dimension increases.\n         * Prior to the fix for MATH-371, p vanished for dimension >= 14.\n         * Post fix, p-values diminish smoothly, vanishing at dimension = 127.\n         * Tested value is ~1E-303.\n         */\n        int dimension = 120; \n        double[][] data = new double[dimension][2];\n        for (int i = 0; i < dimension; i++) {\n            data[i][0] = i;\n            data[i][1] = i + 1/((double)i + 1);\n        }\n        PearsonsCorrelation corrInstance = new PearsonsCorrelation(data);\n        assertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Base class managing common boilerplate for all integrators.\n * @version $Id$\n * @since 2.0\n */\npublic abstract class AbstractIntegrator implements FirstOrderIntegrator {\n    private Collection<EventState> eventsStates;\n    private boolean statesInitialized;\n    private final String name;\n    private Incrementor evaluations;\n    private transient ExpandableStatefulODE expandable;\n    /** {@inheritDoc} */\n    public void addEventHandler(final EventHandler handler,\n                                final double maxCheckInterval,\n                                final double convergence,\n                                final int maxIterationCount);\n    /** {@inheritDoc} */\n    public void addStepHandler(final StepHandler handler);\n    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @exception NoBracketingException if the location of an event cannot be bracketed\n     * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MaxCountExceededException, DimensionMismatchException, NoBracketingException;\n    /** {@inheritDoc} */\n    public double integrate(final FirstOrderDifferentialEquations equations,\n                            final double t0, final double[] y0, final double t, final double[] y)\n        throws DimensionMismatchException, NumberIsTooSmallException,\n               MaxCountExceededException, NoBracketingException;\n    /** {@inheritDoc} */\n    public void addEventHandler(final EventHandler handler,\n                                final double maxCheckInterval,\n                                final double convergence,\n                                final int maxIterationCount,\n                                final UnivariateSolver solver);\n    public abstract void integrate(ExpandableStatefulODE equations, double t)\n        throws NumberIsTooSmallException, DimensionMismatchException,\n               MaxCountExceededException, NoBracketingException;\n\n    /** Compute the derivatives and check the number of evaluations.\n     * @param t current value of the independent <I>time</I> variable\n     * @param y array containing the current value of the state vector\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n     * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n     */\n    public void computeDerivatives(final double t, final double[] y, final double[] yDot)\n        throws MaxCountExceededException, DimensionMismatchException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Base class managing common boilerplate for all integrators.\n * @version $Id$\n * @since 2.0\n */\npublic abstract class AbstractIntegrator implements FirstOrderIntegrator {\n    private Collection<EventState> eventsStates;\n    private boolean statesInitialized;\n    private final String name;\n    private Incrementor evaluations;\n    private transient ExpandableStatefulODE expandable;\n    /** {@inheritDoc} */\n    public void addEventHandler(final EventHandler handler,\n                                final double maxCheckInterval,\n                                final double convergence,\n                                final int maxIterationCount);\n    /** {@inheritDoc} */\n    public void addStepHandler(final StepHandler handler);\n    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @exception NoBracketingException if the location of an event cannot be bracketed\n     * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MaxCountExceededException, DimensionMismatchException, NoBracketingException;\n    /** {@inheritDoc} */\n    public double integrate(final FirstOrderDifferentialEquations equations,\n                            final double t0, final double[] y0, final double t, final double[] y)\n        throws DimensionMismatchException, NumberIsTooSmallException,\n               MaxCountExceededException, NoBracketingException;\n    /** {@inheritDoc} */\n    public void addEventHandler(final EventHandler handler,\n                                final double maxCheckInterval,\n                                final double convergence,\n                                final int maxIterationCount,\n                                final UnivariateSolver solver);\n    public abstract void integrate(ExpandableStatefulODE equations, double t)\n        throws NumberIsTooSmallException, DimensionMismatchException,\n               MaxCountExceededException, NoBracketingException;\n\n    /** Compute the derivatives and check the number of evaluations.\n     * @param t current value of the independent <I>time</I> variable\n     * @param y array containing the current value of the state vector\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n     * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n     */\n    public void computeDerivatives(final double t, final double[] y, final double[] yDot)\n        throws MaxCountExceededException, DimensionMismatchException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testEventsScheduling() {\n\n      FirstOrderDifferentialEquations sincos = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return 2;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              yDot[0] =  y[1];\n              yDot[1] = -y[0];\n          }\n\n      };\n\n      SchedulingChecker sinChecker = new SchedulingChecker(0); // events at 0, PI, 2PI ...\n      SchedulingChecker cosChecker = new SchedulingChecker(1); // events at PI/2, 3PI/2, 5PI/2 ...\n\n      FirstOrderIntegrator integ =\n              new DormandPrince853Integrator(0.001, 1.0, 1.0e-12, 0.0);\n      integ.addEventHandler(sinChecker, 0.01, 1.0e-7, 100);\n      integ.addStepHandler(sinChecker);\n      integ.addEventHandler(cosChecker, 0.01, 1.0e-7, 100);\n      integ.addStepHandler(cosChecker);\n      double   t0 = 0.5;\n      double[] y0 = new double[] { FastMath.sin(t0), FastMath.cos(t0) };\n      double   t  = 10.0;\n      double[] y  = new double[2];\n      integ.integrate(sincos, t0, y0, t, y);\n\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implements the <a href=\"http://mathworld.wolfram.com/Bisection.html\">\n * bisection algorithm</a> for finding zeros of univariate real functions.\n * <p>\n * The function should be continuous but not necessarily smooth.</p>\n *\n * @version $Revision$ $Date$\n */\npublic class BisectionSolver extends UnivariateRealSolverImpl {\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public double solve(final UnivariateRealFunction f, double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implements the <a href=\"http://mathworld.wolfram.com/Bisection.html\">\n * bisection algorithm</a> for finding zeros of univariate real functions.\n * <p>\n * The function should be continuous but not necessarily smooth.</p>\n *\n * @version $Revision$ $Date$\n */\npublic class BisectionSolver extends UnivariateRealSolverImpl {\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public double solve(final UnivariateRealFunction f, double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testMath369() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BisectionSolver();\n        assertEquals(Math.PI, solver.solve(f, 3.0, 3.2, 3.1), solver.getAbsoluteAccuracy());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class implements the common part of all fixed step Runge-Kutta\n * integrators for Ordinary Differential Equations.\n *\n * <p>These methods are explicit Runge-Kutta methods, their Butcher\n * arrays are as follows :\n * <pre>\n *    0  |\n *   c2  | a21\n *   c3  | a31  a32\n *   ... |        ...\n *   cs  | as1  as2  ...  ass-1\n *       |--------------------------\n *       |  b1   b2  ...   bs-1  bs\n * </pre>\n * </p>\n *\n * @see EulerIntegrator\n * @see ClassicalRungeKuttaIntegrator\n * @see GillIntegrator\n * @see MidpointIntegrator\n * @version $Revision$ $Date$\n * @since 1.2\n */\npublic abstract class RungeKuttaIntegrator extends AbstractIntegrator {\n    private final double[] c;\n    private final double[][] a;\n    private final double[] b;\n    private final RungeKuttaStepInterpolator prototype;\n    private final double step;\n  /** {@inheritDoc} */\n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException;\n}\n/**\n * This class implements the common part of all embedded Runge-Kutta\n * integrators for Ordinary Differential Equations.\n *\n * <p>These methods are embedded explicit Runge-Kutta methods with two\n * sets of coefficients allowing to estimate the error, their Butcher\n * arrays are as follows :\n * <pre>\n *    0  |\n *   c2  | a21\n *   c3  | a31  a32\n *   ... |        ...\n *   cs  | as1  as2  ...  ass-1\n *       |--------------------------\n *       |  b1   b2  ...   bs-1  bs\n *       |  b'1  b'2 ...   b's-1 b's\n * </pre>\n * </p>\n *\n * <p>In fact, we rather use the array defined by ej = bj - b'j to\n * compute directly the error rather than computing two estimates and\n * then comparing them.</p>\n *\n * <p>Some methods are qualified as <i>fsal</i> (first same as last)\n * methods. This means the last evaluation of the derivatives in one\n * step is the same as the first in the next step. Then, this\n * evaluation can be reused from one step to the next one and the cost\n * of such a method is really s-1 evaluations despite the method still\n * has s stages. This behaviour is true only for successful steps, if\n * the step is rejected after the error estimation phase, no\n * evaluation is saved. For an <i>fsal</i> method, we have cs = 1 and\n * asi = bi for all i.</p>\n *\n * @version $Revision$ $Date$\n * @since 1.2\n */\npublic abstract class EmbeddedRungeKuttaIntegrator\n  extends AdaptiveStepsizeIntegrator {\n    private final boolean fsal;\n    private final double[] c;\n    private final double[][] a;\n    private final double[] b;\n    private final RungeKuttaStepInterpolator prototype;\n    private final double exp;\n    private double safety;\n    private double minReduction;\n    private double maxGrowth;\n  /** {@inheritDoc} */\n  @Override\n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class implements the common part of all fixed step Runge-Kutta\n * integrators for Ordinary Differential Equations.\n *\n * <p>These methods are explicit Runge-Kutta methods, their Butcher\n * arrays are as follows :\n * <pre>\n *    0  |\n *   c2  | a21\n *   c3  | a31  a32\n *   ... |        ...\n *   cs  | as1  as2  ...  ass-1\n *       |--------------------------\n *       |  b1   b2  ...   bs-1  bs\n * </pre>\n * </p>\n *\n * @see EulerIntegrator\n * @see ClassicalRungeKuttaIntegrator\n * @see GillIntegrator\n * @see MidpointIntegrator\n * @version $Revision$ $Date$\n * @since 1.2\n */\npublic abstract class RungeKuttaIntegrator extends AbstractIntegrator {\n    private final double[] c;\n    private final double[][] a;\n    private final double[] b;\n    private final RungeKuttaStepInterpolator prototype;\n    private final double step;\n  /** {@inheritDoc} */\n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException;\n}\n/**\n * This class implements the common part of all embedded Runge-Kutta\n * integrators for Ordinary Differential Equations.\n *\n * <p>These methods are embedded explicit Runge-Kutta methods with two\n * sets of coefficients allowing to estimate the error, their Butcher\n * arrays are as follows :\n * <pre>\n *    0  |\n *   c2  | a21\n *   c3  | a31  a32\n *   ... |        ...\n *   cs  | as1  as2  ...  ass-1\n *       |--------------------------\n *       |  b1   b2  ...   bs-1  bs\n *       |  b'1  b'2 ...   b's-1 b's\n * </pre>\n * </p>\n *\n * <p>In fact, we rather use the array defined by ej = bj - b'j to\n * compute directly the error rather than computing two estimates and\n * then comparing them.</p>\n *\n * <p>Some methods are qualified as <i>fsal</i> (first same as last)\n * methods. This means the last evaluation of the derivatives in one\n * step is the same as the first in the next step. Then, this\n * evaluation can be reused from one step to the next one and the cost\n * of such a method is really s-1 evaluations despite the method still\n * has s stages. This behaviour is true only for successful steps, if\n * the step is rejected after the error estimation phase, no\n * evaluation is saved. For an <i>fsal</i> method, we have cs = 1 and\n * asi = bi for all i.</p>\n *\n * @version $Revision$ $Date$\n * @since 1.2\n */\npublic abstract class EmbeddedRungeKuttaIntegrator\n  extends AdaptiveStepsizeIntegrator {\n    private final boolean fsal;\n    private final double[] c;\n    private final double[][] a;\n    private final double[] b;\n    private final RungeKuttaStepInterpolator prototype;\n    private final double exp;\n    private double safety;\n    private double minReduction;\n    private double maxGrowth;\n  /** {@inheritDoc} */\n  @Override\n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  extends TestCase {\n  public void testMissedEndEvent() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implements the <a href=\"http://mathworld.wolfram.com/BrentsMethod.html\">\n * Brent algorithm</a> for  finding zeros of real univariate functions.\n * <p>\n * The function should be continuous but not necessarily smooth.</p>\n *\n * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n */\npublic class BrentSolver extends UnivariateRealSolverImpl {\n    private static final long serialVersionUID = 7694577816772532779L;\n    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     *\n     * @param f the function to solve\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max)\n        throws MaxIterationsExceededException,\n        FunctionEvaluationException;\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /**\n     * Find a zero starting search according to the three provided points.\n     * @param f the function to solve\n     * @param x0 old approximation for the root\n     * @param y0 function value at the approximation for the root\n     * @param x1 last calculated approximation for the root\n     * @param y1 function value at the last calculated approximation\n     * for the root\n     * @param x2 bracket point (must be set to x0 if no bracket point is\n     * known, this will force starting with linear interpolation)\n     * @param y2 function value at the bracket point.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     * the function\n     */\n    private double solve(final UnivariateRealFunction f,\n                         double x0, double y0,\n                         double x1, double y1,\n                         double x2, double y2)\n    throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implements the <a href=\"http://mathworld.wolfram.com/BrentsMethod.html\">\n * Brent algorithm</a> for  finding zeros of real univariate functions.\n * <p>\n * The function should be continuous but not necessarily smooth.</p>\n *\n * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n */\npublic class BrentSolver extends UnivariateRealSolverImpl {\n    private static final long serialVersionUID = 7694577816772532779L;\n    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     *\n     * @param f the function to solve\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max)\n        throws MaxIterationsExceededException,\n        FunctionEvaluationException;\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /**\n     * Find a zero starting search according to the three provided points.\n     * @param f the function to solve\n     * @param x0 old approximation for the root\n     * @param y0 function value at the approximation for the root\n     * @param x1 last calculated approximation for the root\n     * @param y1 function value at the last calculated approximation\n     * for the root\n     * @param x2 bracket point (must be set to x0 if no bracket point is\n     * known, this will force starting with linear interpolation)\n     * @param y2 function value at the bracket point.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     * the function\n     */\n    private double solve(final UnivariateRealFunction f,\n                         double x0, double y0,\n                         double x1, double y1,\n                         double x2, double y2)\n    throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testRootEndpoints() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n\n        // endpoint is root\n        double result = solver.solve(f, Math.PI, 4);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n\n        result = solver.solve(f, 3, Math.PI);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n\n        result = solver.solve(f, Math.PI, 4, 3.5);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n\n        result = solver.solve(f, 3, Math.PI, 3.07);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implements the <a href=\"http://mathworld.wolfram.com/BrentsMethod.html\">\n * Brent algorithm</a> for  finding zeros of real univariate functions.\n * <p>\n * The function should be continuous but not necessarily smooth.</p>\n *\n * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n */\npublic class BrentSolver extends UnivariateRealSolverImpl {\n    private static final long serialVersionUID = 7694577816772532779L;\n    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     *\n     * @param f the function to solve\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max)\n        throws MaxIterationsExceededException,\n        FunctionEvaluationException;\n    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /**\n     * Find a zero starting search according to the three provided points.\n     * @param f the function to solve\n     * @param x0 old approximation for the root\n     * @param y0 function value at the approximation for the root\n     * @param x1 last calculated approximation for the root\n     * @param y1 function value at the last calculated approximation\n     * for the root\n     * @param x2 bracket point (must be set to x0 if no bracket point is\n     * known, this will force starting with linear interpolation)\n     * @param y2 function value at the bracket point.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     * the function\n     */\n    private double solve(final UnivariateRealFunction f,\n                         double x0, double y0,\n                         double x1, double y1,\n                         double x2, double y2)\n    throws MaxIterationsExceededException, FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implements the <a href=\"http://mathworld.wolfram.com/BrentsMethod.html\">\n * Brent algorithm</a> for  finding zeros of real univariate functions.\n * <p>\n * The function should be continuous but not necessarily smooth.</p>\n *\n * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n */\npublic class BrentSolver extends UnivariateRealSolverImpl {\n    private static final long serialVersionUID = 7694577816772532779L;\n    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     *\n     * @param f the function to solve\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max)\n        throws MaxIterationsExceededException,\n        FunctionEvaluationException;\n    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /**\n     * Find a zero starting search according to the three provided points.\n     * @param f the function to solve\n     * @param x0 old approximation for the root\n     * @param y0 function value at the approximation for the root\n     * @param x1 last calculated approximation for the root\n     * @param y1 function value at the last calculated approximation\n     * for the root\n     * @param x2 bracket point (must be set to x0 if no bracket point is\n     * known, this will force starting with linear interpolation)\n     * @param y2 function value at the bracket point.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     * the function\n     */\n    private double solve(final UnivariateRealFunction f,\n                         double x0, double y0,\n                         double x1, double y1,\n                         double x2, double y2)\n    throws MaxIterationsExceededException, FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testBadEndpoints() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n        try {  // bad interval\n            solver.solve(f, 1, -1);\n            fail(\"Expecting IllegalArgumentException - bad interval\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {  // no bracket\n            solver.solve(f, 1, 1.5);\n            fail(\"Expecting IllegalArgumentException - non-bracketing\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {  // no bracket\n            solver.solve(f, 1, 1.5, 1.2);\n            fail(\"Expecting IllegalArgumentException - non-bracketing\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class implements the common part of all embedded Runge-Kutta\n * integrators for Ordinary Differential Equations.\n *\n * <p>These methods are embedded explicit Runge-Kutta methods with two\n * sets of coefficients allowing to estimate the error, their Butcher\n * arrays are as follows :\n * <pre>\n *    0  |\n *   c2  | a21\n *   c3  | a31  a32\n *   ... |        ...\n *   cs  | as1  as2  ...  ass-1\n *       |--------------------------\n *       |  b1   b2  ...   bs-1  bs\n *       |  b'1  b'2 ...   b's-1 b's\n * </pre>\n * </p>\n *\n * <p>In fact, we rather use the array defined by ej = bj - b'j to\n * compute directly the error rather than computing two estimates and\n * then comparing them.</p>\n *\n * <p>Some methods are qualified as <i>fsal</i> (first same as last)\n * methods. This means the last evaluation of the derivatives in one\n * step is the same as the first in the next step. Then, this\n * evaluation can be reused from one step to the next one and the cost\n * of such a method is really s-1 evaluations despite the method still\n * has s stages. This behaviour is true only for successful steps, if\n * the step is rejected after the error estimation phase, no\n * evaluation is saved. For an <i>fsal</i> method, we have cs = 1 and\n * asi = bi for all i.</p>\n *\n * @version $Revision$ $Date$\n * @since 1.2\n */\npublic abstract class EmbeddedRungeKuttaIntegrator\n  extends AdaptiveStepsizeIntegrator {\n    private final boolean fsal;\n    private final double[] c;\n    private final double[][] a;\n    private final double[] b;\n    private final RungeKuttaStepInterpolator prototype;\n    private final double exp;\n    private double safety;\n    private double minReduction;\n    private double maxGrowth;\n  /** {@inheritDoc} */\n  @Override\n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class implements the common part of all embedded Runge-Kutta\n * integrators for Ordinary Differential Equations.\n *\n * <p>These methods are embedded explicit Runge-Kutta methods with two\n * sets of coefficients allowing to estimate the error, their Butcher\n * arrays are as follows :\n * <pre>\n *    0  |\n *   c2  | a21\n *   c3  | a31  a32\n *   ... |        ...\n *   cs  | as1  as2  ...  ass-1\n *       |--------------------------\n *       |  b1   b2  ...   bs-1  bs\n *       |  b'1  b'2 ...   b's-1 b's\n * </pre>\n * </p>\n *\n * <p>In fact, we rather use the array defined by ej = bj - b'j to\n * compute directly the error rather than computing two estimates and\n * then comparing them.</p>\n *\n * <p>Some methods are qualified as <i>fsal</i> (first same as last)\n * methods. This means the last evaluation of the derivatives in one\n * step is the same as the first in the next step. Then, this\n * evaluation can be reused from one step to the next one and the cost\n * of such a method is really s-1 evaluations despite the method still\n * has s stages. This behaviour is true only for successful steps, if\n * the step is rejected after the error estimation phase, no\n * evaluation is saved. For an <i>fsal</i> method, we have cs = 1 and\n * asi = bi for all i.</p>\n *\n * @version $Revision$ $Date$\n * @since 1.2\n */\npublic abstract class EmbeddedRungeKuttaIntegrator\n  extends AdaptiveStepsizeIntegrator {\n    private final boolean fsal;\n    private final double[] c;\n    private final double[][] a;\n    private final double[] b;\n    private final RungeKuttaStepInterpolator prototype;\n    private final double exp;\n    private double safety;\n    private double minReduction;\n    private double maxGrowth;\n  /** {@inheritDoc} */\n  @Override\n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void polynomial() throws DerivativeException, IntegratorException {\n        TestProblem6 pb = new TestProblem6();\n        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n\n        for (int nSteps = 1; nSteps < 7; ++nSteps) {\n            AdamsMoultonIntegrator integ =\n                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);\n            TestProblemHandler handler = new TestProblemHandler(pb, integ);\n            integ.addStepHandler(handler);\n            integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                            pb.getFinalTime(), new double[pb.getDimension()]);\n            if (nSteps < 4) {\n                assertTrue(integ.getEvaluations() > 140);\n            } else {\n                assertTrue(integ.getEvaluations() < 90);\n            }\n        }\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Maintains a frequency distribution.\n * <p>\n * Accepts int, long, char or Comparable values.  New values added must be\n * comparable to those that have been added, otherwise the add method will\n * throw an IllegalArgumentException.</p>\n * <p>\n * Integer values (int, long, Integer, Long) are not distinguished by type --\n * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have\n * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>\n * <p>\n * char values are converted by <code>addValue</code> to Character instances.\n * As such, these values are not comparable to integral values, so attempts\n * to combine integral types with chars in a frequency distribution will fail.\n * </p>\n * <p>\n * The values are ordered using the default (natural order), unless a\n * <code>Comparator</code> is supplied in the constructor.</p>\n *\n * @version $Revision$ $Date$\n */\npublic class Frequency implements Serializable {\n    private static final long serialVersionUID = -3845586908418844111L;\n    private final TreeMap<Comparable<?>, Long> freqTable;\n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.\n     * Returns 0 if at least one value has been added, but v is not comparable\n     * to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(Comparable<?> v);\n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(long v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     *\n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n     */\n    public void addValue(Comparable<?> v);\n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(int v);\n    /**\n     * Adds 1 to the frequency count for v.\n     *\n     * @param v the value to add.\n     */\n    public void addValue(int v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     *\n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable,\n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v);\n    /**\n     * Adds 1 to the frequency count for v.\n     *\n     * @param v the value to add.\n     */\n    public void addValue(long v);\n    /**\n     * Adds 1 to the frequency count for v.\n     *\n     * @param v the value to add.\n     */\n    public void addValue(char v);\n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(char v);\n    /**\n      * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n     */\n    @Deprecated\n    public double getPct(Object v);\n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(int v);\n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(long v);\n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.\n     * Returns 0 if at least one value has been added, but v is not comparable\n     * to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     * @deprecated replaced by {@link #getCumPct(Comparable)} as of 2.0\n     */\n    @Deprecated\n    public double getCumPct(Object v);\n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(char v);\n    /**\n     * Adds 1 to the frequency count for v.\n     *\n     * @param v the value to add.\n     * @deprecated to be removed in math 3.0\n     */\n    public void addValue(Integer v);\n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(Comparable<?> v);\n    /**\n     * Returns the number of values = v.\n     *\n     * @param v the value to lookup.\n     * @return the frequency of v.\n     */\n    public long getCount(char v);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Maintains a frequency distribution.\n * <p>\n * Accepts int, long, char or Comparable values.  New values added must be\n * comparable to those that have been added, otherwise the add method will\n * throw an IllegalArgumentException.</p>\n * <p>\n * Integer values (int, long, Integer, Long) are not distinguished by type --\n * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have\n * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>\n * <p>\n * char values are converted by <code>addValue</code> to Character instances.\n * As such, these values are not comparable to integral values, so attempts\n * to combine integral types with chars in a frequency distribution will fail.\n * </p>\n * <p>\n * The values are ordered using the default (natural order), unless a\n * <code>Comparator</code> is supplied in the constructor.</p>\n *\n * @version $Revision$ $Date$\n */\npublic class Frequency implements Serializable {\n    private static final long serialVersionUID = -3845586908418844111L;\n    private final TreeMap<Comparable<?>, Long> freqTable;\n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.\n     * Returns 0 if at least one value has been added, but v is not comparable\n     * to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(Comparable<?> v);\n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(long v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     *\n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n     */\n    public void addValue(Comparable<?> v);\n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(int v);\n    /**\n     * Adds 1 to the frequency count for v.\n     *\n     * @param v the value to add.\n     */\n    public void addValue(int v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     *\n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable,\n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v);\n    /**\n     * Adds 1 to the frequency count for v.\n     *\n     * @param v the value to add.\n     */\n    public void addValue(long v);\n    /**\n     * Adds 1 to the frequency count for v.\n     *\n     * @param v the value to add.\n     */\n    public void addValue(char v);\n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(char v);\n    /**\n      * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n     */\n    @Deprecated\n    public double getPct(Object v);\n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(int v);\n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(long v);\n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.\n     * Returns 0 if at least one value has been added, but v is not comparable\n     * to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     * @deprecated replaced by {@link #getCumPct(Comparable)} as of 2.0\n     */\n    @Deprecated\n    public double getCumPct(Object v);\n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(char v);\n    /**\n     * Adds 1 to the frequency count for v.\n     *\n     * @param v the value to add.\n     * @deprecated to be removed in math 3.0\n     */\n    public void addValue(Integer v);\n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(Comparable<?> v);\n    /**\n     * Returns the number of values = v.\n     *\n     * @param v the value to lookup.\n     * @return the frequency of v.\n     */\n    public long getCount(char v);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Revision$ $Date$\n */\npublic final class FrequencyTest extends TestCase {\n    public void testPcts() {\n        f.addValue(oneL);\n        f.addValue(twoL);\n        f.addValue(oneI);\n        f.addValue(twoI);\n        f.addValue(threeL);\n        f.addValue(threeL);\n        f.addValue(3);\n        f.addValue(threeI);\n        assertEquals(\"one pct\",0.25,f.getPct(1),tolerance);\n        assertEquals(\"two pct\",0.25,f.getPct(Long.valueOf(2)),tolerance);\n        assertEquals(\"three pct\",0.5,f.getPct(threeL),tolerance);\n        // MATH-329\n        assertEquals(\"three (Object) pct\",0.5,f.getPct((Object) (Integer.valueOf(3))),tolerance);\n        assertEquals(\"five pct\",0,f.getPct(5),tolerance);\n        assertEquals(\"foo pct\",0,f.getPct(\"foo\"),tolerance);\n        assertEquals(\"one cum pct\",0.25,f.getCumPct(1),tolerance);\n        assertEquals(\"two cum pct\",0.50,f.getCumPct(Long.valueOf(2)),tolerance);\n        assertEquals(\"Integer argument\",0.50,f.getCumPct(Integer.valueOf(2)),tolerance);\n        assertEquals(\"three cum pct\",1.0,f.getCumPct(threeL),tolerance);\n        assertEquals(\"five cum pct\",1.0,f.getCumPct(5),tolerance);\n        assertEquals(\"zero cum pct\",0.0,f.getCumPct(0),tolerance);\n        assertEquals(\"foo cum pct\",0,f.getCumPct(\"foo\"),tolerance);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Calculates the compact or truncated Singular Value Decomposition of a matrix.\n * <p>The Singular Value Decomposition of matrix A is a set of three matrices:\n * U, &Sigma; and V such that A = U &times; &Sigma; &times; V<sup>T</sup>.\n * Let A be a m &times; n matrix, then U is a m &times; p orthogonal matrix,\n * &Sigma; is a p &times; p diagonal matrix with positive diagonal elements,\n * V is a n &times; p orthogonal matrix (hence V<sup>T</sup> is a p &times; n\n * orthogonal matrix). The size p depends on the chosen algorithm:\n * <ul>\n *   <li>for full SVD, p would be n, but this is not supported by this implementation,</li>\n *   <li>for compact SVD, p is the rank r of the matrix\n *       (i. e. the number of positive singular values),</li>\n *   <li>for truncated SVD p is min(r, t) where t is user-specified.</li>\n * </ul>\n * </p>\n * <p>\n * Note that since this class computes only the compact or truncated SVD and not\n * the full SVD, the singular values computed are always positive.\n * </p>\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class SingularValueDecompositionImpl implements SingularValueDecomposition {\n    private int m;\n    private int n;\n    private BiDiagonalTransformer transformer;\n    private double[] mainBidiagonal;\n    private double[] secondaryBidiagonal;\n    private double[] mainTridiagonal;\n    private double[] secondaryTridiagonal;\n    private EigenDecomposition eigenDecomposition;\n    private double[] singularValues;\n    private RealMatrix cachedU;\n    private RealMatrix cachedUt;\n    private RealMatrix cachedS;\n    private RealMatrix cachedV;\n    private RealMatrix cachedVt;\n    /** {@inheritDoc} */\n    public RealMatrix getVT()\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public double[] getSingularValues()\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public RealMatrix getV()\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public RealMatrix getS()\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public double getNorm()\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public DecompositionSolver getSolver();\n    /** {@inheritDoc} */\n    public RealMatrix getU()\n        throws InvalidMatrixException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Calculates the compact or truncated Singular Value Decomposition of a matrix.\n * <p>The Singular Value Decomposition of matrix A is a set of three matrices:\n * U, &Sigma; and V such that A = U &times; &Sigma; &times; V<sup>T</sup>.\n * Let A be a m &times; n matrix, then U is a m &times; p orthogonal matrix,\n * &Sigma; is a p &times; p diagonal matrix with positive diagonal elements,\n * V is a n &times; p orthogonal matrix (hence V<sup>T</sup> is a p &times; n\n * orthogonal matrix). The size p depends on the chosen algorithm:\n * <ul>\n *   <li>for full SVD, p would be n, but this is not supported by this implementation,</li>\n *   <li>for compact SVD, p is the rank r of the matrix\n *       (i. e. the number of positive singular values),</li>\n *   <li>for truncated SVD p is min(r, t) where t is user-specified.</li>\n * </ul>\n * </p>\n * <p>\n * Note that since this class computes only the compact or truncated SVD and not\n * the full SVD, the singular values computed are always positive.\n * </p>\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class SingularValueDecompositionImpl implements SingularValueDecomposition {\n    private int m;\n    private int n;\n    private BiDiagonalTransformer transformer;\n    private double[] mainBidiagonal;\n    private double[] secondaryBidiagonal;\n    private double[] mainTridiagonal;\n    private double[] secondaryTridiagonal;\n    private EigenDecomposition eigenDecomposition;\n    private double[] singularValues;\n    private RealMatrix cachedU;\n    private RealMatrix cachedUt;\n    private RealMatrix cachedS;\n    private RealMatrix cachedV;\n    private RealMatrix cachedVt;\n    /** {@inheritDoc} */\n    public RealMatrix getVT()\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public double[] getSingularValues()\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public RealMatrix getV()\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public RealMatrix getS()\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public double getNorm()\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public DecompositionSolver getSolver();\n    /** {@inheritDoc} */\n    public RealMatrix getU()\n        throws InvalidMatrixException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private double residual(RealMatrix a, double[] x, double[] b) {\n        double[] ax = a.operate(x);\n        double sum = 0;\n        for (int i = 0; i < ax.length; ++i) {\n            sum += (ax[i] - b[i]) * (ax[i] - b[i]);\n        }\n        return Math.sqrt(sum);\n    }\n    public void testMath320A() {\n        RealMatrix rm = new Array2DRowRealMatrix(new double[][] {\n            { 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 }\n        });\n        double s439  = Math.sqrt(439.0);\n        double[] reference = new double[] {\n            Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))\n        };\n        SingularValueDecomposition svd =\n            new SingularValueDecompositionImpl(rm);\n\n        // check we get the expected theoretical singular values\n        double[] singularValues = svd.getSingularValues();\n        Assert.assertEquals(reference.length, singularValues.length);\n        for (int i = 0; i < reference.length; ++i) {\n            Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);\n        }\n\n        // check the decomposition allows to recover the original matrix\n        RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());\n        Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13);\n\n        // check we can solve a singular system\n        double[] b = new double[] { 5.0, 6.0, 7.0 };\n        double[] resSVD = svd.getSolver().solve(b);\n        Assert.assertEquals(rm.getColumnDimension(), resSVD.length);\n\n        // check the solution really minimizes the residuals\n        double svdMinResidual = residual(rm, resSVD, b);\n        double epsilon = 2 * Math.ulp(svdMinResidual);\n        double h = 0.1;\n        int    k = 3;\n        for (double d0 = -k * h; d0 <= k * h; d0 += h) {\n            for (double d1 = -k * h ; d1 <= k * h; d1 += h) {\n                for (double d2 = -k * h; d2 <= k * h; d2 += h) {\n                    double[] x = new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 };\n                    Assert.assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);\n                }\n            }\n        }\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * This class implements the {@link RealVector} interface with a {@link OpenIntToDoubleHashMap} backing store.\n * @version $Revision$ $Date$\n * @since 2.0\n*/\npublic class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {\n    public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;\n    private static final long serialVersionUID = 8772222695580707260L;\n    private final OpenIntToDoubleHashMap entries;\n    private final int virtualSize;\n    private double epsilon;\n    /** {@inheritDoc} */\n    public double dotProduct(RealVector v) throws IllegalArgumentException;\n    /**\n     * Optimized method to compute distance.\n     * @param v The vector to compute distance to\n     * @return The distance from <code>this</code> and <code>v</code>\n     * @throws IllegalArgumentException If the dimensions don't match\n     */\n    public double getDistance(OpenMapRealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getLInfDistance(double[] v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector subtract(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getDistance(double[] v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeDivide(RealVector v) throws IllegalArgumentException;\n    /**\n     * Optimized method to add two OpenMapRealVectors.  Copies the larger vector, iterates over the smaller.\n     * @param v Vector to add with\n     * @return The sum of <code>this</code> with <code>v</code>\n     * @throws IllegalArgumentException If the dimensions don't match\n     */\n    public OpenMapRealVector add(OpenMapRealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector unitVector();\n    /** {@inheritDoc} */\n    public void unitize();\n    /** {@inheritDoc} */\n    public OpenMapRealVector copy();\n    /** {@inheritDoc} */\n    public double getL1Distance(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeDivide(double[] v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector projection(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getLInfDistance(RealVector v) throws IllegalArgumentException;\n    /**\n     * Optimized method to compute the dot product with an OpenMapRealVector.\n     * Iterates over the smaller of the two.\n     * @param v The vector to compute the dot product with\n     * @return The dot product of <code>this</code> and <code>v</code>\n     * @throws IllegalArgumentException If the dimensions don't match\n     */\n    public double dotProduct(OpenMapRealVector v) throws IllegalArgumentException;\n    /**\n     * Optimized method to subtract OpenMapRealVectors.\n     * @param v The vector to subtract from <code>this</code>\n     * @return The difference of <code>this</code> and <code>v</code>\n     * @throws IllegalArgumentException If the dimensions don't match\n     */\n    public OpenMapRealVector subtract(OpenMapRealVector v) throws IllegalArgumentException;\n    public double getLInfNorm();\n    /** {@inheritDoc} */\n    public RealVector add(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeMultiply(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getEntry(int index) throws MatrixIndexException;\n    /** {@inheritDoc} */\n    public double[] getData();\n    /**\n     * Distance between two vectors.\n     * <p>This method computes the distance consistent with\n     * L<sub>1</sub> norm, i.e. the sum of the absolute values of\n     * elements differences.</p>\n     * @param v vector to which distance is requested\n     * @return distance between two vectors.\n     */\n    public double getL1Distance(OpenMapRealVector v);\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeMultiply(double[] v) throws IllegalArgumentException;\n    /**\n     * Optimized method to compute LInfDistance.\n     * @param v The vector to compute from\n     * @return the LInfDistance\n     */\n    private double getLInfDistance(OpenMapRealVector v);\n    /** {@inheritDoc} */\n    public OpenMapRealVector subtract(double[] v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getDistance(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector projection(double[] v) throws IllegalArgumentException;\n     /** {@inheritDoc} */\n    public RealMatrix outerProduct(double[] v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getL1Distance(double[] v) throws IllegalArgumentException;\n}\n/**\n * This class implements the {@link RealVector} interface with a double array.\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class ArrayRealVector extends AbstractRealVector implements Serializable {\n    private static final long serialVersionUID = -1097961340710804027L;\n    /** {@inheritDoc} */\n    public RealMatrix outerProduct(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector projection(RealVector v);\n    /** {@inheritDoc} */\n    public double getDistance(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealMatrix outerProduct(double[] v)\n        throws IllegalArgumentException;\n    /**\n     * Distance between two vectors.\n     * <p>This method computes the distance consistent with\n     * L<sub>1</sub> norm, i.e. the sum of the absolute values of\n     * elements differences.</p>\n     * @param v vector to which distance is requested\n     * @return distance between two vectors.\n     * @exception IllegalArgumentException if v is not the same size as this\n     * @see #getDistance(RealVector)\n     * @see #getL1Distance(ArrayRealVector)\n     * @see #getLInfDistance(ArrayRealVector)\n     * @see #getNorm()\n     */\n    public double getL1Distance(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /**\n     * Element-by-element multiplication.\n     * @param v vector by which instance elements must be multiplied\n     * @return a vector containing this[i] * v[i] for all i\n     * @exception IllegalArgumentException if v is not the same size as this\n     */\n    public ArrayRealVector ebeMultiply(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector unitVector() throws ArithmeticException;\n    /** {@inheritDoc} */\n    public RealVector subtract(double[] v)\n        throws IllegalArgumentException;\n    /**\n     * Element-by-element division.\n     * @param v vector by which instance elements must be divided\n     * @return a vector containing this[i] / v[i] for all i\n     * @throws IllegalArgumentException if v is not the same size as this\n     */\n    public ArrayRealVector ebeDivide(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /**\n     * Compute the outer product.\n     * @param v vector with which outer product should be computed\n     * @return the square matrix outer product between instance and v\n     * @exception IllegalArgumentException if v is not the same size as this\n     */\n    public RealMatrix outerProduct(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    @Override\n    public double getLInfNorm();\n    /** {@inheritDoc} */\n    public double dotProduct(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getLInfDistance(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector ebeMultiply(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector add(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double[] getData();\n    /** {@inheritDoc} */\n    public RealVector projection(double[] v);\n    /** {@inheritDoc} */\n    public double getEntry(int index) throws MatrixIndexException;\n    /** {@inheritDoc} */\n    @Override\n    public double getL1Norm();\n    /** {@inheritDoc} */\n    public AbstractRealVector copy();\n    /**\n     * Compute the sum of this and v.\n     * @param v vector to be added\n     * @return this + v\n     * @throws IllegalArgumentException if v is not the same size as this\n     */\n    public ArrayRealVector add(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double dotProduct(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getDistance(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getL1Distance(RealVector v)\n        throws IllegalArgumentException;\n    /**\n     * Distance between two vectors.\n     * <p>This method computes the distance consistent with\n     * L<sub>&infin;</sub> norm, i.e. the max of the absolute values of\n     * elements differences.</p>\n     * @param v vector to which distance is requested\n     * @return distance between two vectors.\n     * @exception IllegalArgumentException if v is not the same size as this\n     * @see #getDistance(RealVector)\n     * @see #getL1Distance(ArrayRealVector)\n     * @see #getLInfDistance(ArrayRealVector)\n     * @see #getNorm()\n     */\n    public double getLInfDistance(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public void unitize() throws ArithmeticException;\n    /** {@inheritDoc} */\n    public RealVector add(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    @Override\n    public double getNorm();\n    /**\n     * Compute the dot product.\n     * @param v vector with which dot product should be computed\n     * @return the scalar dot product between instance and v\n     * @exception IllegalArgumentException if v is not the same size as this\n     */\n    public double dotProduct(ArrayRealVector v)\n        throws IllegalArgumentException;\n   /**\n     * Distance between two vectors.\n     * <p>This method computes the distance consistent with the\n     * L<sub>2</sub> norm, i.e. the square root of the sum of\n     * elements differences, or euclidian distance.</p>\n     * @param v vector to which distance is requested\n     * @return distance between two vectors.\n     * @exception IllegalArgumentException if v is not the same size as this\n     * @see #getDistance(RealVector)\n     * @see #getL1Distance(ArrayRealVector)\n     * @see #getLInfDistance(ArrayRealVector)\n     * @see #getNorm()\n     */\n    public double getDistance(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector subtract(RealVector v)\n        throws IllegalArgumentException;\n   /** Find the orthogonal projection of this vector onto another vector.\n     * @param v vector onto which instance must be projected\n     * @return projection of the instance onto v\n     * @throws IllegalArgumentException if v is not the same size as this\n     */\n    public ArrayRealVector projection(ArrayRealVector v);\n    /** {@inheritDoc} */\n    public RealVector ebeMultiply(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getL1Distance(double[] v)\n        throws IllegalArgumentException;\n    /**\n     * Compute this minus v.\n     * @param v vector to be subtracted\n     * @return this + v\n     * @throws IllegalArgumentException if v is not the same size as this\n     */\n    public ArrayRealVector subtract(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector ebeDivide(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector ebeDivide(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getLInfDistance(RealVector v)\n        throws IllegalArgumentException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * This class implements the {@link RealVector} interface with a {@link OpenIntToDoubleHashMap} backing store.\n * @version $Revision$ $Date$\n * @since 2.0\n*/\npublic class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {\n    public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;\n    private static final long serialVersionUID = 8772222695580707260L;\n    private final OpenIntToDoubleHashMap entries;\n    private final int virtualSize;\n    private double epsilon;\n    /** {@inheritDoc} */\n    public double dotProduct(RealVector v) throws IllegalArgumentException;\n    /**\n     * Optimized method to compute distance.\n     * @param v The vector to compute distance to\n     * @return The distance from <code>this</code> and <code>v</code>\n     * @throws IllegalArgumentException If the dimensions don't match\n     */\n    public double getDistance(OpenMapRealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getLInfDistance(double[] v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector subtract(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getDistance(double[] v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeDivide(RealVector v) throws IllegalArgumentException;\n    /**\n     * Optimized method to add two OpenMapRealVectors.  Copies the larger vector, iterates over the smaller.\n     * @param v Vector to add with\n     * @return The sum of <code>this</code> with <code>v</code>\n     * @throws IllegalArgumentException If the dimensions don't match\n     */\n    public OpenMapRealVector add(OpenMapRealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector unitVector();\n    /** {@inheritDoc} */\n    public void unitize();\n    /** {@inheritDoc} */\n    public OpenMapRealVector copy();\n    /** {@inheritDoc} */\n    public double getL1Distance(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeDivide(double[] v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector projection(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getLInfDistance(RealVector v) throws IllegalArgumentException;\n    /**\n     * Optimized method to compute the dot product with an OpenMapRealVector.\n     * Iterates over the smaller of the two.\n     * @param v The vector to compute the dot product with\n     * @return The dot product of <code>this</code> and <code>v</code>\n     * @throws IllegalArgumentException If the dimensions don't match\n     */\n    public double dotProduct(OpenMapRealVector v) throws IllegalArgumentException;\n    /**\n     * Optimized method to subtract OpenMapRealVectors.\n     * @param v The vector to subtract from <code>this</code>\n     * @return The difference of <code>this</code> and <code>v</code>\n     * @throws IllegalArgumentException If the dimensions don't match\n     */\n    public OpenMapRealVector subtract(OpenMapRealVector v) throws IllegalArgumentException;\n    public double getLInfNorm();\n    /** {@inheritDoc} */\n    public RealVector add(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeMultiply(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getEntry(int index) throws MatrixIndexException;\n    /** {@inheritDoc} */\n    public double[] getData();\n    /**\n     * Distance between two vectors.\n     * <p>This method computes the distance consistent with\n     * L<sub>1</sub> norm, i.e. the sum of the absolute values of\n     * elements differences.</p>\n     * @param v vector to which distance is requested\n     * @return distance between two vectors.\n     */\n    public double getL1Distance(OpenMapRealVector v);\n    /** {@inheritDoc} */\n    public OpenMapRealVector ebeMultiply(double[] v) throws IllegalArgumentException;\n    /**\n     * Optimized method to compute LInfDistance.\n     * @param v The vector to compute from\n     * @return the LInfDistance\n     */\n    private double getLInfDistance(OpenMapRealVector v);\n    /** {@inheritDoc} */\n    public OpenMapRealVector subtract(double[] v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getDistance(RealVector v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public OpenMapRealVector projection(double[] v) throws IllegalArgumentException;\n     /** {@inheritDoc} */\n    public RealMatrix outerProduct(double[] v) throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getL1Distance(double[] v) throws IllegalArgumentException;\n}\n/**\n * This class implements the {@link RealVector} interface with a double array.\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class ArrayRealVector extends AbstractRealVector implements Serializable {\n    private static final long serialVersionUID = -1097961340710804027L;\n    /** {@inheritDoc} */\n    public RealMatrix outerProduct(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector projection(RealVector v);\n    /** {@inheritDoc} */\n    public double getDistance(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealMatrix outerProduct(double[] v)\n        throws IllegalArgumentException;\n    /**\n     * Distance between two vectors.\n     * <p>This method computes the distance consistent with\n     * L<sub>1</sub> norm, i.e. the sum of the absolute values of\n     * elements differences.</p>\n     * @param v vector to which distance is requested\n     * @return distance between two vectors.\n     * @exception IllegalArgumentException if v is not the same size as this\n     * @see #getDistance(RealVector)\n     * @see #getL1Distance(ArrayRealVector)\n     * @see #getLInfDistance(ArrayRealVector)\n     * @see #getNorm()\n     */\n    public double getL1Distance(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /**\n     * Element-by-element multiplication.\n     * @param v vector by which instance elements must be multiplied\n     * @return a vector containing this[i] * v[i] for all i\n     * @exception IllegalArgumentException if v is not the same size as this\n     */\n    public ArrayRealVector ebeMultiply(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector unitVector() throws ArithmeticException;\n    /** {@inheritDoc} */\n    public RealVector subtract(double[] v)\n        throws IllegalArgumentException;\n    /**\n     * Element-by-element division.\n     * @param v vector by which instance elements must be divided\n     * @return a vector containing this[i] / v[i] for all i\n     * @throws IllegalArgumentException if v is not the same size as this\n     */\n    public ArrayRealVector ebeDivide(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /**\n     * Compute the outer product.\n     * @param v vector with which outer product should be computed\n     * @return the square matrix outer product between instance and v\n     * @exception IllegalArgumentException if v is not the same size as this\n     */\n    public RealMatrix outerProduct(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    @Override\n    public double getLInfNorm();\n    /** {@inheritDoc} */\n    public double dotProduct(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getLInfDistance(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector ebeMultiply(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector add(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double[] getData();\n    /** {@inheritDoc} */\n    public RealVector projection(double[] v);\n    /** {@inheritDoc} */\n    public double getEntry(int index) throws MatrixIndexException;\n    /** {@inheritDoc} */\n    @Override\n    public double getL1Norm();\n    /** {@inheritDoc} */\n    public AbstractRealVector copy();\n    /**\n     * Compute the sum of this and v.\n     * @param v vector to be added\n     * @return this + v\n     * @throws IllegalArgumentException if v is not the same size as this\n     */\n    public ArrayRealVector add(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double dotProduct(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getDistance(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getL1Distance(RealVector v)\n        throws IllegalArgumentException;\n    /**\n     * Distance between two vectors.\n     * <p>This method computes the distance consistent with\n     * L<sub>&infin;</sub> norm, i.e. the max of the absolute values of\n     * elements differences.</p>\n     * @param v vector to which distance is requested\n     * @return distance between two vectors.\n     * @exception IllegalArgumentException if v is not the same size as this\n     * @see #getDistance(RealVector)\n     * @see #getL1Distance(ArrayRealVector)\n     * @see #getLInfDistance(ArrayRealVector)\n     * @see #getNorm()\n     */\n    public double getLInfDistance(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public void unitize() throws ArithmeticException;\n    /** {@inheritDoc} */\n    public RealVector add(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    @Override\n    public double getNorm();\n    /**\n     * Compute the dot product.\n     * @param v vector with which dot product should be computed\n     * @return the scalar dot product between instance and v\n     * @exception IllegalArgumentException if v is not the same size as this\n     */\n    public double dotProduct(ArrayRealVector v)\n        throws IllegalArgumentException;\n   /**\n     * Distance between two vectors.\n     * <p>This method computes the distance consistent with the\n     * L<sub>2</sub> norm, i.e. the square root of the sum of\n     * elements differences, or euclidian distance.</p>\n     * @param v vector to which distance is requested\n     * @return distance between two vectors.\n     * @exception IllegalArgumentException if v is not the same size as this\n     * @see #getDistance(RealVector)\n     * @see #getL1Distance(ArrayRealVector)\n     * @see #getLInfDistance(ArrayRealVector)\n     * @see #getNorm()\n     */\n    public double getDistance(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector subtract(RealVector v)\n        throws IllegalArgumentException;\n   /** Find the orthogonal projection of this vector onto another vector.\n     * @param v vector onto which instance must be projected\n     * @return projection of the instance onto v\n     * @throws IllegalArgumentException if v is not the same size as this\n     */\n    public ArrayRealVector projection(ArrayRealVector v);\n    /** {@inheritDoc} */\n    public RealVector ebeMultiply(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getL1Distance(double[] v)\n        throws IllegalArgumentException;\n    /**\n     * Compute this minus v.\n     * @param v vector to be subtracted\n     * @return this + v\n     * @throws IllegalArgumentException if v is not the same size as this\n     */\n    public ArrayRealVector subtract(ArrayRealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector ebeDivide(double[] v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public RealVector ebeDivide(RealVector v)\n        throws IllegalArgumentException;\n    /** {@inheritDoc} */\n    public double getLInfDistance(RealVector v)\n        throws IllegalArgumentException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Revision$ $Date$\n */\npublic class ArrayRealVectorTest extends TestCase {\n        private UnsupportedOperationException unsupported() {\n            return new UnsupportedOperationException(\"Not supported, unneeded for test purposes\");\n        }\n    public void testBasicFunctions() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        assertEquals(\"compare values  \", 17.0, d_getL1Norm);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance );\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_2 );\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_3 );\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance );\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        assertEquals(\"compare val \",32d, dot);\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        assertEquals(\"compare val \",32d, dot_2);\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);\n\n        try {\n            v_null.unitVector();\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\n        try {\n            v_null.unitize();\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step (and hence the step should be reduced to ensure the\n * event occurs at a bound rather than inside the step).</p>\n *\n * @version $Revision$ $Date$\n * @since 1.2\n */\npublic class EventState {\n    private final EventHandler handler;\n    private final double maxCheckInterval;\n    private final double convergence;\n    private final int maxIterationCount;\n    private double t0;\n    private double g0;\n    private boolean g0Positive;\n    private boolean pendingEvent;\n    private double pendingEventTime;\n    private double previousEventTime;\n    private boolean forward;\n    private boolean increasing;\n    private int nextAction;\n    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException;\n    /** Acknowledge the fact the step has been accepted by the integrator.\n     * @param t value of the independent <i>time</i> variable at the\n     * end of the step\n     * @param y array containing the current value of the state vector\n     * at the end of the step\n     * @exception EventException if the value of the event\n     * handler cannot be evaluated\n     */\n    public void stepAccepted(final double t, final double[] y)\n        throws EventException;\n    /** Reinitialize the beginning of the step.\n     * @param tStart value of the independent <i>time</i> variable at the\n     * beginning of the step\n     * @param yStart array containing the current value of the state vector\n     * at the beginning of the step\n     * @exception EventException if the event handler\n     * value cannot be evaluated at the beginning of the step\n     */\n    public void reinitializeBegin(final double tStart, final double[] yStart)\n        throws EventException;\n    /** Get the occurrence time of the event triggered in the current\n     * step.\n     * @return occurrence time of the event triggered in the current\n     * step.\n     */\n    public double getEventTime();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step (and hence the step should be reduced to ensure the\n * event occurs at a bound rather than inside the step).</p>\n *\n * @version $Revision$ $Date$\n * @since 1.2\n */\npublic class EventState {\n    private final EventHandler handler;\n    private final double maxCheckInterval;\n    private final double convergence;\n    private final int maxIterationCount;\n    private double t0;\n    private double g0;\n    private boolean g0Positive;\n    private boolean pendingEvent;\n    private double pendingEventTime;\n    private double previousEventTime;\n    private boolean forward;\n    private boolean increasing;\n    private int nextAction;\n    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException;\n    /** Acknowledge the fact the step has been accepted by the integrator.\n     * @param t value of the independent <i>time</i> variable at the\n     * end of the step\n     * @param y array containing the current value of the state vector\n     * at the end of the step\n     * @exception EventException if the value of the event\n     * handler cannot be evaluated\n     */\n    public void stepAccepted(final double t, final double[] y)\n        throws EventException;\n    /** Reinitialize the beginning of the step.\n     * @param tStart value of the independent <i>time</i> variable at the\n     * beginning of the step\n     * @param yStart array containing the current value of the state vector\n     * at the beginning of the step\n     * @exception EventException if the event handler\n     * value cannot be evaluated at the beginning of the step\n     */\n    public void reinitializeBegin(final double tStart, final double[] yStart)\n        throws EventException;\n    /** Get the occurrence time of the event triggered in the current\n     * step.\n     * @return occurrence time of the event triggered in the current\n     * step.\n     */\n    public double getEventTime();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void closeEvents()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        Assert.assertTrue(es.evaluateStep(interpolator));\n        Assert.assertEquals(r1, es.getEventTime(), tolerance);\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        Assert.assertTrue(es.evaluateStep(interpolator));\n        Assert.assertEquals(r2, es.getEventTime(), tolerance);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    public static final double TWO_PI = 2 * Math.PI;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final int NAN_GAP = 4 * 1024 * 1024;\n    private static final long SGN_MASK = 0x8000000000000000L;\n    /**\n     * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n     *\n     * @param p1 the first point\n     * @param p2 the second point\n     * @return the L<sub>2</sub> distance between the two points\n     */\n    public static double distance(double[] p1, double[] p2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    public static final double TWO_PI = 2 * Math.PI;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final int NAN_GAP = 4 * 1024 * 1024;\n    private static final long SGN_MASK = 0x8000000000000000L;\n    /**\n     * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n     *\n     * @param p1 the first point\n     * @param p2 the second point\n     * @return the L<sub>2</sub> distance between the two points\n     */\n    public static double distance(double[] p1, double[] p2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testPerformClusterAnalysisDegenerate() {\n        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(\n                new Random(1746432956321l));\n        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {\n                new EuclideanIntegerPoint(new int[] { 1959, 325100 }),\n                new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };\n        List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);\n        assertEquals(1, clusters.size());\n        assertEquals(2, (clusters.get(0).getPoints().size()));\n        EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] { 1959, 325100 });\n        EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] { 1960, 373200 });\n        assertTrue(clusters.get(0).getPoints().contains(pt1));\n        assertTrue(clusters.get(0).getPoints().contains(pt2));\n\n    } \n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Generic implementation of the discrete distribution.\n *\n * @param <T> type of the random variable.\n * @see <a href=\"http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution\">Discrete probability distribution (Wikipedia)</a>\n * @see <a href=\"http://mathworld.wolfram.com/DiscreteDistribution.html\">Discrete Distribution (MathWorld)</a>\n * @version $Id: DiscreteDistribution.java 169 2013-03-08 09:02:38Z wydrych $\n */\npublic class DiscreteDistribution<T> {\n    private final List<T> singletons;\n    private final double[] probabilities;\n    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException;\n    /**\n     * Generate a random value sampled from this distribution.\n     *\n     * @return a random value.\n     */\n    public T sample();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Generic implementation of the discrete distribution.\n *\n * @param <T> type of the random variable.\n * @see <a href=\"http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution\">Discrete probability distribution (Wikipedia)</a>\n * @see <a href=\"http://mathworld.wolfram.com/DiscreteDistribution.html\">Discrete Distribution (MathWorld)</a>\n * @version $Id: DiscreteDistribution.java 169 2013-03-08 09:02:38Z wydrych $\n */\npublic class DiscreteDistribution<T> {\n    private final List<T> singletons;\n    private final double[] probabilities;\n    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException;\n    /**\n     * Generate a random value sampled from this distribution.\n     *\n     * @return a random value.\n     */\n    public T sample();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * \n * @version $Id: DiscreteRealDistributionTest.java 161 2013-03-07 09:47:32Z wydrych $\n */\npublic class DiscreteRealDistributionTest {\n    public void testIssue942() {\n        List<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();\n        list.add(new Pair<Object, Double>(new Object() {}, new Double(0)));\n        list.add(new Pair<Object, Double>(new Object() {}, new Double(1)));\n        Assert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Calculates the eigen decomposition of a <strong>symmetric</strong> matrix.\n * <p>The eigen decomposition of matrix A is a set of two matrices:\n * V and D such that A = V D V<sup>T</sup>. A, V and D are all m &times; m\n * matrices.</p>\n * <p>As of 2.0, this class supports only <strong>symmetric</strong> matrices,\n * and hence computes only real realEigenvalues. This implies the D matrix returned by\n * {@link #getD()} is always diagonal and the imaginary values returned {@link\n * #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always null.</p>\n * <p>When called with a {@link RealMatrix} argument, this implementation only uses\n * the upper part of the matrix, the part below the diagonal is not accessed at all.</p>\n * <p>Eigenvalues are computed as soon as the matrix is decomposed, but eigenvectors\n * are computed only when required, i.e. only when one of the {@link #getEigenvector(int)},\n * {@link #getV()}, {@link #getVT()}, {@link #getSolver()} methods is called.</p>\n * <p>This implementation is based on Inderjit Singh Dhillon thesis\n * <a href=\"http://www.cs.utexas.edu/users/inderjit/public_papers/thesis.pdf\">A\n * New O(n<sup>2</sup>) Algorithm for the Symmetric Tridiagonal Eigenvalue/Eigenvector\n * Problem</a>, on Beresford N. Parlett and Osni A. Marques paper <a\n * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An Implementation of the\n * dqds Algorithm (Positive Case)</a> and on the corresponding LAPACK routines (DLARRE,\n * DLASQ2, DLAZQ3, DLAZQ4, DLASQ5 and DLASQ6).</p>\n * <p>The authors of the original fortran version are:\n *   <ul>\n *     <li>Beresford Parlett, University of California, Berkeley, USA</li>\n *     <li>Jim Demmel, University of California, Berkeley, USA</li>\n *     <li>Inderjit Dhillon, University of Texas, Austin, USA</li>\n *     <li>Osni Marques, LBNL/NERSC, USA</li>\n *     <li>Christof Voemel, University of California, Berkeley, USA</li>\n *   </ul>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class EigenDecompositionImpl implements EigenDecomposition {\n    private static final double TOLERANCE = 100 * MathUtils.EPSILON;\n    private static final double TOLERANCE_2 = TOLERANCE * TOLERANCE;\n    private double splitTolerance;\n    private double[] main;\n    private double[] secondary;\n    private double[] squaredSecondary;\n    private TriDiagonalTransformer transformer;\n    private double lowerSpectra;\n    private double upperSpectra;\n    private double minPivot;\n    private double sigma;\n    private double sigmaLow;\n    private double tau;\n    private double[] work;\n    private int pingPong;\n    private double qMax;\n    private double eMin;\n    private int    tType;\n    private double dMin;\n    private double dMin1;\n    private double dMin2;\n    private double dN;\n    private double dN1;\n    private double dN2;\n    private double g;\n    private double[] realEigenvalues;\n    private double[] imagEigenvalues;\n    private ArrayRealVector[] eigenvectors;\n    private RealMatrix cachedV;\n    private RealMatrix cachedD;\n    private RealMatrix cachedVt;\n    /** {@inheritDoc} */\n    public RealVector getEigenvector(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException;\n    /** {@inheritDoc} */\n    public double[] getRealEigenvalues()\n        throws InvalidMatrixException;\n    /**\n     * Flip qd array if warranted.\n     * @param n number of rows in the block\n     * @param step within the array (1 for flipping all elements, 2 for flipping\n     * only every other element)\n     * @return true if qd array was flipped\n     */\n    private boolean flipIfWarranted(final int n, final int step);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Calculates the eigen decomposition of a <strong>symmetric</strong> matrix.\n * <p>The eigen decomposition of matrix A is a set of two matrices:\n * V and D such that A = V D V<sup>T</sup>. A, V and D are all m &times; m\n * matrices.</p>\n * <p>As of 2.0, this class supports only <strong>symmetric</strong> matrices,\n * and hence computes only real realEigenvalues. This implies the D matrix returned by\n * {@link #getD()} is always diagonal and the imaginary values returned {@link\n * #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always null.</p>\n * <p>When called with a {@link RealMatrix} argument, this implementation only uses\n * the upper part of the matrix, the part below the diagonal is not accessed at all.</p>\n * <p>Eigenvalues are computed as soon as the matrix is decomposed, but eigenvectors\n * are computed only when required, i.e. only when one of the {@link #getEigenvector(int)},\n * {@link #getV()}, {@link #getVT()}, {@link #getSolver()} methods is called.</p>\n * <p>This implementation is based on Inderjit Singh Dhillon thesis\n * <a href=\"http://www.cs.utexas.edu/users/inderjit/public_papers/thesis.pdf\">A\n * New O(n<sup>2</sup>) Algorithm for the Symmetric Tridiagonal Eigenvalue/Eigenvector\n * Problem</a>, on Beresford N. Parlett and Osni A. Marques paper <a\n * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An Implementation of the\n * dqds Algorithm (Positive Case)</a> and on the corresponding LAPACK routines (DLARRE,\n * DLASQ2, DLAZQ3, DLAZQ4, DLASQ5 and DLASQ6).</p>\n * <p>The authors of the original fortran version are:\n *   <ul>\n *     <li>Beresford Parlett, University of California, Berkeley, USA</li>\n *     <li>Jim Demmel, University of California, Berkeley, USA</li>\n *     <li>Inderjit Dhillon, University of Texas, Austin, USA</li>\n *     <li>Osni Marques, LBNL/NERSC, USA</li>\n *     <li>Christof Voemel, University of California, Berkeley, USA</li>\n *   </ul>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class EigenDecompositionImpl implements EigenDecomposition {\n    private static final double TOLERANCE = 100 * MathUtils.EPSILON;\n    private static final double TOLERANCE_2 = TOLERANCE * TOLERANCE;\n    private double splitTolerance;\n    private double[] main;\n    private double[] secondary;\n    private double[] squaredSecondary;\n    private TriDiagonalTransformer transformer;\n    private double lowerSpectra;\n    private double upperSpectra;\n    private double minPivot;\n    private double sigma;\n    private double sigmaLow;\n    private double tau;\n    private double[] work;\n    private int pingPong;\n    private double qMax;\n    private double eMin;\n    private int    tType;\n    private double dMin;\n    private double dMin1;\n    private double dMin2;\n    private double dN;\n    private double dN1;\n    private double dN2;\n    private double g;\n    private double[] realEigenvalues;\n    private double[] imagEigenvalues;\n    private ArrayRealVector[] eigenvectors;\n    private RealMatrix cachedV;\n    private RealMatrix cachedD;\n    private RealMatrix cachedVt;\n    /** {@inheritDoc} */\n    public RealVector getEigenvector(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException;\n    /** {@inheritDoc} */\n    public double[] getRealEigenvalues()\n        throws InvalidMatrixException;\n    /**\n     * Flip qd array if warranted.\n     * @param n number of rows in the block\n     * @param step within the array (1 for flipping all elements, 2 for flipping\n     * only every other element)\n     * @return true if qd array was flipped\n     */\n    private boolean flipIfWarranted(final int n, final int step);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private boolean isIncludedValue(double value, double[] searchArray,\n            double tolerance) {\n       boolean found = false;\n       int i = 0;\n       while (!found && i < searchArray.length) {\n           if (Math.abs(value - searchArray[i]) < tolerance) {\n               found = true;\n           }\n           i++;\n       }\n       return found;\n    }\n    private boolean isIncludedColumn(double[] column, RealMatrix searchMatrix,\n            double tolerance) {\n        boolean found = false;\n        int i = 0;\n        while (!found && i < searchMatrix.getColumnDimension()) {\n            double multiplier = 1.0;\n            boolean matching = true;\n            int j = 0;\n            while (matching && j < searchMatrix.getRowDimension()) {\n                double colEntry = searchMatrix.getEntry(j, i);\n                // Use the first entry where both are non-zero as scalar\n                if (Math.abs(multiplier - 1.0) <= Math.ulp(1.0) && Math.abs(colEntry) > 1E-14\n                        && Math.abs(column[j]) > 1e-14) {\n                    multiplier = colEntry / column[j];\n                }\n                if (Math.abs(column[j] * multiplier - colEntry) > tolerance) {\n                    matching = false;\n                }\n                j++;\n            }\n            found = matching;\n            i++;\n        }\n        return found;\n    }\n    public void testMathpbx02() {\n\n        double[] mainTridiagonal = {\n        \t  7484.860960227216, 18405.28129035345, 13855.225609560746,\n        \t 10016.708722343366, 559.8117399576674, 6750.190788301587, \n        \t    71.21428769782159\n        };\n        double[] secondaryTridiagonal = {\n        \t -4175.088570476366,1975.7955858241994,5193.178422374075, \n        \t  1995.286659169179,75.34535882933804,-234.0808002076056\n        };\n\n        // the reference values have been computed using routine DSTEMR\n        // from the fortran library LAPACK version 3.2.1\n        double[] refEigenValues = {\n        \t\t20654.744890306974412,16828.208208485466457,\n        \t\t6893.155912634994820,6757.083016675340332,\n        \t\t5887.799885688558788,64.309089923240379,\n        \t\t57.992628792736340\n        };\n        RealVector[] refEigenVectors = {\n        \t\tnew ArrayRealVector(new double[] {-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.198794657813990, 0.019739323307666, 0.000106983022327, -0.000001216636321}),\n        \t\tnew ArrayRealVector(new double[] {0.179995273578326,-0.402807848153042,0.701870993525734,0.555058211014888,0.068079148898236,0.000509139115227,-0.000007112235617}),\n        \t\tnew ArrayRealVector(new double[] {-0.399582721284727,-0.056629954519333,-0.514406488522827,0.711168164518580,0.225548081276367,0.125943999652923,-0.004321507456014}),\n        \t\tnew ArrayRealVector(new double[] {0.058515721572821,0.010200130057739,0.063516274916536,-0.090696087449378,-0.017148420432597,0.991318870265707,-0.034707338554096}),\n        \t\tnew ArrayRealVector(new double[] {0.855205995537564,0.327134656629775,-0.265382397060548,0.282690729026706,0.105736068025572,-0.009138126622039,0.000367751821196}),\n        \t\tnew ArrayRealVector(new double[] {-0.002913069901144,-0.005177515777101,0.041906334478672,-0.109315918416258,0.436192305456741,0.026307315639535,0.891797507436344}),\n        \t\tnew ArrayRealVector(new double[] {-0.005738311176435,-0.010207611670378,0.082662420517928,-0.215733886094368,0.861606487840411,-0.025478530652759,-0.451080697503958})\n        };\n\n        // the following line triggers the exception\n        EigenDecomposition decomposition =\n            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);\n\n        double[] eigenValues = decomposition.getRealEigenvalues();\n        for (int i = 0; i < refEigenValues.length; ++i) {\n            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-3);\n            if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) < 0) {\n                assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);\n            } else {\n                assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);\n            }\n        }\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Calculates the eigen decomposition of a <strong>symmetric</strong> matrix.\n * <p>The eigen decomposition of matrix A is a set of two matrices:\n * V and D such that A = V D V<sup>T</sup>. A, V and D are all m &times; m\n * matrices.</p>\n * <p>As of 2.0, this class supports only <strong>symmetric</strong> matrices,\n * and hence computes only real realEigenvalues. This implies the D matrix returned by\n * {@link #getD()} is always diagonal and the imaginary values returned {@link\n * #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always null.</p>\n * <p>When called with a {@link RealMatrix} argument, this implementation only uses\n * the upper part of the matrix, the part below the diagonal is not accessed at all.</p>\n * <p>Eigenvalues are computed as soon as the matrix is decomposed, but eigenvectors\n * are computed only when required, i.e. only when one of the {@link #getEigenvector(int)},\n * {@link #getV()}, {@link #getVT()}, {@link #getSolver()} methods is called.</p>\n * <p>This implementation is based on Inderjit Singh Dhillon thesis\n * <a href=\"http://www.cs.utexas.edu/users/inderjit/public_papers/thesis.pdf\">A\n * New O(n<sup>2</sup>) Algorithm for the Symmetric Tridiagonal Eigenvalue/Eigenvector\n * Problem</a>, on Beresford N. Parlett and Osni A. Marques paper <a\n * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An Implementation of the\n * dqds Algorithm (Positive Case)</a> and on the corresponding LAPACK routines (DLARRE,\n * DLASQ2, DLAZQ3, DLAZQ4, DLASQ5 and DLASQ6).</p>\n * <p>The authors of the original fortran version are:\n *   <ul>\n *     <li>Beresford Parlett, University of California, Berkeley, USA</li>\n *     <li>Jim Demmel, University of California, Berkeley, USA</li>\n *     <li>Inderjit Dhillon, University of Texas, Austin, USA</li>\n *     <li>Osni Marques, LBNL/NERSC, USA</li>\n *     <li>Christof Voemel, University of California, Berkeley, USA</li>\n *   </ul>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class EigenDecompositionImpl implements EigenDecomposition {\n    private static final double TOLERANCE = 100 * MathUtils.EPSILON;\n    private static final double TOLERANCE_2 = TOLERANCE * TOLERANCE;\n    private double splitTolerance;\n    private double[] main;\n    private double[] secondary;\n    private double[] squaredSecondary;\n    private TriDiagonalTransformer transformer;\n    private double lowerSpectra;\n    private double upperSpectra;\n    private double minPivot;\n    private double sigma;\n    private double sigmaLow;\n    private double tau;\n    private double[] work;\n    private int pingPong;\n    private double qMax;\n    private double eMin;\n    private int    tType;\n    private double dMin;\n    private double dMin1;\n    private double dMin2;\n    private double dN;\n    private double dN1;\n    private double dN2;\n    private double g;\n    private double[] realEigenvalues;\n    private double[] imagEigenvalues;\n    private ArrayRealVector[] eigenvectors;\n    private RealMatrix cachedV;\n    private RealMatrix cachedD;\n    private RealMatrix cachedVt;\n    /**\n     * Find realEigenvalues using dqd/dqds algorithms.\n     * <p>This implementation is based on Beresford N. Parlett\n     * and Osni A. Marques paper <a\n     * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An\n     * Implementation of the dqds Algorithm (Positive Case)</a> and on the\n     * corresponding LAPACK routine DLASQ2.</p>\n     * @param n number of rows of the block\n     * @exception InvalidMatrixException if block cannot be diagonalized\n     * after 30 * n iterations\n     */\n    private void processGeneralBlock(final int n)\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public RealVector getEigenvector(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException;\n    /** {@inheritDoc} */\n    public double[] getRealEigenvalues()\n        throws InvalidMatrixException;\n    /**\n     * Compute the shift increment as an estimate of the smallest eigenvalue.\n     * <p>This implementation is a translation of the LAPACK routine DLAZQ4.</p>\n     * @param start start index\n     * @param end end index\n     * @param deflated number of realEigenvalues just deflated\n     */\n    private void computeShiftIncrement(final int start, final int end, final int deflated);\n    /**\n     * Compute the Gershgorin circles for all rows.\n     */\n    private void computeGershgorinCircles();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Calculates the eigen decomposition of a <strong>symmetric</strong> matrix.\n * <p>The eigen decomposition of matrix A is a set of two matrices:\n * V and D such that A = V D V<sup>T</sup>. A, V and D are all m &times; m\n * matrices.</p>\n * <p>As of 2.0, this class supports only <strong>symmetric</strong> matrices,\n * and hence computes only real realEigenvalues. This implies the D matrix returned by\n * {@link #getD()} is always diagonal and the imaginary values returned {@link\n * #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always null.</p>\n * <p>When called with a {@link RealMatrix} argument, this implementation only uses\n * the upper part of the matrix, the part below the diagonal is not accessed at all.</p>\n * <p>Eigenvalues are computed as soon as the matrix is decomposed, but eigenvectors\n * are computed only when required, i.e. only when one of the {@link #getEigenvector(int)},\n * {@link #getV()}, {@link #getVT()}, {@link #getSolver()} methods is called.</p>\n * <p>This implementation is based on Inderjit Singh Dhillon thesis\n * <a href=\"http://www.cs.utexas.edu/users/inderjit/public_papers/thesis.pdf\">A\n * New O(n<sup>2</sup>) Algorithm for the Symmetric Tridiagonal Eigenvalue/Eigenvector\n * Problem</a>, on Beresford N. Parlett and Osni A. Marques paper <a\n * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An Implementation of the\n * dqds Algorithm (Positive Case)</a> and on the corresponding LAPACK routines (DLARRE,\n * DLASQ2, DLAZQ3, DLAZQ4, DLASQ5 and DLASQ6).</p>\n * <p>The authors of the original fortran version are:\n *   <ul>\n *     <li>Beresford Parlett, University of California, Berkeley, USA</li>\n *     <li>Jim Demmel, University of California, Berkeley, USA</li>\n *     <li>Inderjit Dhillon, University of Texas, Austin, USA</li>\n *     <li>Osni Marques, LBNL/NERSC, USA</li>\n *     <li>Christof Voemel, University of California, Berkeley, USA</li>\n *   </ul>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class EigenDecompositionImpl implements EigenDecomposition {\n    private static final double TOLERANCE = 100 * MathUtils.EPSILON;\n    private static final double TOLERANCE_2 = TOLERANCE * TOLERANCE;\n    private double splitTolerance;\n    private double[] main;\n    private double[] secondary;\n    private double[] squaredSecondary;\n    private TriDiagonalTransformer transformer;\n    private double lowerSpectra;\n    private double upperSpectra;\n    private double minPivot;\n    private double sigma;\n    private double sigmaLow;\n    private double tau;\n    private double[] work;\n    private int pingPong;\n    private double qMax;\n    private double eMin;\n    private int    tType;\n    private double dMin;\n    private double dMin1;\n    private double dMin2;\n    private double dN;\n    private double dN1;\n    private double dN2;\n    private double g;\n    private double[] realEigenvalues;\n    private double[] imagEigenvalues;\n    private ArrayRealVector[] eigenvectors;\n    private RealMatrix cachedV;\n    private RealMatrix cachedD;\n    private RealMatrix cachedVt;\n    /**\n     * Find realEigenvalues using dqd/dqds algorithms.\n     * <p>This implementation is based on Beresford N. Parlett\n     * and Osni A. Marques paper <a\n     * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An\n     * Implementation of the dqds Algorithm (Positive Case)</a> and on the\n     * corresponding LAPACK routine DLASQ2.</p>\n     * @param n number of rows of the block\n     * @exception InvalidMatrixException if block cannot be diagonalized\n     * after 30 * n iterations\n     */\n    private void processGeneralBlock(final int n)\n        throws InvalidMatrixException;\n    /** {@inheritDoc} */\n    public RealVector getEigenvector(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException;\n    /** {@inheritDoc} */\n    public double[] getRealEigenvalues()\n        throws InvalidMatrixException;\n    /**\n     * Compute the shift increment as an estimate of the smallest eigenvalue.\n     * <p>This implementation is a translation of the LAPACK routine DLAZQ4.</p>\n     * @param start start index\n     * @param end end index\n     * @param deflated number of realEigenvalues just deflated\n     */\n    private void computeShiftIncrement(final int start, final int end, final int deflated);\n    /**\n     * Compute the Gershgorin circles for all rows.\n     */\n    private void computeGershgorinCircles();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private boolean isIncludedValue(double value, double[] searchArray,\n            double tolerance) {\n       boolean found = false;\n       int i = 0;\n       while (!found && i < searchArray.length) {\n           if (Math.abs(value - searchArray[i]) < tolerance) {\n               found = true;\n           }\n           i++;\n       }\n       return found;\n    }\n    private boolean isIncludedColumn(double[] column, RealMatrix searchMatrix,\n            double tolerance) {\n        boolean found = false;\n        int i = 0;\n        while (!found && i < searchMatrix.getColumnDimension()) {\n            double multiplier = 1.0;\n            boolean matching = true;\n            int j = 0;\n            while (matching && j < searchMatrix.getRowDimension()) {\n                double colEntry = searchMatrix.getEntry(j, i);\n                // Use the first entry where both are non-zero as scalar\n                if (Math.abs(multiplier - 1.0) <= Math.ulp(1.0) && Math.abs(colEntry) > 1E-14\n                        && Math.abs(column[j]) > 1e-14) {\n                    multiplier = colEntry / column[j];\n                }\n                if (Math.abs(column[j] * multiplier - colEntry) > tolerance) {\n                    matching = false;\n                }\n                j++;\n            }\n            found = matching;\n            i++;\n        }\n        return found;\n    }\n    public void testMath308() {\n\n        double[] mainTridiagonal = {\n            22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437\n        };\n        double[] secondaryTridiagonal = {\n            13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225\n        };\n\n        // the reference values have been computed using routine DSTEMR\n        // from the fortran library LAPACK version 3.2.1\n        double[] refEigenValues = {\n            82.044413207204002, 53.456697699894512, 52.536278520113882, 18.847969733754262, 14.138204224043099\n        };\n        RealVector[] refEigenVectors = {\n            new ArrayRealVector(new double[] { -0.000462690386766, -0.002118073109055,  0.011530080757413,  0.252322434584915,  0.967572088232592 }),\n            new ArrayRealVector(new double[] {  0.314647769490148,  0.750806415553905, -0.167700312025760, -0.537092972407375,  0.143854968127780 }),\n            new ArrayRealVector(new double[] {  0.222368839324646,  0.514921891363332, -0.021377019336614,  0.801196801016305, -0.207446991247740 }),\n            new ArrayRealVector(new double[] {  0.713933751051495, -0.190582113553930,  0.671410443368332, -0.056056055955050,  0.006541576993581 }),\n            new ArrayRealVector(new double[] {  0.584677060845929, -0.367177264979103, -0.721453187784497,  0.052971054621812, -0.005740715188257 })\n        };\n\n        EigenDecomposition decomposition =\n            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);\n\n        double[] eigenValues = decomposition.getRealEigenvalues();\n        for (int i = 0; i < refEigenValues.length; ++i) {\n            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);\n            assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);\n        }\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Solves a linear problem using the Two-Phase Simplex Method.\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class SimplexSolver extends AbstractLinearOptimizer {\n    private static final double DEFAULT_EPSILON = 1.0e-6;\n    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(final int col, final SimplexTableau tableau);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Solves a linear problem using the Two-Phase Simplex Method.\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class SimplexSolver extends AbstractLinearOptimizer {\n    private static final double DEFAULT_EPSILON = 1.0e-6;\n    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(final int col, final SimplexTableau tableau);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private LinearConstraint equationFromString(int numCoefficients, String s) {\n        Relationship relationship;\n        if (s.contains(\">=\")) {\n            relationship = Relationship.GEQ;\n        } else if (s.contains(\"<=\")) {\n            relationship = Relationship.LEQ;\n        } else if (s.contains(\"=\")) {\n            relationship = Relationship.EQ;\n        } else {\n            throw new IllegalArgumentException();\n        }\n\n        String[] equationParts = s.split(\"[>|<]?=\");\n        double rhs = Double.parseDouble(equationParts[1].trim());\n\n        RealVector lhs = new ArrayRealVector(numCoefficients);\n        String left = equationParts[0].replaceAll(\" ?x\", \"\");\n        String[] coefficients = left.split(\" \");\n        for (String coefficient : coefficients) {\n            double value = coefficient.charAt(0) == '-' ? -1 : 1;\n            int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n            lhs.setEntry(index, value);\n        }\n        return new LinearConstraint(lhs, relationship, rhs);\n    }\n    public void testMath288() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        assertEquals(10.0, solution.getValue(), .0000001);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A tableau for use in the Simplex method.\n * \n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\nclass SimplexTableau implements Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n    private final LinearObjectiveFunction f;\n    private final Collection<LinearConstraint> constraints;\n    private final boolean restrictToNonNegative;\n    /**\n     * @param src the source array\n     * @param dest the destination array\n     * @param destPos the destination position\n     */\n    private void copyArray(final double[] src, final double[] dest,\n                           final int destPos);\n    /** Set an entry of the tableau.\n     * @param row row index\n     * @param column column index\n     * @param value for the entry\n     */\n    protected final void setEntry(final int row, final int column,\n                                  final double value);\n    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRowForSolution(final int col);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A tableau for use in the Simplex method.\n * \n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\nclass SimplexTableau implements Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n    private final LinearObjectiveFunction f;\n    private final Collection<LinearConstraint> constraints;\n    private final boolean restrictToNonNegative;\n    /**\n     * @param src the source array\n     * @param dest the destination array\n     * @param destPos the destination position\n     */\n    private void copyArray(final double[] src, final double[] dest,\n                           final int destPos);\n    /** Set an entry of the tableau.\n     * @param row row index\n     * @param column column index\n     * @param value for the entry\n     */\n    protected final void setEntry(final int row, final int column,\n                                  final double value);\n    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRowForSolution(final int col);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private LinearConstraint equationFromString(int numCoefficients, String s) {\n        Relationship relationship;\n        if (s.contains(\">=\")) {\n            relationship = Relationship.GEQ;\n        } else if (s.contains(\"<=\")) {\n            relationship = Relationship.LEQ;\n        } else if (s.contains(\"=\")) {\n            relationship = Relationship.EQ;\n        } else {\n            throw new IllegalArgumentException();\n        }\n\n        String[] equationParts = s.split(\"[>|<]?=\");\n        double rhs = Double.parseDouble(equationParts[1].trim());\n\n        RealVector lhs = new ArrayRealVector(numCoefficients);\n        String left = equationParts[0].replaceAll(\" ?x\", \"\");\n        String[] coefficients = left.split(\" \");\n        for (String coefficient : coefficients) {\n            double value = coefficient.charAt(0) == '-' ? -1 : 1;\n            int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n            lhs.setEntry(index, value);\n        }\n        return new LinearConstraint(lhs, relationship, rhs);\n    }\n    public void testMath286() throws OptimizationException {\n      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );\n      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));\n\n      RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);\n      assertEquals(6.9, solution.getValue(), .0000001);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * This class implements the multi-directional direct search method.\n *\n * @version $Revision$ $Date$\n * @see NelderMead\n * @since 1.2\n */\npublic class MultiDirectional extends DirectSearchOptimizer {\n    private final double khi;\n    private final double gamma;\n    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * This class implements the multi-directional direct search method.\n *\n * @version $Revision$ $Date$\n * @see NelderMead\n * @since 1.2\n */\npublic class MultiDirectional extends DirectSearchOptimizer {\n    private final double khi;\n    private final double gamma;\n    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>  public void testMinimizeMaximize()\n      throws FunctionEvaluationException, ConvergenceException {\n\n      // the following function has 4 local extrema:\n      final double xM        = -3.841947088256863675365;\n      final double yM        = -1.391745200270734924416;\n      final double xP        =  0.2286682237349059125691;\n      final double yP        = -yM;\n      final double valueXmYm =  0.2373295333134216789769; // local  maximum\n      final double valueXmYp = -valueXmYm;                // local  minimum\n      final double valueXpYm = -0.7290400707055187115322; // global minimum\n      final double valueXpYp = -valueXpYm;                // global maximum\n      MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {\n          private static final long serialVersionUID = -7039124064449091152L;\n          public double value(double[] variables) throws FunctionEvaluationException {\n              final double x = variables[0];\n              final double y = variables[1];\n              return ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));\n          }\n      };\n\n      MultiDirectional optimizer = new MultiDirectional();\n      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));\n      optimizer.setMaxIterations(200);\n      optimizer.setStartConfiguration(new double[] { 0.2, 0.2 });\n      RealPointValuePair optimum;\n\n      // minimization\n      optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });\n      Assert.assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);\n      Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);\n      Assert.assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);\n      Assert.assertTrue(optimizer.getEvaluations() > 120);\n      Assert.assertTrue(optimizer.getEvaluations() < 150);\n\n      optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });\n      Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);\n      Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);\n      Assert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);              \n      Assert.assertTrue(optimizer.getEvaluations() > 120);\n      Assert.assertTrue(optimizer.getEvaluations() < 150);\n\n      // maximization\n      optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });\n      Assert.assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);\n      Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);\n      Assert.assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);\n      Assert.assertTrue(optimizer.getEvaluations() > 120);\n      Assert.assertTrue(optimizer.getEvaluations() < 150);\n\n      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));\n      optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });\n      Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);\n      Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);\n      Assert.assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);\n      Assert.assertTrue(optimizer.getEvaluations() > 180);\n      Assert.assertTrue(optimizer.getEvaluations() < 220);\n\n  }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Utility routines for {@link UnivariateRealSolver} objects.\n * \n * @version $Revision$ $Date$\n */\npublic class UnivariateRealSolverUtils {\n     /**\n     * This method attempts to find two values a and b satisfying <ul>\n     * <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>\n     * <li> <code> f(a) * f(b) <= 0 </code> </li>\n     * </ul>\n     * If f is continuous on <code>[a,b],</code> this means that <code>a</code>\n     * and <code>b</code> bracket a root of f.\n     * <p>\n     * The algorithm starts by setting \n     * <code>a := initial -1; b := initial +1,</code> examines the value of the\n     * function at <code>a</code> and <code>b</code> and keeps moving\n     * the endpoints out by one unit each time through a loop that terminates \n     * when one of the following happens: <ul>\n     * <li> <code> f(a) * f(b) <= 0 </code> --  success!</li>\n     * <li> <code> a = lower </code> and <code> b = upper</code> \n     * -- ConvergenceException </li>\n     * <li> <code> maximumIterations</code> iterations elapse \n     * -- ConvergenceException </li></ul></p>\n     * \n     * @param function the function\n     * @param initial initial midpoint of interval being expanded to\n     * bracket a root\n     * @param lowerBound lower bound (a is never lower than this value)\n     * @param upperBound upper bound (b never is greater than this\n     * value)\n     * @param maximumIterations maximum number of iterations to perform\n     * @return a two element array holding {a, b}.\n     * @throws ConvergenceException if the algorithm fails to find a and b\n     * satisfying the desired conditions\n     * @throws FunctionEvaluationException if an error occurs evaluating the \n     * function\n     * @throws IllegalArgumentException if function is null, maximumIterations\n     * is not positive, or initial is not between lowerBound and upperBound\n     */\n    public static double[] bracket(UnivariateRealFunction function,\n            double initial, double lowerBound, double upperBound, \n            int maximumIterations) throws ConvergenceException, \n            FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Utility routines for {@link UnivariateRealSolver} objects.\n * \n * @version $Revision$ $Date$\n */\npublic class UnivariateRealSolverUtils {\n     /**\n     * This method attempts to find two values a and b satisfying <ul>\n     * <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>\n     * <li> <code> f(a) * f(b) <= 0 </code> </li>\n     * </ul>\n     * If f is continuous on <code>[a,b],</code> this means that <code>a</code>\n     * and <code>b</code> bracket a root of f.\n     * <p>\n     * The algorithm starts by setting \n     * <code>a := initial -1; b := initial +1,</code> examines the value of the\n     * function at <code>a</code> and <code>b</code> and keeps moving\n     * the endpoints out by one unit each time through a loop that terminates \n     * when one of the following happens: <ul>\n     * <li> <code> f(a) * f(b) <= 0 </code> --  success!</li>\n     * <li> <code> a = lower </code> and <code> b = upper</code> \n     * -- ConvergenceException </li>\n     * <li> <code> maximumIterations</code> iterations elapse \n     * -- ConvergenceException </li></ul></p>\n     * \n     * @param function the function\n     * @param initial initial midpoint of interval being expanded to\n     * bracket a root\n     * @param lowerBound lower bound (a is never lower than this value)\n     * @param upperBound upper bound (b never is greater than this\n     * value)\n     * @param maximumIterations maximum number of iterations to perform\n     * @return a two element array holding {a, b}.\n     * @throws ConvergenceException if the algorithm fails to find a and b\n     * satisfying the desired conditions\n     * @throws FunctionEvaluationException if an error occurs evaluating the \n     * function\n     * @throws IllegalArgumentException if function is null, maximumIterations\n     * is not positive, or initial is not between lowerBound and upperBound\n     */\n    public static double[] bracket(UnivariateRealFunction function,\n            double initial, double lowerBound, double upperBound, \n            int maximumIterations) throws ConvergenceException, \n            FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * ContinuousDistributionAbstractTest for details.\n * \n * @version $Revision$ $Date$\n */\npublic class NormalDistributionTest extends ContinuousDistributionAbstractTest  {\n    private void verifyQuantiles() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        double mu = distribution.getMean();\n        double sigma = distribution.getStandardDeviation();\n        setCumulativeTestPoints( new double[] {mu - 2 *sigma, mu - sigma, \n                mu, mu + sigma, mu +2 * sigma,  mu +3 * sigma, mu + 4 * sigma,\n                mu + 5 * sigma});\n        // Quantiles computed using R (same as Mathematica)\n        setCumulativeTestValues(new double[] {0.02275013, 0.1586553, 0.5, 0.8413447, \n                0.9772499, 0.9986501, 0.9999683,  0.9999997});\n        verifyCumulativeProbabilities();       \n    }\n    private void checkDensity(double mean, double sd, double[] x, double[] expected) {\n        NormalDistribution d = new NormalDistributionImpl(mean, sd);\n        for (int i = 0; i < x.length; i++) {\n            assertEquals(expected[i], d.density(x[i]), 1e-9);\n        }\n    }\n    public void testMath280() throws MathException {\n        NormalDistribution normal = new NormalDistributionImpl(0,1);\n        double result = normal.inverseCumulativeProbability(0.9772498680518209);\n        assertEquals(2.0, result, 1.0e-12);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A tableau for use in the Simplex method.\n * \n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\nclass SimplexTableau implements Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n    private final LinearObjectiveFunction f;\n    private final Collection<LinearConstraint> constraints;\n    private final boolean restrictToNonNegative;\n    /** Set an entry of the tableau.\n     * @param row row index\n     * @param column column index\n     * @param value for the entry\n     */\n    protected final void setEntry(final int row, final int column,\n                                  final double value);\n    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A tableau for use in the Simplex method.\n * \n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\nclass SimplexTableau implements Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n    private final LinearObjectiveFunction f;\n    private final Collection<LinearConstraint> constraints;\n    private final boolean restrictToNonNegative;\n    /** Set an entry of the tableau.\n     * @param row row index\n     * @param column column index\n     * @param value for the entry\n     */\n    protected final void setEntry(final int row, final int column,\n                                  final double value);\n    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private LinearConstraint equationFromString(int numCoefficients, String s) {\n        Relationship relationship;\n        if (s.contains(\">=\")) {\n            relationship = Relationship.GEQ;\n        } else if (s.contains(\"<=\")) {\n            relationship = Relationship.LEQ;\n        } else if (s.contains(\"=\")) {\n            relationship = Relationship.EQ;\n        } else {\n            throw new IllegalArgumentException();\n        }\n\n        String[] equationParts = s.split(\"[>|<]?=\");\n        double rhs = Double.parseDouble(equationParts[1].trim());\n\n        RealVector lhs = new RealVectorImpl(numCoefficients);\n        String left = equationParts[0].replaceAll(\" ?x\", \"\");\n        String[] coefficients = left.split(\" \");\n        for (String coefficient : coefficients) {\n            double value = coefficient.charAt(0) == '-' ? -1 : 1;\n            int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n            lhs.setEntry(index, value);\n        }\n        return new LinearConstraint(lhs, relationship, rhs);\n    }\n    public void testSingleVariableAndConstraint() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        assertEquals(10.0, solution.getPoint()[0], 0.0);\n        assertEquals(30.0, solution.getValue(), 0.0);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * A tableau for use in the Simplex method.\n * \n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\nclass SimplexTableau implements Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n    private final LinearObjectiveFunction f;\n    private final Collection<LinearConstraint> constraints;\n    private final boolean restrictToNonNegative;\n    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution();\n    /** Set an entry of the tableau.\n     * @param row row index\n     * @param column column index\n     * @param value for the entry\n     */\n    protected final void setEntry(final int row, final int column,\n                                  final double value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * A tableau for use in the Simplex method.\n * \n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\nclass SimplexTableau implements Serializable {\n    private static final long serialVersionUID = -1369660067587938365L;\n    private final LinearObjectiveFunction f;\n    private final Collection<LinearConstraint> constraints;\n    private final boolean restrictToNonNegative;\n    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution();\n    /** Set an entry of the tableau.\n     * @param row row index\n     * @param column column index\n     * @param value for the entry\n     */\n    protected final void setEntry(final int row, final int column,\n                                  final double value);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private LinearConstraint equationFromString(int numCoefficients, String s) {\n        Relationship relationship;\n        if (s.contains(\">=\")) {\n            relationship = Relationship.GEQ;\n        } else if (s.contains(\"<=\")) {\n            relationship = Relationship.LEQ;\n        } else if (s.contains(\"=\")) {\n            relationship = Relationship.EQ;\n        } else {\n            throw new IllegalArgumentException();\n        }\n\n        String[] equationParts = s.split(\"[>|<]?=\");\n        double rhs = Double.parseDouble(equationParts[1].trim());\n\n        RealVector lhs = new RealVectorImpl(numCoefficients);\n        String left = equationParts[0].replaceAll(\" ?x\", \"\");\n        String[] coefficients = left.split(\" \");\n        for (String coefficient : coefficients) {\n            double value = coefficient.charAt(0) == '-' ? -1 : 1;\n            int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n            lhs.setEntry(index, value);\n        }\n        return new LinearConstraint(lhs, relationship, rhs);\n    }\n    public void testMath272() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        \n        assertEquals(0.0, solution.getPoint()[0], .0000001);\n        assertEquals(1.0, solution.getPoint()[1], .0000001);\n        assertEquals(1.0, solution.getPoint()[2], .0000001);\n        assertEquals(3.0, solution.getValue(), .0000001);\n      }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * Maintains a frequency distribution.\n * <p>\n * Accepts int, long, char or Object values.  New values added must be \n * comparable to those that have been added, otherwise the add method will \n * throw an IllegalArgumentException.</p>\n * <p>\n * Integer values (int, long, Integer, Long) are not distinguished by type -- \n * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have\n * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>\n * <p>\n * char values are converted by <code>addValue</code> to Character instances.\n * As such, these values are not comparable to integral values, so attempts\n * to combine integral types with chars in a frequency distribution will fail.\n * </p>\n * <p>\n * The values are ordered using the default (natural order), unless a  \n * <code>Comparator</code> is supplied in the constructor.</p>\n *\n * @version $Revision$ $Date$\n */\npublic class Frequency implements Serializable {\n    private static final long serialVersionUID = -3845586908418844111L;\n    private final TreeMap freqTable;\n    /**\n     * Return a string representation of this frequency\n     * distribution.\n     * \n     * @return a string representation.\n     */\n    @Override\n    public String toString();\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(char v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n     */\n    public void addValue(Comparable<?>v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(long v);\n    /** Clears the frequency table */\n    public void clear();\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(Integer v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(int v);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * Maintains a frequency distribution.\n * <p>\n * Accepts int, long, char or Object values.  New values added must be \n * comparable to those that have been added, otherwise the add method will \n * throw an IllegalArgumentException.</p>\n * <p>\n * Integer values (int, long, Integer, Long) are not distinguished by type -- \n * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have\n * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>\n * <p>\n * char values are converted by <code>addValue</code> to Character instances.\n * As such, these values are not comparable to integral values, so attempts\n * to combine integral types with chars in a frequency distribution will fail.\n * </p>\n * <p>\n * The values are ordered using the default (natural order), unless a  \n * <code>Comparator</code> is supplied in the constructor.</p>\n *\n * @version $Revision$ $Date$\n */\npublic class Frequency implements Serializable {\n    private static final long serialVersionUID = -3845586908418844111L;\n    private final TreeMap freqTable;\n    /**\n     * Return a string representation of this frequency\n     * distribution.\n     * \n     * @return a string representation.\n     */\n    @Override\n    public String toString();\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(char v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n     */\n    public void addValue(Comparable<?>v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(long v);\n    /** Clears the frequency table */\n    public void clear();\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(Integer v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(int v);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Revision$ $Date$\n */\npublic final class FrequencyTest extends TestCase {\n    public void testAddNonComparable(){\n        try {\n            f.addValue(new Object()); // This was previously OK\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException expected) {\n        }\n        f.clear();\n        f.addValue(1);\n        try {\n            f.addValue(new Object());\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException expected) {\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** The class represent lines in a three dimensional space.\n\n * <p>Each oriented line is intrinsically associated with an abscissa\n * which is a coordinate on the line. The point at abscissa 0 is the\n * orthogonal projection of the origin on the line, another equivalent\n * way to express this is to say that it is the point of the line\n * which is closest to the origin. Abscissa increases in the line\n * direction.</p>\n\n * @version $Id$\n * @since 3.0\n */\npublic class Line implements Embedding<Euclidean3D, Euclidean1D> {\n    private Vector3D direction;\n    private Vector3D zero;\n    /** Get a line with reversed direction.\n     * @return a new instance, with reversed direction\n     */\n    public Line revert();\n    /** Get the normalized direction vector.\n     * @return normalized direction vector\n     */\n    public Vector3D getDirection();\n    /** Reset the instance as if built from two points.\n     * @param p1 first point belonging to the line (this can be any point)\n     * @param p2 second point belonging to the line (this can be any point, different from p1)\n     * @exception MathIllegalArgumentException if the points are equal\n     */\n    public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** The class represent lines in a three dimensional space.\n\n * <p>Each oriented line is intrinsically associated with an abscissa\n * which is a coordinate on the line. The point at abscissa 0 is the\n * orthogonal projection of the origin on the line, another equivalent\n * way to express this is to say that it is the point of the line\n * which is closest to the origin. Abscissa increases in the line\n * direction.</p>\n\n * @version $Id$\n * @since 3.0\n */\npublic class Line implements Embedding<Euclidean3D, Euclidean1D> {\n    private Vector3D direction;\n    private Vector3D zero;\n    /** Get a line with reversed direction.\n     * @return a new instance, with reversed direction\n     */\n    public Line revert();\n    /** Get the normalized direction vector.\n     * @return normalized direction vector\n     */\n    public Vector3D getDirection();\n    /** Reset the instance as if built from two points.\n     * @param p1 first point belonging to the line (this can be any point)\n     * @param p2 second point belonging to the line (this can be any point, different from p1)\n     * @exception MathIllegalArgumentException if the points are equal\n     */\n    public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testRevert() {\n        \n        // setup\n        Line line = new Line(new Vector3D(1653345.6696423641, 6170370.041579291, 90000),\n                             new Vector3D(1650757.5050732433, 6160710.879908984, 0.9));\n        Vector3D expected = line.getDirection().negate();\n\n        // action\n        Line reverted = line.revert();\n\n        // verify\n        Assert.assertArrayEquals(expected.toArray(), reverted.getDirection().toArray(), 0);\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/** \n * Maintains a frequency distribution.\n * <p>\n * Accepts int, long, char or Object values.  New values added must be \n * comparable to those that have been added, otherwise the add method will \n * throw an IllegalArgumentException.</p>\n * <p>\n * Integer values (int, long, Integer, Long) are not distinguished by type -- \n * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have\n * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>\n * <p>\n * char values are converted by <code>addValue</code> to Character instances.\n * As such, these values are not comparable to integral values, so attempts\n * to combine integral types with chars in a frequency distribution will fail.\n * </p>\n * <p>\n * The values are ordered using the default (natural order), unless a  \n * <code>Comparator</code> is supplied in the constructor.</p>\n *\n * @version $Revision$ $Date$\n */\npublic class Frequency implements Serializable {\n    private static final long serialVersionUID = -3845586908418844111L;\n    private final TreeMap freqTable;\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(Integer v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(int v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(char v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(long v);\n    /** Clears the frequency table */\n    public void clear();\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n     * @throws ClassCastException if <code>v</code> is not Comparable\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v);\n    /**\n     * Return a string representation of this frequency\n     * distribution.\n     * \n     * @return a string representation.\n     */\n    @Override\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/** \n * Maintains a frequency distribution.\n * <p>\n * Accepts int, long, char or Object values.  New values added must be \n * comparable to those that have been added, otherwise the add method will \n * throw an IllegalArgumentException.</p>\n * <p>\n * Integer values (int, long, Integer, Long) are not distinguished by type -- \n * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have\n * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>\n * <p>\n * char values are converted by <code>addValue</code> to Character instances.\n * As such, these values are not comparable to integral values, so attempts\n * to combine integral types with chars in a frequency distribution will fail.\n * </p>\n * <p>\n * The values are ordered using the default (natural order), unless a  \n * <code>Comparator</code> is supplied in the constructor.</p>\n *\n * @version $Revision$ $Date$\n */\npublic class Frequency implements Serializable {\n    private static final long serialVersionUID = -3845586908418844111L;\n    private final TreeMap freqTable;\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(Integer v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(int v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(char v);\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(long v);\n    /** Clears the frequency table */\n    public void clear();\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n     * @throws ClassCastException if <code>v</code> is not Comparable\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v);\n    /**\n     * Return a string representation of this frequency\n     * distribution.\n     * \n     * @return a string representation.\n     */\n    @Override\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Revision$ $Date$\n */\npublic final class FrequencyTest extends TestCase {\n    public void testAddNonComparable(){\n        try {\n            f.addValue(new Object()); // This was OK\n            fail(\"Expected ClassCastException\");\n        } catch (ClassCastException expected) {\n        }\n        f.clear();\n        f.addValue(1);\n        try {\n            f.addValue(new Object());\n            fail(\"Expected ClassCastException\"); // Previously would have been IllegalArgument\n        } catch (ClassCastException expected) {\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a rational number.\n *\n * @since 1.1\n * @version $Revision$ $Date$\n */\npublic class Fraction extends Number implements Comparable<Fraction> {\n    public static final Fraction TWO = new Fraction(2, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n    private static final long serialVersionUID = 3071409609509774764L;\n    private final int denominator;\n    private final int numerator;\n    /**\n     * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * @return the fraction as a <tt>double</tt>\n     */\n    public double doubleValue();\n    /**\n     * Access the numerator.\n     * @return the numerator.\n     */\n    public int getNumerator();\n    /**\n     * Returns the absolute value of this fraction.\n     * @return the absolute value.\n     */\n    public Fraction abs();\n    /**\n     * Compares this object to another based on size.\n     * @param object the object to compare to\n     * @return -1 if this is less than <tt>object</tt>, +1 if this is greater\n     *         than <tt>object</tt>, 0 if they are equal.\n     */\n    public int compareTo(Fraction object);\n    /**\n     * Access the denominator.\n     * @return the denominator.\n     */\n    public int getDenominator();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a rational number.\n *\n * @since 1.1\n * @version $Revision$ $Date$\n */\npublic class Fraction extends Number implements Comparable<Fraction> {\n    public static final Fraction TWO = new Fraction(2, 1);\n    public static final Fraction ONE = new Fraction(1, 1);\n    public static final Fraction ZERO = new Fraction(0, 1);\n    public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n    private static final long serialVersionUID = 3071409609509774764L;\n    private final int denominator;\n    private final int numerator;\n    /**\n     * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * @return the fraction as a <tt>double</tt>\n     */\n    public double doubleValue();\n    /**\n     * Access the numerator.\n     * @return the numerator.\n     */\n    public int getNumerator();\n    /**\n     * Returns the absolute value of this fraction.\n     * @return the absolute value.\n     */\n    public Fraction abs();\n    /**\n     * Compares this object to another based on size.\n     * @param object the object to compare to\n     * @return -1 if this is less than <tt>object</tt>, +1 if this is greater\n     *         than <tt>object</tt>, 0 if they are equal.\n     */\n    public int compareTo(Fraction object);\n    /**\n     * Access the denominator.\n     * @return the denominator.\n     */\n    public int getDenominator();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {\n        assertEquals(expectedNumerator, actual.getNumerator());\n        assertEquals(expectedDenominator, actual.getDenominator());\n    }\n    private void checkIntegerOverflow(double a) {\n        try {\n            new Fraction(a, 1.0e-12, 1000);\n            fail(\"an exception should have been thrown\");\n        } catch (ConvergenceException ce) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n    }\n    public void testCompareTo() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(1, 3);\n        Fraction third = new Fraction(1, 2);\n        \n        assertEquals(0, first.compareTo(first));\n        assertEquals(0, first.compareTo(third));\n        assertEquals(1, first.compareTo(second));\n        assertEquals(-1, second.compareTo(first));\n\n        // these two values are different approximations of PI\n        // the first  one is approximately PI - 3.07e-18\n        // the second one is approximately PI + 1.936e-17\n        Fraction pi1 = new Fraction(1068966896, 340262731);\n        Fraction pi2 = new Fraction( 411557987, 131002976);\n        assertEquals(-1, pi1.compareTo(pi2));\n        assertEquals( 1, pi2.compareTo(pi1));\n        assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final double TWO_PI = 2 * Math.PI;\n    /**\n     * Returns a <code>double</code> representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>double</code>. The\n     * largest value of <code>n</code> for which all coefficients are <\n     * Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,\n     * Double.POSITIVE_INFINITY is returned</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n    public static double binomialCoefficientDouble(final int n, final int k);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long addAndCheck(long a, long b);\n    /**\n     * Returns the natural <code>log</code> of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n    public static double binomialCoefficientLog(final int n, final int k);\n    /**\n     * Subtract two integers, checking for overflow.\n     * \n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int subAndCheck(int x, int y);\n    /**\n     * Subtract two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the difference <code>a-b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long subAndCheck(long a, long b);\n    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is\n     * thrown.</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n    public static long binomialCoefficient(final int n, final int k);\n    /**\n     * Returns the <a href=\"http://mathworld.wolfram.com/HyperbolicCosine.html\">\n     * hyperbolic cosine</a> of x.\n     * \n     * @param x double value for which to find the hyperbolic cosine\n     * @return hyperbolic cosine of x\n     */\n    public static double cosh(double x);\n    /**\n     * Multiply two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the product <code>a * b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @param msg the message to use for any thrown exception.\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    private static long addAndCheck(long a, long b, String msg);\n    /**\n     * Add two integers, checking for overflow.\n     * \n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int addAndCheck(int x, int y);\n    /**\n     * Multiply two integers, checking for overflow.\n     * \n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int mulAndCheck(int x, int y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final double TWO_PI = 2 * Math.PI;\n    /**\n     * Returns a <code>double</code> representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>double</code>. The\n     * largest value of <code>n</code> for which all coefficients are <\n     * Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,\n     * Double.POSITIVE_INFINITY is returned</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n    public static double binomialCoefficientDouble(final int n, final int k);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long addAndCheck(long a, long b);\n    /**\n     * Returns the natural <code>log</code> of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n    public static double binomialCoefficientLog(final int n, final int k);\n    /**\n     * Subtract two integers, checking for overflow.\n     * \n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int subAndCheck(int x, int y);\n    /**\n     * Subtract two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the difference <code>a-b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long subAndCheck(long a, long b);\n    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is\n     * thrown.</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n    public static long binomialCoefficient(final int n, final int k);\n    /**\n     * Returns the <a href=\"http://mathworld.wolfram.com/HyperbolicCosine.html\">\n     * hyperbolic cosine</a> of x.\n     * \n     * @param x double value for which to find the hyperbolic cosine\n     * @return hyperbolic cosine of x\n     */\n    public static double cosh(double x);\n    /**\n     * Multiply two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the product <code>a * b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @param msg the message to use for any thrown exception.\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    private static long addAndCheck(long a, long b, String msg);\n    /**\n     * Add two integers, checking for overflow.\n     * \n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int addAndCheck(int x, int y);\n    /**\n     * Multiply two integers, checking for overflow.\n     * \n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int mulAndCheck(int x, int y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n *          2007) $\n */\npublic final class MathUtilsTest extends TestCase {\n    private long binomialCoefficient(int n, int k) throws ArithmeticException {\n        if (binomialCache.size() > n) {\n            Long cachedResult = binomialCache.get(n).get(new Integer(k));\n            if (cachedResult != null) {\n                return cachedResult.longValue();\n            }\n        }\n        long result = -1;\n        if ((n == k) || (k == 0)) {\n            result = 1;\n        } else if ((k == 1) || (k == n - 1)) {\n            result = n;\n        } else {\n            result = MathUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),\n                binomialCoefficient(n - 1, k));\n        }\n        if (result == -1) {\n            throw new ArithmeticException(\n                \"error computing binomial coefficient\");\n        }\n        for (int i = binomialCache.size(); i < n + 1; i++) {\n            binomialCache.add(new HashMap<Integer, Long>());\n        }\n        binomialCache.get(n).put(new Integer(k), new Long(result));\n        return result;\n    }\n    private long factorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    private void testAddAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.addAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n    private void testMulAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.mulAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n    private void testSubAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.subAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n    }\n    public void testBinomialCoefficientLarge() throws Exception {\n        // This tests all legal and illegal values for n <= 200.\n        for (int n = 0; n <= 200; n++) {\n            for (int k = 0; k <= n; k++) {\n                long ourResult = -1;\n                long exactResult = -1;\n                boolean shouldThrow = false;\n                boolean didThrow = false;\n                try {\n                    ourResult = MathUtils.binomialCoefficient(n, k);\n                } catch (ArithmeticException ex) {\n                    didThrow = true;\n                }\n                try {\n                    exactResult = binomialCoefficient(n, k);\n                } catch (ArithmeticException ex) {\n                    shouldThrow = true;\n                }\n                assertEquals(n+\",\"+k, shouldThrow, didThrow);\n                assertEquals(n+\",\"+k, exactResult, ourResult);\n                assertTrue(n+\",\"+k, (n > 66 || !didThrow));\n            }\n        }\n\n        long ourResult = MathUtils.binomialCoefficient(300, 3);\n        long exactResult = binomialCoefficient(300, 3);\n        assertEquals(exactResult, ourResult);\n\n        ourResult = MathUtils.binomialCoefficient(700, 697);\n        exactResult = binomialCoefficient(700, 697);\n        assertEquals(exactResult, ourResult);\n\n        // This one should throw\n        try {\n            MathUtils.binomialCoefficient(700, 300);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // Expected\n        }\n\n        // Larger values cannot be computed directly by our\n        // test implementation because of stack limitations,\n        // so we make little jumps to fill the cache.\n        for (int i = 2000; i <= 10000; i += 2000) {\n            ourResult = MathUtils.binomialCoefficient(i, 3);\n            exactResult = binomialCoefficient(i, 3);\n            assertEquals(exactResult, ourResult);\n        }\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final double TWO_PI = 2 * Math.PI;\n    /**\n     * Subtract two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the difference <code>a-b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long subAndCheck(long a, long b);\n    /** \n     * <p>Returns the \n     * <a href=\"http://mathworld.wolfram.com/Logarithm.html\">logarithm</a>\n     * for base <code>b</code> of <code>x</code>.\n     * </p>\n     * <p>Returns <code>NaN<code> if either argument is negative.  If \n     * <code>base</code> is 0 and <code>x</code> is positive, 0 is returned.\n     * If <code>base</code> is positive and <code>x</code> is 0, \n     * <code>Double.NEGATIVE_INFINITY</code> is returned.  If both arguments\n     * are 0, the result is <code>NaN</code>.</p>\n     * \n     * @param base the base of the logarithm, must be greater than 0\n     * @param x argument, must be greater than 0\n     * @return the value of the logarithm - the number y such that base^y = x.\n     * @since 1.2\n     */ \n    public static double log(double base, double x);\n    /**\n     * Returns true iff both arguments are null or have same dimensions\n     * and all their elements are {@link #equals(double,double) equals}\n     * \n     * @param x first array\n     * @param y second array\n     * @return true if the values are both null or have same dimension\n     * and equal elements\n     * @since 1.2\n     */\n    public static boolean equals(double[] x, double[] y);\n    /**\n     * Returns n!. Shorthand for <code>n</code> <a\n     * href=\"http://mathworld.wolfram.com/Factorial.html\"> Factorial</a>, the\n     * product of the numbers <code>1,...,n</code>.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which <code>n!</code> <\n     * Long.MAX_VALUE</code> is 20. If the computed value exceeds <code>Long.MAX_VALUE</code>\n     * an <code>ArithMeticException </code> is thrown.</li>\n     * </ul>\n     * </p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     * @throws IllegalArgumentException if n < 0\n     */\n    public static long factorial(final int n);\n    /**\n     * Returns n!. Shorthand for <code>n</code> <a\n     * href=\"http://mathworld.wolfram.com/Factorial.html\"> Factorial</a>, the\n     * product of the numbers <code>1,...,n</code> as a <code>double</code>.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>double</code>. The\n     * largest value of <code>n</code> for which <code>n!</code> <\n     * Double.MAX_VALUE</code> is 170. If the computed value exceeds\n     * Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>\n     * </ul>\n     * </p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws IllegalArgumentException if n < 0\n     */\n    public static double factorialDouble(final int n);\n    /**\n     * Returns the natural logarithm of n!.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * </ul></p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n    public static double factorialLog(final int n);\n    /**\n     * Multiply two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the product <code>a * b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b);\n    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is\n     * thrown.</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n    public static long binomialCoefficient(final int n, final int k);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @param msg the message to use for any thrown exception.\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    private static long addAndCheck(long a, long b, String msg);\n    /**\n     * Multiply two integers, checking for overflow.\n     * \n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int mulAndCheck(int x, int y);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long addAndCheck(long a, long b);\n    /**\n     * Subtract two integers, checking for overflow.\n     * \n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int subAndCheck(int x, int y);\n    /**\n     * Add two integers, checking for overflow.\n     * \n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int addAndCheck(int x, int y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final double TWO_PI = 2 * Math.PI;\n    /**\n     * Subtract two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the difference <code>a-b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long subAndCheck(long a, long b);\n    /** \n     * <p>Returns the \n     * <a href=\"http://mathworld.wolfram.com/Logarithm.html\">logarithm</a>\n     * for base <code>b</code> of <code>x</code>.\n     * </p>\n     * <p>Returns <code>NaN<code> if either argument is negative.  If \n     * <code>base</code> is 0 and <code>x</code> is positive, 0 is returned.\n     * If <code>base</code> is positive and <code>x</code> is 0, \n     * <code>Double.NEGATIVE_INFINITY</code> is returned.  If both arguments\n     * are 0, the result is <code>NaN</code>.</p>\n     * \n     * @param base the base of the logarithm, must be greater than 0\n     * @param x argument, must be greater than 0\n     * @return the value of the logarithm - the number y such that base^y = x.\n     * @since 1.2\n     */ \n    public static double log(double base, double x);\n    /**\n     * Returns true iff both arguments are null or have same dimensions\n     * and all their elements are {@link #equals(double,double) equals}\n     * \n     * @param x first array\n     * @param y second array\n     * @return true if the values are both null or have same dimension\n     * and equal elements\n     * @since 1.2\n     */\n    public static boolean equals(double[] x, double[] y);\n    /**\n     * Returns n!. Shorthand for <code>n</code> <a\n     * href=\"http://mathworld.wolfram.com/Factorial.html\"> Factorial</a>, the\n     * product of the numbers <code>1,...,n</code>.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which <code>n!</code> <\n     * Long.MAX_VALUE</code> is 20. If the computed value exceeds <code>Long.MAX_VALUE</code>\n     * an <code>ArithMeticException </code> is thrown.</li>\n     * </ul>\n     * </p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     * @throws IllegalArgumentException if n < 0\n     */\n    public static long factorial(final int n);\n    /**\n     * Returns n!. Shorthand for <code>n</code> <a\n     * href=\"http://mathworld.wolfram.com/Factorial.html\"> Factorial</a>, the\n     * product of the numbers <code>1,...,n</code> as a <code>double</code>.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>double</code>. The\n     * largest value of <code>n</code> for which <code>n!</code> <\n     * Double.MAX_VALUE</code> is 170. If the computed value exceeds\n     * Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>\n     * </ul>\n     * </p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws IllegalArgumentException if n < 0\n     */\n    public static double factorialDouble(final int n);\n    /**\n     * Returns the natural logarithm of n!.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * </ul></p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n    public static double factorialLog(final int n);\n    /**\n     * Multiply two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the product <code>a * b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b);\n    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is\n     * thrown.</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n    public static long binomialCoefficient(final int n, final int k);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @param msg the message to use for any thrown exception.\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    private static long addAndCheck(long a, long b, String msg);\n    /**\n     * Multiply two integers, checking for overflow.\n     * \n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int mulAndCheck(int x, int y);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long addAndCheck(long a, long b);\n    /**\n     * Subtract two integers, checking for overflow.\n     * \n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int subAndCheck(int x, int y);\n    /**\n     * Add two integers, checking for overflow.\n     * \n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int addAndCheck(int x, int y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n *          2007) $\n */\npublic final class MathUtilsTest extends TestCase {\n    private long binomialCoefficient(int n, int k) {\n        if ((n == k) || (k == 0)) {\n            return 1;\n        }\n        if ((k == 1) || (k == n - 1)) {\n            return n;\n        }\n        return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);\n    }\n    private long factorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    private void testAddAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.addAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n    private void testMulAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.mulAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n    private void testSubAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.subAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n    }\n    public void testFactorial() {\n        for (int i = 1; i < 21; i++) {\n            assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));\n            assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n            assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);\n        }\n        \n        assertEquals(\"0\", 1, MathUtils.factorial(0));\n        assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n        assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final double TWO_PI = 2 * Math.PI;\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long addAndCheck(long a, long b);\n    /**\n     * Returns the natural logarithm of n!.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * </ul></p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n    public static double factorialLog(final int n);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @param msg the message to use for any thrown exception.\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    private static long addAndCheck(long a, long b, String msg);\n    /**\n     * Subtract two integers, checking for overflow.\n     * \n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int subAndCheck(int x, int y);\n    /**\n     * Multiply two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the product <code>a * b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b);\n    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * \n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @since 1.1\n     */\n    public static int gcd(int u, int v);\n    /**\n     * Multiply two integers, checking for overflow.\n     * \n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int mulAndCheck(int x, int y);\n    /**\n     * Subtract two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the difference <code>a-b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long subAndCheck(long a, long b);\n    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException\n     *      </code> is\n     * thrown.</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n    public static long binomialCoefficient(final int n, final int k);\n    /**\n     * Add two integers, checking for overflow.\n     * \n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int addAndCheck(int x, int y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final double TWO_PI = 2 * Math.PI;\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long addAndCheck(long a, long b);\n    /**\n     * Returns the natural logarithm of n!.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * </ul></p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n    public static double factorialLog(final int n);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @param msg the message to use for any thrown exception.\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    private static long addAndCheck(long a, long b, String msg);\n    /**\n     * Subtract two integers, checking for overflow.\n     * \n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int subAndCheck(int x, int y);\n    /**\n     * Multiply two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the product <code>a * b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b);\n    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * \n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @since 1.1\n     */\n    public static int gcd(int u, int v);\n    /**\n     * Multiply two integers, checking for overflow.\n     * \n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int mulAndCheck(int x, int y);\n    /**\n     * Subtract two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the difference <code>a-b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long subAndCheck(long a, long b);\n    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException\n     *      </code> is\n     * thrown.</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n    public static long binomialCoefficient(final int n, final int k);\n    /**\n     * Add two integers, checking for overflow.\n     * \n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int addAndCheck(int x, int y);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n *          2007) $\n */\npublic final class MathUtilsTest extends TestCase {\n    private long binomialCoefficient(int n, int k) {\n        if ((n == k) || (k == 0)) {\n            return 1;\n        }\n        if ((k == 1) || (k == n - 1)) {\n            return n;\n        }\n        return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);\n    }\n    private long factorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    private void testAddAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.addAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n    private void testMulAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.mulAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n    private void testSubAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.subAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n    }\n    public void testGcd() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.gcd(0, 0));\n\n        assertEquals(b, MathUtils.gcd(0, b));\n        assertEquals(a, MathUtils.gcd(a, 0));\n        assertEquals(b, MathUtils.gcd(0, -b));\n        assertEquals(a, MathUtils.gcd(-a, 0));\n\n        assertEquals(10, MathUtils.gcd(a, b));\n        assertEquals(10, MathUtils.gcd(-a, b));\n        assertEquals(10, MathUtils.gcd(a, -b));\n        assertEquals(10, MathUtils.gcd(-a, -b));\n\n        assertEquals(1, MathUtils.gcd(a, c));\n        assertEquals(1, MathUtils.gcd(-a, c));\n        assertEquals(1, MathUtils.gcd(a, -c));\n        assertEquals(1, MathUtils.gcd(-a, -c));\n\n        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Default implementation of\n * {@link org.apache.commons.math.distribution.FDistribution}.\n *\n * @version $Revision$ $Date$\n */\npublic class FDistributionImpl\n    extends AbstractContinuousDistribution\n    implements FDistribution, Serializable  {\n    private static final long serialVersionUID = -8516354193418641566L;\n    private double numeratorDegreesOfFreedom;\n    private double denominatorDegreesOfFreedom;\n    /**\n     * Access the domain value upper bound, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return domain value upper bound, i.e.\n     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n     */\n    protected double getDomainUpperBound(double p);\n    /**\n     * Modify the denominator degrees of freedom.\n     * @param degreesOfFreedom the new denominator degrees of freedom.\n     * @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not\n     *         positive.\n     */\n    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom);\n    /**\n     * For this distribution, X, this method returns P(X &lt; x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/F-Distribution.html\">\n     * F-Distribution</a>, equation (4).</li>\n     * </ul>\n     * \n     * @param x the value at which the CDF is evaluated.\n     * @return CDF for this distribution. \n     * @throws MathException if the cumulative probability can not be\n     *            computed due to convergence or other numerical errors.\n     */\n    public double cumulativeProbability(double x) throws MathException;\n    /**\n     * For this distribution, X, this method returns the critical point x, such\n     * that P(X &lt; x) = <code>p</code>.\n     * <p>\n     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n     *\n     * @param p the desired probability\n     * @return x, such that P(X &lt; x) = <code>p</code>\n     * @throws MathException if the inverse cumulative probability can not be\n     *         computed due to convergence or other numerical errors.\n     * @throws IllegalArgumentException if <code>p</code> is not a valid\n     *         probability.\n     */\n    public double inverseCumulativeProbability(final double p) \n        throws MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Default implementation of\n * {@link org.apache.commons.math.distribution.FDistribution}.\n *\n * @version $Revision$ $Date$\n */\npublic class FDistributionImpl\n    extends AbstractContinuousDistribution\n    implements FDistribution, Serializable  {\n    private static final long serialVersionUID = -8516354193418641566L;\n    private double numeratorDegreesOfFreedom;\n    private double denominatorDegreesOfFreedom;\n    /**\n     * Access the domain value upper bound, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return domain value upper bound, i.e.\n     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n     */\n    protected double getDomainUpperBound(double p);\n    /**\n     * Modify the denominator degrees of freedom.\n     * @param degreesOfFreedom the new denominator degrees of freedom.\n     * @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not\n     *         positive.\n     */\n    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom);\n    /**\n     * For this distribution, X, this method returns P(X &lt; x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/F-Distribution.html\">\n     * F-Distribution</a>, equation (4).</li>\n     * </ul>\n     * \n     * @param x the value at which the CDF is evaluated.\n     * @return CDF for this distribution. \n     * @throws MathException if the cumulative probability can not be\n     *            computed due to convergence or other numerical errors.\n     */\n    public double cumulativeProbability(double x) throws MathException;\n    /**\n     * For this distribution, X, this method returns the critical point x, such\n     * that P(X &lt; x) = <code>p</code>.\n     * <p>\n     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n     *\n     * @param p the desired probability\n     * @return x, such that P(X &lt; x) = <code>p</code>\n     * @throws MathException if the inverse cumulative probability can not be\n     *         computed due to convergence or other numerical errors.\n     * @throws IllegalArgumentException if <code>p</code> is not a valid\n     *         probability.\n     */\n    public double inverseCumulativeProbability(final double p) \n        throws MathException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * ContinuousDistributionAbstractTest for details.\n * \n * @version $Revision$ $Date$\n */\npublic class FDistributionTest extends ContinuousDistributionAbstractTest {\n    public void testSmallDegreesOfFreedom() throws Exception {\n        org.apache.commons.math.distribution.FDistributionImpl fd =\n            new org.apache.commons.math.distribution.FDistributionImpl(\n                1.0, 1.0);\n        double p = fd.cumulativeProbability(0.975);\n        double x = fd.inverseCumulativeProbability(p);\n        assertEquals(0.975, x, 1.0e-5);\n\n        fd.setDenominatorDegreesOfFreedom(2.0);\n        p = fd.cumulativeProbability(0.975);\n        x = fd.inverseCumulativeProbability(p);\n        assertEquals(0.975, x, 1.0e-5);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Representation of a Complex number - a number which has both a \n * real and imaginary part.\n * <p>\n * Implementations of arithmetic operations handle <code>NaN</code> and\n * infinite values according to the rules for {@link java.lang.Double}\n * arithmetic, applying definitional formulas and returning <code>NaN</code> or\n * infinite values in real or imaginary parts as these arise in computation. \n * See individual method javadocs for details.</p>\n * <p>\n * {@link #equals} identifies all values with <code>NaN</code> in either real \n * or imaginary part - e.g., <pre>\n * <code>1 + NaNi  == NaN + i == NaN + NaNi.</code></pre></p>\n *\n * @version $Revision$ $Date$\n */\npublic class Complex implements Serializable  {\n    private static final long serialVersionUID = -6530173849413811929L;\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private final double imaginary;\n    private final double real;\n    /**\n     * Return the product of this complex number and the given complex number.\n     * <p>\n     * Implements preliminary checks for NaN and infinity followed by\n     * the definitional formula:\n     * <pre><code>\n     * (a + bi)(c + di) = (ac - bd) + (ad + bc)i\n     * </code></pre>\n     * </p>\n     * <p>\n     * Returns {@link #NaN} if either this or <code>rhs</code> has one or more\n     * NaN parts.\n     * </p>\n     * Returns {@link #INF} if neither this nor <code>rhs</code> has one or more\n     * NaN parts and if either this or <code>rhs</code> has one or more\n     * infinite parts (same result is returned regardless of the sign of the\n     * components).\n     * </p>\n     * <p>\n     * Returns finite values in components of the result per the\n     * definitional formula in all remaining cases.\n     *  </p>\n     * \n     * @param rhs the other complex number\n     * @return the complex number product\n     * @throws NullPointerException if <code>rhs</code> is null\n     */\n    public Complex multiply(Complex rhs);\n    /**\n     * Test for the equality of two Complex objects.\n     * <p>\n     * If both the real and imaginary parts of two Complex numbers\n     * are exactly the same, and neither is <code>Double.NaN</code>, the two\n     * Complex objects are considered to be equal.</p>\n     * <p>\n     * All <code>NaN</code> values are considered to be equal - i.e, if either\n     * (or both) real and imaginary parts of the complex number are equal\n     * to <code>Double.NaN</code>, the complex number is equal to \n     * <code>Complex.NaN</code>.</p>\n     *\n     * @param other Object to test for equality to this\n     * @return true if two Complex objects are equal, false if\n     *         object is null, not an instance of Complex, or\n     *         not equal to this Complex instance\n     * \n     */\n    public boolean equals(Object other);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Representation of a Complex number - a number which has both a \n * real and imaginary part.\n * <p>\n * Implementations of arithmetic operations handle <code>NaN</code> and\n * infinite values according to the rules for {@link java.lang.Double}\n * arithmetic, applying definitional formulas and returning <code>NaN</code> or\n * infinite values in real or imaginary parts as these arise in computation. \n * See individual method javadocs for details.</p>\n * <p>\n * {@link #equals} identifies all values with <code>NaN</code> in either real \n * or imaginary part - e.g., <pre>\n * <code>1 + NaNi  == NaN + i == NaN + NaNi.</code></pre></p>\n *\n * @version $Revision$ $Date$\n */\npublic class Complex implements Serializable  {\n    private static final long serialVersionUID = -6530173849413811929L;\n    public static final Complex I = new Complex(0.0, 1.0);\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n    private final double imaginary;\n    private final double real;\n    /**\n     * Return the product of this complex number and the given complex number.\n     * <p>\n     * Implements preliminary checks for NaN and infinity followed by\n     * the definitional formula:\n     * <pre><code>\n     * (a + bi)(c + di) = (ac - bd) + (ad + bc)i\n     * </code></pre>\n     * </p>\n     * <p>\n     * Returns {@link #NaN} if either this or <code>rhs</code> has one or more\n     * NaN parts.\n     * </p>\n     * Returns {@link #INF} if neither this nor <code>rhs</code> has one or more\n     * NaN parts and if either this or <code>rhs</code> has one or more\n     * infinite parts (same result is returned regardless of the sign of the\n     * components).\n     * </p>\n     * <p>\n     * Returns finite values in components of the result per the\n     * definitional formula in all remaining cases.\n     *  </p>\n     * \n     * @param rhs the other complex number\n     * @return the complex number product\n     * @throws NullPointerException if <code>rhs</code> is null\n     */\n    public Complex multiply(Complex rhs);\n    /**\n     * Test for the equality of two Complex objects.\n     * <p>\n     * If both the real and imaginary parts of two Complex numbers\n     * are exactly the same, and neither is <code>Double.NaN</code>, the two\n     * Complex objects are considered to be equal.</p>\n     * <p>\n     * All <code>NaN</code> values are considered to be equal - i.e, if either\n     * (or both) real and imaginary parts of the complex number are equal\n     * to <code>Double.NaN</code>, the complex number is equal to \n     * <code>Complex.NaN</code>.</p>\n     *\n     * @param other Object to test for equality to this\n     * @return true if two Complex objects are equal, false if\n     *         object is null, not an instance of Complex, or\n     *         not equal to this Complex instance\n     * \n     */\n    public boolean equals(Object other);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testMath221() {\n        assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implements the <a href=\"http://mathworld.wolfram.com/BrentsMethod.html\">\n * Brent algorithm</a> for  finding zeros of real univariate functions.\n * <p>\n * The function should be continuous but not necessarily smooth.</p>\n *  \n * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n */\npublic class BrentSolver extends UnivariateRealSolverImpl {\n    private static final long serialVersionUID = -2136672307739067002L;\n    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded \n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException;\n    /**\n     * Find a zero starting search according to the three provided points.\n     * @param x0 old approximation for the root\n     * @param y0 function value at the approximation for the root\n     * @param x1 last calculated approximation for the root\n     * @param y1 function value at the last calculated approximation\n     * for the root\n     * @param x2 bracket point (must be set to x0 if no bracket point is\n     * known, this will force starting with linear interpolation)\n     * @param y2 function value at the bracket point.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     * the function \n     */\n    private double solve(double x0, double y0,\n                         double x1, double y1,\n                         double x2, double y2)\n    throws MaxIterationsExceededException, FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implements the <a href=\"http://mathworld.wolfram.com/BrentsMethod.html\">\n * Brent algorithm</a> for  finding zeros of real univariate functions.\n * <p>\n * The function should be continuous but not necessarily smooth.</p>\n *  \n * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n */\npublic class BrentSolver extends UnivariateRealSolverImpl {\n    private static final long serialVersionUID = -2136672307739067002L;\n    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded \n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException;\n    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException;\n    /**\n     * Find a zero starting search according to the three provided points.\n     * @param x0 old approximation for the root\n     * @param y0 function value at the approximation for the root\n     * @param x1 last calculated approximation for the root\n     * @param y1 function value at the last calculated approximation\n     * for the root\n     * @param x2 bracket point (must be set to x0 if no bracket point is\n     * known, this will force starting with linear interpolation)\n     * @param y2 function value at the bracket point.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     * the function \n     */\n    private double solve(double x0, double y0,\n                         double x1, double y1,\n                         double x2, double y2)\n    throws MaxIterationsExceededException, FunctionEvaluationException;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testRootEndpoints() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver(f);\n        \n        // endpoint is root\n        double result = solver.solve(Math.PI, 4);\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n\n        result = solver.solve(3, Math.PI);\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implementation of RealMatrix using a double[][] array to store entries and\n * <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n * LU decomposition</a> to support linear system\n * solution and inverse.\n * <p>\n * The LU decomposition is performed as needed, to support the following operations: <ul>\n * <li>solve</li>\n * <li>isSingular</li>\n * <li>getDeterminant</li>\n * <li>inverse</li> </ul></p>\n * <p>\n * <strong>Usage notes</strong>:<br>\n * <ul><li>\n * The LU decomposition is cached and reused on subsequent calls.   \n * If data are modified via references to the underlying array obtained using\n * <code>getDataRef()</code>, then the stored LU decomposition will not be\n * discarded.  In this case, you need to explicitly invoke \n * <code>LUDecompose()</code> to recompute the decomposition\n * before using any of the methods above.</li>\n * <li>\n * As specified in the {@link RealMatrix} interface, matrix element indexing\n * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n * returns the element in the first row, first column of the matrix.</li></ul>\n * </p>\n *\n * @version $Revision$ $Date$\n */\npublic class RealMatrixImpl implements RealMatrix, Serializable {\n    private static final long serialVersionUID = -4828886979278117018L;\n    private static final double TOO_SMALL = 10E-12;\n    /**\n     * @param v vector to operate on\n     * @throws IllegalArgumentException if columnDimension != v.length\n     * @return resulting vector\n     */\n    public double[] operate(double[] v) throws IllegalArgumentException;\n    /**\n     * @return rowDimension\n     */\n    public int getRowDimension();\n}\n/**\n * Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries\n * and <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n * LU decompostion</a> to support linear system \n * solution and inverse.\n * <p>\n * The LU decompostion is performed as needed, to support the following operations: <ul>\n * <li>solve</li>\n * <li>isSingular</li>\n * <li>getDeterminant</li>\n * <li>inverse</li> </ul></p>\n * <p>\n* <strong>Usage notes</strong>:<br>\n * <ul><li>\n * The LU decomposition is stored and reused on subsequent calls.  If matrix\n * data are modified using any of the public setXxx methods, the saved\n * decomposition is discarded.  If data are modified via references to the\n * underlying array obtained using <code>getDataRef()</code>, then the stored\n * LU decomposition will not be discarded.  In this case, you need to\n * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n * before using any of the methods above.</li>\n * <li>\n * As specified in the {@link BigMatrix} interface, matrix element indexing\n * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n * returns the element in the first row, first column of the matrix.</li></ul></p>\n * \n * @version $Revision$ $Date$\n */\npublic class BigMatrixImpl implements BigMatrix, Serializable {\n    private static final long serialVersionUID = -1011428905656140431L;\n    private int roundingMode = BigDecimal.ROUND_HALF_UP;\n    private int scale = 64;\n    private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);\n    /**\n     * Returns the result of multiplying this by the vector <code>v</code>.\n     *\n     * @param v the vector to operate on\n     * @return this*v\n     * @throws IllegalArgumentException if columnDimension != v.size()\n     */\n    public BigDecimal[] operate(double[] v) throws IllegalArgumentException;\n    /**\n     * Returns the result of multiplying this by the vector <code>v</code>.\n     *\n     * @param v the vector to operate on\n     * @return this*v\n     * @throws IllegalArgumentException if columnDimension != v.size()\n     */\n    public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException;\n    /**\n     * Returns the number of rows in the matrix.\n     *\n     * @return rowDimension\n     */\n    public int getRowDimension();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implementation of RealMatrix using a double[][] array to store entries and\n * <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n * LU decomposition</a> to support linear system\n * solution and inverse.\n * <p>\n * The LU decomposition is performed as needed, to support the following operations: <ul>\n * <li>solve</li>\n * <li>isSingular</li>\n * <li>getDeterminant</li>\n * <li>inverse</li> </ul></p>\n * <p>\n * <strong>Usage notes</strong>:<br>\n * <ul><li>\n * The LU decomposition is cached and reused on subsequent calls.   \n * If data are modified via references to the underlying array obtained using\n * <code>getDataRef()</code>, then the stored LU decomposition will not be\n * discarded.  In this case, you need to explicitly invoke \n * <code>LUDecompose()</code> to recompute the decomposition\n * before using any of the methods above.</li>\n * <li>\n * As specified in the {@link RealMatrix} interface, matrix element indexing\n * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n * returns the element in the first row, first column of the matrix.</li></ul>\n * </p>\n *\n * @version $Revision$ $Date$\n */\npublic class RealMatrixImpl implements RealMatrix, Serializable {\n    private static final long serialVersionUID = -4828886979278117018L;\n    private static final double TOO_SMALL = 10E-12;\n    /**\n     * @param v vector to operate on\n     * @throws IllegalArgumentException if columnDimension != v.length\n     * @return resulting vector\n     */\n    public double[] operate(double[] v) throws IllegalArgumentException;\n    /**\n     * @return rowDimension\n     */\n    public int getRowDimension();\n}\n/**\n * Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries\n * and <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n * LU decompostion</a> to support linear system \n * solution and inverse.\n * <p>\n * The LU decompostion is performed as needed, to support the following operations: <ul>\n * <li>solve</li>\n * <li>isSingular</li>\n * <li>getDeterminant</li>\n * <li>inverse</li> </ul></p>\n * <p>\n* <strong>Usage notes</strong>:<br>\n * <ul><li>\n * The LU decomposition is stored and reused on subsequent calls.  If matrix\n * data are modified using any of the public setXxx methods, the saved\n * decomposition is discarded.  If data are modified via references to the\n * underlying array obtained using <code>getDataRef()</code>, then the stored\n * LU decomposition will not be discarded.  In this case, you need to\n * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n * before using any of the methods above.</li>\n * <li>\n * As specified in the {@link BigMatrix} interface, matrix element indexing\n * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n * returns the element in the first row, first column of the matrix.</li></ul></p>\n * \n * @version $Revision$ $Date$\n */\npublic class BigMatrixImpl implements BigMatrix, Serializable {\n    private static final long serialVersionUID = -1011428905656140431L;\n    private int roundingMode = BigDecimal.ROUND_HALF_UP;\n    private int scale = 64;\n    private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);\n    /**\n     * Returns the result of multiplying this by the vector <code>v</code>.\n     *\n     * @param v the vector to operate on\n     * @return this*v\n     * @throws IllegalArgumentException if columnDimension != v.size()\n     */\n    public BigDecimal[] operate(double[] v) throws IllegalArgumentException;\n    /**\n     * Returns the result of multiplying this by the vector <code>v</code>.\n     *\n     * @param v the vector to operate on\n     * @return this*v\n     * @throws IllegalArgumentException if columnDimension != v.size()\n     */\n    public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException;\n    /**\n     * Returns the number of rows in the matrix.\n     *\n     * @return rowDimension\n     */\n    public int getRowDimension();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @version $Revision$ $Date$\n */\npublic final class BigMatrixImplTest extends TestCase {\n    public void testMath209() {\n        BigMatrix a = new BigMatrixImpl(new BigDecimal[][] {\n                { new BigDecimal(1), new BigDecimal(2) },\n                { new BigDecimal(3), new BigDecimal(4) },\n                { new BigDecimal(5), new BigDecimal(6) }\n        }, false);\n        BigDecimal[] b = a.operate(new BigDecimal[] { new BigDecimal(1), new BigDecimal(1) });\n        assertEquals(a.getRowDimension(), b.length);\n        assertEquals( 3.0, b[0].doubleValue(), 1.0e-12);\n        assertEquals( 7.0, b[1].doubleValue(), 1.0e-12);\n        assertEquals(11.0, b[2].doubleValue(), 1.0e-12);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final double TWO_PI = 2 * Math.PI;\n    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * Special cases:\n     * <ul>\n     * <li>The invocations\n     * <code>gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)</code>,\n     * <code>gcd(Integer.MIN_VALUE, 0)</code> and\n     * <code>gcd(0, Integer.MIN_VALUE)</code> throw an\n     * <code>ArithmeticException</code>, because the result would be 2^31, which\n     * is too large for an int value.</li>\n     * <li>The result of <code>gcd(x, x)</code>, <code>gcd(0, x)</code> and\n     * <code>gcd(x, 0)</code> is the absolute value of <code>x</code>, except\n     * for the special cases above.\n     * <li>The invocation <code>gcd(0, 0)</code> is the only one which returns\n     * <code>0</code>.</li>\n     * </ul>\n     * \n     * @param u any number\n     * @param v any number\n     * @return the greatest common divisor, never negative\n     * @throws ArithmeticException\n     *             if the result cannot be represented as a nonnegative int\n     *             value\n     * @since 1.1\n     */\n    public static int gcd(final int p, final int q);\n    /**\n     * Subtract two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the difference <code>a-b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long subAndCheck(long a, long b);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @param msg the message to use for any thrown exception.\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    private static long addAndCheck(long a, long b, String msg);\n    /**\n     * <p>\n     * Returns the least common multiple of the absolute value of two numbers,\n     * using the formula <code>lcm(a,b) = (a / gcd(a,b)) * b</code>.\n     * </p>\n     * Special cases:\n     * <ul>\n     * <li>The invocations <code>lcm(Integer.MIN_VALUE, n)</code> and\n     * <code>lcm(n, Integer.MIN_VALUE)</code>, where <code>abs(n)</code> is a\n     * power of 2, throw an <code>ArithmeticException</code>, because the result\n     * would be 2^31, which is too large for an int value.</li>\n     * <li>The result of <code>lcm(0, x)</code> and <code>lcm(x, 0)</code> is\n     * <code>0</code> for any <code>x</code>.\n     * </ul>\n     * \n     * @param a any number\n     * @param b any number\n     * @return the least common multiple, never negative\n     * @throws ArithmeticException\n     *             if the result cannot be represented as a nonnegative int\n     *             value\n     * @since 1.1\n     */\n    public static int lcm(int a, int b);\n    /**\n     * Add two integers, checking for overflow.\n     * \n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int addAndCheck(int x, int y);\n    /**\n     * Multiply two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the product <code>a * b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b);\n    /**\n     * Multiply two integers, checking for overflow.\n     * \n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int mulAndCheck(int x, int y);\n    /**\n     * Subtract two integers, checking for overflow.\n     * \n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int subAndCheck(int x, int y);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long addAndCheck(long a, long b);\n    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is\n     * thrown.</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n    public static long binomialCoefficient(final int n, final int k);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\npublic final class MathUtils {\n    public static final double EPSILON = 0x1.0p-53;\n    public static final double SAFE_MIN = 0x1.0p-1022;\n    private static final byte  NB = (byte)-1;\n    private static final short NS = (short)-1;\n    private static final byte  PB = (byte)1;\n    private static final short PS = (short)1;\n    private static final byte  ZB = (byte)0;\n    private static final short ZS = (short)0;\n    private static final double TWO_PI = 2 * Math.PI;\n    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * Special cases:\n     * <ul>\n     * <li>The invocations\n     * <code>gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)</code>,\n     * <code>gcd(Integer.MIN_VALUE, 0)</code> and\n     * <code>gcd(0, Integer.MIN_VALUE)</code> throw an\n     * <code>ArithmeticException</code>, because the result would be 2^31, which\n     * is too large for an int value.</li>\n     * <li>The result of <code>gcd(x, x)</code>, <code>gcd(0, x)</code> and\n     * <code>gcd(x, 0)</code> is the absolute value of <code>x</code>, except\n     * for the special cases above.\n     * <li>The invocation <code>gcd(0, 0)</code> is the only one which returns\n     * <code>0</code>.</li>\n     * </ul>\n     * \n     * @param u any number\n     * @param v any number\n     * @return the greatest common divisor, never negative\n     * @throws ArithmeticException\n     *             if the result cannot be represented as a nonnegative int\n     *             value\n     * @since 1.1\n     */\n    public static int gcd(final int p, final int q);\n    /**\n     * Subtract two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the difference <code>a-b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long subAndCheck(long a, long b);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @param msg the message to use for any thrown exception.\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    private static long addAndCheck(long a, long b, String msg);\n    /**\n     * <p>\n     * Returns the least common multiple of the absolute value of two numbers,\n     * using the formula <code>lcm(a,b) = (a / gcd(a,b)) * b</code>.\n     * </p>\n     * Special cases:\n     * <ul>\n     * <li>The invocations <code>lcm(Integer.MIN_VALUE, n)</code> and\n     * <code>lcm(n, Integer.MIN_VALUE)</code>, where <code>abs(n)</code> is a\n     * power of 2, throw an <code>ArithmeticException</code>, because the result\n     * would be 2^31, which is too large for an int value.</li>\n     * <li>The result of <code>lcm(0, x)</code> and <code>lcm(x, 0)</code> is\n     * <code>0</code> for any <code>x</code>.\n     * </ul>\n     * \n     * @param a any number\n     * @param b any number\n     * @return the least common multiple, never negative\n     * @throws ArithmeticException\n     *             if the result cannot be represented as a nonnegative int\n     *             value\n     * @since 1.1\n     */\n    public static int lcm(int a, int b);\n    /**\n     * Add two integers, checking for overflow.\n     * \n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int addAndCheck(int x, int y);\n    /**\n     * Multiply two long integers, checking for overflow.\n     * \n     * @param a first value\n     * @param b second value\n     * @return the product <code>a * b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long mulAndCheck(long a, long b);\n    /**\n     * Multiply two integers, checking for overflow.\n     * \n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int mulAndCheck(int x, int y);\n    /**\n     * Subtract two integers, checking for overflow.\n     * \n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         int\n     * @since 1.1\n     */\n    public static int subAndCheck(int x, int y);\n    /**\n     * Add two long integers, checking for overflow.\n     * \n     * @param a an addend\n     * @param b an addend\n     * @return the sum <code>a+b</code>\n     * @throws ArithmeticException if the result can not be represented as an\n     *         long\n     * @since 1.2\n     */\n    public static long addAndCheck(long a, long b);\n    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is\n     * thrown.</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n    public static long binomialCoefficient(final int n, final int k);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n *          2007) $\n */\npublic final class MathUtilsTest extends TestCase {\n    private long binomialCoefficient(int n, int k) throws ArithmeticException {\n        if (binomialCache.size() > n) {\n            Long cachedResult = binomialCache.get(n).get(new Integer(k));\n            if (cachedResult != null) {\n                return cachedResult.longValue();\n            }\n        }\n        long result = -1;\n        if ((n == k) || (k == 0)) {\n            result = 1;\n        } else if ((k == 1) || (k == n - 1)) {\n            result = n;\n        } else {\n            // Reduce stack depth for larger values of n\n            if (k < n - 100) {\n                binomialCoefficient(n - 100, k);\n            }\n            if (k > 100) {\n                binomialCoefficient(n - 100, k - 100);\n            }\n            result = MathUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),\n                binomialCoefficient(n - 1, k));\n        }\n        if (result == -1) {\n            throw new ArithmeticException(\n                \"error computing binomial coefficient\");\n        }\n        for (int i = binomialCache.size(); i < n + 1; i++) {\n            binomialCache.add(new HashMap<Integer, Long>());\n        }\n        binomialCache.get(n).put(new Integer(k), new Long(result));\n        return result;\n    }\n    private long factorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    private void testAddAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.addAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n    private void testMulAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.mulAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n    private void testSubAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.subAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n    }\n    public void testGcd() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.gcd(0, 0));\n\n        assertEquals(b, MathUtils.gcd(0, b));\n        assertEquals(a, MathUtils.gcd(a, 0));\n        assertEquals(b, MathUtils.gcd(0, -b));\n        assertEquals(a, MathUtils.gcd(-a, 0));\n\n        assertEquals(10, MathUtils.gcd(a, b));\n        assertEquals(10, MathUtils.gcd(-a, b));\n        assertEquals(10, MathUtils.gcd(a, -b));\n        assertEquals(10, MathUtils.gcd(-a, -b));\n\n        assertEquals(1, MathUtils.gcd(a, c));\n        assertEquals(1, MathUtils.gcd(-a, c));\n        assertEquals(1, MathUtils.gcd(a, -c));\n        assertEquals(1, MathUtils.gcd(-a, -c));\n\n        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));\n        assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * <p>\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * <p>\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * <p>\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * <p>\n * Each individual field can be queried in two ways:\n * <ul>\n * <li><code>get(DateTimeFieldType.monthOfYear())</code>\n * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value - <code>monthOfYear().get()</code>\n * <li>text value - <code>monthOfYear().getAsText()</code>\n * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n * <li>set - <code>monthOfYear().setCopy()</code>\n * </ul>\n * <p>\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n */\npublic final class Partial\n        extends AbstractPartial\n        implements ReadablePartial, Serializable {\n    private static final long serialVersionUID = 12324121189002L;\n    private final Chronology iChronology;\n    private final DateTimeFieldType[] iTypes;\n    private final int[] iValues;\n    private transient DateTimeFormatter[] iFormatter;\n    /**\n     * Gets the number of fields in this partial.\n     * \n     * @return the field count\n     */\n    public int size();\n}\n/**\n * A placeholder implementation to use when a duration field is not supported.\n * <p>\n * UnsupportedDurationField is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n */\npublic final class UnsupportedDurationField extends DurationField implements Serializable {\n    private static final long serialVersionUID = -6390301302770925357L;\n    private static HashMap<DurationFieldType, UnsupportedDurationField> cCache;\n    /**\n     * Gets an instance of UnsupportedDurationField for a specific named field.\n     * The returned instance is cached.\n     * \n     * @param type  the type to obtain\n     * @return the instance\n     */\n    public static synchronized UnsupportedDurationField getInstance(DurationFieldType type);\n    /**\n     * Always returns zero.\n     *\n     * @return zero always\n     */\n    public long getUnitMillis();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * <p>\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * <p>\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * <p>\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * <p>\n * Each individual field can be queried in two ways:\n * <ul>\n * <li><code>get(DateTimeFieldType.monthOfYear())</code>\n * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value - <code>monthOfYear().get()</code>\n * <li>text value - <code>monthOfYear().getAsText()</code>\n * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n * <li>set - <code>monthOfYear().setCopy()</code>\n * </ul>\n * <p>\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n */\npublic final class Partial\n        extends AbstractPartial\n        implements ReadablePartial, Serializable {\n    private static final long serialVersionUID = 12324121189002L;\n    private final Chronology iChronology;\n    private final DateTimeFieldType[] iTypes;\n    private final int[] iValues;\n    private transient DateTimeFormatter[] iFormatter;\n    /**\n     * Gets the number of fields in this partial.\n     * \n     * @return the field count\n     */\n    public int size();\n}\n/**\n * A placeholder implementation to use when a duration field is not supported.\n * <p>\n * UnsupportedDurationField is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n */\npublic final class UnsupportedDurationField extends DurationField implements Serializable {\n    private static final long serialVersionUID = -6390301302770925357L;\n    private static HashMap<DurationFieldType, UnsupportedDurationField> cCache;\n    /**\n     * Gets an instance of UnsupportedDurationField for a specific named field.\n     * The returned instance is cached.\n     * \n     * @param type  the type to obtain\n     * @return the instance\n     */\n    public static synchronized UnsupportedDurationField getInstance(DurationFieldType type);\n    /**\n     * Always returns zero.\n     *\n     * @return zero always\n     */\n    public long getUnitMillis();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestPartial_Constructors extends TestCase {\n    private void assertMessageContains(Exception ex, String str) {\n        assertEquals(ex.getMessage() + \": \" + str, true, ex.getMessage().indexOf(str) >= 0);\n    }\n    private void assertMessageContains(Exception ex, String str1, String str2) {\n        assertEquals(ex.getMessage() + \": \" + str1 + \"/\" + str2, true,\n            ex.getMessage().indexOf(str1) >= 0 &&\n            ex.getMessage().indexOf(str2) >= 0 &&\n            ex.getMessage().indexOf(str1) < ex.getMessage().indexOf(str2));\n    }\n    public void testConstructorEx7_TypeArray_intArray() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * BaseSingleFieldPeriod is an abstract implementation of ReadablePeriod that\n * manages a single duration field, such as days or minutes.\n * <p>\n * This class should generally not be used directly by API users.\n * The {@link ReadablePeriod} interface should be used when different \n * kinds of period objects are to be referenced.\n * <p>\n * BaseSingleFieldPeriod subclasses may be mutable and not thread-safe.\n *\n * @author Stephen Colebourne\n * @since 1.4\n */\npublic abstract class BaseSingleFieldPeriod\n        implements ReadablePeriod, Comparable<BaseSingleFieldPeriod>, Serializable {\n    private static final long serialVersionUID = 9386874258972L;\n    private volatile int iPeriod;\n    /**\n     * Calculates the number of whole units between the two specified datetimes.\n     *\n     * @param start  the start instant, validated to not be null\n     * @param end  the end instant, validated to not be null\n     * @param field  the field type to use, must not be null\n     * @return the period\n     * @throws IllegalArgumentException if the instants are null or invalid\n     */\n    protected static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field);\n    /**\n     * Calculates the number of whole units between the two specified partial datetimes.\n     * <p>\n     * The two partials must contain the same fields, for example you can specify\n     * two <code>LocalDate</code> objects.\n     *\n     * @param start  the start partial date, validated to not be null\n     * @param end  the end partial date, validated to not be null\n     * @param zeroInstance  the zero instance constant, must not be null\n     * @return the period\n     * @throws IllegalArgumentException if the partials are null or invalid\n     */\n    protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * BaseSingleFieldPeriod is an abstract implementation of ReadablePeriod that\n * manages a single duration field, such as days or minutes.\n * <p>\n * This class should generally not be used directly by API users.\n * The {@link ReadablePeriod} interface should be used when different \n * kinds of period objects are to be referenced.\n * <p>\n * BaseSingleFieldPeriod subclasses may be mutable and not thread-safe.\n *\n * @author Stephen Colebourne\n * @since 1.4\n */\npublic abstract class BaseSingleFieldPeriod\n        implements ReadablePeriod, Comparable<BaseSingleFieldPeriod>, Serializable {\n    private static final long serialVersionUID = 9386874258972L;\n    private volatile int iPeriod;\n    /**\n     * Calculates the number of whole units between the two specified datetimes.\n     *\n     * @param start  the start instant, validated to not be null\n     * @param end  the end instant, validated to not be null\n     * @param field  the field type to use, must not be null\n     * @return the period\n     * @throws IllegalArgumentException if the instants are null or invalid\n     */\n    protected static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field);\n    /**\n     * Calculates the number of whole units between the two specified partial datetimes.\n     * <p>\n     * The two partials must contain the same fields, for example you can specify\n     * two <code>LocalDate</code> objects.\n     *\n     * @param start  the start partial date, validated to not be null\n     * @param end  the end partial date, validated to not be null\n     * @param zeroInstance  the zero instance constant, must not be null\n     * @return the period\n     * @throws IllegalArgumentException if the partials are null or invalid\n     */\n    protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDays extends TestCase {\n    public void testFactory_daysBetween_RPartial_MonthDay() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        assertEquals(27, Days.daysBetween(start1, end1).getDays());\n        assertEquals(28, Days.daysBetween(start1, end2).getDays());\n        assertEquals(0, Days.daysBetween(start2, end1).getDays());\n        assertEquals(1, Days.daysBetween(start2, end2).getDays());\n        \n        assertEquals(-27, Days.daysBetween(end1, start1).getDays());\n        assertEquals(-28, Days.daysBetween(end2, start1).getDays());\n        assertEquals(0, Days.daysBetween(end1, start2).getDays());\n        assertEquals(-1, Days.daysBetween(end2, start2).getDays());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Compiles Olson ZoneInfo database files into binary files for each time zone\n * in the database. {@link DateTimeZoneBuilder} is used to construct and encode\n * compiled data files. {@link ZoneInfoProvider} loads the encoded files and\n * converts them back into {@link DateTimeZone} objects.\n * <p>\n * Although this tool is similar to zic, the binary formats are not\n * compatible. The latest Olson database files may be obtained\n * <a href=\"http://www.twinsun.com/tz/tz-link.htm\">here</a>.\n * <p>\n * ZoneInfoCompiler is mutable and not thread-safe, although the main method\n * may be safely invoked by multiple threads.\n *\n * @author Brian S O'Neill\n * @since 1.0\n */\npublic class ZoneInfoCompiler {\n    /**\n     * Gets a flag indicating that verbose logging is required.\n     * @return true to log verbosely\n     */\n    public static boolean verbose();\n    /**\n     * Launches the ZoneInfoCompiler tool.\n     *\n     * <pre>\n     * Usage: java org.joda.time.tz.ZoneInfoCompiler &lt;options&gt; &lt;source files&gt;\n     * where possible options include:\n     *   -src &lt;directory&gt;    Specify where to read source files\n     *   -dst &lt;directory&gt;    Specify where to write generated files\n     *   -verbose            Output verbosely (default false)\n     * </pre>\n     */\n    public static void main(String[] args) throws Exception;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Compiles Olson ZoneInfo database files into binary files for each time zone\n * in the database. {@link DateTimeZoneBuilder} is used to construct and encode\n * compiled data files. {@link ZoneInfoProvider} loads the encoded files and\n * converts them back into {@link DateTimeZone} objects.\n * <p>\n * Although this tool is similar to zic, the binary formats are not\n * compatible. The latest Olson database files may be obtained\n * <a href=\"http://www.twinsun.com/tz/tz-link.htm\">here</a>.\n * <p>\n * ZoneInfoCompiler is mutable and not thread-safe, although the main method\n * may be safely invoked by multiple threads.\n *\n * @author Brian S O'Neill\n * @since 1.0\n */\npublic class ZoneInfoCompiler {\n    /**\n     * Gets a flag indicating that verbose logging is required.\n     * @return true to log verbosely\n     */\n    public static boolean verbose();\n    /**\n     * Launches the ZoneInfoCompiler tool.\n     *\n     * <pre>\n     * Usage: java org.joda.time.tz.ZoneInfoCompiler &lt;options&gt; &lt;source files&gt;\n     * where possible options include:\n     *   -src &lt;directory&gt;    Specify where to read source files\n     *   -dst &lt;directory&gt;    Specify where to write generated files\n     *   -verbose            Output verbosely (default false)\n     * </pre>\n     */\n    public static void main(String[] args) throws Exception;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    private DateTimeZoneBuilder getTestDataTimeZoneBuilder() {\n         return new DateTimeZoneBuilder()\n             .addCutover(1601, 'w', 1, 1, 1, false, 7200000)\n             .setStandardOffset(3600000)\n             .addRecurringSavings(\"\", 3600000, 1601, Integer.MAX_VALUE, 'w', 3, -1, 1, false, 7200000)\n             .addRecurringSavings(\"\", 0, 1601, Integer.MAX_VALUE, 'w', 10, -1, 1, false, 10800000);\n    }    \n    private Provider compileAndLoad(String data) throws Exception {\n        File tempDir = createDataFile(data);\n        File destDir = makeTempDir();\n\n        ZoneInfoCompiler.main(new String[] {\n            \"-src\", tempDir.getAbsolutePath(),\n            \"-dst\", destDir.getAbsolutePath(),\n            \"tzdata\"\n        });\n\n        // Mark all files to be deleted on exit.\n        deleteOnExit(destDir);\n\n        return new ZoneInfoProvider(destDir);\n    }\n    private File createDataFile(String data) throws IOException {\n        File tempDir = makeTempDir();\n\n        File tempFile = new File(tempDir, \"tzdata\");\n        tempFile.deleteOnExit();\n\n        InputStream in = new ByteArrayInputStream(data.getBytes(\"UTF-8\"));\n\n        FileOutputStream out = new FileOutputStream(tempFile);\n        byte[] buf = new byte[1000];\n        int amt;\n        while ((amt = in.read(buf)) > 0) {\n            out.write(buf, 0, amt);\n        }\n        out.close();\n        in.close();\n\n        return tempDir;\n    }\n    private File makeTempDir() {\n        File tempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n        tempDir = new File(tempDir, \"joda-test-\" + (new java.util.Random().nextInt() & 0xffffff));\n        tempDir.mkdirs();\n        tempDir.deleteOnExit();\n        return tempDir;\n    }\n    private void deleteOnExit(File tempFile) {\n        tempFile.deleteOnExit();\n        if (tempFile.isDirectory()) {\n            File[] files = tempFile.listFiles();\n            for (int i=0; i<files.length; i++) {\n                deleteOnExit(files[i]);\n            }\n        }\n    }\n    public void testDateTimeZoneBuilder() throws Exception {\n        // test multithreading, issue #18\n        getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n        final DateTimeZone[] zone = new DateTimeZone[1];\n        Thread t = new Thread(new Runnable() {\n            public void run() {\n                zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n            }\n        });\n        t.start();\n        t.join();\n        assertNotNull(zone[0]);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * LocalDateTime is an unmodifiable datetime class representing a\n * datetime without a time zone.\n * <p>\n * LocalDateTime implements the {@link ReadablePartial} interface.\n * To do this, certain methods focus on key fields Year, MonthOfYear,\n * DayOfYear and MillisOfDay.\n * However, <b>all</b> fields may in fact be queried.\n * <p>\n * Internally, LocalDateTime uses a single millisecond-based value to\n * represent the local datetime. This value is only used internally and\n * is not exposed to applications.\n * <p>\n * Calculations on LocalDateTime are performed using a {@link Chronology}.\n * This chronology will be set internally to be in the UTC time zone\n * for all calculations.\n *\n * <p>Each individual field can be queried in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value\n * <li>text value\n * <li>short text value\n * <li>maximum/minimum values\n * <li>add/subtract\n * <li>set\n * <li>rounding\n * </ul>\n *\n * <p>\n * LocalDateTime is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.3\n */\npublic final class LocalDateTime\n        extends BaseLocal\n        implements ReadablePartial, Serializable {\n    private static final long serialVersionUID = -268716875315837168L;\n    private static final int YEAR = 0;\n    private static final int MONTH_OF_YEAR = 1;\n    private static final int DAY_OF_MONTH = 2;\n    private static final int MILLIS_OF_DAY = 3;\n    private final long iLocalMillis;\n    private final Chronology iChronology;\n    /**\n     * Constructs a LocalDateTime from a <code>java.util.Date</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Date and assigned to the LocalDateTime.\n     * This is useful if you have been using the Date as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method always creates a LocalDateTime with ISO chronology.\n     *\n     * @param date  the Date to extract fields from, not null\n     * @return the created local date-time, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n    @SuppressWarnings(\"deprecation\")\n    public static LocalDateTime fromDateFields(Date date);\n    /**\n     * Constructs a LocalDateTime from a <code>java.util.Calendar</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Calendar and assigned to the LocalDateTime.\n     * This is useful if you have been using the Calendar as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method ignores the type of the calendar and always\n     * creates a LocalDateTime with ISO chronology. It is expected that you\n     * will only pass in instances of <code>GregorianCalendar</code> however\n     * this is not validated.\n     *\n     * @param calendar  the Calendar to extract fields from, not null\n     * @return the created local date-time, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n    public static LocalDateTime fromCalendarFields(Calendar calendar);\n}\n/**\n * LocalDate is an immutable datetime class representing a date\n * without a time zone.\n * <p>\n * LocalDate implements the {@link ReadablePartial} interface.\n * To do this, the interface methods focus on the key fields -\n * Year, MonthOfYear and DayOfMonth.\n * However, <b>all</b> date fields may in fact be queried.\n * <p>\n * LocalDate differs from DateMidnight in that this class does not\n * have a time zone and does not represent a single instant in time.\n * <p>\n * Calculations on LocalDate are performed using a {@link Chronology}.\n * This chronology will be set internally to be in the UTC time zone\n * for all calculations.\n *\n * <p>Each individual field can be queried in two ways:\n * <ul>\n * <li><code>getMonthOfYear()</code>\n * <li><code>monthOfYear().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value\n * <li>text value\n * <li>short text value\n * <li>maximum/minimum values\n * <li>add/subtract\n * <li>set\n * <li>rounding\n * </ul>\n *\n * <p>\n * LocalDate is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.3\n */\npublic final class LocalDate\n        extends BaseLocal\n        implements ReadablePartial, Serializable {\n    private static final long serialVersionUID = -8775358157899L;\n    private static final int YEAR = 0;\n    private static final int MONTH_OF_YEAR = 1;\n    private static final int DAY_OF_MONTH = 2;\n    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();\n    /**\n     * Constructs a LocalDate from a <code>java.util.Calendar</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Calendar and assigned to the LocalDate.\n     * This is useful if you have been using the Calendar as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method ignores the type of the calendar and always\n     * creates a LocalDate with ISO chronology. It is expected that you\n     * will only pass in instances of <code>GregorianCalendar</code> however\n     * this is not validated.\n     *\n     * @param calendar  the Calendar to extract fields from, not null\n     * @return the created local date, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n    public static LocalDate fromCalendarFields(Calendar calendar);\n    /**\n     * Constructs a LocalDate from a <code>java.util.Date</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Date and assigned to the LocalDate.\n     * This is useful if you have been using the Date as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method always creates a LocalDate with ISO chronology.\n     *\n     * @param date  the Date to extract fields from, not null\n     * @return the created local date, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n    @SuppressWarnings(\"deprecation\")\n    public static LocalDate fromDateFields(Date date);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * LocalDateTime is an unmodifiable datetime class representing a\n * datetime without a time zone.\n * <p>\n * LocalDateTime implements the {@link ReadablePartial} interface.\n * To do this, certain methods focus on key fields Year, MonthOfYear,\n * DayOfYear and MillisOfDay.\n * However, <b>all</b> fields may in fact be queried.\n * <p>\n * Internally, LocalDateTime uses a single millisecond-based value to\n * represent the local datetime. This value is only used internally and\n * is not exposed to applications.\n * <p>\n * Calculations on LocalDateTime are performed using a {@link Chronology}.\n * This chronology will be set internally to be in the UTC time zone\n * for all calculations.\n *\n * <p>Each individual field can be queried in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value\n * <li>text value\n * <li>short text value\n * <li>maximum/minimum values\n * <li>add/subtract\n * <li>set\n * <li>rounding\n * </ul>\n *\n * <p>\n * LocalDateTime is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.3\n */\npublic final class LocalDateTime\n        extends BaseLocal\n        implements ReadablePartial, Serializable {\n    private static final long serialVersionUID = -268716875315837168L;\n    private static final int YEAR = 0;\n    private static final int MONTH_OF_YEAR = 1;\n    private static final int DAY_OF_MONTH = 2;\n    private static final int MILLIS_OF_DAY = 3;\n    private final long iLocalMillis;\n    private final Chronology iChronology;\n    /**\n     * Constructs a LocalDateTime from a <code>java.util.Date</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Date and assigned to the LocalDateTime.\n     * This is useful if you have been using the Date as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method always creates a LocalDateTime with ISO chronology.\n     *\n     * @param date  the Date to extract fields from, not null\n     * @return the created local date-time, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n    @SuppressWarnings(\"deprecation\")\n    public static LocalDateTime fromDateFields(Date date);\n    /**\n     * Constructs a LocalDateTime from a <code>java.util.Calendar</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Calendar and assigned to the LocalDateTime.\n     * This is useful if you have been using the Calendar as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method ignores the type of the calendar and always\n     * creates a LocalDateTime with ISO chronology. It is expected that you\n     * will only pass in instances of <code>GregorianCalendar</code> however\n     * this is not validated.\n     *\n     * @param calendar  the Calendar to extract fields from, not null\n     * @return the created local date-time, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n    public static LocalDateTime fromCalendarFields(Calendar calendar);\n}\n/**\n * LocalDate is an immutable datetime class representing a date\n * without a time zone.\n * <p>\n * LocalDate implements the {@link ReadablePartial} interface.\n * To do this, the interface methods focus on the key fields -\n * Year, MonthOfYear and DayOfMonth.\n * However, <b>all</b> date fields may in fact be queried.\n * <p>\n * LocalDate differs from DateMidnight in that this class does not\n * have a time zone and does not represent a single instant in time.\n * <p>\n * Calculations on LocalDate are performed using a {@link Chronology}.\n * This chronology will be set internally to be in the UTC time zone\n * for all calculations.\n *\n * <p>Each individual field can be queried in two ways:\n * <ul>\n * <li><code>getMonthOfYear()</code>\n * <li><code>monthOfYear().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value\n * <li>text value\n * <li>short text value\n * <li>maximum/minimum values\n * <li>add/subtract\n * <li>set\n * <li>rounding\n * </ul>\n *\n * <p>\n * LocalDate is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.3\n */\npublic final class LocalDate\n        extends BaseLocal\n        implements ReadablePartial, Serializable {\n    private static final long serialVersionUID = -8775358157899L;\n    private static final int YEAR = 0;\n    private static final int MONTH_OF_YEAR = 1;\n    private static final int DAY_OF_MONTH = 2;\n    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();\n    /**\n     * Constructs a LocalDate from a <code>java.util.Calendar</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Calendar and assigned to the LocalDate.\n     * This is useful if you have been using the Calendar as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method ignores the type of the calendar and always\n     * creates a LocalDate with ISO chronology. It is expected that you\n     * will only pass in instances of <code>GregorianCalendar</code> however\n     * this is not validated.\n     *\n     * @param calendar  the Calendar to extract fields from, not null\n     * @return the created local date, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n    public static LocalDate fromCalendarFields(Calendar calendar);\n    /**\n     * Constructs a LocalDate from a <code>java.util.Date</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Date and assigned to the LocalDate.\n     * This is useful if you have been using the Date as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method always creates a LocalDate with ISO chronology.\n     *\n     * @param date  the Date to extract fields from, not null\n     * @return the created local date, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n    @SuppressWarnings(\"deprecation\")\n    public static LocalDate fromDateFields(Date date);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestLocalDateTime_Constructors extends TestCase {\n    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Factory that creates complex instances of PeriodFormatter via method calls.\n * <p>\n * Period formatting is performed by the {@link PeriodFormatter} class.\n * Three classes provide factory methods to create formatters, and this is one.\n * The others are {@link PeriodFormat} and {@link ISOPeriodFormat}.\n * <p>\n * PeriodFormatterBuilder is used for constructing formatters which are then\n * used to print or parse. The formatters are built by appending specific fields\n * or other formatters to an instance of this builder.\n * <p>\n * For example, a formatter that prints years and months, like \"15 years and 8 months\",\n * can be constructed as follows:\n * <p>\n * <pre>\n * PeriodFormatter yearsAndMonths = new PeriodFormatterBuilder()\n *     .printZeroAlways()\n *     .appendYears()\n *     .appendSuffix(\" year\", \" years\")\n *     .appendSeparator(\" and \")\n *     .printZeroRarelyLast()\n *     .appendMonths()\n *     .appendSuffix(\" month\", \" months\")\n *     .toFormatter();\n * </pre>\n * <p>\n * PeriodFormatterBuilder itself is mutable and not thread-safe, but the\n * formatters that it builds are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n * @see PeriodFormat\n */\npublic class PeriodFormatterBuilder {\n    private static final int PRINT_ZERO_RARELY_FIRST = 1;\n    private static final int PRINT_ZERO_RARELY_LAST = 2;\n    private static final int PRINT_ZERO_IF_SUPPORTED = 3;\n    private static final int PRINT_ZERO_ALWAYS = 4;\n    private static final int PRINT_ZERO_NEVER = 5;\n    private static final int YEARS = 0;\n    private static final int MONTHS = 1;\n    private static final int WEEKS = 2;\n    private static final int DAYS = 3;\n    private static final int HOURS = 4;\n    private static final int MINUTES = 5;\n    private static final int SECONDS = 6;\n    private static final int MILLIS = 7;\n    private static final int SECONDS_MILLIS = 8;\n    private static final int SECONDS_OPTIONAL_MILLIS = 9;\n    private static final int MAX_FIELD = SECONDS_OPTIONAL_MILLIS;\n    private int iMinPrintedDigits;\n    private int iPrintZeroSetting;\n    private int iMaxParsedDigits;\n    private boolean iRejectSignedValues;\n    private PeriodFieldAffix iPrefix;\n    private List<Object> iElementPairs;\n    private boolean iNotPrinter;\n    private boolean iNotParser;\n    private FieldFormatter[] iFieldFormatters;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Factory that creates complex instances of PeriodFormatter via method calls.\n * <p>\n * Period formatting is performed by the {@link PeriodFormatter} class.\n * Three classes provide factory methods to create formatters, and this is one.\n * The others are {@link PeriodFormat} and {@link ISOPeriodFormat}.\n * <p>\n * PeriodFormatterBuilder is used for constructing formatters which are then\n * used to print or parse. The formatters are built by appending specific fields\n * or other formatters to an instance of this builder.\n * <p>\n * For example, a formatter that prints years and months, like \"15 years and 8 months\",\n * can be constructed as follows:\n * <p>\n * <pre>\n * PeriodFormatter yearsAndMonths = new PeriodFormatterBuilder()\n *     .printZeroAlways()\n *     .appendYears()\n *     .appendSuffix(\" year\", \" years\")\n *     .appendSeparator(\" and \")\n *     .printZeroRarelyLast()\n *     .appendMonths()\n *     .appendSuffix(\" month\", \" months\")\n *     .toFormatter();\n * </pre>\n * <p>\n * PeriodFormatterBuilder itself is mutable and not thread-safe, but the\n * formatters that it builds are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n * @see PeriodFormat\n */\npublic class PeriodFormatterBuilder {\n    private static final int PRINT_ZERO_RARELY_FIRST = 1;\n    private static final int PRINT_ZERO_RARELY_LAST = 2;\n    private static final int PRINT_ZERO_IF_SUPPORTED = 3;\n    private static final int PRINT_ZERO_ALWAYS = 4;\n    private static final int PRINT_ZERO_NEVER = 5;\n    private static final int YEARS = 0;\n    private static final int MONTHS = 1;\n    private static final int WEEKS = 2;\n    private static final int DAYS = 3;\n    private static final int HOURS = 4;\n    private static final int MINUTES = 5;\n    private static final int SECONDS = 6;\n    private static final int MILLIS = 7;\n    private static final int SECONDS_MILLIS = 8;\n    private static final int SECONDS_OPTIONAL_MILLIS = 9;\n    private static final int MAX_FIELD = SECONDS_OPTIONAL_MILLIS;\n    private int iMinPrintedDigits;\n    private int iPrintZeroSetting;\n    private int iMaxParsedDigits;\n    private boolean iRejectSignedValues;\n    private PeriodFieldAffix iPrefix;\n    private List<Object> iElementPairs;\n    private boolean iNotPrinter;\n    private boolean iNotParser;\n    private FieldFormatter[] iFieldFormatters;\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestISOPeriodFormat extends TestCase {\n    public void testFormatStandard_negative() {\n        Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\n        assertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.years(-54);\n        assertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(4).withMillis(-8);\n        assertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(-4).withMillis(8);\n        assertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(-23);\n        assertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.millis(-8);\n        assertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Provides time calculations for the month of the year component of time.\n *\n * @author Guy Allard\n * @author Stephen Colebourne\n * @author Brian S O'Neill\n * @since 1.2, refactored from GJMonthOfYearDateTimeField\n */\nclass BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n    private static final long serialVersionUID = -8258715387168736L;\n    private static final int MIN = DateTimeConstants.JANUARY;\n    private final BasicChronology iChronology;\n    private final int iMax;\n    private final int iLeapMonth;\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Provides time calculations for the month of the year component of time.\n *\n * @author Guy Allard\n * @author Stephen Colebourne\n * @author Brian S O'Neill\n * @since 1.2, refactored from GJMonthOfYearDateTimeField\n */\nclass BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n    private static final long serialVersionUID = -8258715387168736L;\n    private static final int MIN = DateTimeConstants.JANUARY;\n    private final BasicChronology iChronology;\n    private final int iMax;\n    private final int iLeapMonth;\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> */\npublic class TestMonthDay_Basics extends TestCase {\n    private void check(MonthDay test, int month, int day) {\n        assertEquals(month, test.getMonthOfYear());\n        assertEquals(day, test.getDayOfMonth());\n    }\n    public void testPlusMonths_int_negativeFromLeap() {\n        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n        MonthDay result = test.plusMonths(-1);\n        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n        assertEquals(expected, result);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * General utilities that don't fit elsewhere.\n * <p>\n * FieldUtils is thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic class FieldUtils {\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static int safeMultiply(int val1, int val2);\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2);\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     */\n    public static long safeMultiply(long val1, long val2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * General utilities that don't fit elsewhere.\n * <p>\n * FieldUtils is thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic class FieldUtils {\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static int safeMultiply(int val1, int val2);\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2);\n    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     */\n    public static long safeMultiply(long val1, long val2);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void testSafeMultiplyLongInt() {\n        assertEquals(0L, FieldUtils.safeMultiply(0L, 0));\n        \n        assertEquals(1L, FieldUtils.safeMultiply(1L, 1));\n        assertEquals(3L, FieldUtils.safeMultiply(1L, 3));\n        assertEquals(3L, FieldUtils.safeMultiply(3L, 1));\n        \n        assertEquals(6L, FieldUtils.safeMultiply(2L, 3));\n        assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));\n        assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));\n        assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));\n        \n        assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));\n        \n        assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));\n        assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));\n        assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, -1);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, 100);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Controls the printing and parsing of a datetime to and from a string.\n * <p>\n * This class is the main API for printing and parsing used by most applications.\n * Instances of this class are created via one of three factory classes:\n * <ul>\n * <li>{@link DateTimeFormat} - formats by pattern and style</li>\n * <li>{@link ISODateTimeFormat} - ISO8601 formats</li>\n * <li>{@link DateTimeFormatterBuilder} - complex formats created via method calls</li>\n * </ul>\n * <p>\n * An instance of this class holds a reference internally to one printer and\n * one parser. It is possible that one of these may be null, in which case the\n * formatter cannot print/parse. This can be checked via the {@link #isPrinter()}\n * and {@link #isParser()} methods.\n * <p>\n * The underlying printer/parser can be altered to behave exactly as required\n * by using one of the decorator modifiers:\n * <ul>\n * <li>{@link #withLocale(Locale)} - returns a new formatter that uses the specified locale</li>\n * <li>{@link #withZone(DateTimeZone)} - returns a new formatter that uses the specified time zone</li>\n * <li>{@link #withChronology(Chronology)} - returns a new formatter that uses the specified chronology</li>\n * <li>{@link #withOffsetParsed()} - returns a new formatter that returns the parsed time zone offset</li>\n * </ul>\n * Each of these returns a new formatter (instances of this class are immutable).\n * <p>\n * The main methods of the class are the <code>printXxx</code> and\n * <code>parseXxx</code> methods. These are used as follows:\n * <pre>\n * // print using the defaults (default locale, chronology/zone of the datetime)\n * String dateStr = formatter.print(dt);\n * // print using the French locale\n * String dateStr = formatter.withLocale(Locale.FRENCH).print(dt);\n * // print using the UTC zone\n * String dateStr = formatter.withZone(DateTimeZone.UTC).print(dt);\n * \n * // parse using the Paris zone\n * DateTime date = formatter.withZone(DateTimeZone.forID(\"Europe/Paris\")).parseDateTime(str);\n * </pre>\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Fredrik Borgh\n * @since 1.0\n */\npublic class DateTimeFormatter {\n    private final DateTimePrinter iPrinter;\n    private final DateTimeParser iParser;\n    private final Locale iLocale;\n    private final boolean iOffsetParsed;\n    private final Chronology iChrono;\n    private final DateTimeZone iZone;\n    private final Integer iPivotYear;\n    private final int iDefaultYear;\n    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant as the default.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position);\n    /**\n     * Returns a new formatter with a different locale that will be used\n     * for printing and parsing.\n     * <p>\n     * A DateTimeFormatter is immutable, so a new instance is returned,\n     * and the original is unaltered and still usable.\n     * \n     * @param locale the locale to use; if null, formatter uses default locale\n     * at invocation time\n     * @return the new formatter\n     */\n    public DateTimeFormatter withLocale(Locale locale);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Controls the printing and parsing of a datetime to and from a string.\n * <p>\n * This class is the main API for printing and parsing used by most applications.\n * Instances of this class are created via one of three factory classes:\n * <ul>\n * <li>{@link DateTimeFormat} - formats by pattern and style</li>\n * <li>{@link ISODateTimeFormat} - ISO8601 formats</li>\n * <li>{@link DateTimeFormatterBuilder} - complex formats created via method calls</li>\n * </ul>\n * <p>\n * An instance of this class holds a reference internally to one printer and\n * one parser. It is possible that one of these may be null, in which case the\n * formatter cannot print/parse. This can be checked via the {@link #isPrinter()}\n * and {@link #isParser()} methods.\n * <p>\n * The underlying printer/parser can be altered to behave exactly as required\n * by using one of the decorator modifiers:\n * <ul>\n * <li>{@link #withLocale(Locale)} - returns a new formatter that uses the specified locale</li>\n * <li>{@link #withZone(DateTimeZone)} - returns a new formatter that uses the specified time zone</li>\n * <li>{@link #withChronology(Chronology)} - returns a new formatter that uses the specified chronology</li>\n * <li>{@link #withOffsetParsed()} - returns a new formatter that returns the parsed time zone offset</li>\n * </ul>\n * Each of these returns a new formatter (instances of this class are immutable).\n * <p>\n * The main methods of the class are the <code>printXxx</code> and\n * <code>parseXxx</code> methods. These are used as follows:\n * <pre>\n * // print using the defaults (default locale, chronology/zone of the datetime)\n * String dateStr = formatter.print(dt);\n * // print using the French locale\n * String dateStr = formatter.withLocale(Locale.FRENCH).print(dt);\n * // print using the UTC zone\n * String dateStr = formatter.withZone(DateTimeZone.UTC).print(dt);\n * \n * // parse using the Paris zone\n * DateTime date = formatter.withZone(DateTimeZone.forID(\"Europe/Paris\")).parseDateTime(str);\n * </pre>\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Fredrik Borgh\n * @since 1.0\n */\npublic class DateTimeFormatter {\n    private final DateTimePrinter iPrinter;\n    private final DateTimeParser iParser;\n    private final Locale iLocale;\n    private final boolean iOffsetParsed;\n    private final Chronology iChrono;\n    private final DateTimeZone iZone;\n    private final Integer iPivotYear;\n    private final int iDefaultYear;\n    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant as the default.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position);\n    /**\n     * Returns a new formatter with a different locale that will be used\n     * for printing and parsing.\n     * <p>\n     * A DateTimeFormatter is immutable, so a new instance is returned,\n     * and the original is unaltered and still usable.\n     * \n     * @param locale the locale to use; if null, formatter uses default locale\n     * at invocation time\n     * @return the new formatter\n     */\n    public DateTimeFormatter withLocale(Locale locale);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDateTimeFormatter extends TestCase {\n    public void testParseInto_monthOnly_baseStartYear() {\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n        MutableDateTime result = new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO);\n        assertEquals(1, f.parseInto(result, \"5\", 0));\n        assertEquals(new MutableDateTime(2004, 5, 1, 12, 20, 30, 0, TOKYO), result);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets a time zone instance for the specified time zone id.\n     * <p>\n     * The time zone id may be one of those returned by getAvailableIDs.\n     * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n     * All IDs must be specified in the long format.\n     * The exception is UTC, which is an acceptable id.\n     * <p>\n     * Alternatively a locale independent, fixed offset, datetime zone can\n     * be specified. The form <code>[+-]hh:mm</code> can be used.\n     * \n     * @param id  the ID of the datetime zone, null means default\n     * @return the DateTimeZone object for the ID\n     * @throws IllegalArgumentException if the ID is not recognised\n     */\n    @FromString\n    public static DateTimeZone forID(String id);\n    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the earlier instant. The combination of these two rules is to always favour\n     * daylight (summer) time over standard (winter) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal);\n    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater);\n    /**\n     * Gets the datetime zone as a string, which is simply its ID.\n     * @return the id of the zone\n     */\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets a time zone instance for the specified time zone id.\n     * <p>\n     * The time zone id may be one of those returned by getAvailableIDs.\n     * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n     * All IDs must be specified in the long format.\n     * The exception is UTC, which is an acceptable id.\n     * <p>\n     * Alternatively a locale independent, fixed offset, datetime zone can\n     * be specified. The form <code>[+-]hh:mm</code> can be used.\n     * \n     * @param id  the ID of the datetime zone, null means default\n     * @return the DateTimeZone object for the ID\n     * @throws IllegalArgumentException if the ID is not recognised\n     */\n    @FromString\n    public static DateTimeZone forID(String id);\n    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the earlier instant. The combination of these two rules is to always favour\n     * daylight (summer) time over standard (winter) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal);\n    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater);\n    /**\n     * Gets the datetime zone as a string, which is simply its ID.\n     * @return the id of the zone\n     */\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDateTimeZoneCutover extends TestCase {\n    private void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) {\n        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n        int offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    private void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) {\n        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n        int offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(2007, month, day, hour, min, 0, 0, expected, zone);\n    }\n    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(2007, month, day, hour, min, sec, milli, expected, zone);\n    }\n    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(year, month, day, hour, min, 0, 0, expected, zone);\n    }\n    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {\n        DateTime dt = new DateTime(year, month, day, hour, min, sec, milli, DateTimeZone.UTC);\n        int offset = zone.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, zone);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    public void testBug3476684_adjustOffset() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        assertSame(base, base.withEarlierOffsetAtOverlap());\n        assertSame(base, base.withLaterOffsetAtOverlap());\n        \n        assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());\n        assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());\n        \n        assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());\n        assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implements the Gregorian/Julian calendar system which is the calendar system\n * used in most of the world. Wherever possible, it is recommended to use the\n * {@link ISOChronology} instead.\n * <p>\n * The Gregorian calendar replaced the Julian calendar, and the point in time\n * when this chronology switches can be controlled using the second parameter\n * of the getInstance method. By default this cutover is set to the date the\n * Gregorian calendar was first instituted, October 15, 1582.\n * <p>\n * Before this date, this chronology uses the proleptic Julian calendar\n * (proleptic means extending indefinitely). The Julian calendar has leap years\n * every four years, whereas the Gregorian has special rules for 100 and 400\n * years. A meaningful result will thus be obtained for all input values.\n * However before 8 CE, Julian leap years were irregular, and before 45 BCE\n * there was no Julian calendar.\n * <p>\n * This chronology differs from\n * {@link java.util.GregorianCalendar GregorianCalendar} in that years\n * in BCE are returned correctly. Thus year 1 BCE is returned as -1 instead of 1.\n * The yearOfEra field produces results compatible with GregorianCalendar.\n * <p>\n * The Julian calendar does not have a year zero, and so year -1 is followed by\n * year 1. If the Gregorian cutover date is specified at or before year -1\n * (Julian), year zero is defined. In other words, the proleptic Gregorian\n * chronology used by this class has a year zero.\n * <p>\n * To create a pure proleptic Julian chronology, use {@link JulianChronology},\n * and to create a pure proleptic Gregorian chronology, use\n * {@link GregorianChronology}.\n * <p>\n * GJChronology is thread-safe and immutable.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic final class GJChronology extends AssembledChronology {\n    private static final long serialVersionUID = -2545574827706931671L;\n    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException;\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use, null means default\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     */\n    public static synchronized GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover,\n            int minDaysInFirstWeek);\n    /**\n     * Factory method returns instances of the default GJ cutover\n     * chronology. This uses a cutover date of October 15, 1582 (Gregorian)\n     * 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by\n     * October 15, 1582 (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * <p>The returned chronology is in the default time zone.\n     */\n    public static GJChronology getInstance();\n    /**\n     * Factory method returns instances of the GJ cutover chronology. This uses\n     * a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this\n     * value, October 4, 1582 (Julian) is followed by October 15, 1582\n     * (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * @param zone  the time zone to use, null is default\n     */\n    public static GJChronology getInstance(DateTimeZone zone);\n    /**\n     * Factory method returns instances of the default GJ cutover\n     * chronology. This uses a cutover date of October 15, 1582 (Gregorian)\n     * 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by\n     * October 15, 1582 (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * <p>The time zone of the returned instance is UTC.\n     */\n    public static GJChronology getInstanceUTC();\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     */\n    public static GJChronology getInstance(\n            DateTimeZone zone,\n            long gregorianCutover,\n            int minDaysInFirstWeek);\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use, null means default\n     */\n    public static GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implements the Gregorian/Julian calendar system which is the calendar system\n * used in most of the world. Wherever possible, it is recommended to use the\n * {@link ISOChronology} instead.\n * <p>\n * The Gregorian calendar replaced the Julian calendar, and the point in time\n * when this chronology switches can be controlled using the second parameter\n * of the getInstance method. By default this cutover is set to the date the\n * Gregorian calendar was first instituted, October 15, 1582.\n * <p>\n * Before this date, this chronology uses the proleptic Julian calendar\n * (proleptic means extending indefinitely). The Julian calendar has leap years\n * every four years, whereas the Gregorian has special rules for 100 and 400\n * years. A meaningful result will thus be obtained for all input values.\n * However before 8 CE, Julian leap years were irregular, and before 45 BCE\n * there was no Julian calendar.\n * <p>\n * This chronology differs from\n * {@link java.util.GregorianCalendar GregorianCalendar} in that years\n * in BCE are returned correctly. Thus year 1 BCE is returned as -1 instead of 1.\n * The yearOfEra field produces results compatible with GregorianCalendar.\n * <p>\n * The Julian calendar does not have a year zero, and so year -1 is followed by\n * year 1. If the Gregorian cutover date is specified at or before year -1\n * (Julian), year zero is defined. In other words, the proleptic Gregorian\n * chronology used by this class has a year zero.\n * <p>\n * To create a pure proleptic Julian chronology, use {@link JulianChronology},\n * and to create a pure proleptic Gregorian chronology, use\n * {@link GregorianChronology}.\n * <p>\n * GJChronology is thread-safe and immutable.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic final class GJChronology extends AssembledChronology {\n    private static final long serialVersionUID = -2545574827706931671L;\n    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException;\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use, null means default\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     */\n    public static synchronized GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover,\n            int minDaysInFirstWeek);\n    /**\n     * Factory method returns instances of the default GJ cutover\n     * chronology. This uses a cutover date of October 15, 1582 (Gregorian)\n     * 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by\n     * October 15, 1582 (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * <p>The returned chronology is in the default time zone.\n     */\n    public static GJChronology getInstance();\n    /**\n     * Factory method returns instances of the GJ cutover chronology. This uses\n     * a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this\n     * value, October 4, 1582 (Julian) is followed by October 15, 1582\n     * (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * @param zone  the time zone to use, null is default\n     */\n    public static GJChronology getInstance(DateTimeZone zone);\n    /**\n     * Factory method returns instances of the default GJ cutover\n     * chronology. This uses a cutover date of October 15, 1582 (Gregorian)\n     * 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by\n     * October 15, 1582 (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * <p>The time zone of the returned instance is UTC.\n     */\n    public static GJChronology getInstanceUTC();\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     */\n    public static GJChronology getInstance(\n            DateTimeZone zone,\n            long gregorianCutover,\n            int minDaysInFirstWeek);\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use, null means default\n     */\n    public static GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestGJChronology extends TestCase {\n    private void testParse(String str,\n                           int year, int month, int day,\n                           int hour, int minute, int second, int millis) {\n        assertEquals(new DateTime(str, GJChronology.getInstance(DateTimeZone.UTC)),\n                     new DateTime(year, month, day, hour, minute, second, millis,\n                                  GJChronology.getInstance(DateTimeZone.UTC)));\n    }\n    private void testAdd(String start, DurationFieldType type, int amt, String end) {\n        DateTime dtStart = new DateTime(start, GJChronology.getInstance(DateTimeZone.UTC));\n        DateTime dtEnd = new DateTime(end, GJChronology.getInstance(DateTimeZone.UTC));\n        assertEquals(dtEnd, dtStart.withFieldAdded(type, amt));\n        assertEquals(dtStart, dtEnd.withFieldAdded(type, -amt));\n\n        DurationField field = type.getField(GJChronology.getInstance(DateTimeZone.UTC));\n        int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis());\n        assertEquals(amt, diff);\n        \n        if (type == DurationFieldType.years() ||\n            type == DurationFieldType.months() ||\n            type == DurationFieldType.days()) {\n            YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n            YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n            assertEquals(ymdEnd, ymdStart.withFieldAdded(type, amt));\n            assertEquals(ymdStart, ymdEnd.withFieldAdded(type, -amt));\n        }\n    }\n    public void testLeapYearRulesConstruction() {\n        // 1500 not leap in Gregorian, but is leap in Julian\n        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n        assertEquals(dt.getYear(), 1500);\n        assertEquals(dt.getMonthOfYear(), 2);\n        assertEquals(dt.getDayOfMonth(), 29);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets a time zone instance for the specified time zone id.\n     * <p>\n     * The time zone id may be one of those returned by getAvailableIDs.\n     * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n     * All IDs must be specified in the long format.\n     * The exception is UTC, which is an acceptable id.\n     * <p>\n     * Alternatively a locale independent, fixed offset, datetime zone can\n     * be specified. The form <code>[+-]hh:mm</code> can be used.\n     * \n     * @param id  the ID of the datetime zone, null means default\n     * @return the DateTimeZone object for the ID\n     * @throws IllegalArgumentException if the ID is not recognised\n     */\n    @FromString\n    public static DateTimeZone forID(String id);\n    /**\n     * Gets the datetime zone as a string, which is simply its ID.\n     * @return the id of the zone\n     */\n    public String toString();\n    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the earlier instant. The combination of these two rules is to always favour\n     * daylight (summer) time over standard (winter) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets a time zone instance for the specified time zone id.\n     * <p>\n     * The time zone id may be one of those returned by getAvailableIDs.\n     * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n     * All IDs must be specified in the long format.\n     * The exception is UTC, which is an acceptable id.\n     * <p>\n     * Alternatively a locale independent, fixed offset, datetime zone can\n     * be specified. The form <code>[+-]hh:mm</code> can be used.\n     * \n     * @param id  the ID of the datetime zone, null means default\n     * @return the DateTimeZone object for the ID\n     * @throws IllegalArgumentException if the ID is not recognised\n     */\n    @FromString\n    public static DateTimeZone forID(String id);\n    /**\n     * Gets the datetime zone as a string, which is simply its ID.\n     * @return the id of the zone\n     */\n    public String toString();\n    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the earlier instant. The combination of these two rules is to always favour\n     * daylight (summer) time over standard (winter) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDateTimeZoneCutover extends TestCase {\n    private void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) {\n        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n        int offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    private void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) {\n        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n        int offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(2007, month, day, hour, min, 0, 0, expected, zone);\n    }\n    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(2007, month, day, hour, min, sec, milli, expected, zone);\n    }\n    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(year, month, day, hour, min, 0, 0, expected, zone);\n    }\n    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {\n        DateTime dt = new DateTime(year, month, day, hour, min, sec, milli, DateTimeZone.UTC);\n        int offset = zone.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, zone);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    public void testDateTimeCreation_london() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n        DateTime base = new DateTime(2011, 10, 30, 1, 15, zone);\n        assertEquals(\"2011-10-30T01:15:00.000+01:00\", base.toString());\n        assertEquals(\"2011-10-30T01:15:00.000Z\", base.plusHours(1).toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * <p>\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * <p>\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * <p>\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * <p>\n * Each individual field can be queried in two ways:\n * <ul>\n * <li><code>get(DateTimeFieldType.monthOfYear())</code>\n * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value - <code>monthOfYear().get()</code>\n * <li>text value - <code>monthOfYear().getAsText()</code>\n * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n * <li>set - <code>monthOfYear().setCopy()</code>\n * </ul>\n * <p>\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n */\npublic final class Partial\n        extends AbstractPartial\n        implements ReadablePartial, Serializable {\n    private static final long serialVersionUID = 12324121189002L;\n    private final Chronology iChronology;\n    private final DateTimeFieldType[] iTypes;\n    private final int[] iValues;\n    private transient DateTimeFormatter[] iFormatter;\n    /**\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @see org.joda.time.format.DateTimeFormat\n     */\n    public String toString(String pattern);\n    /**\n     * Gets the number of fields in this partial.\n     * \n     * @return the field count\n     */\n    public int size();\n    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value);\n    /**\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @param locale  Locale to use, null means default\n     * @see org.joda.time.format.DateTimeFormat\n     */\n    public String toString(String pattern, Locale locale);\n    /**\n     * Output the date in an appropriate ISO8601 format.\n     * <p>\n     * This method will output the partial in one of two ways.\n     * If {@link #getFormatter()}\n     * <p>\n     * If there is no appropriate ISO format a dump of the fields is output\n     * via {@link #toStringList()}.\n     * \n     * @return ISO8601 formatted string\n     */\n    public String toString();\n}\n/**\n * A placeholder implementation to use when a duration field is not supported.\n * <p>\n * UnsupportedDurationField is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n */\npublic final class UnsupportedDurationField extends DurationField implements Serializable {\n    private static final long serialVersionUID = -6390301302770925357L;\n    private static HashMap<DurationFieldType, UnsupportedDurationField> cCache;\n    /**\n     * Gets an instance of UnsupportedDurationField for a specific named field.\n     * The returned instance is cached.\n     * \n     * @param type  the type to obtain\n     * @return the instance\n     */\n    public static synchronized UnsupportedDurationField getInstance(DurationFieldType type);\n    /**\n     * Always returns zero.\n     *\n     * @return zero always\n     */\n    public long getUnitMillis();\n    /**\n     * Get a suitable debug string.\n     * \n     * @return debug string\n     */\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * <p>\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * <p>\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * <p>\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * <p>\n * Each individual field can be queried in two ways:\n * <ul>\n * <li><code>get(DateTimeFieldType.monthOfYear())</code>\n * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value - <code>monthOfYear().get()</code>\n * <li>text value - <code>monthOfYear().getAsText()</code>\n * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n * <li>set - <code>monthOfYear().setCopy()</code>\n * </ul>\n * <p>\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n */\npublic final class Partial\n        extends AbstractPartial\n        implements ReadablePartial, Serializable {\n    private static final long serialVersionUID = 12324121189002L;\n    private final Chronology iChronology;\n    private final DateTimeFieldType[] iTypes;\n    private final int[] iValues;\n    private transient DateTimeFormatter[] iFormatter;\n    /**\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @see org.joda.time.format.DateTimeFormat\n     */\n    public String toString(String pattern);\n    /**\n     * Gets the number of fields in this partial.\n     * \n     * @return the field count\n     */\n    public int size();\n    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value);\n    /**\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @param locale  Locale to use, null means default\n     * @see org.joda.time.format.DateTimeFormat\n     */\n    public String toString(String pattern, Locale locale);\n    /**\n     * Output the date in an appropriate ISO8601 format.\n     * <p>\n     * This method will output the partial in one of two ways.\n     * If {@link #getFormatter()}\n     * <p>\n     * If there is no appropriate ISO format a dump of the fields is output\n     * via {@link #toStringList()}.\n     * \n     * @return ISO8601 formatted string\n     */\n    public String toString();\n}\n/**\n * A placeholder implementation to use when a duration field is not supported.\n * <p>\n * UnsupportedDurationField is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n */\npublic final class UnsupportedDurationField extends DurationField implements Serializable {\n    private static final long serialVersionUID = -6390301302770925357L;\n    private static HashMap<DurationFieldType, UnsupportedDurationField> cCache;\n    /**\n     * Gets an instance of UnsupportedDurationField for a specific named field.\n     * The returned instance is cached.\n     * \n     * @param type  the type to obtain\n     * @return the instance\n     */\n    public static synchronized UnsupportedDurationField getInstance(DurationFieldType type);\n    /**\n     * Always returns zero.\n     *\n     * @return zero always\n     */\n    public long getUnitMillis();\n    /**\n     * Get a suitable debug string.\n     * \n     * @return debug string\n     */\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestPartial_Basics extends TestCase {\n    private Partial createHourMinPartial() {\n        return createHourMinPartial(ISO_UTC);\n    }\n    private Partial createHourMinPartial(Chronology chrono) {\n        return createHourMinPartial(10, 20, chrono);\n    }\n    private Partial createHourMinPartial2(Chronology chrono) {\n        return createHourMinPartial(15, 20, chrono);\n    }\n    private Partial createHourMinPartial(int hour, int min, Chronology chrono) {\n        return new Partial(\n            new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour()},\n            new int[] {hour, min},\n            chrono);\n    }\n    private Partial createTODPartial(Chronology chrono) {\n        return new Partial(\n            new DateTimeFieldType[] {\n                    DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),\n                    DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},\n            new int[] {10, 20, 30, 40},\n            chrono);\n    }\n    private void check(Partial test, int hour, int min) {\n        assertEquals(test.toString(), hour, test.get(DateTimeFieldType.hourOfDay()));\n        assertEquals(test.toString(), min, test.get(DateTimeFieldType.minuteOfHour()));\n    }\n    public void testWith_baseAndArgHaveNoRange() {\n        Partial test = new Partial(DateTimeFieldType.year(), 1);\n        Partial result = test.with(DateTimeFieldType.era(), 1);\n        assertEquals(2, result.size());\n        assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n        assertEquals(1, result.indexOf(DateTimeFieldType.year()));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Factory that creates complex instances of DateTimeFormatter via method calls.\n * <p>\n * Datetime formatting is performed by the {@link DateTimeFormatter} class.\n * Three classes provide factory methods to create formatters, and this is one.\n * The others are {@link DateTimeFormat} and {@link ISODateTimeFormat}.\n * <p>\n * DateTimeFormatterBuilder is used for constructing formatters which are then\n * used to print or parse. The formatters are built by appending specific fields\n * or other formatters to an instance of this builder.\n * <p>\n * For example, a formatter that prints month and year, like \"January 1970\",\n * can be constructed as follows:\n * <p>\n * <pre>\n * DateTimeFormatter monthAndYear = new DateTimeFormatterBuilder()\n *     .appendMonthOfYearText()\n *     .appendLiteral(' ')\n *     .appendYear(4, 4)\n *     .toFormatter();\n * </pre>\n * <p>\n * DateTimeFormatterBuilder itself is mutable and not thread-safe, but the\n * formatters that it builds are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Fredrik Borgh\n * @since 1.0\n * @see DateTimeFormat\n * @see ISODateTimeFormat\n */\npublic class DateTimeFormatterBuilder {\n    private ArrayList<Object> iElementPairs;\n    private Object iFormatter;\n    /**\n     * Instructs the printer to emit the identifier of the time zone.\n     * From version 2.0, this field can be parsed.\n     *\n     * @return this DateTimeFormatterBuilder, for chaining\n     */\n    public DateTimeFormatterBuilder appendTimeZoneId();\n    /**\n     * Constructs a DateTimeFormatter using all the appended elements.\n     * <p>\n     * This is the main method used by applications at the end of the build\n     * process to create a usable formatter.\n     * <p>\n     * Subsequent changes to this builder do not affect the returned formatter.\n     * <p>\n     * The returned formatter may not support both printing and parsing.\n     * The methods {@link DateTimeFormatter#isPrinter()} and\n     * {@link DateTimeFormatter#isParser()} will help you determine the state\n     * of the formatter.\n     *\n     * @throws UnsupportedOperationException if neither printing nor parsing is supported\n     */\n    public DateTimeFormatter toFormatter();\n    /**\n     * Calls upon {@link DateTimeFormat} to parse the pattern and append the\n     * results into this builder.\n     *\n     * @param pattern  pattern specification\n     * @throws IllegalArgumentException if the pattern is invalid\n     * @see DateTimeFormat\n     */\n    public DateTimeFormatterBuilder appendPattern(String pattern);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Factory that creates complex instances of DateTimeFormatter via method calls.\n * <p>\n * Datetime formatting is performed by the {@link DateTimeFormatter} class.\n * Three classes provide factory methods to create formatters, and this is one.\n * The others are {@link DateTimeFormat} and {@link ISODateTimeFormat}.\n * <p>\n * DateTimeFormatterBuilder is used for constructing formatters which are then\n * used to print or parse. The formatters are built by appending specific fields\n * or other formatters to an instance of this builder.\n * <p>\n * For example, a formatter that prints month and year, like \"January 1970\",\n * can be constructed as follows:\n * <p>\n * <pre>\n * DateTimeFormatter monthAndYear = new DateTimeFormatterBuilder()\n *     .appendMonthOfYearText()\n *     .appendLiteral(' ')\n *     .appendYear(4, 4)\n *     .toFormatter();\n * </pre>\n * <p>\n * DateTimeFormatterBuilder itself is mutable and not thread-safe, but the\n * formatters that it builds are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Fredrik Borgh\n * @since 1.0\n * @see DateTimeFormat\n * @see ISODateTimeFormat\n */\npublic class DateTimeFormatterBuilder {\n    private ArrayList<Object> iElementPairs;\n    private Object iFormatter;\n    /**\n     * Instructs the printer to emit the identifier of the time zone.\n     * From version 2.0, this field can be parsed.\n     *\n     * @return this DateTimeFormatterBuilder, for chaining\n     */\n    public DateTimeFormatterBuilder appendTimeZoneId();\n    /**\n     * Constructs a DateTimeFormatter using all the appended elements.\n     * <p>\n     * This is the main method used by applications at the end of the build\n     * process to create a usable formatter.\n     * <p>\n     * Subsequent changes to this builder do not affect the returned formatter.\n     * <p>\n     * The returned formatter may not support both printing and parsing.\n     * The methods {@link DateTimeFormatter#isPrinter()} and\n     * {@link DateTimeFormatter#isParser()} will help you determine the state\n     * of the formatter.\n     *\n     * @throws UnsupportedOperationException if neither printing nor parsing is supported\n     */\n    public DateTimeFormatter toFormatter();\n    /**\n     * Calls upon {@link DateTimeFormat} to parse the pattern and append the\n     * results into this builder.\n     *\n     * @param pattern  pattern specification\n     * @throws IllegalArgumentException if the pattern is invalid\n     * @see DateTimeFormat\n     */\n    public DateTimeFormatterBuilder appendPattern(String pattern);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n * @author Brian S O'Neill\n */\npublic class TestDateTimeFormatterBuilder extends TestCase {\n    public void test_printParseZoneDawsonCreek() {  // clashes with shorter Dawson\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID(\"America/Dawson_Creek\"));\n        assertEquals(\"2007-03-04 12:30 America/Dawson_Creek\", f.print(dt));\n        assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 America/Dawson_Creek\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * BasePeriod is an abstract implementation of ReadablePeriod that stores\n * data in a <code>PeriodType</code> and an <code>int[]</code>.\n * <p>\n * This class should generally not be used directly by API users.\n * The {@link ReadablePeriod} interface should be used when different \n * kinds of period objects are to be referenced.\n * <p>\n * BasePeriod subclasses may be mutable and not thread-safe.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class BasePeriod\n        extends AbstractPeriod\n        implements ReadablePeriod, Serializable {\n    private static final long serialVersionUID = -2110953284060001145L;\n    private PeriodType iType;\n    private int[] iValues;\n    /**\n     * Validates a period type, converting nulls to a default value and\n     * checking the type is suitable for this instance.\n     * \n     * @param type  the type to check, may be null\n     * @return the validated type to use, not null\n     * @throws IllegalArgumentException if the period type is invalid\n     */\n    protected PeriodType checkPeriodType(PeriodType type);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * BasePeriod is an abstract implementation of ReadablePeriod that stores\n * data in a <code>PeriodType</code> and an <code>int[]</code>.\n * <p>\n * This class should generally not be used directly by API users.\n * The {@link ReadablePeriod} interface should be used when different \n * kinds of period objects are to be referenced.\n * <p>\n * BasePeriod subclasses may be mutable and not thread-safe.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class BasePeriod\n        extends AbstractPeriod\n        implements ReadablePeriod, Serializable {\n    private static final long serialVersionUID = -2110953284060001145L;\n    private PeriodType iType;\n    private int[] iValues;\n    /**\n     * Validates a period type, converting nulls to a default value and\n     * checking the type is suitable for this instance.\n     * \n     * @param type  the type to check, may be null\n     * @return the validated type to use, not null\n     * @throws IllegalArgumentException if the period type is invalid\n     */\n    protected PeriodType checkPeriodType(PeriodType type);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDuration_Basics extends TestCase {\n    public void testToPeriod_fixedZone() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            assertEquals(0, test.getMonths());\n            assertEquals(0, test.getWeeks());\n            assertEquals(0, test.getDays());\n            assertEquals((450 * 24) + 5, test.getHours());\n            assertEquals(6, test.getMinutes());\n            assertEquals(7, test.getSeconds());\n            assertEquals(8, test.getMillis());\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets the ID of this datetime zone.\n     * \n     * @return the ID of this datetime zone\n     */\n    @ToString\n    public final String getID();\n    /**\n     * Converts an old style id to a new style id.\n     * \n     * @param id  the old style id\n     * @return the new style id, null if not found\n     */\n    private static synchronized String getConvertedId(String id);\n    /**\n     * Gets a time zone instance for a JDK TimeZone.\n     * <p>\n     * DateTimeZone only accepts a subset of the IDs from TimeZone. The\n     * excluded IDs are the short three letter form (except UTC). This \n     * method will attempt to convert between time zones created using the\n     * short IDs and the full version.\n     * <p>\n     * This method is not designed to parse time zones with rules created by\n     * applications using <code>SimpleTimeZone</code> directly.\n     * \n     * @param zone  the zone to convert, null means default\n     * @return the DateTimeZone object for the zone\n     * @throws IllegalArgumentException if the zone is not recognised\n     */\n    public static DateTimeZone forTimeZone(TimeZone zone);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets the ID of this datetime zone.\n     * \n     * @return the ID of this datetime zone\n     */\n    @ToString\n    public final String getID();\n    /**\n     * Converts an old style id to a new style id.\n     * \n     * @param id  the old style id\n     * @return the new style id, null if not found\n     */\n    private static synchronized String getConvertedId(String id);\n    /**\n     * Gets a time zone instance for a JDK TimeZone.\n     * <p>\n     * DateTimeZone only accepts a subset of the IDs from TimeZone. The\n     * excluded IDs are the short three letter form (except UTC). This \n     * method will attempt to convert between time zones created using the\n     * short IDs and the full version.\n     * <p>\n     * This method is not designed to parse time zones with rules created by\n     * applications using <code>SimpleTimeZone</code> directly.\n     * \n     * @param zone  the zone to convert, null means default\n     * @return the DateTimeZone object for the zone\n     * @throws IllegalArgumentException if the zone is not recognised\n     */\n    public static DateTimeZone forTimeZone(TimeZone zone);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDateTimeZone extends TestCase {\n    public void testForID_String_old() {\n        Map<String, String> map = new LinkedHashMap<String, String>();\n        map.put(\"GMT\", \"UTC\");\n        map.put(\"WET\", \"WET\");\n        map.put(\"CET\", \"CET\");\n        map.put(\"MET\", \"CET\");\n        map.put(\"ECT\", \"CET\");\n        map.put(\"EET\", \"EET\");\n        map.put(\"MIT\", \"Pacific/Apia\");\n        map.put(\"HST\", \"Pacific/Honolulu\");\n        map.put(\"AST\", \"America/Anchorage\");\n        map.put(\"PST\", \"America/Los_Angeles\");\n        map.put(\"MST\", \"America/Denver\");\n        map.put(\"PNT\", \"America/Phoenix\");\n        map.put(\"CST\", \"America/Chicago\");\n        map.put(\"EST\", \"America/New_York\");\n        map.put(\"IET\", \"America/Indiana/Indianapolis\");\n        map.put(\"PRT\", \"America/Puerto_Rico\");\n        map.put(\"CNT\", \"America/St_Johns\");\n        map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n        map.put(\"BET\", \"America/Sao_Paulo\");\n        map.put(\"ART\", \"Africa/Cairo\");\n        map.put(\"CAT\", \"Africa/Harare\");\n        map.put(\"EAT\", \"Africa/Addis_Ababa\");\n        map.put(\"NET\", \"Asia/Yerevan\");\n        map.put(\"PLT\", \"Asia/Karachi\");\n        map.put(\"IST\", \"Asia/Kolkata\");\n        map.put(\"BST\", \"Asia/Dhaka\");\n        map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n        map.put(\"CTT\", \"Asia/Shanghai\");\n        map.put(\"JST\", \"Asia/Tokyo\");\n        map.put(\"ACT\", \"Australia/Darwin\");\n        map.put(\"AET\", \"Australia/Sydney\");\n        map.put(\"SST\", \"Pacific/Guadalcanal\");\n        map.put(\"NST\", \"Pacific/Auckland\");\n        for (String key : map.keySet()) {\n            String value = map.get(key);\n            TimeZone juZone = TimeZone.getTimeZone(key);\n            DateTimeZone zone = DateTimeZone.forTimeZone(juZone);\n            assertEquals(value, zone.getID());\n//            System.out.println(juZone);\n//            System.out.println(juZone.getDisplayName());\n//            System.out.println(zone);\n//            System.out.println(\"------\");\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * DateTimeParserBucket is an advanced class, intended mainly for parser\n * implementations. It can also be used during normal parsing operations to\n * capture more information about the parse.\n * <p>\n * This class allows fields to be saved in any order, but be physically set in\n * a consistent order. This is useful for parsing against formats that allow\n * field values to contradict each other.\n * <p>\n * Field values are applied in an order where the \"larger\" fields are set\n * first, making their value less likely to stick.  A field is larger than\n * another when it's range duration is longer. If both ranges are the same,\n * then the larger field has the longer duration. If it cannot be determined\n * which field is larger, then the fields are set in the order they were saved.\n * <p>\n * For example, these fields were saved in this order: dayOfWeek, monthOfYear,\n * dayOfMonth, dayOfYear. When computeMillis is called, the fields are set in\n * this order: monthOfYear, dayOfYear, dayOfMonth, dayOfWeek.\n * <p>\n * DateTimeParserBucket is mutable and not thread-safe.\n *\n * @author Brian S O'Neill\n * @author Fredrik Borgh\n * @since 1.0\n */\npublic class DateTimeParserBucket {\n    private final Chronology iChrono;\n    private final long iMillis;\n    private DateTimeZone iZone;\n    private int iOffset;\n    private Locale iLocale;\n    private Integer iPivotYear;\n    private int iDefaultYear;\n    private SavedField[] iSavedFields = new SavedField[8];\n    private int iSavedFieldsCount;\n    private boolean iSavedFieldsShared;\n    private Object iSavedState;\n    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * DateTimeParserBucket is an advanced class, intended mainly for parser\n * implementations. It can also be used during normal parsing operations to\n * capture more information about the parse.\n * <p>\n * This class allows fields to be saved in any order, but be physically set in\n * a consistent order. This is useful for parsing against formats that allow\n * field values to contradict each other.\n * <p>\n * Field values are applied in an order where the \"larger\" fields are set\n * first, making their value less likely to stick.  A field is larger than\n * another when it's range duration is longer. If both ranges are the same,\n * then the larger field has the longer duration. If it cannot be determined\n * which field is larger, then the fields are set in the order they were saved.\n * <p>\n * For example, these fields were saved in this order: dayOfWeek, monthOfYear,\n * dayOfMonth, dayOfYear. When computeMillis is called, the fields are set in\n * this order: monthOfYear, dayOfYear, dayOfMonth, dayOfWeek.\n * <p>\n * DateTimeParserBucket is mutable and not thread-safe.\n *\n * @author Brian S O'Neill\n * @author Fredrik Borgh\n * @since 1.0\n */\npublic class DateTimeParserBucket {\n    private final Chronology iChrono;\n    private final long iMillis;\n    private DateTimeZone iZone;\n    private int iOffset;\n    private Locale iLocale;\n    private Integer iPivotYear;\n    private int iDefaultYear;\n    private SavedField[] iSavedFields = new SavedField[8];\n    private int iSavedFieldsCount;\n    private boolean iSavedFieldsShared;\n    private Object iSavedState;\n    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDateTimeFormatter extends TestCase {\n    public void testParseLocalDate_weekyear_month_week_2010() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(\"2010-01-01\"));\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets the datetime zone as a string, which is simply its ID.\n     * @return the id of the zone\n     */\n    public String toString();\n    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the earlier instant. The combination of these two rules is to always favour\n     * daylight (summer) time over standard (winter) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets the datetime zone as a string, which is simply its ID.\n     * @return the id of the zone\n     */\n    public String toString();\n    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the earlier instant. The combination of these two rules is to always favour\n     * daylight (summer) time over standard (winter) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDateTimeZoneCutover extends TestCase {\n    private void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) {\n        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n        int offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    private void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) {\n        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n        int offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(2007, month, day, hour, min, 0, 0, expected, zone);\n    }\n    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(2007, month, day, hour, min, sec, milli, expected, zone);\n    }\n    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(year, month, day, hour, min, 0, 0, expected, zone);\n    }\n    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {\n        DateTime dt = new DateTime(year, month, day, hour, min, sec, milli, DateTimeZone.UTC);\n        int offset = zone.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, zone);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    public void test_DateTime_constructor_Moscow_Autumn() {\n        DateTime dt = new DateTime(2007, 10, 28, 2, 30, ZONE_MOSCOW);\n        assertEquals(\"2007-10-28T02:30:00.000+04:00\", dt.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Wraps another Chronology to add support for time zones.\n * <p>\n * ZonedChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic final class ZonedChronology extends AssembledChronology {\n    private static final long serialVersionUID = -1079258847191166848L;\n    /**\n     * A debugging string for the chronology.\n     * \n     * @return the debugging string\n     */\n    public String toString();\n}\n/**\n * Converts a strict DateTimeField into a lenient one. By being lenient, the\n * set method accepts out of bounds values, performing an addition instead.\n * <p>\n * LenientDateTimeField is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @see org.joda.time.chrono.LenientChronology\n * @see StrictDateTimeField\n * @since 1.0\n */\npublic class LenientDateTimeField extends DelegatedDateTimeField {\n    private static final long serialVersionUID = 8714085824173290599L;\n    private final Chronology iBase;\n}\n/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Converts a standard UTC instant to a local instant with the same\n     * local time. This conversion is used before performing a calculation\n     * so that the calculation can be done using a simple local zone.\n     *\n     * @param instantUTC  the UTC instant to convert to local\n     * @return the local instant with the same local time\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.5\n     */\n    public long convertUTCToLocal(long instantUTC);\n    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * NOTE: The behaviour of this method changed in v1.5, with the emphasis\n     * on returning a consistent result later along the time-line (shown above).\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to\n     * get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal);\n    /**\n     * Gets the datetime zone as a string, which is simply its ID.\n     * @return the id of the zone\n     */\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Wraps another Chronology to add support for time zones.\n * <p>\n * ZonedChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic final class ZonedChronology extends AssembledChronology {\n    private static final long serialVersionUID = -1079258847191166848L;\n    /**\n     * A debugging string for the chronology.\n     * \n     * @return the debugging string\n     */\n    public String toString();\n}\n/**\n * Converts a strict DateTimeField into a lenient one. By being lenient, the\n * set method accepts out of bounds values, performing an addition instead.\n * <p>\n * LenientDateTimeField is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @see org.joda.time.chrono.LenientChronology\n * @see StrictDateTimeField\n * @since 1.0\n */\npublic class LenientDateTimeField extends DelegatedDateTimeField {\n    private static final long serialVersionUID = 8714085824173290599L;\n    private final Chronology iBase;\n}\n/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Converts a standard UTC instant to a local instant with the same\n     * local time. This conversion is used before performing a calculation\n     * so that the calculation can be done using a simple local zone.\n     *\n     * @param instantUTC  the UTC instant to convert to local\n     * @return the local instant with the same local time\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.5\n     */\n    public long convertUTCToLocal(long instantUTC);\n    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * NOTE: The behaviour of this method changed in v1.5, with the emphasis\n     * on returning a consistent result later along the time-line (shown above).\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to\n     * get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal);\n    /**\n     * Gets the datetime zone as a string, which is simply its ID.\n     * @return the id of the zone\n     */\n    public String toString();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDateTimeZoneCutover extends TestCase {\n    private void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) {\n        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n        int offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    private void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) {\n        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n        int offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min,\n                                           String expected, DateTimeZone zone)\n    {\n        doTest_getOffsetFromLocal(2007, month, day, hour, min, expected, zone);\n    }\n    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min,\n                                           String expected, DateTimeZone zone)\n    {\n        DateTime dt = new DateTime(year, month, day, hour, min, 0, 0, DateTimeZone.UTC);\n        int offset = zone.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, zone);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n    public void testWithSecondOfMinuteInDstChange() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.withSecondOfMinute(0);\n        assertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Factory that creates complex instances of PeriodFormatter via method calls.\n * <p>\n * Period formatting is performed by the {@link PeriodFormatter} class.\n * Three classes provide factory methods to create formatters, and this is one.\n * The others are {@link PeriodFormat} and {@link ISOPeriodFormat}.\n * <p>\n * PeriodFormatterBuilder is used for constructing formatters which are then\n * used to print or parse. The formatters are built by appending specific fields\n * or other formatters to an instance of this builder.\n * <p>\n * For example, a formatter that prints years and months, like \"15 years and 8 months\",\n * can be constructed as follows:\n * <p>\n * <pre>\n * PeriodFormatter yearsAndMonths = new PeriodFormatterBuilder()\n *     .printZeroAlways()\n *     .appendYears()\n *     .appendSuffix(\" year\", \" years\")\n *     .appendSeparator(\" and \")\n *     .printZeroRarely()\n *     .appendMonths()\n *     .appendSuffix(\" month\", \" months\")\n *     .toFormatter();\n * </pre>\n * <p>\n * PeriodFormatterBuilder itself is mutable and not thread-safe, but the\n * formatters that it builds are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n * @see PeriodFormat\n */\npublic class PeriodFormatterBuilder {\n    private static final int PRINT_ZERO_RARELY_FIRST = 1;\n    private static final int PRINT_ZERO_RARELY_LAST = 2;\n    private static final int PRINT_ZERO_IF_SUPPORTED = 3;\n    private static final int PRINT_ZERO_ALWAYS = 4;\n    private static final int PRINT_ZERO_NEVER = 5;\n    private static final int YEARS = 0;\n    private static final int MONTHS = 1;\n    private static final int WEEKS = 2;\n    private static final int DAYS = 3;\n    private static final int HOURS = 4;\n    private static final int MINUTES = 5;\n    private static final int SECONDS = 6;\n    private static final int MILLIS = 7;\n    private static final int SECONDS_MILLIS = 8;\n    private static final int SECONDS_OPTIONAL_MILLIS = 9;\n    private static final int MAX_FIELD = SECONDS_OPTIONAL_MILLIS;\n    private int iMinPrintedDigits;\n    private int iPrintZeroSetting;\n    private int iMaxParsedDigits;\n    private boolean iRejectSignedValues;\n    private PeriodFieldAffix iPrefix;\n    private List<Object> iElementPairs;\n    private boolean iNotPrinter;\n    private boolean iNotParser;\n    private FieldFormatter[] iFieldFormatters;\n    /**\n     * Instruct the printer to emit an integer years field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendYears();\n    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser);\n    /**\n     * Instruct the printer to emit an integer months field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendMonths();\n    /**\n     * Instruct the printer to emit an integer weeks field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendWeeks();\n    /**\n     * Instruct the printer to emit an integer days field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendDays();\n    /**\n     * Instruct the printer to emit an integer hours field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendHours();\n    /**\n     * Append a field suffix which applies only to the last appended field. If\n     * the field is not printed, neither is the suffix.\n     *\n     * @param text text to print after field only if field is printed\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if no field exists to append to\n     * @see #appendPrefix\n     */\n    public PeriodFormatterBuilder appendSuffix(String text);\n    /**\n     * Append a field suffix which applies only to the last appended field. If\n     * the field is not printed, neither is the suffix.\n     * <p>\n     * During parsing, the singular and plural versions are accepted whether or\n     * not the actual value matches plurality.\n     *\n     * @param singularText text to print if field value is one\n     * @param pluralText text to print if field value is not one\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if no field exists to append to\n     * @see #appendPrefix\n     */\n    public PeriodFormatterBuilder appendSuffix(String singularText,\n                                               String pluralText);\n    /**\n     * Instructs the printer to emit specific text, and the parser to expect it.\n     * The parser is case-insensitive.\n     *\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalArgumentException if text is null\n     */\n    public PeriodFormatterBuilder appendLiteral(String text);\n    /**\n     * Instruct the printer to emit an integer minutes field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendMinutes();\n    /**\n     * Append a separator, which is output only if fields are printed after the separator.\n     * <p>\n     * For example,\n     * <code>builder.appendDays().appendSeparatorIfFieldsAfter(\",\").appendHours()</code>\n     * will only output the comma if the hours fields is output.\n     * <p>\n     * The text will be parsed case-insensitively.\n     * <p>\n     * Note: appending a separator discontinues any further work on the latest\n     * appended field.\n     *\n     * @param text  the text to use as a separator\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if this separator follows a previous one\n     */\n    public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text);\n    /**\n     * Instruct the printer to emit a combined seconds and millis field, if supported.\n     * The millis will overflow into the seconds if necessary.\n     * The millis are only output if non-zero.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendSecondsWithOptionalMillis();\n    /**\n     * Appends a printer parser pair.\n     * <p>\n     * Either the printer or the parser may be null, in which case the builder will\n     * be unable to produce a parser or printer repectively.\n     *\n     * @param printer  appends a printer to the builder, null if printing is not supported\n     * @param parser  appends a parser to the builder, null if parsing is not supported\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalArgumentException if both the printer and parser are null\n     */\n    public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser);\n    /**\n     * Constructs a PeriodFormatter using all the appended elements.\n     * <p>\n     * This is the main method used by applications at the end of the build\n     * process to create a usable formatter.\n     * <p>\n     * Subsequent changes to this builder do not affect the returned formatter.\n     * <p>\n     * The returned formatter may not support both printing and parsing.\n     * The methods {@link PeriodFormatter#isPrinter()} and\n     * {@link PeriodFormatter#isParser()} will help you determine the state\n     * of the formatter.\n     * \n     * @return the newly created formatter\n     * @throws IllegalStateException if the builder can produce neither a printer nor a parser\n     */\n    public PeriodFormatter toFormatter();\n    /**\n     * Append a field suffix which applies only to the last appended field. If\n     * the field is not printed, neither is the suffix.\n     *\n     * @param suffix custom suffix\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if no field exists to append to\n     * @see #appendPrefix\n     */\n    private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix);\n    /**\n     * Appends another formatter.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder append(PeriodFormatter formatter);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Factory that creates complex instances of PeriodFormatter via method calls.\n * <p>\n * Period formatting is performed by the {@link PeriodFormatter} class.\n * Three classes provide factory methods to create formatters, and this is one.\n * The others are {@link PeriodFormat} and {@link ISOPeriodFormat}.\n * <p>\n * PeriodFormatterBuilder is used for constructing formatters which are then\n * used to print or parse. The formatters are built by appending specific fields\n * or other formatters to an instance of this builder.\n * <p>\n * For example, a formatter that prints years and months, like \"15 years and 8 months\",\n * can be constructed as follows:\n * <p>\n * <pre>\n * PeriodFormatter yearsAndMonths = new PeriodFormatterBuilder()\n *     .printZeroAlways()\n *     .appendYears()\n *     .appendSuffix(\" year\", \" years\")\n *     .appendSeparator(\" and \")\n *     .printZeroRarely()\n *     .appendMonths()\n *     .appendSuffix(\" month\", \" months\")\n *     .toFormatter();\n * </pre>\n * <p>\n * PeriodFormatterBuilder itself is mutable and not thread-safe, but the\n * formatters that it builds are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n * @see PeriodFormat\n */\npublic class PeriodFormatterBuilder {\n    private static final int PRINT_ZERO_RARELY_FIRST = 1;\n    private static final int PRINT_ZERO_RARELY_LAST = 2;\n    private static final int PRINT_ZERO_IF_SUPPORTED = 3;\n    private static final int PRINT_ZERO_ALWAYS = 4;\n    private static final int PRINT_ZERO_NEVER = 5;\n    private static final int YEARS = 0;\n    private static final int MONTHS = 1;\n    private static final int WEEKS = 2;\n    private static final int DAYS = 3;\n    private static final int HOURS = 4;\n    private static final int MINUTES = 5;\n    private static final int SECONDS = 6;\n    private static final int MILLIS = 7;\n    private static final int SECONDS_MILLIS = 8;\n    private static final int SECONDS_OPTIONAL_MILLIS = 9;\n    private static final int MAX_FIELD = SECONDS_OPTIONAL_MILLIS;\n    private int iMinPrintedDigits;\n    private int iPrintZeroSetting;\n    private int iMaxParsedDigits;\n    private boolean iRejectSignedValues;\n    private PeriodFieldAffix iPrefix;\n    private List<Object> iElementPairs;\n    private boolean iNotPrinter;\n    private boolean iNotParser;\n    private FieldFormatter[] iFieldFormatters;\n    /**\n     * Instruct the printer to emit an integer years field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendYears();\n    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser);\n    /**\n     * Instruct the printer to emit an integer months field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendMonths();\n    /**\n     * Instruct the printer to emit an integer weeks field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendWeeks();\n    /**\n     * Instruct the printer to emit an integer days field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendDays();\n    /**\n     * Instruct the printer to emit an integer hours field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendHours();\n    /**\n     * Append a field suffix which applies only to the last appended field. If\n     * the field is not printed, neither is the suffix.\n     *\n     * @param text text to print after field only if field is printed\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if no field exists to append to\n     * @see #appendPrefix\n     */\n    public PeriodFormatterBuilder appendSuffix(String text);\n    /**\n     * Append a field suffix which applies only to the last appended field. If\n     * the field is not printed, neither is the suffix.\n     * <p>\n     * During parsing, the singular and plural versions are accepted whether or\n     * not the actual value matches plurality.\n     *\n     * @param singularText text to print if field value is one\n     * @param pluralText text to print if field value is not one\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if no field exists to append to\n     * @see #appendPrefix\n     */\n    public PeriodFormatterBuilder appendSuffix(String singularText,\n                                               String pluralText);\n    /**\n     * Instructs the printer to emit specific text, and the parser to expect it.\n     * The parser is case-insensitive.\n     *\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalArgumentException if text is null\n     */\n    public PeriodFormatterBuilder appendLiteral(String text);\n    /**\n     * Instruct the printer to emit an integer minutes field, if supported.\n     * <p>\n     * The number of printed and parsed digits can be controlled using\n     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendMinutes();\n    /**\n     * Append a separator, which is output only if fields are printed after the separator.\n     * <p>\n     * For example,\n     * <code>builder.appendDays().appendSeparatorIfFieldsAfter(\",\").appendHours()</code>\n     * will only output the comma if the hours fields is output.\n     * <p>\n     * The text will be parsed case-insensitively.\n     * <p>\n     * Note: appending a separator discontinues any further work on the latest\n     * appended field.\n     *\n     * @param text  the text to use as a separator\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if this separator follows a previous one\n     */\n    public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text);\n    /**\n     * Instruct the printer to emit a combined seconds and millis field, if supported.\n     * The millis will overflow into the seconds if necessary.\n     * The millis are only output if non-zero.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder appendSecondsWithOptionalMillis();\n    /**\n     * Appends a printer parser pair.\n     * <p>\n     * Either the printer or the parser may be null, in which case the builder will\n     * be unable to produce a parser or printer repectively.\n     *\n     * @param printer  appends a printer to the builder, null if printing is not supported\n     * @param parser  appends a parser to the builder, null if parsing is not supported\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalArgumentException if both the printer and parser are null\n     */\n    public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser);\n    /**\n     * Constructs a PeriodFormatter using all the appended elements.\n     * <p>\n     * This is the main method used by applications at the end of the build\n     * process to create a usable formatter.\n     * <p>\n     * Subsequent changes to this builder do not affect the returned formatter.\n     * <p>\n     * The returned formatter may not support both printing and parsing.\n     * The methods {@link PeriodFormatter#isPrinter()} and\n     * {@link PeriodFormatter#isParser()} will help you determine the state\n     * of the formatter.\n     * \n     * @return the newly created formatter\n     * @throws IllegalStateException if the builder can produce neither a printer nor a parser\n     */\n    public PeriodFormatter toFormatter();\n    /**\n     * Append a field suffix which applies only to the last appended field. If\n     * the field is not printed, neither is the suffix.\n     *\n     * @param suffix custom suffix\n     * @return this PeriodFormatterBuilder\n     * @throws IllegalStateException if no field exists to append to\n     * @see #appendPrefix\n     */\n    private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix);\n    /**\n     * Appends another formatter.\n     *\n     * @return this PeriodFormatterBuilder\n     */\n    public PeriodFormatterBuilder append(PeriodFormatter formatter);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestPeriodFormatterBuilder extends TestCase {\n    public void testBug2495455() {\n        PeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n            .appendLiteral(\"P\")\n            .appendYears()\n            .appendSuffix(\"Y\")\n            .appendMonths()\n            .appendSuffix(\"M\")\n            .appendWeeks()\n            .appendSuffix(\"W\")\n            .appendDays()\n            .appendSuffix(\"D\")\n            .appendSeparatorIfFieldsAfter(\"T\")\n            .appendHours()\n            .appendSuffix(\"H\")\n            .appendMinutes()\n            .appendSuffix(\"M\")\n            .appendSecondsWithOptionalMillis()\n            .appendSuffix(\"S\")\n            .toFormatter();\n        PeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n            .append(ISOPeriodFormat.standard())\n            .toFormatter();\n        pfmt1.parsePeriod(\"PT1003199059S\");\n        pfmt2.parsePeriod(\"PT1003199059S\");\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\npublic class MutableDateTime\n        extends BaseDateTime\n        implements ReadWritableDateTime, Cloneable, Serializable {\n    private static final long serialVersionUID = 2852608688135209575L;\n    public static final int ROUND_NONE = 0;\n    public static final int ROUND_FLOOR = 1;\n    public static final int ROUND_CEILING = 2;\n    public static final int ROUND_HALF_FLOOR = 3;\n    public static final int ROUND_HALF_CEILING = 4;\n    public static final int ROUND_HALF_EVEN = 5;\n    private DateTimeField iRoundingField;\n    private int iRoundingMode;\n    /**\n     * Set the weekyear to the specified value.\n     *\n     * @param weekyear  the weekyear\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setWeekyear(final int weekyear);\n    /**\n     * Set the date from milliseconds.\n     * The time part of this object will be unaffected.\n     *\n     * @param instant  an instant to copy the date from, time part ignored\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setDate(final long instant);\n    /**\n     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ).\n     * \n     * @return ISO8601 time formatted string.\n     */\n    @ToString\n    public String toString();\n    /**\n     * Adds to the instant specifying the duration and multiple to add.\n     *\n     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n     * @param amount  the amount to add of this duration\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the result exceeds the capacity of the instant\n     */\n    public void add(DurationFieldType type, int amount);\n    /**\n     * Set the week of weekyear to the specified value.\n     *\n     * @param weekOfWeekyear the week of the weekyear\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setWeekOfWeekyear(final int weekOfWeekyear);\n    /**\n     * Add a number of hours to the date.\n     *\n     * @param hours  the hours to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addHours(final int hours);\n    /**\n     * Set the millis of the day to the specified value.\n     *\n     * @param millisOfDay  the millis of day\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setMillisOfDay(final int millisOfDay);\n    /**\n     * Add a number of months to the date.\n     *\n     * @param months  the months to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMonths(final int months);\n    /**\n     * Set the second of the day to the specified value.\n     *\n     * @param secondOfDay  the second of day\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setSecondOfDay(final int secondOfDay);\n    /**\n     * Add a number of weekyears to the date.\n     *\n     * @param weekyears  the weekyears to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeekyears(final int weekyears);\n    /**\n     * Set the day of week to the specified value.\n     *\n     * @param dayOfWeek  the day of the week\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setDayOfWeek(final int dayOfWeek);\n    /**\n     * Set the year to the specified value.\n     *\n     * @param year  the year\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setYear(final int year);\n    /**\n     * Add a number of weeks to the date.\n     *\n     * @param weeks  the weeks to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeeks(final int weeks);\n    /**\n     * Set the millis of the second to the specified value.\n     *\n     * @param millisOfSecond  the millis of second\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setMillisOfSecond(final int millisOfSecond);\n    /**\n     * Set the second of the minute to the specified value.\n     *\n     * @param secondOfMinute  the second of minute\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setSecondOfMinute(final int secondOfMinute);\n    /**\n     * Add a number of days to the date.\n     *\n     * @param days  the days to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addDays(final int days);\n    /**\n     * Set the month of the year to the specified value.\n     *\n     * @param monthOfYear  the month of the year\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setMonthOfYear(final int monthOfYear);\n    /**\n     * Add a number of years to the date.\n     *\n     * @param years  the years to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addYears(final int years);\n    /**\n     * Set the minute of the hour to the specified value.\n     *\n     * @param minuteOfHour  the minute of hour\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setMinuteOfHour(final int minuteOfHour);\n    /**\n     * Set the hour of the day to the specified value.\n     *\n     * @param hourOfDay  the hour of day\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setHourOfDay(final int hourOfDay);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\npublic class MutableDateTime\n        extends BaseDateTime\n        implements ReadWritableDateTime, Cloneable, Serializable {\n    private static final long serialVersionUID = 2852608688135209575L;\n    public static final int ROUND_NONE = 0;\n    public static final int ROUND_FLOOR = 1;\n    public static final int ROUND_CEILING = 2;\n    public static final int ROUND_HALF_FLOOR = 3;\n    public static final int ROUND_HALF_CEILING = 4;\n    public static final int ROUND_HALF_EVEN = 5;\n    private DateTimeField iRoundingField;\n    private int iRoundingMode;\n    /**\n     * Set the weekyear to the specified value.\n     *\n     * @param weekyear  the weekyear\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setWeekyear(final int weekyear);\n    /**\n     * Set the date from milliseconds.\n     * The time part of this object will be unaffected.\n     *\n     * @param instant  an instant to copy the date from, time part ignored\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setDate(final long instant);\n    /**\n     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ).\n     * \n     * @return ISO8601 time formatted string.\n     */\n    @ToString\n    public String toString();\n    /**\n     * Adds to the instant specifying the duration and multiple to add.\n     *\n     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n     * @param amount  the amount to add of this duration\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the result exceeds the capacity of the instant\n     */\n    public void add(DurationFieldType type, int amount);\n    /**\n     * Set the week of weekyear to the specified value.\n     *\n     * @param weekOfWeekyear the week of the weekyear\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setWeekOfWeekyear(final int weekOfWeekyear);\n    /**\n     * Add a number of hours to the date.\n     *\n     * @param hours  the hours to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addHours(final int hours);\n    /**\n     * Set the millis of the day to the specified value.\n     *\n     * @param millisOfDay  the millis of day\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setMillisOfDay(final int millisOfDay);\n    /**\n     * Add a number of months to the date.\n     *\n     * @param months  the months to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMonths(final int months);\n    /**\n     * Set the second of the day to the specified value.\n     *\n     * @param secondOfDay  the second of day\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setSecondOfDay(final int secondOfDay);\n    /**\n     * Add a number of weekyears to the date.\n     *\n     * @param weekyears  the weekyears to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeekyears(final int weekyears);\n    /**\n     * Set the day of week to the specified value.\n     *\n     * @param dayOfWeek  the day of the week\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setDayOfWeek(final int dayOfWeek);\n    /**\n     * Set the year to the specified value.\n     *\n     * @param year  the year\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setYear(final int year);\n    /**\n     * Add a number of weeks to the date.\n     *\n     * @param weeks  the weeks to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeeks(final int weeks);\n    /**\n     * Set the millis of the second to the specified value.\n     *\n     * @param millisOfSecond  the millis of second\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setMillisOfSecond(final int millisOfSecond);\n    /**\n     * Set the second of the minute to the specified value.\n     *\n     * @param secondOfMinute  the second of minute\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setSecondOfMinute(final int secondOfMinute);\n    /**\n     * Add a number of days to the date.\n     *\n     * @param days  the days to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addDays(final int days);\n    /**\n     * Set the month of the year to the specified value.\n     *\n     * @param monthOfYear  the month of the year\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setMonthOfYear(final int monthOfYear);\n    /**\n     * Add a number of years to the date.\n     *\n     * @param years  the years to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addYears(final int years);\n    /**\n     * Set the minute of the hour to the specified value.\n     *\n     * @param minuteOfHour  the minute of hour\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setMinuteOfHour(final int minuteOfHour);\n    /**\n     * Set the hour of the day to the specified value.\n     *\n     * @param hourOfDay  the hour of day\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void setHourOfDay(final int hourOfDay);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestMutableDateTime_Adds extends TestCase {\n    public void testAddYears_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addYears(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * <p>\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * <p>\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * <p>\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * <p>\n * Each individual field can be queried in two ways:\n * <ul>\n * <li><code>get(DateTimeFieldType.monthOfYear())</code>\n * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value - <code>monthOfYear().get()</code>\n * <li>text value - <code>monthOfYear().getAsText()</code>\n * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n * <li>set - <code>monthOfYear().setCopy()</code>\n * </ul>\n * <p>\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n */\npublic final class Partial\n        extends AbstractPartial\n        implements ReadablePartial, Serializable {\n    private static final long serialVersionUID = 12324121189002L;\n    private final Chronology iChronology;\n    private final DateTimeFieldType[] iTypes;\n    private final int[] iValues;\n    private transient DateTimeFormatter[] iFormatter;\n    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value);\n    /**\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @param locale  Locale to use, null means default\n     * @see org.joda.time.format.DateTimeFormat\n     */\n    public String toString(String pattern, Locale locale);\n    /**\n     * Output the date in an appropriate ISO8601 format.\n     * <p>\n     * This method will output the partial in one of two ways.\n     * If {@link #getFormatter()}\n     * <p>\n     * If there is no appropriate ISO format a dump of the fields is output\n     * via {@link #toStringList()}.\n     * \n     * @return ISO8601 formatted string\n     */\n    public String toString();\n    /**\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @see org.joda.time.format.DateTimeFormat\n     */\n    public String toString(String pattern);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * <p>\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * <p>\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * <p>\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * <p>\n * Each individual field can be queried in two ways:\n * <ul>\n * <li><code>get(DateTimeFieldType.monthOfYear())</code>\n * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value - <code>monthOfYear().get()</code>\n * <li>text value - <code>monthOfYear().getAsText()</code>\n * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n * <li>set - <code>monthOfYear().setCopy()</code>\n * </ul>\n * <p>\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n */\npublic final class Partial\n        extends AbstractPartial\n        implements ReadablePartial, Serializable {\n    private static final long serialVersionUID = 12324121189002L;\n    private final Chronology iChronology;\n    private final DateTimeFieldType[] iTypes;\n    private final int[] iValues;\n    private transient DateTimeFormatter[] iFormatter;\n    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value);\n    /**\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @param locale  Locale to use, null means default\n     * @see org.joda.time.format.DateTimeFormat\n     */\n    public String toString(String pattern, Locale locale);\n    /**\n     * Output the date in an appropriate ISO8601 format.\n     * <p>\n     * This method will output the partial in one of two ways.\n     * If {@link #getFormatter()}\n     * <p>\n     * If there is no appropriate ISO format a dump of the fields is output\n     * via {@link #toStringList()}.\n     * \n     * @return ISO8601 formatted string\n     */\n    public String toString();\n    /**\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @see org.joda.time.format.DateTimeFormat\n     */\n    public String toString(String pattern);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestPartial_Basics extends TestCase {\n    private Partial createHourMinPartial() {\n        return createHourMinPartial(ISO_UTC);\n    }\n    private Partial createHourMinPartial(Chronology chrono) {\n        return createHourMinPartial(10, 20, chrono);\n    }\n    private Partial createHourMinPartial2(Chronology chrono) {\n        return createHourMinPartial(15, 20, chrono);\n    }\n    private Partial createHourMinPartial(int hour, int min, Chronology chrono) {\n        return new Partial(\n            new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour()},\n            new int[] {hour, min},\n            chrono);\n    }\n    private Partial createTODPartial(Chronology chrono) {\n        return new Partial(\n            new DateTimeFieldType[] {\n                    DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),\n                    DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},\n            new int[] {10, 20, 30, 40},\n            chrono);\n    }\n    private void check(Partial test, int hour, int min) {\n        assertEquals(test.toString(), hour, test.get(DateTimeFieldType.hourOfDay()));\n        assertEquals(test.toString(), min, test.get(DateTimeFieldType.minuteOfHour()));\n    }\n    public void testWith3() {\n        Partial test = createHourMinPartial();\n        try {\n            test.with(DateTimeFieldType.clockhourOfDay(), 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        check(test, 10, 20);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * An immutable time period specifying a set of duration field values.\n * <p>\n * A time period is divided into a number of fields, such as hours and seconds.\n * Which fields are supported is defined by the PeriodType class.\n * The default is the standard period type, which supports years, months, weeks, days,\n * hours, minutes, seconds and millis.\n * <p>\n * When this time period is added to an instant, the effect is of adding each field in turn.\n * As a result, this takes into account daylight savings time.\n * Adding a time period of 1 day to the day before daylight savings starts will only add\n * 23 hours rather than 24 to ensure that the time remains the same.\n * If this is not the behaviour you want, then see {@link Duration}.\n * <p>\n * The definition of a period also affects the equals method. A period of 1\n * day is not equal to a period of 24 hours, nor 1 hour equal to 60 minutes.\n * This is because periods represent an abstracted definition of a time period\n * (eg. a day may not actually be 24 hours, it might be 23 or 25 at daylight\n * savings boundary). To compare the actual duration of two periods, convert\n * both to durations using toDuration, an operation that emphasises that the\n * result may differ according to the date you choose.\n * <p>\n * Period is thread-safe and immutable, provided that the PeriodType is as well.\n * All standard PeriodType classes supplied are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n * @see MutablePeriod\n */\npublic final class Period\n        extends BasePeriod\n        implements ReadablePeriod, Serializable {\n    public static final Period ZERO = new Period();\n    private static final long serialVersionUID = 741052353876488155L;\n    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type);\n    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The result will always have a <code>PeriodType</code> of standard, thus\n     * days will be grouped into weeks.\n     * \n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @since 1.5\n     */\n    public Period normalizedStandard();\n    /**\n     * Create a period with a specified number of months.\n     * <p>\n     * The standard period type is used, thus you can add other fields such\n     * as years or days using the <code>withXxx()</code> methods.\n     * For example, <code>Period.months(2).withDays(6);</code>\n     * <p>\n     * If you want a month-based period that cannot have other fields added,\n     * then you should consider using {@link Months}.\n     *\n     * @param months  the amount of months in this period\n     * @return the period\n     */\n    public static Period months(int months);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * An immutable time period specifying a set of duration field values.\n * <p>\n * A time period is divided into a number of fields, such as hours and seconds.\n * Which fields are supported is defined by the PeriodType class.\n * The default is the standard period type, which supports years, months, weeks, days,\n * hours, minutes, seconds and millis.\n * <p>\n * When this time period is added to an instant, the effect is of adding each field in turn.\n * As a result, this takes into account daylight savings time.\n * Adding a time period of 1 day to the day before daylight savings starts will only add\n * 23 hours rather than 24 to ensure that the time remains the same.\n * If this is not the behaviour you want, then see {@link Duration}.\n * <p>\n * The definition of a period also affects the equals method. A period of 1\n * day is not equal to a period of 24 hours, nor 1 hour equal to 60 minutes.\n * This is because periods represent an abstracted definition of a time period\n * (eg. a day may not actually be 24 hours, it might be 23 or 25 at daylight\n * savings boundary). To compare the actual duration of two periods, convert\n * both to durations using toDuration, an operation that emphasises that the\n * result may differ according to the date you choose.\n * <p>\n * Period is thread-safe and immutable, provided that the PeriodType is as well.\n * All standard PeriodType classes supplied are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n * @see MutablePeriod\n */\npublic final class Period\n        extends BasePeriod\n        implements ReadablePeriod, Serializable {\n    public static final Period ZERO = new Period();\n    private static final long serialVersionUID = 741052353876488155L;\n    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type);\n    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The result will always have a <code>PeriodType</code> of standard, thus\n     * days will be grouped into weeks.\n     * \n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @since 1.5\n     */\n    public Period normalizedStandard();\n    /**\n     * Create a period with a specified number of months.\n     * <p>\n     * The standard period type is used, thus you can add other fields such\n     * as years or days using the <code>withXxx()</code> methods.\n     * For example, <code>Period.months(2).withDays(6);</code>\n     * <p>\n     * If you want a month-based period that cannot have other fields added,\n     * then you should consider using {@link Months}.\n     *\n     * @param months  the amount of months in this period\n     * @return the period\n     */\n    public static Period months(int months);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestPeriod_Basics extends TestCase {\n    public void testNormalizedStandard_periodType_months1() {\n        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.months());\n        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n        assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Implements the Gregorian/Julian calendar system which is the calendar system\n * used in most of the world. Wherever possible, it is recommended to use the\n * {@link ISOChronology} instead.\n * <p>\n * The Gregorian calendar replaced the Julian calendar, and the point in time\n * when this chronology switches can be controlled using the second parameter\n * of the getInstance method. By default this cutover is set to the date the\n * Gregorian calendar was first instituted, October 15, 1582.\n * <p>\n * Before this date, this chronology uses the proleptic Julian calendar\n * (proleptic means extending indefinitely). The Julian calendar has leap years\n * every four years, whereas the Gregorian has special rules for 100 and 400\n * years. A meaningful result will thus be obtained for all input values.\n * However before 8 CE, Julian leap years were irregular, and before 45 BCE\n * there was no Julian calendar.\n * <p>\n * This chronology differs from\n * {@link java.util.GregorianCalendar GregorianCalendar} in that years\n * in BCE are returned correctly. Thus year 1 BCE is returned as -1 instead of 1.\n * The yearOfEra field produces results compatible with GregorianCalendar.\n * <p>\n * The Julian calendar does not have a year zero, and so year -1 is followed by\n * year 1. If the Gregorian cutover date is specified at or before year -1\n * (Julian), year zero is defined. In other words, the proleptic Gregorian\n * chronology used by this class has a year zero.\n * <p>\n * To create a pure proleptic Julian chronology, use {@link JulianChronology},\n * and to create a pure proleptic Gregorian chronology, use\n * {@link GregorianChronology}.\n * <p>\n * GJChronology is thread-safe and immutable.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic final class GJChronology extends AssembledChronology {\n    private static final long serialVersionUID = -2545574827706931671L;\n    /**\n     * Factory method returns instances of the default GJ cutover\n     * chronology. This uses a cutover date of October 15, 1582 (Gregorian)\n     * 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by\n     * October 15, 1582 (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * <p>The returned chronology is in the default time zone.\n     */\n    public static GJChronology getInstance();\n    /**\n     * Factory method returns instances of the GJ cutover chronology. This uses\n     * a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this\n     * value, October 4, 1582 (Julian) is followed by October 15, 1582\n     * (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * @param zone  the time zone to use, null is default\n     */\n    public static GJChronology getInstance(DateTimeZone zone);\n    /**\n     * Factory method returns instances of the default GJ cutover\n     * chronology. This uses a cutover date of October 15, 1582 (Gregorian)\n     * 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by\n     * October 15, 1582 (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * <p>The time zone of the returned instance is UTC.\n     */\n    public static GJChronology getInstanceUTC();\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use, null means default\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     */\n    public static synchronized GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover,\n            int minDaysInFirstWeek);\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     */\n    public static GJChronology getInstance(\n            DateTimeZone zone,\n            long gregorianCutover,\n            int minDaysInFirstWeek);\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use, null means default\n     */\n    public static GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Implements the Gregorian/Julian calendar system which is the calendar system\n * used in most of the world. Wherever possible, it is recommended to use the\n * {@link ISOChronology} instead.\n * <p>\n * The Gregorian calendar replaced the Julian calendar, and the point in time\n * when this chronology switches can be controlled using the second parameter\n * of the getInstance method. By default this cutover is set to the date the\n * Gregorian calendar was first instituted, October 15, 1582.\n * <p>\n * Before this date, this chronology uses the proleptic Julian calendar\n * (proleptic means extending indefinitely). The Julian calendar has leap years\n * every four years, whereas the Gregorian has special rules for 100 and 400\n * years. A meaningful result will thus be obtained for all input values.\n * However before 8 CE, Julian leap years were irregular, and before 45 BCE\n * there was no Julian calendar.\n * <p>\n * This chronology differs from\n * {@link java.util.GregorianCalendar GregorianCalendar} in that years\n * in BCE are returned correctly. Thus year 1 BCE is returned as -1 instead of 1.\n * The yearOfEra field produces results compatible with GregorianCalendar.\n * <p>\n * The Julian calendar does not have a year zero, and so year -1 is followed by\n * year 1. If the Gregorian cutover date is specified at or before year -1\n * (Julian), year zero is defined. In other words, the proleptic Gregorian\n * chronology used by this class has a year zero.\n * <p>\n * To create a pure proleptic Julian chronology, use {@link JulianChronology},\n * and to create a pure proleptic Gregorian chronology, use\n * {@link GregorianChronology}.\n * <p>\n * GJChronology is thread-safe and immutable.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic final class GJChronology extends AssembledChronology {\n    private static final long serialVersionUID = -2545574827706931671L;\n    /**\n     * Factory method returns instances of the default GJ cutover\n     * chronology. This uses a cutover date of October 15, 1582 (Gregorian)\n     * 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by\n     * October 15, 1582 (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * <p>The returned chronology is in the default time zone.\n     */\n    public static GJChronology getInstance();\n    /**\n     * Factory method returns instances of the GJ cutover chronology. This uses\n     * a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this\n     * value, October 4, 1582 (Julian) is followed by October 15, 1582\n     * (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * @param zone  the time zone to use, null is default\n     */\n    public static GJChronology getInstance(DateTimeZone zone);\n    /**\n     * Factory method returns instances of the default GJ cutover\n     * chronology. This uses a cutover date of October 15, 1582 (Gregorian)\n     * 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by\n     * October 15, 1582 (Gregorian).\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * <p>The time zone of the returned instance is UTC.\n     */\n    public static GJChronology getInstanceUTC();\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use, null means default\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     */\n    public static synchronized GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover,\n            int minDaysInFirstWeek);\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     */\n    public static GJChronology getInstance(\n            DateTimeZone zone,\n            long gregorianCutover,\n            int minDaysInFirstWeek);\n    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * <p>The first day of the week is designated to be\n     * {@link org.joda.time.DateTimeConstants#MONDAY Monday},\n     * and the minimum days in the first week of the year is 4.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use, null means default\n     */\n    public static GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>    public void test_cutoverPreZero() {\n        DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);\n        try {\n            GJChronology.getInstance(DateTimeZone.UTC, cutover);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * Controls the printing and parsing of a datetime to and from a string.\n * <p>\n * This class is the main API for printing and parsing used by most applications.\n * Instances of this class are created via one of three factory classes:\n * <ul>\n * <li>{@link DateTimeFormat} - formats by pattern and style</li>\n * <li>{@link ISODateTimeFormat} - ISO8601 formats</li>\n * <li>{@link DateTimeFormatterBuilder} - complex formats created via method calls</li>\n * </ul>\n * <p>\n * An instance of this class holds a reference internally to one printer and\n * one parser. It is possible that one of these may be null, in which case the\n * formatter cannot print/parse. This can be checked via the {@link #isPrinter()}\n * and {@link #isParser()} methods.\n * <p>\n * The underlying printer/parser can be altered to behave exactly as required\n * by using one of the decorator modifiers:\n * <ul>\n * <li>{@link #withLocale(Locale)} - returns a new formatter that uses the specified locale</li>\n * <li>{@link #withZone(DateTimeZone)} - returns a new formatter that uses the specified time zone</li>\n * <li>{@link #withChronology(Chronology)} - returns a new formatter that uses the specified chronology</li>\n * <li>{@link #withOffsetParsed()} - returns a new formatter that returns the parsed time zone offset</li>\n * <li>{@link #withPivotYear(int)} - returns a new formatter with the specified pivot year</li>\n * <li>{@link #withDefaultYear(int)} - returns a new formatter with the specified default year</li>\n * </ul>\n * Each of these returns a new formatter (instances of this class are immutable).\n * <p>\n * The main methods of the class are the <code>printXxx</code> and\n * <code>parseXxx</code> methods. These are used as follows:\n * <pre>\n * // print using the defaults (default locale, chronology/zone of the datetime)\n * String dateStr = formatter.print(dt);\n * // print using the French locale\n * String dateStr = formatter.withLocale(Locale.FRENCH).print(dt);\n * // print using the UTC zone\n * String dateStr = formatter.withZone(DateTimeZone.UTC).print(dt);\n * \n * // parse using the Paris zone\n * DateTime date = formatter.withZone(DateTimeZone.forID(\"Europe/Paris\")).parseDateTime(str);\n * </pre>\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Fredrik Borgh\n * @since 1.0\n */\npublic class DateTimeFormatter {\n    private final DateTimePrinter iPrinter;\n    private final DateTimeParser iParser;\n    private final Locale iLocale;\n    private final boolean iOffsetParsed;\n    private final Chronology iChrono;\n    private final DateTimeZone iZone;\n    private final Integer iPivotYear;\n    private final int iDefaultYear;\n    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant based on the chronology\n     * and time-zone of the supplied instant.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position);\n    /**\n     * Returns a new formatter with a different locale that will be used\n     * for printing and parsing.\n     * <p>\n     * A DateTimeFormatter is immutable, so a new instance is returned,\n     * and the original is unaltered and still usable.\n     * \n     * @param locale the locale to use; if null, formatter uses default locale\n     * at invocation time\n     * @return the new formatter\n     */\n    public DateTimeFormatter withLocale(Locale locale);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * Controls the printing and parsing of a datetime to and from a string.\n * <p>\n * This class is the main API for printing and parsing used by most applications.\n * Instances of this class are created via one of three factory classes:\n * <ul>\n * <li>{@link DateTimeFormat} - formats by pattern and style</li>\n * <li>{@link ISODateTimeFormat} - ISO8601 formats</li>\n * <li>{@link DateTimeFormatterBuilder} - complex formats created via method calls</li>\n * </ul>\n * <p>\n * An instance of this class holds a reference internally to one printer and\n * one parser. It is possible that one of these may be null, in which case the\n * formatter cannot print/parse. This can be checked via the {@link #isPrinter()}\n * and {@link #isParser()} methods.\n * <p>\n * The underlying printer/parser can be altered to behave exactly as required\n * by using one of the decorator modifiers:\n * <ul>\n * <li>{@link #withLocale(Locale)} - returns a new formatter that uses the specified locale</li>\n * <li>{@link #withZone(DateTimeZone)} - returns a new formatter that uses the specified time zone</li>\n * <li>{@link #withChronology(Chronology)} - returns a new formatter that uses the specified chronology</li>\n * <li>{@link #withOffsetParsed()} - returns a new formatter that returns the parsed time zone offset</li>\n * <li>{@link #withPivotYear(int)} - returns a new formatter with the specified pivot year</li>\n * <li>{@link #withDefaultYear(int)} - returns a new formatter with the specified default year</li>\n * </ul>\n * Each of these returns a new formatter (instances of this class are immutable).\n * <p>\n * The main methods of the class are the <code>printXxx</code> and\n * <code>parseXxx</code> methods. These are used as follows:\n * <pre>\n * // print using the defaults (default locale, chronology/zone of the datetime)\n * String dateStr = formatter.print(dt);\n * // print using the French locale\n * String dateStr = formatter.withLocale(Locale.FRENCH).print(dt);\n * // print using the UTC zone\n * String dateStr = formatter.withZone(DateTimeZone.UTC).print(dt);\n * \n * // parse using the Paris zone\n * DateTime date = formatter.withZone(DateTimeZone.forID(\"Europe/Paris\")).parseDateTime(str);\n * </pre>\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Fredrik Borgh\n * @since 1.0\n */\npublic class DateTimeFormatter {\n    private final DateTimePrinter iPrinter;\n    private final DateTimeParser iParser;\n    private final Locale iLocale;\n    private final boolean iOffsetParsed;\n    private final Chronology iChrono;\n    private final DateTimeZone iZone;\n    private final Integer iPivotYear;\n    private final int iDefaultYear;\n    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant based on the chronology\n     * and time-zone of the supplied instant.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position);\n    /**\n     * Returns a new formatter with a different locale that will be used\n     * for printing and parsing.\n     * <p>\n     * A DateTimeFormatter is immutable, so a new instance is returned,\n     * and the original is unaltered and still usable.\n     * \n     * @param locale the locale to use; if null, formatter uses default locale\n     * at invocation time\n     * @return the new formatter\n     */\n    public DateTimeFormatter withLocale(Locale locale);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDateTimeFormatter extends TestCase {\n    public void testParseInto_monthDay_feb29_newYork_startOfYear() {\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK);\n        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, NEWYORK), result);\n    }\n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static final int MAX_MILLIS = (86400 * 1000) - 1;\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n     * This method assumes 60 minutes in an hour, and standard length minutes.\n     * <p>\n     * This factory is a convenient way of constructing zones with a fixed offset.\n     * The hours value must be in the range -23 to +23.\n     * The minutes value must be in the range -59 to +59.\n     * The following combinations of sign for the hour and minute are possible:\n     * <pre>\n     *  Hour    Minute    Example    Result\n     * \n     *  +ve     +ve       (2, 15)    +02:15\n     *  +ve     zero      (2, 0)     +02:00\n     *  +ve     -ve       (2, -15)   IllegalArgumentException\n     * \n     *  zero    +ve       (0, 15)    +00:15\n     *  zero    zero      (0, 0)     +00:00\n     *  zero    -ve       (0, -15)   -00:15\n     * \n     *  -ve     +ve       (-2, 15)   -02:15\n     *  -ve     zero      (-2, 0)    -02:00\n     *  -ve     -ve       (-2, -15)  -02:15\n     * </pre>\n     * Note that in versions before 2.3, the minutes had to be zero or positive.\n     * \n     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59\n     * @return the DateTimeZone object for the offset\n     * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n     *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException;\n    /**\n     * Gets a time zone instance for the specified time zone id.\n     * <p>\n     * The time zone id may be one of those returned by getAvailableIDs.\n     * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n     * All IDs must be specified in the long format.\n     * The exception is UTC, which is an acceptable id.\n     * <p>\n     * Alternatively a locale independent, fixed offset, datetime zone can\n     * be specified. The form <code>[+-]hh:mm</code> can be used.\n     * \n     * @param id  the ID of the datetime zone, null means default\n     * @return the DateTimeZone object for the ID\n     * @throws IllegalArgumentException if the ID is not recognised\n     */\n    @FromString\n    public static DateTimeZone forID(String id);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static final int MAX_MILLIS = (86400 * 1000) - 1;\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n     * This method assumes 60 minutes in an hour, and standard length minutes.\n     * <p>\n     * This factory is a convenient way of constructing zones with a fixed offset.\n     * The hours value must be in the range -23 to +23.\n     * The minutes value must be in the range -59 to +59.\n     * The following combinations of sign for the hour and minute are possible:\n     * <pre>\n     *  Hour    Minute    Example    Result\n     * \n     *  +ve     +ve       (2, 15)    +02:15\n     *  +ve     zero      (2, 0)     +02:00\n     *  +ve     -ve       (2, -15)   IllegalArgumentException\n     * \n     *  zero    +ve       (0, 15)    +00:15\n     *  zero    zero      (0, 0)     +00:00\n     *  zero    -ve       (0, -15)   -00:15\n     * \n     *  -ve     +ve       (-2, 15)   -02:15\n     *  -ve     zero      (-2, 0)    -02:00\n     *  -ve     -ve       (-2, -15)  -02:15\n     * </pre>\n     * Note that in versions before 2.3, the minutes had to be zero or positive.\n     * \n     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59\n     * @return the DateTimeZone object for the offset\n     * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n     *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException;\n    /**\n     * Gets a time zone instance for the specified time zone id.\n     * <p>\n     * The time zone id may be one of those returned by getAvailableIDs.\n     * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n     * All IDs must be specified in the long format.\n     * The exception is UTC, which is an acceptable id.\n     * <p>\n     * Alternatively a locale independent, fixed offset, datetime zone can\n     * be specified. The form <code>[+-]hh:mm</code> can be used.\n     * \n     * @param id  the ID of the datetime zone, null means default\n     * @return the DateTimeZone object for the ID\n     * @throws IllegalArgumentException if the ID is not recognised\n     */\n    @FromString\n    public static DateTimeZone forID(String id);\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDateTimeZone extends TestCase {\n    public void testForOffsetHoursMinutes_int_int() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n        assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n        \n        assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));\n        assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));\n        assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));\n        assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));\n        \n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));\n        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));\n        \n        assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }        \n<|endoftext|>"
  },
  {
    "input": "",
    "instruction": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets a time zone instance for the specified time zone id.\n     * <p>\n     * The time zone id may be one of those returned by getAvailableIDs.\n     * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n     * All IDs must be specified in the long format.\n     * The exception is UTC, which is an acceptable id.\n     * <p>\n     * Alternatively a locale independent, fixed offset, datetime zone can\n     * be specified. The form <code>[+-]hh:mm</code> can be used.\n     * \n     * @param id  the ID of the datetime zone, null means default\n     * @return the DateTimeZone object for the ID\n     * @throws IllegalArgumentException if the ID is not recognised\n     */\n    @FromString\n    public static DateTimeZone forID(String id);\n    /**\n     * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n     * This method assumes 60 minutes in an hour, and standard length minutes.\n     * <p>\n     * This factory is a convenient way of constructing zones with a fixed offset.\n     * The minutes value is always positive and in the range 0 to 59.\n     * If constructed with the values (-2, 30), the resulting zone is '-02:30'.\n     * \n     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n     * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive\n     * @return the DateTimeZone object for the offset\n     * @throws IllegalArgumentException if the offset or minute is too large or too small\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException;\n    /**\n     * Gets a time zone instance for the specified offset to UTC in milliseconds.\n     *\n     * @param millisOffset  the offset in millis from UTC, from -23:59:59.999 to +23:59:59.999\n     * @return the DateTimeZone object for the offset\n     */\n    public static DateTimeZone forOffsetMillis(int millisOffset);\n    /**\n     * Gets the default time zone.\n     * <p>\n     * The default time zone is derived from the system property {@code user.timezone}.\n     * If that is {@code null} or is not a valid identifier, then the value of the\n     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n     * <p>\n     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this\n     * method, then the change will not be picked up here.\n     * \n     * @return the default datetime zone object\n     */\n    public static DateTimeZone getDefault();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle>",
    "output": "<fim_prefix>/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic \n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal \n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time \n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving \n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n * \n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\npublic abstract class DateTimeZone implements Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n    public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n    private static Provider cProvider;\n    private static NameProvider cNameProvider;\n    private static Set<String> cAvailableIDs;\n    private static volatile DateTimeZone cDefault;\n    private static DateTimeFormatter cOffsetFormatter;\n    private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;\n    private static Map<String, String> cZoneIdConversion;\n    /**\n     * Gets a time zone instance for the specified time zone id.\n     * <p>\n     * The time zone id may be one of those returned by getAvailableIDs.\n     * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n     * All IDs must be specified in the long format.\n     * The exception is UTC, which is an acceptable id.\n     * <p>\n     * Alternatively a locale independent, fixed offset, datetime zone can\n     * be specified. The form <code>[+-]hh:mm</code> can be used.\n     * \n     * @param id  the ID of the datetime zone, null means default\n     * @return the DateTimeZone object for the ID\n     * @throws IllegalArgumentException if the ID is not recognised\n     */\n    @FromString\n    public static DateTimeZone forID(String id);\n    /**\n     * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n     * This method assumes 60 minutes in an hour, and standard length minutes.\n     * <p>\n     * This factory is a convenient way of constructing zones with a fixed offset.\n     * The minutes value is always positive and in the range 0 to 59.\n     * If constructed with the values (-2, 30), the resulting zone is '-02:30'.\n     * \n     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n     * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive\n     * @return the DateTimeZone object for the offset\n     * @throws IllegalArgumentException if the offset or minute is too large or too small\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException;\n    /**\n     * Gets a time zone instance for the specified offset to UTC in milliseconds.\n     *\n     * @param millisOffset  the offset in millis from UTC, from -23:59:59.999 to +23:59:59.999\n     * @return the DateTimeZone object for the offset\n     */\n    public static DateTimeZone forOffsetMillis(int millisOffset);\n    /**\n     * Gets the default time zone.\n     * <p>\n     * The default time zone is derived from the system property {@code user.timezone}.\n     * If that is {@code null} or is not a valid identifier, then the value of the\n     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n     * <p>\n     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this\n     * method, then the change will not be picked up here.\n     * \n     * @return the default datetime zone object\n     */\n    public static DateTimeZone getDefault();\n}\n\npublic class Test { \n    <fim_suffix>\n}\n<fim_middle> *\n * @author Stephen Colebourne\n */\npublic class TestDateTimeZone extends TestCase {\n    public void testForOffsetHoursMinutes_int_int() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n        assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n        assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));\n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n        assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));\n        assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }        \n<|endoftext|>"
  }
]