GnuParser() throws Exception {
    // use the GNU parser
    CommandLineParser parser = new GnuParser( );
    Options options = new Options();
    options.addOption( "help", false, "print this message" );
    options.addOption( "projecthelp", false, "print project help information" );
    options.addOption( "version", false, "print the version information and exit" );
    options.addOption( "quiet", false, "be extra quiet" );
    options.addOption( "verbose", false, "be extra verbose" );
    options.addOption( "debug", false, "print debug information" );
    options.addOption( "logfile", true, "use given file for log" );
    options.addOption( "logger", true, "the class which is to perform the logging" );
    options.addOption( "listener", true, "add an instance of a class as a project listener" );
    options.addOption( "buildfile", true, "use given buildfile" );
    options.addOption( OptionBuilder.withDescription( "use value for given property" )
                                    .hasArgs()
                                    .withValueSeparator()
                                    .create( 'D' ) );
                       //, null, true, , false, true );
    options.addOption( "find", true, "search for buildfile towards the root of the filesystem and use it" );

    String[] args = new String[]{ "-buildfile", "mybuild.xml",
        "-Dproperty=value", "-Dproperty1=value1",
        "-projecthelp" };

    CommandLine line = parser.parse( options, args );

    // check multiple values
    String[] opts = line.getOptionValues( "D" );
    assertEquals( "property", opts[0] );
    assertEquals( "value", opts[1] );
    assertEquals( "property1", opts[2] );
    assertEquals( "value1", opts[3] );

    // check single value
    assertEquals( line.getOptionValue( "buildfile"), "mybuild.xml" );

    // check option
    assertTrue( line.hasOption( "projecthelp") );

    // check unknown option
    assertFalse( line.hasOption( "unknown" ) );
}
```