package org.jsoup.parser;
import org.jsoup.Jsoup;
import org.jsoup.helper.Validate;
import org.jsoup.nodes.*;
import java.util.List;
/**
 * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the
 * document.
 * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>
 *
 * @author Jonathan Hedley
 */
public class XmlTreeBuilder extends TreeBuilder {
    Document parse(String input, String baseUri);
    void insert(Token.Character characterToken);
}
package org.jsoup.nodes;
import java.io.IOException;
import org.jsoup.helper.StringUtil;
import org.jsoup.nodes.Document.OutputSettings.*;
/**
 * A {@code <!DOCTYPE>} node.
 */
public class DocumentType extends Node {
    public static final String PUBLIC_KEY = "PUBLIC";
    public static final String SYSTEM_KEY = "SYSTEM";
    private static final String NAME = "name";
    private static final String PUBLIC_ID = "publicId";
    private static final String SYSTEM_ID = "systemId";
    @Override
    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException;
    @Override
    void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out);
    /**
     * Create a new doctype element.
     * @param name the doctype's name
     * @param publicId the doctype's public ID
     * @param systemId the doctype's system ID
     * @param baseUri the doctype's base URI
     */


    @Override
    public String nodeName();
}
package org.jsoup.parser;
import org.jsoup.helper.Validate;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.BooleanAttribute;
/**
 * Parse tokens for the Tokeniser.
 */
abstract class Token {
    /**
     * Reset the data represent by this token, for reuse. Prevents the need to create transfer objects for every
     * piece of data, which immediately get GCed.
     */
    abstract Token reset();

    static void reset(StringBuilder sb);
}
package org.jsoup.parser;
import org.jsoup.helper.StringUtil;
import org.jsoup.nodes.*;
import java.util.ArrayList;
/**
 * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.
 */
}
package org.jsoup.parser;
import org.jsoup.nodes.DocumentType;
import java.util.Arrays;
/**
 * States and transition activations for the Tokeniser.
 */
}

public class Test { 
   <FILL-HERE>
}
