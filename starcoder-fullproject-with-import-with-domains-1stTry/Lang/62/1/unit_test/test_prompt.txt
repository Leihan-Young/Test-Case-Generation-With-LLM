package org.apache.commons.lang;
import java.io.IOException;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
/**
 * <p>Provides HTML and XML entity utilities.</p>
 *
 * @see <a href="http://hotwired.lycos.com/webmonkey/reference/special_characters/">ISO Entities</a>
 * @see <a href="http://www.w3.org/TR/REC-html32#latin1">HTML 3.2 Character Entities for ISO Latin-1</a>
 * @see <a href="http://www.w3.org/TR/REC-html40/sgml/entities.html">HTML 4.0 Character entity references</a>
 * @see <a href="http://www.w3.org/TR/html401/charset.html#h-5.3">HTML 4.01 Character References</a>
 * @see <a href="http://www.w3.org/TR/html401/charset.html#code-position">HTML 4.01 Code positions</a>
 *
 * @author <a href="mailto:alex@purpletech.com">Alexander Day Chaffee</a>
 * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a>
 * @since 2.0
 * @version $Id$
 */
class Entities {
    /**
     * <p>Escapes the characters in the <code>String</code> passed and writes the result
     * to the <code>Writer</code> passed. </p>
     * 
     * @param writer The <code>Writer</code> to write the results of the escaping to.
     *                            Assumed to be a non-null value.
     * @param str The <code>String</code> to escape. Assumed to be a non-null value.
     * @throws IOException when <code>Writer</code> passed throws the exception from
     *                                       calls to the {@link Writer#write(int)} methods.
     *                                       
     * @see #escape(String)
     * @see Writer
     */
    public void escape(Writer writer, String str) throws IOException;
    /**
     * <p>Unescapes the entities in a <code>String</code>.</p>
     *
     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),
     * unescape(&quot;&amp;foo;&quot;) will return &quot;\u00A1&quot;</p>
     *
     * @param str The <code>String</code> to escape.
     * @return A new escaped <code>String</code>.
     */
    public String unescape(String str);
    /**
     * <p>Unescapes the escaped entities in the <code>String</code> passed and
     * writes the result to the <code>Writer</code> passed.</p>
     * 
     * @param writer The <code>Writer</code> to write the results to; assumed to be non-null.
     * @param string The <code>String</code> to write the results to; assumed to be non-null.
     * @throws IOException when <code>Writer</code> passed throws the exception from
     *                                       calls to the {@link Writer#write(int)} methods.
     *                                       
     * @see #escape(String)
     * @see Writer
     */
    public void unescape(Writer writer, String string) throws IOException;
    /**
     * <p>Escapes the characters in a <code>String</code>.</p>
     *
     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),
     * escape(&quot;\u00A1&quot;) will return &quot;&amp;foo;&quot;</p>
     *
     * @param str The <code>String</code> to escape.
     * @return A new escaped <code>String</code>.
     */
    public String escape(String str);
}

public class Test { 
   <FILL-HERE>
}
