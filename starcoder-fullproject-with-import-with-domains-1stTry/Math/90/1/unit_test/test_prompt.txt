package org.apache.commons.math.stat;
import java.io.Serializable;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.Comparator;
import java.util.TreeMap;
/** 
 * Maintains a frequency distribution.
 * <p>
 * Accepts int, long, char or Object values.  New values added must be 
 * comparable to those that have been added, otherwise the add method will 
 * throw an IllegalArgumentException.</p>
 * <p>
 * Integer values (int, long, Integer, Long) are not distinguished by type -- 
 * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have
 * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>
 * <p>
 * char values are converted by <code>addValue</code> to Character instances.
 * As such, these values are not comparable to integral values, so attempts
 * to combine integral types with chars in a frequency distribution will fail.
 * </p>
 * <p>
 * The values are ordered using the default (natural order), unless a  
 * <code>Comparator</code> is supplied in the constructor.</p>
 *
 * @version $Revision$ $Date$
 */
public class Frequency implements Serializable {
    private static final long serialVersionUID = -3845586908418844111L;
    private final TreeMap freqTable;
    /**
     * Adds 1 to the frequency count for v.
     * 
     * @param v the value to add.
     */
    public void addValue(long v);
    /** Clears the frequency table */
    public void clear();
    /**
     * Adds 1 to the frequency count for v.
     * 
     * @param v the value to add.
     */
    public void addValue(Integer v);
    /**
     * Adds 1 to the frequency count for v.
     * 
     * @param v the value to add.
     */
    public void addValue(int v);
    /**
     * Return a string representation of this frequency
     * distribution.
     * 
     * @return a string representation.
     */
    @Override
    public String toString();
    /**
     * Adds 1 to the frequency count for v.
     * 
     * @param v the value to add.
     */
    public void addValue(char v);
    /**
     * Adds 1 to the frequency count for v.
     * <p>
     * If other objects have already been added to this Frequency, v must
     * be comparable to those that have already been added.
     * </p>
     * 
     * @param v the value to add.
     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
     * @throws ClassCastException if <code>v</code> is not Comparable
     * @deprecated use {@link #addValue(Comparable)} instead
     */
    @Deprecated
    public void addValue(Object v);
}

public class Test { 
   <FILL-HERE>
}
